(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Babel"] = factory();
	else
		root["Babel"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ((function(modules) {
	// Check all modules for deduplicated modules
	for(var i in modules) {
		if(Object.prototype.hasOwnProperty.call(modules, i)) {
			switch(typeof modules[i]) {
			case "function": break;
			case "object":
				// Module can be created from a template
				modules[i] = (function(_m) {
					var args = _m.slice(1), fn = modules[_m[0]];
					return function (a,b,c) {
						fn.apply(this, [a,b,c].concat(args));
					};
				}(modules[i]));
				break;
			default:
				// Module is a copy of another module
				modules[i] = modules[modules[i]];
				break;
			}
		}
	}
	return modules;
}([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.transform = exports.options = exports.default = undefined;

	var _index = __webpack_require__(2575);

	var Babel = _interopRequireWildcard(_index);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	var jsxControlStatements = __webpack_require__(7010);

	var transformOptions = {
	  presets: ['es2015', 'react', 'stage-0'],
	  plugins: [jsxControlStatements]
	};

	var transform = function transform(code) {
	  var opts = arguments.length <= 1 || arguments[1] === undefined ? transformOptions : arguments[1];

	  return Babel.transform(code, opts).code;
	};

	var runCode = function runCode(code) {
	  var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  opts.sourceMaps = "inline";
	  return eval(Babel.transform(code, opts).code);
	};

	/**
	 * Load scripts via xhr, and `transform` when complete (optional).
	 */

	var loadScript = function loadScript(url, callback) {
	  var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
	  var hold = arguments[3];

	  opts.filename = opts.filename || url;

	  var xhr = global.ActiveXObject ? new global.ActiveXObject("Microsoft.XMLHTTP") : new global.XMLHttpRequest();
	  xhr.open("GET", url, true);
	  if ("overrideMimeType" in xhr) xhr.overrideMimeType("text/plain");

	  /**
	   * When successfully loaded, transform (optional), and call `callback`.
	   */

	  xhr.onreadystatechange = function () {
	    if (xhr.readyState !== 4) return;

	    var status = xhr.status;
	    if (status === 0 || status === 200) {
	      var param = [xhr.responseText, opts];
	      if (!hold) runCode.apply(Babel.transform, param);
	      if (callback) callback(param);
	    } else {
	      throw new Error('Could not load ' + url);
	    }
	  };

	  xhr.send(null);
	};

	function runScripts() {
	  var scripts = [];
	  var types = ["text/ecmascript-6", "text/6to5", "text/babel", "module"];
	  var index = 0;

	  /**
	   * Transform and execute script. Ensures correct load order.
	   */

	  var exec = function exec() {
	    var param = scripts[index];
	    if (param instanceof Array) {
	      runCode.apply(Babel.transform, param);
	      index++;
	      exec();
	    }
	  };

	  /**
	   * Load, transform, and execute all scripts.
	   */

	  var run = function run(script, i) {
	    var opts = transformOptions;

	    if (script.src) {
	      loadScript(script.src, function (param) {
	        scripts[i] = param;
	        exec();
	      }, opts, true);
	    } else {
	      opts.filename = "embedded";
	      scripts[i] = [script.innerHTML, opts];
	    }
	  };

	  // Collect scripts with Babel `types`.

	  var _scripts = global.document.getElementsByTagName("script");

	  for (var i = 0; i < _scripts.length; ++i) {
	    var _script = _scripts[i];
	    if (types.indexOf(_script.type) >= 0) scripts.push(_script);
	  }

	  for (i in scripts) {
	    run(scripts[i], i);
	  }

	  exec();
	}

	if (global.addEventListener) {
	  global.addEventListener("DOMContentLoaded", runScripts, false);
	} else if (global.attachEvent) {
	  global.attachEvent("onload", runScripts);
	}

	exports.default = Babel;
	exports.options = transformOptions;
	exports.transform = transform;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 1 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 2 */
/***/ function(module, exports) {

	"use strict";

	exports["default"] = function (obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  } else {
	    var newObj = {};

	    if (obj != null) {
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	      }
	    }

	    newObj["default"] = obj;
	    return newObj;
	  }
	};

	exports.__esModule = true;

/***/ },
/* 3 */
2,
/* 4 */
2,
/* 5 */
/***/ function(module, exports) {

	"use strict";

	exports["default"] = function (obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	};

	exports.__esModule = true;

/***/ },
/* 6 */
2,
/* 7 */
2,
/* 8 */
2,
/* 9 */
2,
/* 10 */
5,
/* 11 */
[7121, 797, 26, 18, 6, 2922, 2923, 3062, 3009, 1457, 3012, 3011, 2963, 188, 2967, 808, 1437, 2968, 2958, 2966],
/* 12 */
[7121, 1176, 25, 22, 4, 6027, 6028, 5972, 5973, 1173, 2121, 5974, 5926, 259, 5930, 1165, 2112, 5931, 5921, 5929],
/* 13 */
[7121, 838, 19, 20, 7, 3246, 3247, 3462, 3409, 1550, 3412, 3411, 3363, 197, 3367, 857, 1530, 3368, 3358, 3366],
/* 14 */
[7121, 943, 27, 21, 8, 4039, 4040, 4179, 4126, 1702, 4129, 4128, 4080, 211, 4084, 954, 1682, 4085, 4075, 4083],
/* 15 */
[7121, 605, 23, 24, 9, 4336, 4337, 4552, 4499, 1787, 4502, 4501, 4453, 220, 4457, 1000, 1767, 4458, 4448, 4456],
/* 16 */
[7121, 510, 37, 5, 3, 2426, 2427, 2504, 2510, 520, 516, 2511, 2495, 179, 2499, 744, 1319, 2500, 2490, 2498],
/* 17 */
[7029, 4663],
/* 18 */
5,
/* 19 */
[7029, 3248],
/* 20 */
5,
/* 21 */
5,
/* 22 */
5,
/* 23 */
[7029, 4338],
/* 24 */
5,
/* 25 */
[7029, 6029],
/* 26 */
[7029, 2924],
/* 27 */
[7029, 4041],
/* 28 */
2,
/* 29 */
2,
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(7018);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(7017);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(1)))

/***/ },
/* 31 */
[7121, 1602, 84, 39, 28, 3677, 3679, 3878, 3828, 3868, 3831, 3830, 3819, 206, 3823, 917, 1630, 3824, 3814, 3822],
/* 32 */
2,
/* 33 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 34 */
[7121, 1934, 74, 55, 29, 5147, 5148, 5346, 5296, 5336, 5299, 5298, 5287, 243, 5291, 1093, 1962, 5292, 5282, 5290],
/* 35 */
2,
/* 36 */
[7121, 1253, 97, 58, 32, 6647, 6648, 6816, 6766, 6806, 6769, 6768, 6757, 277, 6761, 1269, 2309, 6762, 6752, 6760],
/* 37 */
[7029, 2428],
/* 38 */
2,
/* 39 */
5,
/* 40 */
[7121, 1400, 88, 53, 35, 2778, 2779, 2771, 2721, 2761, 2724, 2723, 2712, 182, 2716, 772, 1384, 2717, 2707, 2715],
/* 41 */
2,
/* 42 */
2,
/* 43 */
2,
/* 44 */
2,
/* 45 */
2,
/* 46 */
[7121, 1562, 89, 70, 38, 3496, 3497, 3589, 3590, 1592, 3592, 3591, 3580, 202, 3584, 884, 1578, 3585, 3575, 3583],
/* 47 */
2,
/* 48 */
2,
/* 49 */
2,
/* 50 */
2,
/* 51 */
2,
/* 52 */
2,
/* 53 */
5,
/* 54 */
[7121, 1923, 85, 73, 41, 5099, 5100, 5092, 5042, 5082, 5045, 5044, 5033, 236, 5037, 1058, 1907, 5038, 5028, 5036],
/* 55 */
5,
/* 56 */
[7121, 2020, 93, 77, 42, 5532, 5533, 5672, 5619, 2050, 5622, 5621, 5573, 252, 5577, 1130, 2030, 5578, 5568, 5576],
/* 57 */
[7121, 2174, 95, 76, 44, 6178, 6179, 6170, 6117, 2168, 6120, 6119, 6071, 264, 6075, 1187, 2148, 6076, 6066, 6074],
/* 58 */
5,
/* 59 */
[7121, 1464, 83, 69, 45, 3069, 3070, 3160, 3161, 1495, 3163, 3162, 3151, 192, 3155, 828, 1480, 3156, 3146, 3154],
/* 60 */
[7121, 1708, 90, 71, 47, 4187, 4188, 4278, 4279, 1740, 4281, 4280, 4269, 215, 4273, 975, 1725, 4274, 4264, 4272],
/* 61 */
[7121, 620, 17, 10, 2, 1820, 1821, 4659, 4606, 1812, 4609, 4608, 4560, 223, 4564, 1008, 1792, 4565, 4555, 4563],
/* 62 */
[7121, 620, 17, 10, 2, 1820, 1821, 4752, 4753, 1851, 4755, 4754, 4743, 227, 4747, 1027, 1836, 4748, 4738, 4746],
/* 63 */
[7121, 1857, 91, 72, 48, 4812, 4813, 4903, 4904, 1889, 4906, 4905, 4894, 232, 4898, 1045, 1874, 4899, 4889, 4897],
/* 64 */
[7121, 1978, 92, 80, 49, 5354, 5355, 5494, 5441, 2008, 5444, 5443, 5395, 248, 5399, 1108, 1988, 5400, 5390, 5398],
/* 65 */
[7121, 2095, 94, 75, 43, 5832, 5833, 5770, 5771, 2089, 5775, 5774, 5724, 255, 5728, 1145, 2070, 5729, 5719, 5727],
/* 66 */
[7121, 2238, 96, 78, 50, 6449, 6450, 6386, 6389, 2232, 6392, 6391, 6342, 268, 6346, 1216, 2213, 6347, 6337, 6345],
/* 67 */
[7121, 2274, 86, 79, 51, 6600, 6601, 6537, 6540, 2268, 6543, 6542, 6493, 272, 6497, 1234, 2249, 6498, 6488, 6496],
/* 68 */
[7121, 2326, 87, 81, 52, 6831, 6832, 6971, 6918, 2356, 6921, 6920, 6872, 282, 6876, 1284, 2336, 6877, 6867, 6875],
/* 69 */
5,
/* 70 */
5,
/* 71 */
5,
/* 72 */
5,
/* 73 */
5,
/* 74 */
[7029, 5149],
/* 75 */
5,
/* 76 */
5,
/* 77 */
5,
/* 78 */
5,
/* 79 */
5,
/* 80 */
5,
/* 81 */
5,
/* 82 */
/***/ function(module, exports) {

	"use strict";

	exports["default"] = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

	exports.__esModule = true;

/***/ },
/* 83 */
[7029, 3071],
/* 84 */
[7029, 3680],
/* 85 */
[7029, 5101],
/* 86 */
[7029, 6602],
/* 87 */
[7029, 6833],
/* 88 */
[7029, 2780],
/* 89 */
[7029, 3498],
/* 90 */
[7029, 4189],
/* 91 */
[7029, 4814],
/* 92 */
[7029, 5356],
/* 93 */
[7029, 5534],
/* 94 */
[7029, 5834],
/* 95 */
[7029, 6180],
/* 96 */
[7029, 6451],
/* 97 */
[7029, 6649],
/* 98 */
/***/ function(module, exports) {

	var $Object = Object;
	module.exports = {
	  create:     $Object.create,
	  getProto:   $Object.getPrototypeOf,
	  isEnum:     {}.propertyIsEnumerable,
	  getDesc:    $Object.getOwnPropertyDescriptor,
	  setDesc:    $Object.defineProperty,
	  setDescs:   $Object.defineProperties,
	  getKeys:    $Object.keys,
	  getNames:   $Object.getOwnPropertyNames,
	  getSymbols: $Object.getOwnPropertySymbols,
	  each:       [].forEach
	};

/***/ },
/* 99 */
82,
/* 100 */
82,
/* 101 */
82,
/* 102 */
82,
/* 103 */
82,
/* 104 */
82,
/* 105 */
[7174, 518, 180, 154],
/* 106 */
98,
/* 107 */
/***/ function(module, exports) {

	var core = module.exports = {version: '1.2.6'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 108 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	module.exports = isObject;


/***/ },
/* 109 */
98,
/* 110 */
98,
/* 111 */
98,
/* 112 */
98,
/* 113 */
98,
/* 114 */
98,
/* 115 */
98,
/* 116 */
98,
/* 117 */
98,
/* 118 */
98,
/* 119 */
98,
/* 120 */
98,
/* 121 */
98,
/* 122 */
98,
/* 123 */
98,
/* 124 */
98,
/* 125 */
98,
/* 126 */
98,
/* 127 */
98,
/* 128 */
98,
/* 129 */
98,
/* 130 */
108,
/* 131 */
108,
/* 132 */
108,
/* 133 */
108,
/* 134 */
108,
/* 135 */
108,
/* 136 */
108,
/* 137 */
108,
/* 138 */
108,
/* 139 */
108,
/* 140 */
108,
/* 141 */
108,
/* 142 */
108,
/* 143 */
108,
/* 144 */
108,
/* 145 */
108,
/* 146 */
108,
/* 147 */
108,
/* 148 */
108,
/* 149 */
108,
/* 150 */
108,
/* 151 */
108,
/* 152 */
108,
/* 153 */
[7089, 37, 2423, 5, 3, 733, 2467, 2484, 176, 517, 16, 285, 743, 1315, 285, 743, 1315],
/* 154 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is object-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	module.exports = isObjectLike;


/***/ },
/* 155 */
[7174, 546, 193, 194],
/* 156 */
[7174, 568, 203, 204],
/* 157 */
82,
/* 158 */
[7174, 600, 216, 217],
/* 159 */
[7174, 626, 228, 229],
/* 160 */
[7174, 633, 233, 234],
/* 161 */
[7174, 677, 260, 261],
/* 162 */
[7174, 541, 291, 189],
/* 163 */
[7174, 561, 297, 198],
/* 164 */
107,
/* 165 */
[7174, 595, 304, 212],
/* 166 */
[7174, 615, 310, 221],
/* 167 */
[7174, 618, 312, 224],
/* 168 */
[7174, 658, 322, 249],
/* 169 */
[7174, 666, 325, 253],
/* 170 */
[7174, 672, 327, 256],
/* 171 */
[7174, 686, 332, 265],
/* 172 */
[7174, 700, 335, 269],
/* 173 */
[7174, 706, 338, 273],
/* 174 */
[7174, 723, 344, 283],
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = parts.length - 1; i >= 0; i--) {
	    var last = parts[i];
	    if (last === '.') {
	      parts.splice(i, 1);
	    } else if (last === '..') {
	      parts.splice(i, 1);
	      up++;
	    } else if (up) {
	      parts.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (allowAboveRoot) {
	    for (; up--; up) {
	      parts.unshift('..');
	    }
	  }

	  return parts;
	}

	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe =
	    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var splitPath = function(filename) {
	  return splitPathRe.exec(filename).slice(1);
	};

	// path.resolve([from ...], to)
	// posix version
	exports.resolve = function() {
	  var resolvedPath = '',
	      resolvedAbsolute = false;

	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = (i >= 0) ? arguments[i] : process.cwd();

	    // Skip empty and invalid entries
	    if (typeof path !== 'string') {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }

	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path.charAt(0) === '/';
	  }

	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)

	  // Normalize the path
	  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
	    return !!p;
	  }), !resolvedAbsolute).join('/');

	  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	};

	// path.normalize(path)
	// posix version
	exports.normalize = function(path) {
	  var isAbsolute = exports.isAbsolute(path),
	      trailingSlash = substr(path, -1) === '/';

	  // Normalize the path
	  path = normalizeArray(filter(path.split('/'), function(p) {
	    return !!p;
	  }), !isAbsolute).join('/');

	  if (!path && !isAbsolute) {
	    path = '.';
	  }
	  if (path && trailingSlash) {
	    path += '/';
	  }

	  return (isAbsolute ? '/' : '') + path;
	};

	// posix version
	exports.isAbsolute = function(path) {
	  return path.charAt(0) === '/';
	};

	// posix version
	exports.join = function() {
	  var paths = Array.prototype.slice.call(arguments, 0);
	  return exports.normalize(filter(paths, function(p, index) {
	    if (typeof p !== 'string') {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    return p;
	  }).join('/'));
	};


	// path.relative(from, to)
	// posix version
	exports.relative = function(from, to) {
	  from = exports.resolve(from).substr(1);
	  to = exports.resolve(to).substr(1);

	  function trim(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	      if (arr[start] !== '') break;
	    }

	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	      if (arr[end] !== '') break;
	    }

	    if (start > end) return [];
	    return arr.slice(start, end - start + 1);
	  }

	  var fromParts = trim(from.split('/'));
	  var toParts = trim(to.split('/'));

	  var length = Math.min(fromParts.length, toParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (fromParts[i] !== toParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }

	  var outputParts = [];
	  for (var i = samePartsLength; i < fromParts.length; i++) {
	    outputParts.push('..');
	  }

	  outputParts = outputParts.concat(toParts.slice(samePartsLength));

	  return outputParts.join('/');
	};

	exports.sep = '/';
	exports.delimiter = ':';

	exports.dirname = function(path) {
	  var result = splitPath(path),
	      root = result[0],
	      dir = result[1];

	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }

	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }

	  return root + dir;
	};


	exports.basename = function(path, ext) {
	  var f = splitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	};


	exports.extname = function(path) {
	  return splitPath(path)[3];
	};

	function filter (xs, f) {
	    if (xs.filter) return xs.filter(f);
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        if (f(xs[i], i, xs)) res.push(xs[i]);
	    }
	    return res;
	}

	// String.prototype.substr - negative index don't work in IE8
	var substr = 'ab'.substr(-1) === 'b'
	    ? function (str, start, len) { return str.substr(start, len) }
	    : function (str, start, len) {
	        if (start < 0) start = str.length + start;
	        return str.substr(start, len);
	    }
	;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 176 */
[7028, 3],
/* 177 */
[7058, 423, 107, 511],
/* 178 */
[7074, 1307, 740, 423],
/* 179 */
[7116, 37, 3, 16],
/* 180 */
/***/ function(module, exports) {

	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	module.exports = isLength;


/***/ },
/* 181 */
[7169, 108],
/* 182 */
[7116, 88, 35, 40],
/* 183 */
154,
/* 184 */
[7169, 130],
/* 185 */
[7174, 528, 351, 183],
/* 186 */
107,
/* 187 */
107,
/* 188 */
[7116, 26, 6, 11],
/* 189 */
154,
/* 190 */
[7169, 131],
/* 191 */
107,
/* 192 */
[7116, 83, 45, 59],
/* 193 */
180,
/* 194 */
154,
/* 195 */
[7169, 132],
/* 196 */
107,
/* 197 */
[7116, 19, 7, 13],
/* 198 */
154,
/* 199 */
[7169, 133],
/* 200 */
82,
/* 201 */
107,
/* 202 */
[7116, 89, 38, 46],
/* 203 */
180,
/* 204 */
154,
/* 205 */
[7169, 134],
/* 206 */
[7116, 84, 28, 31],
/* 207 */
154,
/* 208 */
[7169, 135],
/* 209 */
[7174, 581, 371, 207],
/* 210 */
107,
/* 211 */
[7116, 27, 8, 14],
/* 212 */
154,
/* 213 */
[7169, 136],
/* 214 */
107,
/* 215 */
[7116, 90, 47, 60],
/* 216 */
180,
/* 217 */
154,
/* 218 */
[7169, 137],
/* 219 */
107,
/* 220 */
[7116, 23, 9, 15],
/* 221 */
154,
/* 222 */
[7169, 138],
/* 223 */
[7116, 17, 2, 61],
/* 224 */
154,
/* 225 */
[7169, 139],
/* 226 */
107,
/* 227 */
[7116, 17, 2, 62],
/* 228 */
180,
/* 229 */
154,
/* 230 */
[7169, 140],
/* 231 */
107,
/* 232 */
[7116, 91, 48, 63],
/* 233 */
180,
/* 234 */
154,
/* 235 */
[7169, 141],
/* 236 */
[7116, 85, 41, 54],
/* 237 */
154,
/* 238 */
[7169, 142],
/* 239 */
[7174, 641, 391, 237],
/* 240 */
82,
/* 241 */
107,
/* 242 */
107,
/* 243 */
[7116, 74, 29, 34],
/* 244 */
154,
/* 245 */
[7169, 143],
/* 246 */
[7174, 652, 396, 244],
/* 247 */
107,
/* 248 */
[7116, 92, 49, 64],
/* 249 */
154,
/* 250 */
[7169, 144],
/* 251 */
107,
/* 252 */
[7116, 93, 42, 56],
/* 253 */
154,
/* 254 */
[7169, 145],
/* 255 */
[7116, 94, 43, 65],
/* 256 */
154,
/* 257 */
[7169, 146],
/* 258 */
107,
/* 259 */
[7116, 25, 4, 12],
/* 260 */
180,
/* 261 */
154,
/* 262 */
[7169, 147],
/* 263 */
107,
/* 264 */
[7116, 95, 44, 57],
/* 265 */
154,
/* 266 */
[7169, 148],
/* 267 */
107,
/* 268 */
[7116, 96, 50, 66],
/* 269 */
154,
/* 270 */
[7169, 149],
/* 271 */
107,
/* 272 */
[7116, 86, 51, 67],
/* 273 */
154,
/* 274 */
[7169, 150],
/* 275 */
107,
/* 276 */
107,
/* 277 */
[7116, 97, 32, 36],
/* 278 */
154,
/* 279 */
[7169, 151],
/* 280 */
[7174, 717, 415, 278],
/* 281 */
107,
/* 282 */
[7116, 87, 52, 68],
/* 283 */
154,
/* 284 */
[7169, 152],
/* 285 */
[7095, 82, 37, 3, 5, 1317, 2506, 1316, 2486, 153, 755, 743, 16, 2468, 2474, 2482, 2472, 2471, 2477, 2470, 2481, 2480, 2473, 2469],
/* 286 */
[7185, 518, 347, 108, 2551],
/* 287 */
[7095, 288, 88, 35, 53, 1373, 2671, 1372, 2675, 349, 1382, 766, 40, 2638, 2644, 2652, 2642, 2641, 2647, 2640, 2651, 2650, 2643, 2639],
/* 288 */
82,
/* 289 */
[7095, 99, 26, 6, 18, 1417, 2881, 1416, 2885, 438, 1426, 790, 11, 2848, 2854, 2862, 2852, 2851, 2857, 2850, 2861, 2860, 2853, 2849],
/* 290 */
[7095, 99, 26, 6, 18, 1440, 3000, 1439, 3004, 441, 1459, 809, 11, 2970, 2976, 2984, 2974, 2973, 2979, 2972, 2983, 2982, 2975, 2971],
/* 291 */
180,
/* 292 */
82,
/* 293 */
[7095, 292, 83, 45, 69, 1476, 3139, 1475, 3143, 358, 1497, 826, 59, 3107, 3113, 3121, 3111, 3110, 3116, 3109, 3120, 3119, 3112, 3108],
/* 294 */
[7095, 100, 19, 7, 20, 1519, 3316, 1518, 3320, 446, 1529, 849, 13, 3284, 3290, 3298, 3288, 3287, 3293, 3286, 3297, 3296, 3289, 3285],
/* 295 */
[7174, 1528, 361, 558],
/* 296 */
[7095, 100, 19, 7, 20, 1533, 3400, 1532, 3404, 447, 1552, 858, 13, 3370, 3376, 3384, 3374, 3373, 3379, 3372, 3383, 3382, 3375, 3371],
/* 297 */
180,
/* 298 */
[7089, 89, 3494, 70, 38, 1563, 3534, 3551, 883, 885, 46, 299, 882, 1572, 299, 882, 1572],
/* 299 */
[7095, 200, 89, 38, 70, 1574, 3568, 1573, 3572, 298, 891, 882, 46, 3535, 3541, 3549, 3539, 3538, 3544, 3537, 3548, 3547, 3540, 3536],
/* 300 */
[7089, 84, 3674, 39, 28, 1603, 3744, 3761, 574, 913, 31, 301, 912, 1617, 301, 912, 1617],
/* 301 */
[7095, 157, 84, 28, 39, 1619, 3778, 1618, 3782, 300, 1628, 912, 31, 3745, 3751, 3759, 3749, 3748, 3754, 3747, 3758, 3757, 3750, 3746],
/* 302 */
[7095, 101, 27, 8, 21, 1662, 3998, 1661, 4002, 460, 1671, 936, 14, 3965, 3971, 3979, 3969, 3968, 3974, 3967, 3978, 3977, 3970, 3966],
/* 303 */
[7095, 101, 27, 8, 21, 1685, 4117, 1684, 4121, 463, 1704, 955, 14, 4087, 4093, 4101, 4091, 4090, 4096, 4089, 4100, 4099, 4092, 4088],
/* 304 */
180,
/* 305 */
82,
/* 306 */
[7095, 305, 90, 47, 71, 1721, 4257, 1720, 4261, 377, 1742, 973, 60, 4225, 4231, 4239, 4229, 4228, 4234, 4227, 4238, 4237, 4230, 4226],
/* 307 */
[7095, 102, 23, 9, 24, 1756, 4406, 1755, 4410, 467, 1766, 992, 15, 4374, 4380, 4388, 4378, 4377, 4383, 4376, 4387, 4386, 4379, 4375],
/* 308 */
[7174, 1765, 380, 612],
/* 309 */
[7095, 102, 23, 9, 24, 1770, 4490, 1769, 4494, 468, 1789, 1001, 15, 4460, 4466, 4474, 4464, 4463, 4469, 4462, 4473, 4472, 4465, 4461],
/* 310 */
180,
/* 311 */
[7095, 103, 17, 2, 10, 1795, 4597, 1794, 4601, 469, 1814, 1009, 61, 4567, 4573, 4581, 4571, 4570, 4576, 4569, 4580, 4579, 4572, 4568],
/* 312 */
180,
/* 313 */
[7095, 103, 17, 2, 10, 1832, 4731, 1831, 4735, 385, 1853, 1025, 62, 4699, 4705, 4713, 4703, 4702, 4708, 4701, 4712, 4711, 4704, 4700],
/* 314 */
82,
/* 315 */
[7095, 314, 91, 48, 72, 1870, 4882, 1869, 4886, 388, 1891, 1043, 63, 4850, 4856, 4864, 4854, 4853, 4859, 4852, 4863, 4862, 4855, 4851],
/* 316 */
[7095, 240, 85, 41, 73, 1896, 4992, 1895, 4996, 475, 1905, 1053, 54, 4959, 4965, 4973, 4963, 4962, 4968, 4961, 4972, 4971, 4964, 4960],
/* 317 */
82,
/* 318 */
[7089, 74, 5145, 55, 29, 1936, 5212, 5229, 1088, 1089, 34, 319, 1087, 1949, 319, 1087, 1949],
/* 319 */
[7095, 317, 74, 29, 55, 1951, 5246, 1950, 5250, 318, 1960, 1087, 34, 5213, 5219, 5227, 5217, 5216, 5222, 5215, 5226, 5225, 5218, 5214],
/* 320 */
82,
/* 321 */
[7095, 320, 92, 49, 80, 1991, 5432, 1990, 5436, 483, 2010, 1109, 64, 5402, 5408, 5416, 5406, 5405, 5411, 5404, 5415, 5414, 5407, 5403],
/* 322 */
180,
/* 323 */
82,
/* 324 */
[7095, 323, 93, 42, 77, 2033, 5610, 2032, 5614, 486, 2052, 1131, 56, 5580, 5586, 5594, 5584, 5583, 5589, 5582, 5593, 5592, 5585, 5581],
/* 325 */
180,
/* 326 */
[7095, 328, 94, 43, 75, 2073, 5761, 2072, 5765, 488, 2091, 1146, 65, 5731, 5737, 5745, 5735, 5734, 5740, 5733, 5744, 5743, 5736, 5732],
/* 327 */
180,
/* 328 */
82,
/* 329 */
[7095, 104, 25, 4, 22, 2108, 5914, 2107, 5918, 490, 1174, 1163, 12, 5881, 5887, 5895, 5885, 5884, 5890, 5883, 5894, 5893, 5886, 5882],
/* 330 */
[7095, 104, 25, 4, 22, 2115, 5963, 2114, 5967, 491, 1174, 1166, 12, 5933, 5939, 5947, 5937, 5936, 5942, 5935, 5946, 5945, 5938, 5934],
/* 331 */
[7095, 333, 95, 44, 76, 2151, 6108, 2150, 6112, 494, 2170, 1188, 57, 6078, 6084, 6092, 6082, 6081, 6087, 6080, 6091, 6090, 6083, 6079],
/* 332 */
180,
/* 333 */
82,
/* 334 */
[7095, 336, 96, 50, 78, 2216, 6379, 2215, 6383, 500, 2234, 1217, 66, 6349, 6355, 6363, 6353, 6352, 6358, 6351, 6362, 6361, 6354, 6350],
/* 335 */
180,
/* 336 */
82,
/* 337 */
[7095, 339, 86, 51, 79, 2252, 6530, 2251, 6534, 502, 2270, 1235, 67, 6500, 6506, 6514, 6504, 6503, 6509, 6502, 6513, 6512, 6505, 6501],
/* 338 */
180,
/* 339 */
82,
/* 340 */
82,
/* 341 */
[7095, 340, 97, 32, 58, 2298, 6716, 2297, 6720, 505, 2307, 1263, 36, 6684, 6690, 6698, 6688, 6687, 6693, 6686, 6697, 6696, 6689, 6685],
/* 342 */
82,
/* 343 */
[7095, 342, 87, 52, 81, 2339, 6909, 2338, 6913, 508, 2358, 1285, 68, 6879, 6885, 6893, 6883, 6882, 6888, 6881, 6892, 6891, 6884, 6880],
/* 344 */
180,
/* 345 */
/***/ function(module, exports) {

	

/***/ },
/* 346 */
[7041, 732, 2424],
/* 347 */
[7164, 750, 180],
/* 348 */
[7174, 1368, 432, 763],
/* 349 */
[7089, 88, 2776, 53, 35, 1402, 2637, 2654, 767, 768, 40, 287, 766, 1371, 287, 766, 1371],
/* 350 */
108,
/* 351 */
180,
/* 352 */
[7074, 1409, 1410, 531],
/* 353 */
[7174, 1412, 436, 787],
/* 354 */
108,
/* 355 */
[7074, 1435, 1436, 538],
/* 356 */
[7185, 541, 813, 131, 3050],
/* 357 */
[7074, 1472, 1473, 544],
/* 358 */
[7089, 83, 3067, 69, 45, 1465, 3106, 3123, 827, 829, 59, 293, 826, 1474, 293, 826, 1474],
/* 359 */
[7185, 546, 832, 132, 3199],
/* 360 */
[7074, 1515, 1516, 555],
/* 361 */
180,
/* 362 */
108,
/* 363 */
[7185, 561, 862, 133, 3450],
/* 364 */
[7074, 1570, 1571, 566],
/* 365 */
[7185, 568, 888, 134, 3628],
/* 366 */
180,
/* 367 */
[7174, 1599, 366, 894],
/* 368 */
[7074, 1611, 1612, 576],
/* 369 */
[7174, 1614, 453, 909],
/* 370 */
108,
/* 371 */
180,
/* 372 */
[7174, 1657, 458, 933],
/* 373 */
108,
/* 374 */
[7074, 1680, 1681, 592],
/* 375 */
[7185, 595, 959, 136, 4167],
/* 376 */
[7074, 1717, 1718, 598],
/* 377 */
[7089, 90, 4185, 71, 47, 1710, 4224, 4241, 974, 976, 60, 306, 973, 1719, 306, 973, 1719],
/* 378 */
[7185, 600, 979, 137, 4317],
/* 379 */
[7074, 1752, 1753, 609],
/* 380 */
180,
/* 381 */
108,
/* 382 */
[7185, 615, 1005, 138, 4540],
/* 383 */
[7185, 618, 1013, 139, 4647],
/* 384 */
[7074, 1828, 1829, 624],
/* 385 */
[7089, 17, 1818, 10, 2, 622, 4698, 4715, 1026, 1028, 62, 313, 1025, 1830, 313, 1025, 1830],
/* 386 */
[7185, 626, 1031, 140, 4791],
/* 387 */
[7074, 1866, 1867, 631],
/* 388 */
[7089, 91, 4810, 72, 48, 1859, 4849, 4866, 1044, 1046, 63, 315, 1043, 1868, 315, 1043, 1868],
/* 389 */
[7185, 633, 1049, 141, 4942],
/* 390 */
108,
/* 391 */
180,
/* 392 */
[7074, 1931, 1932, 644],
/* 393 */
[7074, 1943, 1944, 647],
/* 394 */
[7174, 1946, 479, 1084],
/* 395 */
108,
/* 396 */
180,
/* 397 */
[7074, 1986, 1987, 655],
/* 398 */
[7185, 658, 1113, 144, 5482],
/* 399 */
[7074, 2028, 2029, 663],
/* 400 */
[7185, 666, 1135, 145, 5660],
/* 401 */
98,
/* 402 */
[7185, 672, 1151, 146, 5813],
/* 403 */
[7074, 2103, 2104, 675],
/* 404 */
[7130, 2128, 1169, 161, 679, 260, 2133, 6020],
/* 405 */
[7185, 677, 1170, 147, 6010],
/* 406 */
[7074, 2145, 2146, 683],
/* 407 */
[7185, 686, 1192, 148, 6158],
/* 408 */
[7074, 2182, 2183, 689],
/* 409 */
[7185, 700, 1222, 149, 6430],
/* 410 */
[7074, 2246, 2247, 703],
/* 411 */
[7185, 706, 1240, 150, 6581],
/* 412 */
[7074, 2282, 2283, 709],
/* 413 */
[7074, 2294, 2295, 712],
/* 414 */
108,
/* 415 */
180,
/* 416 */
[7074, 2334, 2335, 720],
/* 417 */
[7185, 723, 1289, 152, 6959],
/* 418 */
/***/ function(module, exports) {

	"use strict";

	module.exports = {
	  filename: {
	    type: "filename",
	    description: "filename to use when reading from stdin - this will be used in source-maps, errors etc",
	    "default": "unknown",
	    shorthand: "f"
	  },

	  filenameRelative: {
	    hidden: true,
	    type: "string"
	  },

	  inputSourceMap: {
	    hidden: true
	  },

	  env: {
	    hidden: true,
	    "default": {}
	  },

	  mode: {
	    description: "",
	    hidden: true
	  },

	  retainLines: {
	    type: "boolean",
	    "default": false,
	    description: "retain line numbers - will result in really ugly code"
	  },

	  highlightCode: {
	    description: "enable/disable ANSI syntax highlighting of code frames (on by default)",
	    type: "boolean",
	    "default": true
	  },

	  suppressDeprecationMessages: {
	    type: "boolean",
	    "default": false,
	    hidden: true
	  },

	  presets: {
	    type: "list",
	    description: "",
	    "default": []
	  },

	  plugins: {
	    type: "list",
	    "default": [],
	    description: ""
	  },

	  ignore: {
	    type: "list",
	    description: "list of glob paths to **not** compile",
	    "default": []
	  },

	  only: {
	    type: "list",
	    description: "list of glob paths to **only** compile"
	  },

	  code: {
	    hidden: true,
	    "default": true,
	    type: "boolean"
	  },

	  metadata: {
	    hidden: true,
	    "default": true,
	    type: "boolean"
	  },

	  ast: {
	    hidden: true,
	    "default": true,
	    type: "boolean"
	  },

	  "extends": {
	    type: "string",
	    hidden: true
	  },

	  comments: {
	    type: "boolean",
	    "default": true,
	    description: "write comments to generated output (true by default)"
	  },

	  shouldPrintComment: {
	    hidden: true,
	    description: "optional callback to control whether a comment should be inserted, when this is used the comments option is ignored"
	  },

	  compact: {
	    type: "booleanString",
	    "default": "auto",
	    description: "do not include superfluous whitespace characters and line terminators [true|false|auto]"
	  },

	  minified: {
	    type: "boolean",
	    "default": false,
	    description: "save as much bytes when printing [true|false]"
	  },

	  sourceMap: {
	    alias: "sourceMaps",
	    hidden: true
	  },

	  sourceMaps: {
	    type: "booleanString",
	    description: "[true|false|inline]",
	    "default": false,
	    shorthand: "s"
	  },

	  sourceMapTarget: {
	    type: "string",
	    description: "set `file` on returned source map"
	  },

	  sourceFileName: {
	    type: "string",
	    description: "set `sources[0]` on returned source map"
	  },

	  sourceRoot: {
	    type: "filename",
	    description: "the root from which all sources are relative"
	  },

	  babelrc: {
	    description: "Whether or not to look up .babelrc and .babelignore files",
	    type: "boolean",
	    "default": true
	  },

	  sourceType: {
	    description: "",
	    "default": "module"
	  },

	  auxiliaryCommentBefore: {
	    type: "string",
	    description: "print a comment before any injected non-user code"
	  },

	  auxiliaryCommentAfter: {
	    type: "string",
	    description: "print a comment after any injected non-user code"
	  },

	  resolveModuleSource: {
	    hidden: true
	  },

	  getModuleId: {
	    hidden: true
	  },

	  moduleRoot: {
	    type: "filename",
	    description: "optional prefix for the AMD module formatter that will be prepend to the filename on module definitions"
	  },

	  moduleIds: {
	    type: "boolean",
	    "default": false,
	    shorthand: "M",
	    description: "insert an explicit id for modules"
	  },

	  moduleId: {
	    description: "specify a custom name for module ids",
	    type: "string"
	  }
	};

/***/ },
/* 419 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _classCallCheck = __webpack_require__(82)["default"];

	var _getIterator = __webpack_require__(37)["default"];

	var _interopRequireWildcard = __webpack_require__(3)["default"];

	var _interopRequireDefault = __webpack_require__(5)["default"];

	exports.__esModule = true;

	var _apiNode = __webpack_require__(1292);

	var context = _interopRequireWildcard(_apiNode);

	var _plugin2 = __webpack_require__(730);

	var _plugin3 = _interopRequireDefault(_plugin2);

	var _babelMessages = __webpack_require__(176);

	var messages = _interopRequireWildcard(_babelMessages);

	var _index = __webpack_require__(728);

	var _helpersResolve = __webpack_require__(2368);

	var _helpersResolve2 = _interopRequireDefault(_helpersResolve);

	var _json5 = __webpack_require__(2509);

	var _json52 = _interopRequireDefault(_json5);

	var _pathIsAbsolute = __webpack_require__(2567);

	var _pathIsAbsolute2 = _interopRequireDefault(_pathIsAbsolute);

	var _pathExists = __webpack_require__(2566);

	var _pathExists2 = _interopRequireDefault(_pathExists);

	var _lodashLangCloneDeep = __webpack_require__(1338);

	var _lodashLangCloneDeep2 = _interopRequireDefault(_lodashLangCloneDeep);

	var _lodashLangClone = __webpack_require__(520);

	var _lodashLangClone2 = _interopRequireDefault(_lodashLangClone);

	var _helpersMerge = __webpack_require__(2366);

	var _helpersMerge2 = _interopRequireDefault(_helpersMerge);

	var _config = __webpack_require__(418);

	var _config2 = _interopRequireDefault(_config);

	var _path = __webpack_require__(175);

	var _path2 = _interopRequireDefault(_path);

	var _fs = __webpack_require__(345);

	var _fs2 = _interopRequireDefault(_fs);

	/*:: import type Logger from "../logger";*/

	var existsCache = {};
	var jsonCache = {};

	var BABELIGNORE_FILENAME = ".babelignore";
	var BABELRC_FILENAME = ".babelrc";
	var PACKAGE_FILENAME = "package.json";

	function exists(filename) {
	  var cached = existsCache[filename];
	  if (cached == null) {
	    return existsCache[filename] = _pathExists2["default"].sync(filename);
	  } else {
	    return cached;
	  }
	}

	/*:: type PluginObject = {
	  pre?: Function;
	  post?: Function;
	  manipulateOptions?: Function;

	  visitor: ?{
	    [key: string]: Function | {
	      enter?: Function | Array<Function>;
	      exit?: Function | Array<Function>;
	    }
	  };
	};*/
	var OptionManager = (function () {
	  function OptionManager(log /*:: ?: Logger*/) {
	    _classCallCheck(this, OptionManager);

	    this.resolvedConfigs = [];
	    this.options = OptionManager.createBareOptions();
	    this.log = log;
	  }

	  OptionManager.memoisePluginContainer = function memoisePluginContainer(fn, loc, i, alias) {
	    for (var _iterator = (OptionManager.memoisedPlugins /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var cache = _ref;

	      if (cache.container === fn) return cache.plugin;
	    }

	    var obj /*: ?PluginObject*/ = undefined;

	    if (typeof fn === "function") {
	      obj = fn(context);
	    } else {
	      obj = fn;
	    }

	    if (typeof obj === "object") {
	      var _plugin = new _plugin3["default"](obj, alias);
	      OptionManager.memoisedPlugins.push({
	        container: fn,
	        plugin: _plugin
	      });
	      return _plugin;
	    } else {
	      throw new TypeError(messages.get("pluginNotObject", loc, i, typeof obj) + loc + i);
	    }
	  };

	  OptionManager.createBareOptions = function createBareOptions() {
	    var opts = {};

	    for (var _key in _config2["default"]) {
	      var opt = _config2["default"][_key];
	      opts[_key] = _lodashLangClone2["default"](opt["default"]);
	    }

	    return opts;
	  };

	  OptionManager.normalisePlugin = function normalisePlugin(plugin, loc, i, alias) {
	    plugin = plugin.__esModule ? plugin["default"] : plugin;

	    if (!(plugin instanceof _plugin3["default"])) {
	      // allow plugin containers to be specified so they don't have to manually require
	      if (typeof plugin === "function" || typeof plugin === "object") {
	        plugin = OptionManager.memoisePluginContainer(plugin, loc, i, alias);
	      } else {
	        throw new TypeError(messages.get("pluginNotFunction", loc, i, typeof plugin));
	      }
	    }

	    plugin.init(loc, i);

	    return plugin;
	  };

	  OptionManager.normalisePlugins = function normalisePlugins(loc, dirname, plugins) {
	    return plugins.map(function (val, i) {
	      var plugin = undefined,
	          options = undefined;

	      // destructure plugins
	      if (Array.isArray(val)) {
	        plugin = val[0];
	        options = val[1];
	      } else {
	        plugin = val;
	      }

	      var alias = typeof plugin === "string" ? plugin : loc + "$" + i;

	      // allow plugins to be specified as strings
	      if (typeof plugin === "string") {
	        var pluginLoc = _helpersResolve2["default"]("babel-plugin-" + plugin, dirname) || _helpersResolve2["default"](plugin, dirname);
	        if (pluginLoc) {
	          plugin = __webpack_require__(1293)(pluginLoc);
	        } else {
	          throw new ReferenceError(messages.get("pluginUnknown", plugin, loc, i, dirname));
	        }
	      }

	      plugin = OptionManager.normalisePlugin(plugin, loc, i, alias);

	      return [plugin, options];
	    });
	  };

	  OptionManager.prototype.addConfig = function addConfig(loc /*: string*/, key /*:: ?: string*/) /*: boolean*/ {
	    var json = arguments.length <= 2 || arguments[2] === undefined ? _json52["default"] : arguments[2];

	    if (this.resolvedConfigs.indexOf(loc) >= 0) {
	      return false;
	    }

	    var content = _fs2["default"].readFileSync(loc, "utf8");
	    var opts = undefined;

	    try {
	      opts = jsonCache[content] = jsonCache[content] || json.parse(content);
	      if (key) opts = opts[key];
	    } catch (err) {
	      err.message = loc + ": Error while parsing JSON - " + err.message;
	      throw err;
	    }

	    this.mergeOptions(opts, loc, null, _path2["default"].dirname(loc));
	    this.resolvedConfigs.push(loc);

	    return !!opts;
	  };

	  /**
	   * This is called when we want to merge the input `opts` into our
	   * base options.
	   *
	   *  - `alias` is used to output pretty traces back to the original source.
	   *  - `loc` is used to point to the original config.
	   *  - `dirname` is used to resolve plugins relative to it.
	   */

	  OptionManager.prototype.mergeOptions = function mergeOptions(rawOpts /*:: ?: Object*/, alias /*: string*/, loc /*:: ?: string*/, dirname /*:: ?: string*/) {
	    if (alias === undefined) alias = "foreign";

	    if (!rawOpts) return;

	    //
	    if (typeof rawOpts !== "object" || Array.isArray(rawOpts)) {
	      this.log.error("Invalid options type for " + alias, TypeError);
	    }

	    //
	    var opts = _lodashLangCloneDeep2["default"](rawOpts, function (val) {
	      if (val instanceof _plugin3["default"]) {
	        return val;
	      }
	    });

	    //
	    dirname = dirname || process.cwd();
	    loc = loc || alias;

	    for (var _key2 in opts) {
	      var option = _config2["default"][_key2];

	      // check for an unknown option
	      if (!option && this.log) {
	        this.log.error("Unknown option: " + alias + "." + _key2, ReferenceError);
	      }
	    }

	    // normalise options
	    _index.normaliseOptions(opts);

	    // resolve plugins
	    if (opts.plugins) {
	      opts.plugins = OptionManager.normalisePlugins(loc, dirname, opts.plugins);
	    }

	    // add extends clause
	    if (opts["extends"]) {
	      var extendsLoc = _helpersResolve2["default"](opts["extends"], dirname);
	      if (extendsLoc) {
	        this.addConfig(extendsLoc);
	      } else {
	        if (this.log) this.log.error("Couldn't resolve extends clause of " + opts["extends"] + " in " + alias);
	      }
	      delete opts["extends"];
	    }

	    // resolve presets
	    if (opts.presets) {
	      this.mergePresets(opts.presets, dirname);
	      delete opts.presets;
	    }

	    // env
	    var envOpts = undefined;
	    var envKey = process.env.BABEL_ENV || ("production") || "development";
	    if (opts.env) {
	      envOpts = opts.env[envKey];
	      delete opts.env;
	    }

	    // merge them into this current files options
	    _helpersMerge2["default"](this.options, opts);

	    // merge in env options
	    this.mergeOptions(envOpts, alias + ".env." + envKey, null, dirname);
	  };

	  OptionManager.prototype.mergePresets = function mergePresets(presets /*: Array<string | Object>*/, dirname /*: string*/) {
	    for (var _iterator2 = presets, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var val = _ref2;

	      if (typeof val === "string") {
	        var presetLoc = _helpersResolve2["default"]("babel-preset-" + val, dirname) || _helpersResolve2["default"](val, dirname);
	        if (presetLoc) {
	          var presetOpts = __webpack_require__(1293)(presetLoc);
	          this.mergeOptions(presetOpts, presetLoc, presetLoc, _path2["default"].dirname(presetLoc));
	        } else {
	          throw new Error("Couldn't find preset " + JSON.stringify(val) + " relative to directory " + JSON.stringify(dirname));
	        }
	      } else if (typeof val === "object") {
	        this.mergeOptions(val);
	      } else {
	        throw new Error("todo");
	      }
	    }
	  };

	  OptionManager.prototype.addIgnoreConfig = function addIgnoreConfig(loc) {
	    var file = _fs2["default"].readFileSync(loc, "utf8");
	    var lines = file.split("\n");

	    lines = lines.map(function (line) {
	      return line.replace(/#(.*?)$/, "").trim();
	    }).filter(function (line) {
	      return !!line;
	    });

	    this.mergeOptions({ ignore: lines }, loc);
	  };

	  OptionManager.prototype.findConfigs = function findConfigs(loc) {
	    if (!loc) return;

	    if (!_pathIsAbsolute2["default"](loc)) {
	      loc = _path2["default"].join(process.cwd(), loc);
	    }

	    var foundConfig = false;
	    var foundIgnore = false;

	    while (loc !== (loc = _path2["default"].dirname(loc))) {
	      if (!foundConfig) {
	        var configLoc = _path2["default"].join(loc, BABELRC_FILENAME);
	        if (exists(configLoc)) {
	          this.addConfig(configLoc);
	          foundConfig = true;
	        }

	        var pkgLoc = _path2["default"].join(loc, PACKAGE_FILENAME);
	        if (!foundConfig && exists(pkgLoc)) {
	          foundConfig = this.addConfig(pkgLoc, "babel", JSON);
	        }
	      }

	      if (!foundIgnore) {
	        var ignoreLoc = _path2["default"].join(loc, BABELIGNORE_FILENAME);
	        if (exists(ignoreLoc)) {
	          this.addIgnoreConfig(ignoreLoc);
	          foundIgnore = true;
	        }
	      }

	      if (foundIgnore && foundConfig) return;
	    }
	  };

	  OptionManager.prototype.normaliseOptions = function normaliseOptions() {
	    var opts = this.options;

	    for (var _key3 in _config2["default"]) {
	      var option = _config2["default"][_key3];
	      var val = opts[_key3];

	      // optional
	      if (!val && option.optional) continue;

	      // aliases
	      if (option.alias) {
	        opts[option.alias] = opts[option.alias] || val;
	      } else {
	        opts[_key3] = val;
	      }
	    }
	  };

	  OptionManager.prototype.init = function init() /*: Object*/ {
	    var opts /*: Object*/ = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var filename = opts.filename;

	    // resolve all .babelrc files
	    if (opts.babelrc !== false) {
	      this.findConfigs(filename);
	    }

	    // merge in base options
	    this.mergeOptions(opts, "base", null, filename && _path2["default"].dirname(filename));

	    // normalise
	    this.normaliseOptions(opts);

	    return this.options;
	  };

	  return OptionManager;
	})();

	exports["default"] = OptionManager;

	OptionManager.memoisedPlugins = [];
	module.exports = exports["default"];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 420 */
[7053, 514],
/* 421 */
[7056, 422],
/* 422 */
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 423 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 424 */
[7060, 98, 738, 421],
/* 425 */
/***/ function(module, exports) {

	module.exports = {};

/***/ },
/* 426 */
[7072, 1303, 512],
/* 427 */
[7149, 1345],
/* 428 */
[7165, 347, 519, 108],
/* 429 */
[7173, 347, 154],
/* 430 */
/***/ function(module, exports) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	{
	  /**
	   * This is a helper function for getting values from parameter/options
	   * objects.
	   *
	   * @param args The object we are extracting values from
	   * @param name The name of the property we are getting.
	   * @param defaultValue An optional value to return if the property is missing
	   * from the object. If this is not specified and the property is missing, an
	   * error will be thrown.
	   */
	  function getArg(aArgs, aName, aDefaultValue) {
	    if (aName in aArgs) {
	      return aArgs[aName];
	    } else if (arguments.length === 3) {
	      return aDefaultValue;
	    } else {
	      throw new Error('"' + aName + '" is a required argument.');
	    }
	  }
	  exports.getArg = getArg;

	  var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
	  var dataUrlRegexp = /^data:.+\,.+$/;

	  function urlParse(aUrl) {
	    var match = aUrl.match(urlRegexp);
	    if (!match) {
	      return null;
	    }
	    return {
	      scheme: match[1],
	      auth: match[2],
	      host: match[3],
	      port: match[4],
	      path: match[5]
	    };
	  }
	  exports.urlParse = urlParse;

	  function urlGenerate(aParsedUrl) {
	    var url = '';
	    if (aParsedUrl.scheme) {
	      url += aParsedUrl.scheme + ':';
	    }
	    url += '//';
	    if (aParsedUrl.auth) {
	      url += aParsedUrl.auth + '@';
	    }
	    if (aParsedUrl.host) {
	      url += aParsedUrl.host;
	    }
	    if (aParsedUrl.port) {
	      url += ":" + aParsedUrl.port
	    }
	    if (aParsedUrl.path) {
	      url += aParsedUrl.path;
	    }
	    return url;
	  }
	  exports.urlGenerate = urlGenerate;

	  /**
	   * Normalizes a path, or the path portion of a URL:
	   *
	   * - Replaces consequtive slashes with one slash.
	   * - Removes unnecessary '.' parts.
	   * - Removes unnecessary '<dir>/..' parts.
	   *
	   * Based on code in the Node.js 'path' core module.
	   *
	   * @param aPath The path or url to normalize.
	   */
	  function normalize(aPath) {
	    var path = aPath;
	    var url = urlParse(aPath);
	    if (url) {
	      if (!url.path) {
	        return aPath;
	      }
	      path = url.path;
	    }
	    var isAbsolute = exports.isAbsolute(path);

	    var parts = path.split(/\/+/);
	    for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
	      part = parts[i];
	      if (part === '.') {
	        parts.splice(i, 1);
	      } else if (part === '..') {
	        up++;
	      } else if (up > 0) {
	        if (part === '') {
	          // The first part is blank if the path is absolute. Trying to go
	          // above the root is a no-op. Therefore we can remove all '..' parts
	          // directly after the root.
	          parts.splice(i + 1, up);
	          up = 0;
	        } else {
	          parts.splice(i, 2);
	          up--;
	        }
	      }
	    }
	    path = parts.join('/');

	    if (path === '') {
	      path = isAbsolute ? '/' : '.';
	    }

	    if (url) {
	      url.path = path;
	      return urlGenerate(url);
	    }
	    return path;
	  }
	  exports.normalize = normalize;

	  /**
	   * Joins two paths/URLs.
	   *
	   * @param aRoot The root path or URL.
	   * @param aPath The path or URL to be joined with the root.
	   *
	   * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
	   *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
	   *   first.
	   * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
	   *   is updated with the result and aRoot is returned. Otherwise the result
	   *   is returned.
	   *   - If aPath is absolute, the result is aPath.
	   *   - Otherwise the two paths are joined with a slash.
	   * - Joining for example 'http://' and 'www.example.com' is also supported.
	   */
	  function join(aRoot, aPath) {
	    if (aRoot === "") {
	      aRoot = ".";
	    }
	    if (aPath === "") {
	      aPath = ".";
	    }
	    var aPathUrl = urlParse(aPath);
	    var aRootUrl = urlParse(aRoot);
	    if (aRootUrl) {
	      aRoot = aRootUrl.path || '/';
	    }

	    // `join(foo, '//www.example.org')`
	    if (aPathUrl && !aPathUrl.scheme) {
	      if (aRootUrl) {
	        aPathUrl.scheme = aRootUrl.scheme;
	      }
	      return urlGenerate(aPathUrl);
	    }

	    if (aPathUrl || aPath.match(dataUrlRegexp)) {
	      return aPath;
	    }

	    // `join('http://', 'www.example.com')`
	    if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
	      aRootUrl.host = aPath;
	      return urlGenerate(aRootUrl);
	    }

	    var joined = aPath.charAt(0) === '/'
	      ? aPath
	      : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

	    if (aRootUrl) {
	      aRootUrl.path = joined;
	      return urlGenerate(aRootUrl);
	    }
	    return joined;
	  }
	  exports.join = join;

	  exports.isAbsolute = function (aPath) {
	    return aPath.charAt(0) === '/' || !!aPath.match(urlRegexp);
	  };

	  /**
	   * Make a path relative to a URL or another path.
	   *
	   * @param aRoot The root path or URL.
	   * @param aPath The path or URL to be made relative to aRoot.
	   */
	  function relative(aRoot, aPath) {
	    if (aRoot === "") {
	      aRoot = ".";
	    }

	    aRoot = aRoot.replace(/\/$/, '');

	    // It is possible for the path to be above the root. In this case, simply
	    // checking whether the root is a prefix of the path won't work. Instead, we
	    // need to remove components from the root one by one, until either we find
	    // a prefix that fits, or we run out of components to remove.
	    var level = 0;
	    while (aPath.indexOf(aRoot + '/') !== 0) {
	      var index = aRoot.lastIndexOf("/");
	      if (index < 0) {
	        return aPath;
	      }

	      // If the only part of the root that is left is the scheme (i.e. http://,
	      // file:///, etc.), one or more slashes (/), or simply nothing at all, we
	      // have exhausted all components, so the path is not relative to the root.
	      aRoot = aRoot.slice(0, index);
	      if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
	        return aPath;
	      }

	      ++level;
	    }

	    // Make sure we add a "../" for each component we removed from the root.
	    return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
	  }
	  exports.relative = relative;

	  /**
	   * Because behavior goes wacky when you set `__proto__` on objects, we
	   * have to prefix all the strings in our set with an arbitrary character.
	   *
	   * See https://github.com/mozilla/source-map/pull/31 and
	   * https://github.com/mozilla/source-map/issues/30
	   *
	   * @param String aStr
	   */
	  function toSetString(aStr) {
	    return '$' + aStr;
	  }
	  exports.toSetString = toSetString;

	  function fromSetString(aStr) {
	    return aStr.substr(1);
	  }
	  exports.fromSetString = fromSetString;

	  /**
	   * Comparator between two mappings where the original positions are compared.
	   *
	   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	   * mappings with the same original source/line/column, but different generated
	   * line and column the same. Useful when searching for a mapping with a
	   * stubbed out mapping.
	   */
	  function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
	    var cmp = mappingA.source - mappingB.source;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.originalLine - mappingB.originalLine;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.originalColumn - mappingB.originalColumn;
	    if (cmp !== 0 || onlyCompareOriginal) {
	      return cmp;
	    }

	    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.generatedLine - mappingB.generatedLine;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    return mappingA.name - mappingB.name;
	  }
	  exports.compareByOriginalPositions = compareByOriginalPositions;

	  /**
	   * Comparator between two mappings with deflated source and name indices where
	   * the generated positions are compared.
	   *
	   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	   * mappings with the same generated line and column, but different
	   * source/name/original line and column the same. Useful when searching for a
	   * mapping with a stubbed out mapping.
	   */
	  function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
	    var cmp = mappingA.generatedLine - mappingB.generatedLine;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	    if (cmp !== 0 || onlyCompareGenerated) {
	      return cmp;
	    }

	    cmp = mappingA.source - mappingB.source;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.originalLine - mappingB.originalLine;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.originalColumn - mappingB.originalColumn;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    return mappingA.name - mappingB.name;
	  }
	  exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

	  function strcmp(aStr1, aStr2) {
	    if (aStr1 === aStr2) {
	      return 0;
	    }

	    if (aStr1 > aStr2) {
	      return 1;
	    }

	    return -1;
	  }

	  /**
	   * Comparator between two mappings with inflated source and name strings where
	   * the generated positions are compared.
	   */
	  function compareByGeneratedPositionsInflated(mappingA, mappingB) {
	    var cmp = mappingA.generatedLine - mappingB.generatedLine;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = strcmp(mappingA.source, mappingB.source);
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.originalLine - mappingB.originalLine;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.originalColumn - mappingB.originalColumn;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    return strcmp(mappingA.name, mappingB.name);
	  }
	  exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
	}


/***/ },
/* 431 */
[7074, 2592, 2596, 759],
/* 432 */
180,
/* 433 */
108,
/* 434 */
180,
/* 435 */
[7072, 2795, 778],
/* 436 */
180,
/* 437 */
108,
/* 438 */
[7089, 26, 1428, 18, 6, 536, 2847, 2864, 791, 792, 11, 289, 790, 1415, 289, 790, 1415],
/* 439 */
180,
/* 440 */
[7072, 2939, 800],
/* 441 */
[7089, 26, 1428, 18, 6, 536, 2969, 2986, 810, 811, 11, 290, 809, 1438, 290, 809, 1438],
/* 442 */
[7072, 3086, 818],
/* 443 */
[7149, 1499],
/* 444 */
[7074, 3229, 3233, 836],
/* 445 */
[7072, 3263, 841],
/* 446 */
[7089, 19, 1508, 20, 7, 553, 3283, 3300, 850, 851, 13, 294, 849, 1517, 294, 849, 1517],
/* 447 */
[7089, 19, 1508, 20, 7, 553, 3369, 3386, 859, 860, 13, 296, 858, 1531, 296, 858, 1531],
/* 448 */
[7074, 3479, 3483, 868],
/* 449 */
[7072, 3513, 874],
/* 450 */
[7149, 1596],
/* 451 */
[7058, 576, 164, 1604],
/* 452 */
[7072, 3695, 900],
/* 453 */
180,
/* 454 */
108,
/* 455 */
180,
/* 456 */
[7074, 3895, 3899, 924],
/* 457 */
[7074, 3922, 3926, 928],
/* 458 */
180,
/* 459 */
108,
/* 460 */
[7089, 27, 1673, 21, 8, 590, 3964, 3981, 937, 938, 14, 302, 936, 1660, 302, 936, 1660],
/* 461 */
180,
/* 462 */
[7072, 4056, 946],
/* 463 */
[7089, 27, 1673, 21, 8, 590, 4086, 4103, 956, 957, 14, 303, 955, 1683, 303, 955, 1683],
/* 464 */
[7072, 4204, 965],
/* 465 */
[7149, 1744],
/* 466 */
[7072, 4353, 984],
/* 467 */
[7089, 23, 1745, 24, 9, 607, 4373, 4390, 993, 994, 15, 307, 992, 1754, 307, 992, 1754],
/* 468 */
[7089, 23, 1745, 24, 9, 607, 4459, 4476, 1002, 1003, 15, 309, 1001, 1768, 309, 1001, 1768],
/* 469 */
[7089, 17, 1818, 10, 2, 622, 4566, 4583, 1010, 1011, 61, 311, 1009, 1793, 311, 1009, 1793],
/* 470 */
[7031, 4665],
/* 471 */
[7072, 4678, 1017],
/* 472 */
[7149, 1855],
/* 473 */
[7072, 4829, 1035],
/* 474 */
[7149, 1893],
/* 475 */
[7089, 85, 5097, 73, 41, 1924, 4958, 4975, 637, 1054, 54, 316, 1053, 1894, 316, 1053, 1894],
/* 476 */
180,
/* 477 */
[7072, 5116, 1065],
/* 478 */
[7072, 5164, 1075],
/* 479 */
180,
/* 480 */
108,
/* 481 */
180,
/* 482 */
[7072, 5371, 1100],
/* 483 */
[7089, 92, 5351, 80, 49, 1979, 5401, 5418, 1110, 1111, 64, 321, 1109, 1989, 321, 1109, 1989],
/* 484 */
[7074, 5511, 5515, 1118],
/* 485 */
[7072, 5549, 1122],
/* 486 */
[7089, 93, 5529, 77, 42, 2021, 5579, 5596, 1132, 1133, 56, 324, 1131, 2031, 324, 1131, 2031],
/* 487 */
[7074, 5689, 5693, 1140],
/* 488 */
[7089, 94, 5829, 75, 43, 2096, 5730, 5747, 1147, 1148, 65, 326, 1146, 2071, 326, 1146, 2071],
/* 489 */
[7072, 5849, 1155],
/* 490 */
[7089, 25, 2138, 22, 4, 681, 5880, 5897, 1164, 404, 12, 329, 1163, 2106, 329, 1163, 2106],
/* 491 */
[7089, 25, 2138, 22, 4, 681, 5932, 5949, 1167, 404, 12, 330, 1166, 2113, 330, 1166, 2113],
/* 492 */
[7149, 2137],
/* 493 */
[7072, 6044, 1179],
/* 494 */
[7089, 95, 6175, 76, 44, 2175, 6077, 6094, 1189, 1190, 57, 331, 1188, 2149, 331, 1188, 2149],
/* 495 */
[7072, 6195, 1196],
/* 496 */
[7074, 6230, 6234, 1205],
/* 497 */
[7074, 6263, 6267, 1208],
/* 498 */
[7074, 6293, 6297, 1211],
/* 499 */
[7074, 6325, 6329, 1214],
/* 500 */
[7089, 96, 6446, 78, 50, 2239, 6348, 6365, 1218, 1220, 66, 334, 1217, 2214, 334, 1217, 2214],
/* 501 */
[7072, 6466, 1226],
/* 502 */
[7089, 86, 6597, 79, 51, 2275, 6499, 6516, 1236, 1238, 67, 337, 1235, 2250, 337, 1235, 2250],
/* 503 */
[7072, 6617, 1244],
/* 504 */
[7072, 6664, 1255],
/* 505 */
[7089, 97, 6644, 58, 32, 2287, 6683, 6700, 1264, 1265, 36, 341, 1263, 2296, 341, 1263, 2296],
/* 506 */
180,
/* 507 */
[7072, 6848, 1276],
/* 508 */
[7089, 87, 6828, 81, 52, 2327, 6878, 6895, 1286, 1287, 68, 343, 1285, 2337, 343, 1285, 2337],
/* 509 */
[7026, 2413],
/* 510 */
[7036, 2437],
/* 511 */
[7055, 2441],
/* 512 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 513 */
/***/ function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 514 */
/***/ function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 515 */
[7069, 98, 513, 178],
/* 516 */
[7128, 2513],
/* 517 */
[7130, 1331, 750, 105, 428, 180, 753, 2558],
/* 518 */
[7162, 2553],
/* 519 */
/***/ function(module, exports) {

	/** Used to detect unsigned integer values. */
	var reIsUint = /^\d+$/;

	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return value > -1 && value % 1 == 0 && value < length;
	}

	module.exports = isIndex;


/***/ },
/* 520 */
[7171, 1326, 427, 428],
/* 521 */
425,
/* 522 */
98,
/* 523 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("asyncFunctions");
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 524 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("jsx");
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 525 */
154,
/* 526 */
[7174, 1380, 434, 525],
/* 527 */
[7185, 1380, 769, 350, 2695],
/* 528 */
[7162, 2763],
/* 529 */
[7185, 528, 774, 130, 2759],
/* 530 */
[7058, 531, 186, 2793],
/* 531 */
423,
/* 532 */
425,
/* 533 */
154,
/* 534 */
[7174, 1424, 439, 533],
/* 535 */
[7185, 1424, 793, 354, 2905],
/* 536 */
/***/ function(module, exports) {

	"use strict";

	exports["default"] = function (obj) {
	  return obj && obj.__esModule ? obj["default"] : obj;
	};

	exports.__esModule = true;

/***/ },
/* 537 */
[7058, 538, 187, 2937],
/* 538 */
423,
/* 539 */
425,
/* 540 */
[7149, 1461],
/* 541 */
[7162, 3053],
/* 542 */
[7165, 813, 814, 131],
/* 543 */
[7058, 544, 191, 3084],
/* 544 */
423,
/* 545 */
425,
/* 546 */
[7162, 3203],
/* 547 */
519,
/* 548 */
[7165, 832, 547, 132],
/* 549 */
[7173, 832, 194],
/* 550 */
425,
/* 551 */
98,
/* 552 */
[7031, 3250],
/* 553 */
536,
/* 554 */
[7058, 555, 196, 3261],
/* 555 */
423,
/* 556 */
425,
/* 557 */
519,
/* 558 */
154,
/* 559 */
[7185, 1528, 853, 362, 3346],
/* 560 */
[7149, 1554],
/* 561 */
[7162, 3453],
/* 562 */
[7165, 862, 863, 133],
/* 563 */
425,
/* 564 */
98,
/* 565 */
[7058, 566, 201, 3511],
/* 566 */
423,
/* 567 */
425,
/* 568 */
[7162, 3632],
/* 569 */
519,
/* 570 */
[7165, 888, 569, 134],
/* 571 */
[7173, 888, 204],
/* 572 */
[7169, 573],
/* 573 */
108,
/* 574 */
[7028, 28],
/* 575 */
[7038, 3690],
/* 576 */
423,
/* 577 */
425,
/* 578 */
154,
/* 579 */
[7174, 1626, 455, 578],
/* 580 */
[7185, 1626, 914, 370, 3802],
/* 581 */
[7162, 3870],
/* 582 */
[7185, 581, 919, 135, 3866],
/* 583 */
425,
/* 584 */
98,
/* 585 */
425,
/* 586 */
98,
/* 587 */
154,
/* 588 */
[7174, 1669, 461, 587],
/* 589 */
[7185, 1669, 939, 373, 4022],
/* 590 */
536,
/* 591 */
[7058, 592, 210, 4054],
/* 592 */
423,
/* 593 */
425,
/* 594 */
[7149, 1706],
/* 595 */
[7162, 4170],
/* 596 */
[7165, 959, 960, 136],
/* 597 */
[7058, 598, 214, 4202],
/* 598 */
423,
/* 599 */
425,
/* 600 */
[7162, 4321],
/* 601 */
519,
/* 602 */
[7165, 979, 601, 137],
/* 603 */
[7173, 979, 217],
/* 604 */
[7031, 4340],
/* 605 */
[7036, 4345],
/* 606 */
[7038, 4347],
/* 607 */
536,
/* 608 */
[7058, 609, 219, 4351],
/* 609 */
423,
/* 610 */
425,
/* 611 */
519,
/* 612 */
154,
/* 613 */
[7185, 1765, 996, 381, 4436],
/* 614 */
[7149, 1791],
/* 615 */
[7162, 4543],
/* 616 */
[7165, 1005, 1006, 138],
/* 617 */
[7149, 1816],
/* 618 */
[7162, 4650],
/* 619 */
[7165, 1013, 1014, 139],
/* 620 */
[7036, 4670],
/* 621 */
[7038, 4672],
/* 622 */
536,
/* 623 */
[7058, 624, 226, 4676],
/* 624 */
423,
/* 625 */
425,
/* 626 */
[7162, 4795],
/* 627 */
519,
/* 628 */
[7165, 1031, 627, 140],
/* 629 */
[7173, 1031, 229],
/* 630 */
[7058, 631, 231, 4827],
/* 631 */
423,
/* 632 */
425,
/* 633 */
[7162, 4946],
/* 634 */
519,
/* 635 */
[7165, 1049, 634, 141],
/* 636 */
[7173, 1049, 234],
/* 637 */
[7028, 41],
/* 638 */
154,
/* 639 */
[7174, 1903, 476, 638],
/* 640 */
[7185, 1903, 1055, 390, 5016],
/* 641 */
[7162, 5084],
/* 642 */
[7185, 641, 1060, 142, 5080],
/* 643 */
[7058, 644, 241, 5114],
/* 644 */
423,
/* 645 */
425,
/* 646 */
[7058, 647, 242, 5162],
/* 647 */
423,
/* 648 */
425,
/* 649 */
154,
/* 650 */
[7174, 1958, 481, 649],
/* 651 */
[7185, 1958, 1090, 395, 5270],
/* 652 */
[7162, 5338],
/* 653 */
[7185, 652, 1095, 143, 5334],
/* 654 */
[7058, 655, 247, 5369],
/* 655 */
423,
/* 656 */
425,
/* 657 */
[7149, 2012],
/* 658 */
[7162, 5485],
/* 659 */
[7165, 1113, 1114, 144],
/* 660 */
425,
/* 661 */
98,
/* 662 */
[7058, 663, 251, 5547],
/* 663 */
423,
/* 664 */
425,
/* 665 */
[7149, 2054],
/* 666 */
[7162, 5663],
/* 667 */
[7165, 1135, 1136, 145],
/* 668 */
425,
/* 669 */
98,
/* 670 */
423,
/* 671 */
[7149, 2093],
/* 672 */
[7162, 5816],
/* 673 */
[7165, 1151, 1152, 146],
/* 674 */
[7058, 675, 258, 5847],
/* 675 */
423,
/* 676 */
425,
/* 677 */
[7162, 6014],
/* 678 */
519,
/* 679 */
[7165, 1170, 678, 147],
/* 680 */
[7173, 1170, 261],
/* 681 */
536,
/* 682 */
[7058, 683, 263, 6042],
/* 683 */
423,
/* 684 */
425,
/* 685 */
[7149, 2172],
/* 686 */
[7162, 6161],
/* 687 */
[7165, 1192, 1193, 148],
/* 688 */
[7058, 689, 267, 6193],
/* 689 */
423,
/* 690 */
425,
/* 691 */
425,
/* 692 */
98,
/* 693 */
425,
/* 694 */
98,
/* 695 */
425,
/* 696 */
98,
/* 697 */
425,
/* 698 */
98,
/* 699 */
[7149, 2236],
/* 700 */
[7162, 6433],
/* 701 */
[7165, 1222, 1223, 149],
/* 702 */
[7058, 703, 271, 6464],
/* 703 */
423,
/* 704 */
425,
/* 705 */
[7149, 2272],
/* 706 */
[7162, 6584],
/* 707 */
[7165, 1240, 1241, 150],
/* 708 */
[7058, 709, 275, 6615],
/* 709 */
423,
/* 710 */
425,
/* 711 */
[7058, 712, 276, 6662],
/* 712 */
423,
/* 713 */
425,
/* 714 */
154,
/* 715 */
[7174, 2305, 506, 714],
/* 716 */
[7185, 2305, 1266, 414, 6740],
/* 717 */
[7162, 6808],
/* 718 */
[7185, 717, 1271, 151, 6804],
/* 719 */
[7058, 720, 281, 6846],
/* 720 */
423,
/* 721 */
425,
/* 722 */
[7149, 2360],
/* 723 */
[7162, 6962],
/* 724 */
[7165, 1289, 1290, 152],
/* 725 */
/***/ function(module, exports, __webpack_require__) {

	// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
	//
	// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
	//
	// Originally from narwhal.js (http://narwhaljs.org)
	// Copyright (c) 2009 Thomas Robinson <280north.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the 'Software'), to
	// deal in the Software without restriction, including without limitation the
	// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	// sell copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
	// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

	// when used in node, this will actually load the util module we depend on
	// versus loading the builtin util module as happens otherwise
	// this is a bug in node module loading as far as I am concerned
	var util = __webpack_require__(30);

	var pSlice = Array.prototype.slice;
	var hasOwn = Object.prototype.hasOwnProperty;

	// 1. The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.

	var assert = module.exports = ok;

	// 2. The AssertionError is defined in assert.
	// new assert.AssertionError({ message: message,
	//                             actual: actual,
	//                             expected: expected })

	assert.AssertionError = function AssertionError(options) {
	  this.name = 'AssertionError';
	  this.actual = options.actual;
	  this.expected = options.expected;
	  this.operator = options.operator;
	  if (options.message) {
	    this.message = options.message;
	    this.generatedMessage = false;
	  } else {
	    this.message = getMessage(this);
	    this.generatedMessage = true;
	  }
	  var stackStartFunction = options.stackStartFunction || fail;

	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, stackStartFunction);
	  }
	  else {
	    // non v8 browsers so we can have a stacktrace
	    var err = new Error();
	    if (err.stack) {
	      var out = err.stack;

	      // try to strip useless frames
	      var fn_name = stackStartFunction.name;
	      var idx = out.indexOf('\n' + fn_name);
	      if (idx >= 0) {
	        // once we have located the function frame
	        // we need to strip out everything before it (and its line)
	        var next_line = out.indexOf('\n', idx + 1);
	        out = out.substring(next_line + 1);
	      }

	      this.stack = out;
	    }
	  }
	};

	// assert.AssertionError instanceof Error
	util.inherits(assert.AssertionError, Error);

	function replacer(key, value) {
	  if (util.isUndefined(value)) {
	    return '' + value;
	  }
	  if (util.isNumber(value) && !isFinite(value)) {
	    return value.toString();
	  }
	  if (util.isFunction(value) || util.isRegExp(value)) {
	    return value.toString();
	  }
	  return value;
	}

	function truncate(s, n) {
	  if (util.isString(s)) {
	    return s.length < n ? s : s.slice(0, n);
	  } else {
	    return s;
	  }
	}

	function getMessage(self) {
	  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
	         self.operator + ' ' +
	         truncate(JSON.stringify(self.expected, replacer), 128);
	}

	// At present only the three keys mentioned above are used and
	// understood by the spec. Implementations or sub modules can pass
	// other keys to the AssertionError's constructor - they will be
	// ignored.

	// 3. All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided.  All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.

	function fail(actual, expected, message, operator, stackStartFunction) {
	  throw new assert.AssertionError({
	    message: message,
	    actual: actual,
	    expected: expected,
	    operator: operator,
	    stackStartFunction: stackStartFunction
	  });
	}

	// EXTENSION! allows for well behaved errors defined elsewhere.
	assert.fail = fail;

	// 4. Pure assertion tests whether a value is truthy, as determined
	// by !!guard.
	// assert.ok(guard, message_opt);
	// This statement is equivalent to assert.equal(true, !!guard,
	// message_opt);. To test strictly for the value true, use
	// assert.strictEqual(true, guard, message_opt);.

	function ok(value, message) {
	  if (!value) fail(value, true, message, '==', assert.ok);
	}
	assert.ok = ok;

	// 5. The equality assertion tests shallow, coercive equality with
	// ==.
	// assert.equal(actual, expected, message_opt);

	assert.equal = function equal(actual, expected, message) {
	  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
	};

	// 6. The non-equality assertion tests for whether two objects are not equal
	// with != assert.notEqual(actual, expected, message_opt);

	assert.notEqual = function notEqual(actual, expected, message) {
	  if (actual == expected) {
	    fail(actual, expected, message, '!=', assert.notEqual);
	  }
	};

	// 7. The equivalence assertion tests a deep equality relation.
	// assert.deepEqual(actual, expected, message_opt);

	assert.deepEqual = function deepEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected)) {
	    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
	  }
	};

	function _deepEqual(actual, expected) {
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;

	  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
	    if (actual.length != expected.length) return false;

	    for (var i = 0; i < actual.length; i++) {
	      if (actual[i] !== expected[i]) return false;
	    }

	    return true;

	  // 7.2. If the expected value is a Date object, the actual value is
	  // equivalent if it is also a Date object that refers to the same time.
	  } else if (util.isDate(actual) && util.isDate(expected)) {
	    return actual.getTime() === expected.getTime();

	  // 7.3 If the expected value is a RegExp object, the actual value is
	  // equivalent if it is also a RegExp object with the same source and
	  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
	    return actual.source === expected.source &&
	           actual.global === expected.global &&
	           actual.multiline === expected.multiline &&
	           actual.lastIndex === expected.lastIndex &&
	           actual.ignoreCase === expected.ignoreCase;

	  // 7.4. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if (!util.isObject(actual) && !util.isObject(expected)) {
	    return actual == expected;

	  // 7.5 For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else {
	    return objEquiv(actual, expected);
	  }
	}

	function isArguments(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	}

	function objEquiv(a, b) {
	  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
	    return false;
	  // an identical 'prototype' property.
	  if (a.prototype !== b.prototype) return false;
	  // if one is a primitive, the other must be same
	  if (util.isPrimitive(a) || util.isPrimitive(b)) {
	    return a === b;
	  }
	  var aIsArgs = isArguments(a),
	      bIsArgs = isArguments(b);
	  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
	    return false;
	  if (aIsArgs) {
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return _deepEqual(a, b);
	  }
	  var ka = objectKeys(a),
	      kb = objectKeys(b),
	      key, i;
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length != kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] != kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!_deepEqual(a[key], b[key])) return false;
	  }
	  return true;
	}

	// 8. The non-equivalence assertion tests for any deep inequality.
	// assert.notDeepEqual(actual, expected, message_opt);

	assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected)) {
	    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
	  }
	};

	// 9. The strict equality assertion tests strict equality, as determined by ===.
	// assert.strictEqual(actual, expected, message_opt);

	assert.strictEqual = function strictEqual(actual, expected, message) {
	  if (actual !== expected) {
	    fail(actual, expected, message, '===', assert.strictEqual);
	  }
	};

	// 10. The strict non-equality assertion tests for strict inequality, as
	// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

	assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
	  if (actual === expected) {
	    fail(actual, expected, message, '!==', assert.notStrictEqual);
	  }
	};

	function expectedException(actual, expected) {
	  if (!actual || !expected) {
	    return false;
	  }

	  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
	    return expected.test(actual);
	  } else if (actual instanceof expected) {
	    return true;
	  } else if (expected.call({}, actual) === true) {
	    return true;
	  }

	  return false;
	}

	function _throws(shouldThrow, block, expected, message) {
	  var actual;

	  if (util.isString(expected)) {
	    message = expected;
	    expected = null;
	  }

	  try {
	    block();
	  } catch (e) {
	    actual = e;
	  }

	  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
	            (message ? ' ' + message : '.');

	  if (shouldThrow && !actual) {
	    fail(actual, expected, 'Missing expected exception' + message);
	  }

	  if (!shouldThrow && expectedException(actual, expected)) {
	    fail(actual, expected, 'Got unwanted exception' + message);
	  }

	  if ((shouldThrow && actual && expected &&
	      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
	    throw actual;
	  }
	}

	// 11. Expected to throw an error:
	// assert.throws(block, Error_opt, message_opt);

	assert.throws = function(block, /*optional*/error, /*optional*/message) {
	  _throws.apply(this, [true].concat(pSlice.call(arguments)));
	};

	// EXTENSION! This is annoying to write outside this module.
	assert.doesNotThrow = function(block, /*optional*/message) {
	  _throws.apply(this, [false].concat(pSlice.call(arguments)));
	};

	assert.ifError = function(err) { if (err) {throw err;}};

	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    if (hasOwn.call(obj, key)) keys.push(key);
	  }
	  return keys;
	};


/***/ },
/* 726 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _inherits = __webpack_require__(346)["default"];

	var _classCallCheck = __webpack_require__(82)["default"];

	var _Map2 = __webpack_require__(2417)["default"];

	exports.__esModule = true;

	var Store = (function (_Map) {
	  _inherits(Store, _Map);

	  function Store() {
	    _classCallCheck(this, Store);

	    _Map.call(this);
	    this.dynamicData = {};
	  }

	  Store.prototype.setDynamic = function setDynamic(key, fn) {
	    this.dynamicData[key] = fn;
	  };

	  Store.prototype.get = function get(key /*: string*/) /*: any*/ {
	    if (this.has(key)) {
	      return _Map.prototype.get.call(this, key);
	    } else {
	      if (Object.prototype.hasOwnProperty.call(this.dynamicData, key)) {
	        var val = this.dynamicData[key]();
	        this.set(key, val);
	        return val;
	      }
	    }
	  };

	  return Store;
	})(_Map2);

	exports["default"] = Store;
	module.exports = exports["default"];

/***/ },
/* 727 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/* @noflow */
	/* global BabelParserOptions */
	/* global BabelFileMetadata */
	/* global BabelFileResult */

	"use strict";

	var _inherits = __webpack_require__(346)["default"];

	var _classCallCheck = __webpack_require__(82)["default"];

	var _getIterator = __webpack_require__(37)["default"];

	var _interopRequireDefault = __webpack_require__(5)["default"];

	var _interopRequireWildcard = __webpack_require__(3)["default"];

	exports.__esModule = true;

	var _babelHelpers = __webpack_require__(1299);

	var _babelHelpers2 = _interopRequireDefault(_babelHelpers);

	var _metadata = __webpack_require__(2371);

	var metadataVisitor = _interopRequireWildcard(_metadata);

	var _convertSourceMap = __webpack_require__(2505);

	var _convertSourceMap2 = _interopRequireDefault(_convertSourceMap);

	var _optionsOptionManager = __webpack_require__(419);

	var _optionsOptionManager2 = _interopRequireDefault(_optionsOptionManager);

	var _pluginPass = __webpack_require__(2375);

	var _pluginPass2 = _interopRequireDefault(_pluginPass);

	var _shebangRegex = __webpack_require__(2568);

	var _shebangRegex2 = _interopRequireDefault(_shebangRegex);

	var _babelTraverse = __webpack_require__(153);

	var _sourceMap = __webpack_require__(1350);

	var _sourceMap2 = _interopRequireDefault(_sourceMap);

	var _babelGenerator = __webpack_require__(1297);

	var _babelGenerator2 = _interopRequireDefault(_babelGenerator);

	var _babelCodeFrame = __webpack_require__(1294);

	var _babelCodeFrame2 = _interopRequireDefault(_babelCodeFrame);

	var _lodashObjectDefaults = __webpack_require__(1344);

	var _lodashObjectDefaults2 = _interopRequireDefault(_lodashObjectDefaults);

	var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

	var _logger = __webpack_require__(2370);

	var _logger2 = _interopRequireDefault(_logger);

	var _store = __webpack_require__(726);

	var _store2 = _interopRequireDefault(_store);

	var _babylon = __webpack_require__(745);

	var _util = __webpack_require__(731);

	var util = _interopRequireWildcard(_util);

	var _path = __webpack_require__(175);

	var _path2 = _interopRequireDefault(_path);

	var _babelTypes = __webpack_require__(16);

	var t = _interopRequireWildcard(_babelTypes);

	var _internalPluginsBlockHoist = __webpack_require__(2372);

	var _internalPluginsBlockHoist2 = _interopRequireDefault(_internalPluginsBlockHoist);

	var _internalPluginsShadowFunctions = __webpack_require__(2373);

	var _internalPluginsShadowFunctions2 = _interopRequireDefault(_internalPluginsShadowFunctions);

	/*:: import type Pipeline from "../pipeline";*/
	/*:: import type Plugin from "../plugin";*/

	var INTERNAL_PLUGINS = [[_internalPluginsBlockHoist2["default"]], [_internalPluginsShadowFunctions2["default"]]];

	var errorVisitor = {
	  enter: function enter(path, state) {
	    var loc = path.node.loc;
	    if (loc) {
	      state.loc = loc;
	      path.stop();
	    }
	  }
	};

	var File = (function (_Store) {
	  _inherits(File, _Store);

	  function File(opts /*: Object*/, pipeline /*: Pipeline*/) {
	    if (opts === undefined) opts = {};

	    _classCallCheck(this, File);

	    _Store.call(this);

	    this.pipeline = pipeline;

	    this.log = new _logger2["default"](this, opts.filename || "unknown");
	    this.opts = this.initOptions(opts);

	    this.parserOpts = {
	      highlightCode: this.opts.highlightCode,
	      nonStandard: this.opts.nonStandard,
	      sourceType: this.opts.sourceType,
	      filename: this.opts.filename,
	      plugins: []
	    };

	    this.pluginVisitors = [];
	    this.pluginPasses = [];
	    this.pluginStack = [];
	    this.buildPlugins();

	    this.metadata = {
	      usedHelpers: [],
	      marked: [],
	      modules: {
	        imports: [],
	        exports: {
	          exported: [],
	          specifiers: []
	        }
	      }
	    };

	    this.dynamicImportTypes = {};
	    this.dynamicImportIds = {};
	    this.dynamicImports = [];
	    this.declarations = {};
	    this.usedHelpers = {};

	    this.path = null;
	    this.ast = {};

	    this.code = "";
	    this.shebang = "";

	    this.hub = new _babelTraverse.Hub(this);
	  }

	  File.prototype.getMetadata = function getMetadata() {
	    var has = false;
	    for (var _iterator = (this.ast.program.body /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var node = _ref;

	      if (t.isModuleDeclaration(node)) {
	        has = true;
	        break;
	      }
	    }
	    if (has) {
	      this.path.traverse(metadataVisitor, this);
	    }
	  };

	  File.prototype.initOptions = function initOptions(opts) {
	    opts = new _optionsOptionManager2["default"](this.log, this.pipeline).init(opts);

	    if (opts.inputSourceMap) {
	      opts.sourceMaps = true;
	    }

	    if (opts.moduleId) {
	      opts.moduleIds = true;
	    }

	    opts.basename = _path2["default"].basename(opts.filename, _path2["default"].extname(opts.filename));

	    opts.ignore = util.arrayify(opts.ignore, util.regexify);

	    if (opts.only) opts.only = util.arrayify(opts.only, util.regexify);

	    _lodashObjectDefaults2["default"](opts, {
	      moduleRoot: opts.sourceRoot
	    });

	    _lodashObjectDefaults2["default"](opts, {
	      sourceRoot: opts.moduleRoot
	    });

	    _lodashObjectDefaults2["default"](opts, {
	      filenameRelative: opts.filename
	    });

	    var basenameRelative = _path2["default"].basename(opts.filenameRelative);

	    _lodashObjectDefaults2["default"](opts, {
	      sourceFileName: basenameRelative,
	      sourceMapTarget: basenameRelative
	    });

	    return opts;
	  };

	  File.prototype.buildPlugins = function buildPlugins() {
	    var plugins /*: Array<[PluginPass, Object]>*/ = this.opts.plugins.concat(INTERNAL_PLUGINS);

	    // init plugins!
	    for (var _iterator2 = plugins, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var ref = _ref2;
	      var plugin = ref[0];
	      var pluginOpts = ref[1];
	      // todo: fix - can't embed in loop head because of flow bug

	      this.pluginStack.push(plugin);
	      this.pluginVisitors.push(plugin.visitor);
	      this.pluginPasses.push(new _pluginPass2["default"](this, plugin, pluginOpts));

	      if (plugin.manipulateOptions) {
	        plugin.manipulateOptions(this.opts, this.parserOpts, this);
	      }
	    }
	  };

	  File.prototype.getModuleName = function getModuleName() /*: ?string*/ {
	    var opts = this.opts;
	    if (!opts.moduleIds) {
	      return null;
	    }

	    // moduleId is n/a if a `getModuleId()` is provided
	    if (opts.moduleId != null && !opts.getModuleId) {
	      return opts.moduleId;
	    }

	    var filenameRelative = opts.filenameRelative;
	    var moduleName = "";

	    if (opts.moduleRoot != null) {
	      moduleName = opts.moduleRoot + "/";
	    }

	    if (!opts.filenameRelative) {
	      return moduleName + opts.filename.replace(/^\//, "");
	    }

	    if (opts.sourceRoot != null) {
	      // remove sourceRoot from filename
	      var sourceRootRegEx = new RegExp("^" + opts.sourceRoot + "\/?");
	      filenameRelative = filenameRelative.replace(sourceRootRegEx, "");
	    }

	    // remove extension
	    filenameRelative = filenameRelative.replace(/\.(\w*?)$/, "");

	    moduleName += filenameRelative;

	    // normalize path separators
	    moduleName = moduleName.replace(/\\/g, "/");

	    if (opts.getModuleId) {
	      // If return is falsy, assume they want us to use our generated default name
	      return opts.getModuleId(moduleName) || moduleName;
	    } else {
	      return moduleName;
	    }
	  };

	  File.prototype.resolveModuleSource = function resolveModuleSource(source /*: string*/) /*: string*/ {
	    var resolveModuleSource = this.opts.resolveModuleSource;
	    if (resolveModuleSource) source = resolveModuleSource(source, this.opts.filename);
	    return source;
	  };

	  File.prototype.addImport = function addImport(source /*: string*/, imported /*: string*/) /*: Object*/ {
	    var name /*:: ?: string*/ = arguments.length <= 2 || arguments[2] === undefined ? imported : arguments[2];
	    return (function () {
	      var alias = source + ":" + imported;
	      var id = this.dynamicImportIds[alias];

	      if (!id) {
	        source = this.resolveModuleSource(source);
	        id = this.dynamicImportIds[alias] = this.scope.generateUidIdentifier(name);

	        var specifiers = [];

	        if (imported === "*") {
	          specifiers.push(t.importNamespaceSpecifier(id));
	        } else if (imported === "default") {
	          specifiers.push(t.importDefaultSpecifier(id));
	        } else {
	          specifiers.push(t.importSpecifier(id, t.identifier(imported)));
	        }

	        var declar = t.importDeclaration(specifiers, t.stringLiteral(source));
	        declar._blockHoist = 3;

	        this.path.unshiftContainer("body", declar);
	      }

	      return id;
	    }).apply(this, arguments);
	  };

	  File.prototype.addHelper = function addHelper(name /*: string*/) /*: Object*/ {
	    var declar = this.declarations[name];
	    if (declar) return declar;

	    if (!this.usedHelpers[name]) {
	      this.metadata.usedHelpers.push(name);
	      this.usedHelpers[name] = true;
	    }

	    var generator = this.get("helperGenerator");
	    var runtime = this.get("helpersNamespace");
	    if (generator) {
	      var res = generator(name);
	      if (res) return res;
	    } else if (runtime) {
	      return t.memberExpression(runtime, t.identifier(name));
	    }

	    var ref = _babelHelpers2["default"](name);
	    var uid = this.declarations[name] = this.scope.generateUidIdentifier(name);

	    if (t.isFunctionExpression(ref) && !ref.id) {
	      ref.body._compact = true;
	      ref._generated = true;
	      ref.id = uid;
	      ref.type = "FunctionDeclaration";
	      this.path.unshiftContainer("body", ref);
	    } else {
	      ref._compact = true;
	      this.scope.push({
	        id: uid,
	        init: ref,
	        unique: true
	      });
	    }

	    return uid;
	  };

	  File.prototype.addTemplateObject = function addTemplateObject(helperName /*: string*/, strings /*: Array<Object>*/, raw /*: Object*/) /*: Object*/ {
	    // Generate a unique name based on the string literals so we dedupe
	    // identical strings used in the program.
	    var stringIds = raw.elements.map(function (string) {
	      return string.value;
	    });
	    var name = helperName + "_" + raw.elements.length + "_" + stringIds.join(",");

	    var declar = this.declarations[name];
	    if (declar) return declar;

	    var uid = this.declarations[name] = this.scope.generateUidIdentifier("templateObject");

	    var helperId = this.addHelper(helperName);
	    var init = t.callExpression(helperId, [strings, raw]);
	    init._compact = true;
	    this.scope.push({
	      id: uid,
	      init: init,
	      _blockHoist: 1.9 // This ensures that we don't fail if not using function expression helpers
	    });
	    return uid;
	  };

	  File.prototype.buildCodeFrameError = function buildCodeFrameError(node /*: Object*/, msg /*: string*/) /*: Error*/ {
	    var Error /*: typeof Error*/ = arguments.length <= 2 || arguments[2] === undefined ? SyntaxError : arguments[2];

	    var loc = node && (node.loc || node._loc);

	    var err = new Error(msg);

	    if (loc) {
	      err.loc = loc.start;
	    } else {
	      _babelTraverse2["default"](node, errorVisitor, this.scope, err);

	      err.message += " (This is an error on an internal node. Probably an internal error";

	      if (err.loc) {
	        err.message += ". Location has been estimated.";
	      }

	      err.message += ")";
	    }

	    return err;
	  };

	  File.prototype.mergeSourceMap = function mergeSourceMap(map /*: Object*/) {
	    var inputMap = this.opts.inputSourceMap;

	    if (inputMap) {
	      var _ret = (function () {
	        var inputMapConsumer = new _sourceMap2["default"].SourceMapConsumer(inputMap);
	        var outputMapConsumer = new _sourceMap2["default"].SourceMapConsumer(map);

	        var mergedGenerator = new _sourceMap2["default"].SourceMapGenerator({
	          file: inputMapConsumer.file,
	          sourceRoot: inputMapConsumer.sourceRoot
	        });

	        // This assumes the output map always has a single source, since Babel always compiles a single source file to a
	        // single output file.
	        var source = outputMapConsumer.sources[0];

	        inputMapConsumer.eachMapping(function (mapping) {
	          var generatedPosition = outputMapConsumer.generatedPositionFor({
	            line: mapping.generatedLine,
	            column: mapping.generatedColumn,
	            source: source
	          });
	          if (generatedPosition.column != null) {
	            mergedGenerator.addMapping({
	              source: mapping.source,

	              original: {
	                line: mapping.originalLine,
	                column: mapping.originalColumn
	              },

	              generated: generatedPosition
	            });
	          }
	        });

	        var mergedMap = mergedGenerator.toJSON();
	        inputMap.mappings = mergedMap.mappings;
	        return {
	          v: inputMap
	        };
	      })();

	      // istanbul ignore next
	      if (typeof _ret === "object") return _ret.v;
	    } else {
	      return map;
	    }
	  };

	  File.prototype.parse = function parse(code /*: string*/) {
	    this.log.debug("Parse start");
	    var ast = _babylon.parse(code, this.parserOpts);
	    this.log.debug("Parse stop");
	    return ast;
	  };

	  File.prototype._addAst = function _addAst(ast) {
	    this.path = _babelTraverse.NodePath.get({
	      hub: this.hub,
	      parentPath: null,
	      parent: ast,
	      container: ast,
	      key: "program"
	    }).setContext();
	    this.scope = this.path.scope;
	    this.ast = ast;
	    this.getMetadata();
	  };

	  File.prototype.addAst = function addAst(ast) {
	    this.log.debug("Start set AST");
	    this._addAst(ast);
	    this.log.debug("End set AST");
	  };

	  File.prototype.transform = function transform() /*: BabelFileResult*/ {
	    this.call("pre");
	    this.log.debug("Start transform traverse");
	    _babelTraverse2["default"](this.ast, _babelTraverse2["default"].visitors.merge(this.pluginVisitors, this.pluginPasses), this.scope);
	    this.log.debug("End transform traverse");
	    this.call("post");
	    return this.generate();
	  };

	  File.prototype.wrap = function wrap(code /*: string*/, callback /*: Function*/) /*: BabelFileResult*/ {
	    code = code + "";

	    try {
	      if (this.shouldIgnore()) {
	        return this.makeResult({ code: code, ignored: true });
	      } else {
	        return callback();
	      }
	    } catch (err) {
	      if (err._babel) {
	        throw err;
	      } else {
	        err._babel = true;
	      }

	      var message = err.message = this.opts.filename + ": " + err.message;

	      var loc = err.loc;
	      if (loc) {
	        err.codeFrame = _babelCodeFrame2["default"](code, loc.line, loc.column + 1, this.opts);
	        message += "\n" + err.codeFrame;
	      }

	      if (process.browser) {
	        // chrome has it's own pretty stringifier which doesn't use the stack property
	        // https://github.com/babel/babel/issues/2175
	        err.message = message;
	      }

	      if (err.stack) {
	        var newStack = err.stack.replace(err.message, message);
	        err.stack = newStack;
	      }

	      throw err;
	    }
	  };

	  File.prototype.addCode = function addCode(code /*: string*/) {
	    code = (code || "") + "";
	    code = this.parseInputSourceMap(code);
	    this.code = code;
	  };

	  File.prototype.parseCode = function parseCode() {
	    this.parseShebang();
	    var ast = this.parse(this.code);
	    this.addAst(ast);
	  };

	  File.prototype.shouldIgnore = function shouldIgnore() {
	    var opts = this.opts;
	    return util.shouldIgnore(opts.filename, opts.ignore, opts.only);
	  };

	  File.prototype.call = function call(key /*: "pre" | "post"*/) {
	    for (var _iterator3 = (this.pluginPasses /*: Array<PluginPass>*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	      var _ref3;

	      if (_isArray3) {
	        if (_i3 >= _iterator3.length) break;
	        _ref3 = _iterator3[_i3++];
	      } else {
	        _i3 = _iterator3.next();
	        if (_i3.done) break;
	        _ref3 = _i3.value;
	      }

	      var pass = _ref3;

	      var plugin = pass.plugin;
	      var fn = plugin[key];
	      if (fn) fn.call(pass, this);
	    }
	  };

	  File.prototype.parseInputSourceMap = function parseInputSourceMap(code /*: string*/) /*: string*/ {
	    var opts = this.opts;

	    if (opts.inputSourceMap !== false) {
	      var inputMap = _convertSourceMap2["default"].fromSource(code);
	      if (inputMap) {
	        opts.inputSourceMap = inputMap.toObject();
	        code = _convertSourceMap2["default"].removeComments(code);
	      }
	    }

	    return code;
	  };

	  File.prototype.parseShebang = function parseShebang() {
	    var shebangMatch = _shebangRegex2["default"].exec(this.code);
	    if (shebangMatch) {
	      this.shebang = shebangMatch[0];
	      this.code = this.code.replace(_shebangRegex2["default"], "");
	    }
	  };

	  File.prototype.makeResult = function makeResult(_ref4 /*: BabelFileResult*/) /*: BabelFileResult*/ {
	    var code = _ref4.code;
	    var map = _ref4.map;
	    var ast = _ref4.ast;
	    var ignored = _ref4.ignored;

	    var result = {
	      metadata: null,
	      options: this.opts,
	      ignored: !!ignored,
	      code: null,
	      ast: null,
	      map: map || null
	    };

	    if (this.opts.code) {
	      result.code = code;
	    }

	    if (this.opts.ast) {
	      result.ast = ast;
	    }

	    if (this.opts.metadata) {
	      result.metadata = this.metadata;
	    }

	    return result;
	  };

	  File.prototype.generate = function generate() /*: BabelFileResult*/ {
	    var opts = this.opts;
	    var ast = this.ast;

	    var result /*: BabelFileResult*/ = { ast: ast };
	    if (!opts.code) return this.makeResult(result);

	    this.log.debug("Generation start");

	    var _result = _babelGenerator2["default"](ast, opts, this.code);
	    result.code = _result.code;
	    result.map = _result.map;

	    this.log.debug("Generation end");

	    if (this.shebang) {
	      // add back shebang
	      result.code = this.shebang + "\n" + result.code;
	    }

	    if (result.map) {
	      result.map = this.mergeSourceMap(result.map);
	    }

	    if (opts.sourceMaps === "inline" || opts.sourceMaps === "both") {
	      result.code += "\n" + _convertSourceMap2["default"].fromObject(result.map).toComment();
	    }

	    if (opts.sourceMaps === "inline") {
	      result.map = null;
	    }

	    return this.makeResult(result);
	  };

	  return File;
	})(_store2["default"]);

	exports["default"] = File;
	exports.File = File;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 728 */
/***/ function(module, exports, __webpack_require__) {

	/* @flow */

	"use strict";

	var _interopRequireWildcard = __webpack_require__(3)["default"];

	var _interopRequireDefault = __webpack_require__(5)["default"];

	exports.__esModule = true;
	exports.normaliseOptions = normaliseOptions;

	var _parsers = __webpack_require__(729);

	var parsers = _interopRequireWildcard(_parsers);

	var _config = __webpack_require__(418);

	var _config2 = _interopRequireDefault(_config);

	exports.config = _config2["default"];

	function normaliseOptions() /*: Object*/ {
	  var options /*: Object*/ = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  for (var key in options) {
	    var val = options[key];
	    if (val == null) continue;

	    var opt = _config2["default"][key];
	    if (opt && opt.alias) opt = _config2["default"][opt.alias];
	    if (!opt) continue;

	    var parser = parsers[opt.type];
	    if (parser) val = parser(val);

	    options[key] = val;
	  }

	  return options;
	}

/***/ },
/* 729 */
/***/ function(module, exports, __webpack_require__) {

	/* @flow */

	"use strict";

	var _interopRequireDefault = __webpack_require__(5)["default"];

	var _interopRequireWildcard = __webpack_require__(3)["default"];

	exports.__esModule = true;
	exports.boolean = boolean;
	exports.booleanString = booleanString;
	exports.list = list;

	var _slash = __webpack_require__(1346);

	var _slash2 = _interopRequireDefault(_slash);

	var _util = __webpack_require__(731);

	var util = _interopRequireWildcard(_util);

	var filename = _slash2["default"];

	exports.filename = filename;

	function boolean(val /*: any*/) /*: boolean*/ {
	  return !!val;
	}

	function booleanString(val /*: any*/) /*: boolean | any*/ {
	  return util.booleanify(val);
	}

	function list(val /*: any*/) /*: Array<string>*/ {
	  return util.list(val);
	}

/***/ },
/* 730 */
/***/ function(module, exports, __webpack_require__) {

	/* @noflow */

	"use strict";

	var _inherits = __webpack_require__(346)["default"];

	var _classCallCheck = __webpack_require__(82)["default"];

	var _getIterator = __webpack_require__(37)["default"];

	var _interopRequireDefault = __webpack_require__(5)["default"];

	var _interopRequireWildcard = __webpack_require__(3)["default"];

	exports.__esModule = true;

	var _fileOptionsOptionManager = __webpack_require__(419);

	var _fileOptionsOptionManager2 = _interopRequireDefault(_fileOptionsOptionManager);

	var _babelMessages = __webpack_require__(176);

	var messages = _interopRequireWildcard(_babelMessages);

	var _store = __webpack_require__(726);

	var _store2 = _interopRequireDefault(_store);

	var _babelTraverse = __webpack_require__(153);

	var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

	var _lodashObjectAssign = __webpack_require__(755);

	var _lodashObjectAssign2 = _interopRequireDefault(_lodashObjectAssign);

	var _lodashLangClone = __webpack_require__(520);

	var _lodashLangClone2 = _interopRequireDefault(_lodashLangClone);

	var GLOBAL_VISITOR_PROPS = ["enter", "exit"];

	var Plugin = (function (_Store) {
	  _inherits(Plugin, _Store);

	  function Plugin(plugin /*: Object*/, key /*:: ?: string*/) {
	    _classCallCheck(this, Plugin);

	    _Store.call(this);

	    this.initialized = false;
	    this.raw = _lodashObjectAssign2["default"]({}, plugin);
	    this.key = key;

	    this.manipulateOptions = this.take("manipulateOptions");
	    this.post = this.take("post");
	    this.pre = this.take("pre");
	    this.visitor = this.normaliseVisitor(_lodashLangClone2["default"](this.take("visitor")) || {});
	  }

	  Plugin.prototype.take = function take(key) {
	    var val = this.raw[key];
	    delete this.raw[key];
	    return val;
	  };

	  Plugin.prototype.chain = function chain(target, key) {
	    if (!target[key]) return this[key];
	    if (!this[key]) return target[key];

	    var fns /*: Array<?Function>*/ = [target[key], this[key]];

	    return function () {
	      var val = undefined;

	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      for (var _iterator = fns, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	        var _ref;

	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }

	        var fn = _ref;

	        if (fn) {
	          var ret = fn.apply(this, args);
	          if (ret != null) val = ret;
	        }
	      }
	      return val;
	    };
	  };

	  Plugin.prototype.maybeInherit = function maybeInherit(loc /*: string*/) {
	    var inherits = this.take("inherits");
	    if (!inherits) return;

	    inherits = _fileOptionsOptionManager2["default"].normalisePlugin(inherits, loc, "inherits");

	    this.manipulateOptions = this.chain(inherits, "manipulateOptions");
	    this.post = this.chain(inherits, "post");
	    this.pre = this.chain(inherits, "pre");
	    this.visitor = _babelTraverse2["default"].visitors.merge([inherits.visitor, this.visitor]);
	  };

	  /**
	   * We lazy initialise parts of a plugin that rely on contextual information such as
	   * position on disk and how it was specified.
	   */

	  Plugin.prototype.init = function init(loc /*: string*/, i /*: number*/) {
	    if (this.initialized) return;
	    this.initialized = true;

	    this.maybeInherit(loc);

	    for (var key in this.raw) {
	      throw new Error(messages.get("pluginInvalidProperty", loc, i, key));
	    }
	  };

	  Plugin.prototype.normaliseVisitor = function normaliseVisitor(visitor /*: Object*/) /*: Object*/ {
	    for (var _iterator2 = GLOBAL_VISITOR_PROPS, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var key = _ref2;

	      if (visitor[key]) {
	        throw new Error("Plugins aren't allowed to specify catch-all enter/exit handlers. Please target individual nodes.");
	      }
	    }

	    _babelTraverse2["default"].explode(visitor);
	    return visitor;
	  };

	  return Plugin;
	})(_store2["default"]);

	exports["default"] = Plugin;
	module.exports = exports["default"];

/***/ },
/* 731 */
/***/ function(module, exports, __webpack_require__) {

	/* @noflow */

	"use strict";

	var _getIterator = __webpack_require__(37)["default"];

	var _interopRequireDefault = __webpack_require__(5)["default"];

	exports.__esModule = true;
	exports.canCompile = canCompile;
	exports.list = list;
	exports.regexify = regexify;
	exports.arrayify = arrayify;
	exports.booleanify = booleanify;
	exports.shouldIgnore = shouldIgnore;

	var _lodashStringEscapeRegExp = __webpack_require__(2559);

	var _lodashStringEscapeRegExp2 = _interopRequireDefault(_lodashStringEscapeRegExp);

	var _lodashStringStartsWith = __webpack_require__(2560);

	var _lodashStringStartsWith2 = _interopRequireDefault(_lodashStringStartsWith);

	var _lodashLangIsBoolean = __webpack_require__(1339);

	var _lodashLangIsBoolean2 = _interopRequireDefault(_lodashLangIsBoolean);

	var _minimatch = __webpack_require__(2562);

	var _minimatch2 = _interopRequireDefault(_minimatch);

	var _lodashCollectionContains = __webpack_require__(2512);

	var _lodashCollectionContains2 = _interopRequireDefault(_lodashCollectionContains);

	var _lodashLangIsString = __webpack_require__(753);

	var _lodashLangIsString2 = _interopRequireDefault(_lodashLangIsString);

	var _lodashLangIsRegExp = __webpack_require__(1343);

	var _lodashLangIsRegExp2 = _interopRequireDefault(_lodashLangIsRegExp);

	var _path = __webpack_require__(175);

	var _path2 = _interopRequireDefault(_path);

	var _slash = __webpack_require__(1346);

	var _slash2 = _interopRequireDefault(_slash);

	var _util = __webpack_require__(30);

	exports.inherits = _util.inherits;
	exports.inspect = _util.inspect;

	/**
	 * Test if a filename ends with a compilable extension.
	 */

	function canCompile(filename /*: string*/, altExts /*:: ?: Array<string>*/) {
	  var exts = altExts || canCompile.EXTENSIONS;
	  var ext = _path2["default"].extname(filename);
	  return _lodashCollectionContains2["default"](exts, ext);
	}

	/**
	 * Default set of compilable extensions.
	 */

	canCompile.EXTENSIONS = [".js", ".jsx", ".es6", ".es"];

	/**
	 * Create an array from any value, splitting strings by ",".
	 */

	function list(val /*:: ?: string*/) /*: Array<string>*/ {
	  if (!val) {
	    return [];
	  } else if (Array.isArray(val)) {
	    return val;
	  } else if (typeof val === "string") {
	    return val.split(",");
	  } else {
	    return [val];
	  }
	}

	/**
	 * Create a RegExp from a string, array, or regexp.
	 */

	function regexify(val /*: any*/) /*: RegExp*/ {
	  if (!val) {
	    return new RegExp(/.^/);
	  }

	  if (Array.isArray(val)) {
	    val = new RegExp(val.map(_lodashStringEscapeRegExp2["default"]).join("|"), "i");
	  }

	  if (typeof val === "string") {
	    // normalise path separators
	    val = _slash2["default"](val);

	    // remove starting wildcards or relative separator if present
	    if (_lodashStringStartsWith2["default"](val, "./") || _lodashStringStartsWith2["default"](val, "*/")) val = val.slice(2);
	    if (_lodashStringStartsWith2["default"](val, "**/")) val = val.slice(3);

	    var regex = _minimatch2["default"].makeRe(val, { nocase: true });
	    return new RegExp(regex.source.slice(1, -1), "i");
	  }

	  if (_lodashLangIsRegExp2["default"](val)) {
	    return val;
	  }

	  throw new TypeError("illegal type for regexify");
	}

	/**
	 * Create an array from a boolean, string, or array, mapped by and optional function.
	 */

	function arrayify(val /*: any*/, mapFn /*:: ?: Function*/) /*: Array<any>*/ {
	  if (!val) return [];
	  if (_lodashLangIsBoolean2["default"](val)) return arrayify([val], mapFn);
	  if (_lodashLangIsString2["default"](val)) return arrayify(list(val), mapFn);

	  if (Array.isArray(val)) {
	    if (mapFn) val = val.map(mapFn);
	    return val;
	  }

	  return [val];
	}

	/**
	 * Makes boolean-like strings into booleans.
	 */

	function booleanify(val /*: any*/) /*: boolean | any*/ {
	  if (val === "true" || val == 1) {
	    return true;
	  }

	  if (val === "false" || val == 0 || !val) {
	    return false;
	  }

	  return val;
	}

	/**
	 * Tests if a filename should be ignored based on "ignore" and "only" options.
	 */

	function shouldIgnore(filename /*: string*/, ignore /*: Array<RegExp | Function>*/, only /*:: ?: Array<RegExp | Function>*/) /*: boolean*/ {
	  if (ignore === undefined) ignore = [];

	  filename = _slash2["default"](filename);

	  if (only) {
	    for (var _iterator = only, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var pattern = _ref;

	      if (_shouldIgnore(pattern, filename)) return false;
	    }
	    return true;
	  } else if (ignore.length) {
	    for (var _iterator2 = ignore, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var pattern = _ref2;

	      if (_shouldIgnore(pattern, filename)) return true;
	    }
	  }

	  return false;
	}

	/**
	 * Returns result of calling function with filename if pattern is a function.
	 * Otherwise returns result of matching pattern Regex with filename.
	 */

	function _shouldIgnore(pattern /*: Function | RegExp*/, filename /*: string*/) {
	  if (typeof pattern === "function") {
	    return pattern(filename);
	  } else {
	    return pattern.test(filename);
	  }
	}

/***/ },
/* 732 */
[7031, 2432],
/* 733 */
536,
/* 734 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 735 */
/***/ function(module, exports, __webpack_require__) {

	var ctx         = __webpack_require__(511)
	  , call        = __webpack_require__(2449)
	  , isArrayIter = __webpack_require__(2447)
	  , anObject    = __webpack_require__(420)
	  , toLength    = __webpack_require__(2456)
	  , getIterFn   = __webpack_require__(1311);
	module.exports = function(iterable, entries, fn, that){
	  var iterFn = getIterFn(iterable)
	    , f      = ctx(fn, that, entries ? 2 : 1)
	    , index  = 0
	    , length, step, iterator;
	  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
	    entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
	    call(iterator, f, step.value, entries);
	  }
	};

/***/ },
/* 736 */
[7064, 1305, 177, 739, 424, 513, 425, 2450, 515, 98, 178],
/* 737 */
[7066, 177, 107, 422],
/* 738 */
/***/ function(module, exports) {

	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};

/***/ },
/* 739 */
[7067, 424],
/* 740 */
/***/ function(module, exports) {

	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 741 */
[7084, 98, 423, 513, 421, 177, 739, 422, 1307, 515, 740, 178, 2451, 1302, 2446, 2448, 420, 426, 738, 1305],
/* 742 */
[7086, 1300, 5, 3, 1338, 2555, 153, 745, 16],
/* 743 */
[7106, 82, 1300, 37, 732, 5, 3, 517, 2487, 2483, 153, 1344, 176, 1318, 2485, 16],
/* 744 */
[7110, 2425],
/* 745 */
/***/ function(module, exports, __webpack_require__) {

	var require;var require;(function(f){if(true){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.babylon = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
	"use strict";

	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

	exports.__esModule = true;
	exports.parse = parse;

	var _parser = require("./parser");

	var _parser2 = _interopRequireDefault(_parser);

	require("./parser/util");

	require("./parser/statement");

	require("./parser/lval");

	require("./parser/expression");

	require("./parser/node");

	require("./parser/location");

	require("./parser/comments");

	var _tokenizerTypes = require("./tokenizer/types");

	require("./tokenizer");

	require("./tokenizer/context");

	var _pluginsFlow = require("./plugins/flow");

	var _pluginsFlow2 = _interopRequireDefault(_pluginsFlow);

	var _pluginsJsx = require("./plugins/jsx");

	var _pluginsJsx2 = _interopRequireDefault(_pluginsJsx);

	_parser.plugins.flow = _pluginsFlow2["default"];
	_parser.plugins.jsx = _pluginsJsx2["default"];

	function parse(input, options) {
	  return new _parser2["default"](options, input).parse();
	}

	exports.tokTypes = _tokenizerTypes.types;
	},{"./parser":5,"./parser/comments":3,"./parser/expression":4,"./parser/location":6,"./parser/lval":7,"./parser/node":8,"./parser/statement":9,"./parser/util":10,"./plugins/flow":11,"./plugins/jsx":12,"./tokenizer":15,"./tokenizer/context":14,"./tokenizer/types":17,"babel-runtime/helpers/interop-require-default":26}],2:[function(require,module,exports){
	// A second optional argument can be given to further configure
	// the parser process. These options are recognized:

	"use strict";

	exports.__esModule = true;
	exports.getOptions = getOptions;
	var defaultOptions = {
	  // Source type ("script" or "module") for different semantics
	  sourceType: "script",
	  // When enabled, a return at the top level is not considered an
	  // error.
	  allowReturnOutsideFunction: false,
	  // When enabled, import/export statements are not constrained to
	  // appearing at the top of the program.
	  allowImportExportEverywhere: false,
	  // TODO
	  allowSuperOutsideMethod: false,
	  // An array of plugins to enable
	  plugins: [],
	  // TODO
	  strictMode: null
	};

	exports.defaultOptions = defaultOptions;
	// Interpret and default an options object

	function getOptions(opts /*:: ?: Object*/) /*: Object*/ {
	  var options = {};
	  for (var key in defaultOptions) {
	    options[key] = opts && key in opts ? opts[key] : defaultOptions[key];
	  }
	  return options;
	}
	},{}],3:[function(require,module,exports){
	/* @flow */

	/**
	 * Based on the comment attachment algorithm used in espree and estraverse.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * * Redistributions of source code must retain the above copyright
	 *   notice, this list of conditions and the following disclaimer.
	 * * Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	"use strict";

	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

	var _index = require("./index");

	var _index2 = _interopRequireDefault(_index);

	function last(stack) {
	  return stack[stack.length - 1];
	}

	var pp = _index2["default"].prototype;

	pp.addComment = function (comment) {
	  this.state.trailingComments.push(comment);
	  this.state.leadingComments.push(comment);
	};

	pp.processComment = function (node) {
	  if (node.type === "Program" && node.body.length > 0) return;

	  var stack = this.state.commentStack;

	  var lastChild = undefined,
	      trailingComments = undefined,
	      i = undefined;

	  if (this.state.trailingComments.length > 0) {
	    // If the first comment in trailingComments comes after the
	    // current node, then we're good - all comments in the array will
	    // come after the node and so it's safe to add them as official
	    // trailingComments.
	    if (this.state.trailingComments[0].start >= node.end) {
	      trailingComments = this.state.trailingComments;
	      this.state.trailingComments = [];
	    } else {
	      // Otherwise, if the first comment doesn't come after the
	      // current node, that means we have a mix of leading and trailing
	      // comments in the array and that leadingComments contains the
	      // same items as trailingComments. Reset trailingComments to
	      // zero items and we'll handle this by evaluating leadingComments
	      // later.
	      this.state.trailingComments.length = 0;
	    }
	  } else {
	    var lastInStack = last(stack);
	    if (stack.length > 0 && lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {
	      trailingComments = lastInStack.trailingComments;
	      lastInStack.trailingComments = null;
	    }
	  }

	  // Eating the stack.
	  while (stack.length > 0 && last(stack).start >= node.start) {
	    lastChild = stack.pop();
	  }

	  if (lastChild) {
	    if (lastChild.leadingComments) {
	      if (lastChild !== node && last(lastChild.leadingComments).end <= node.start) {
	        node.leadingComments = lastChild.leadingComments;
	        lastChild.leadingComments = null;
	      } else {
	        // A leading comment for an anonymous class had been stolen by its first ClassMethod,
	        // so this takes back the leading comment.
	        // See also: https://github.com/eslint/espree/issues/158
	        for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {
	          if (lastChild.leadingComments[i].end <= node.start) {
	            node.leadingComments = lastChild.leadingComments.splice(0, i + 1);
	            break;
	          }
	        }
	      }
	    }
	  } else if (this.state.leadingComments.length > 0) {
	    if (last(this.state.leadingComments).end <= node.start) {
	      node.leadingComments = this.state.leadingComments;
	      this.state.leadingComments = [];
	    } else {
	      // https://github.com/eslint/espree/issues/2
	      //
	      // In special cases, such as return (without a value) and
	      // debugger, all comments will end up as leadingComments and
	      // will otherwise be eliminated. This step runs when the
	      // commentStack is empty and there are comments left
	      // in leadingComments.
	      //
	      // This loop figures out the stopping point between the actual
	      // leading and trailing comments by finding the location of the
	      // first comment that comes after the given node.
	      for (i = 0; i < this.state.leadingComments.length; i++) {
	        if (this.state.leadingComments[i].end > node.start) {
	          break;
	        }
	      }

	      // Split the array based on the location of the first comment
	      // that comes after the node. Keep in mind that this could
	      // result in an empty array, and if so, the array must be
	      // deleted.
	      node.leadingComments = this.state.leadingComments.slice(0, i);
	      if (node.leadingComments.length === 0) {
	        node.leadingComments = null;
	      }

	      // Similarly, trailing comments are attached later. The variable
	      // must be reset to null if there are no trailing comments.
	      trailingComments = this.state.leadingComments.slice(i);
	      if (trailingComments.length === 0) {
	        trailingComments = null;
	      }
	    }
	  }

	  if (trailingComments) {
	    if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {
	      node.innerComments = trailingComments;
	    } else {
	      node.trailingComments = trailingComments;
	    }
	  }

	  stack.push(node);
	};
	},{"./index":5,"babel-runtime/helpers/interop-require-default":26}],4:[function(require,module,exports){
	// A recursive descent parser operates by defining functions for all
	// syntactic elements, and recursively calling those, each function
	// advancing the input stream and returning an AST node. Precedence
	// of constructs (for example, the fact that `!x[1]` means `!(x[1])`
	// instead of `(!x)[1]` is handled by the fact that the parser
	// function that parses unary prefix operators is called first, and
	// in turn calls the function that parses `[]` subscripts — that
	// way, it'll receive the node for `x[1]` already parsed, and wraps
	// *that* in the unary operator node.
	//
	// Acorn uses an [operator precedence parser][opp] to handle binary
	// operator precedence, because it is much more compact than using
	// the technique outlined above, which uses different, nesting
	// functions to specify precedence, for all of the ten binary
	// precedence levels that JavaScript defines.
	//
	// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser

	"use strict";

	var _Object$create = require("babel-runtime/core-js/object/create")["default"];

	var _getIterator = require("babel-runtime/core-js/get-iterator")["default"];

	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

	var _tokenizerTypes = require("../tokenizer/types");

	var _index = require("./index");

	var _index2 = _interopRequireDefault(_index);

	var _utilIdentifier = require("../util/identifier");

	var pp = _index2["default"].prototype;

	// Check if property name clashes with already added.
	// Object/class getters and setters are not allowed to clash —
	// either with each other or with an init property — and in
	// strict mode, init properties are also not allowed to be repeated.

	pp.checkPropClash = function (prop, propHash) {
	  if (prop.computed) return;

	  var key = prop.key;
	  var name = undefined;
	  switch (key.type) {
	    case "Identifier":
	      name = key.name;
	      break;

	    case "StringLiteral":
	    case "NumericLiteral":
	      name = String(key.value);
	      break;

	    default:
	      return;
	  }

	  if (name === "__proto__" && prop.kind === "init") {
	    if (propHash.proto) this.raise(key.start, "Redefinition of __proto__ property");
	    propHash.proto = true;
	  }
	};

	// ### Expression parsing

	// These nest, from the most general expression type at the top to
	// 'atomic', nondivisible expression types at the bottom. Most of
	// the functions will simply let the function (s) below them parse,
	// and, *if* the syntactic construct they handle is present, wrap
	// the AST node that the inner parser gave them in another node.

	// Parse a full expression. The optional arguments are used to
	// forbid the `in` operator (in for loops initalization expressions)
	// and provide reference for storing '=' operator inside shorthand
	// property assignment in contexts where both object expression
	// and object pattern might appear (so it's possible to raise
	// delayed syntax error at correct position).

	pp.parseExpression = function (noIn, refShorthandDefaultPos) {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var expr = this.parseMaybeAssign(noIn, refShorthandDefaultPos);
	  if (this.match(_tokenizerTypes.types.comma)) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.expressions = [expr];
	    while (this.eat(_tokenizerTypes.types.comma)) {
	      node.expressions.push(this.parseMaybeAssign(noIn, refShorthandDefaultPos));
	    }
	    this.toReferencedList(node.expressions);
	    return this.finishNode(node, "SequenceExpression");
	  }
	  return expr;
	};

	// Parse an assignment expression. This includes applications of
	// operators like `+=`.

	pp.parseMaybeAssign = function (noIn, refShorthandDefaultPos, afterLeftParse) {
	  if (this.match(_tokenizerTypes.types._yield) && this.state.inGenerator) {
	    return this.parseYield();
	  }

	  var failOnShorthandAssign = undefined;
	  if (refShorthandDefaultPos) {
	    failOnShorthandAssign = false;
	  } else {
	    refShorthandDefaultPos = { start: 0 };
	    failOnShorthandAssign = true;
	  }

	  var startPos = this.state.start;
	  var startLoc = this.state.startLoc;

	  if (this.match(_tokenizerTypes.types.parenL) || this.match(_tokenizerTypes.types.name)) {
	    this.state.potentialArrowAt = this.state.start;
	  }

	  var left = this.parseMaybeConditional(noIn, refShorthandDefaultPos);
	  if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc);
	  if (this.state.type.isAssign) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.operator = this.state.value;
	    node.left = this.match(_tokenizerTypes.types.eq) ? this.toAssignable(left) : left;
	    refShorthandDefaultPos.start = 0; // reset because shorthand default was used correctly

	    this.checkLVal(left);

	    if (left.extra && left.extra.parenthesized) {
	      var errorMsg = undefined;
	      if (left.type === "ObjectPattern") {
	        errorMsg = "`({a}) = 0` use `({a} = 0)`";
	      } else if (left.type === "ArrayPattern") {
	        errorMsg = "`([a]) = 0` use `([a] = 0)`";
	      }
	      if (errorMsg) {
	        this.raise(left.start, "You're trying to assign to a parenthesized expression, eg. instead of " + errorMsg);
	      }
	    }

	    this.next();
	    node.right = this.parseMaybeAssign(noIn);
	    return this.finishNode(node, "AssignmentExpression");
	  } else if (failOnShorthandAssign && refShorthandDefaultPos.start) {
	    this.unexpected(refShorthandDefaultPos.start);
	  }

	  return left;
	};

	// Parse a ternary conditional (`?:`) operator.

	pp.parseMaybeConditional = function (noIn, refShorthandDefaultPos) {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var expr = this.parseExprOps(noIn, refShorthandDefaultPos);
	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;
	  if (this.eat(_tokenizerTypes.types.question)) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.test = expr;
	    node.consequent = this.parseMaybeAssign();
	    this.expect(_tokenizerTypes.types.colon);
	    node.alternate = this.parseMaybeAssign(noIn);
	    return this.finishNode(node, "ConditionalExpression");
	  }
	  return expr;
	};

	// Start the precedence parser.

	pp.parseExprOps = function (noIn, refShorthandDefaultPos) {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var expr = this.parseMaybeUnary(refShorthandDefaultPos);
	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
	    return expr;
	  } else {
	    return this.parseExprOp(expr, startPos, startLoc, -1, noIn);
	  }
	};

	// Parse binary operators with the operator precedence parsing
	// algorithm. `left` is the left-hand side of the operator.
	// `minPrec` provides context that allows the function to stop and
	// defer further parser to one of its callers when it encounters an
	// operator that has a lower precedence than the set it is parsing.

	pp.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {
	  var prec = this.state.type.binop;
	  if (prec != null && (!noIn || !this.match(_tokenizerTypes.types._in))) {
	    if (prec > minPrec) {
	      var node = this.startNodeAt(leftStartPos, leftStartLoc);
	      node.left = left;
	      node.operator = this.state.value;

	      if (node.operator === "**" && left.type === "UnaryExpression" && left.extra && !left.extra.parenthesizedArgument) {
	        this.raise(left.argument.start, "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.");
	      }

	      var op = this.state.type;
	      this.next();

	      var startPos = this.state.start;
	      var startLoc = this.state.startLoc;
	      node.right = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec, noIn);

	      this.finishNode(node, op === _tokenizerTypes.types.logicalOR || op === _tokenizerTypes.types.logicalAND ? "LogicalExpression" : "BinaryExpression");
	      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);
	    }
	  }
	  return left;
	};

	// Parse unary operators, both prefix and postfix.

	pp.parseMaybeUnary = function (refShorthandDefaultPos) {
	  if (this.state.type.prefix) {
	    var node = this.startNode();
	    var update = this.match(_tokenizerTypes.types.incDec);
	    node.operator = this.state.value;
	    node.prefix = true;
	    this.next();

	    var argType = this.state.type;
	    this.addExtra(node, "parenthesizedArgument", argType === _tokenizerTypes.types.parenL);
	    node.argument = this.parseMaybeUnary();

	    if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
	      this.unexpected(refShorthandDefaultPos.start);
	    }

	    if (update) {
	      this.checkLVal(node.argument);
	    } else if (this.state.strict && node.operator === "delete" && node.argument.type === "Identifier") {
	      this.raise(node.start, "Deleting local variable in strict mode");
	    }

	    return this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
	  }

	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var expr = this.parseExprSubscripts(refShorthandDefaultPos);
	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;
	  while (this.state.type.postfix && !this.canInsertSemicolon()) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.operator = this.state.value;
	    node.prefix = false;
	    node.argument = expr;
	    this.checkLVal(expr);
	    this.next();
	    expr = this.finishNode(node, "UpdateExpression");
	  }
	  return expr;
	};

	// Parse call, dot, and `[]`-subscript expressions.

	pp.parseExprSubscripts = function (refShorthandDefaultPos) {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var potentialArrowAt = this.state.potentialArrowAt;
	  var expr = this.parseExprAtom(refShorthandDefaultPos);

	  if (expr.type === "ArrowFunctionExpression" && expr.start === potentialArrowAt) {
	    return expr;
	  }

	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
	    return expr;
	  }

	  return this.parseSubscripts(expr, startPos, startLoc);
	};

	pp.parseSubscripts = function (base, startPos, startLoc, noCalls) {
	  for (;;) {
	    if (!noCalls && this.eat(_tokenizerTypes.types.doubleColon)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.object = base;
	      node.callee = this.parseNoCallExpr();
	      return this.parseSubscripts(this.finishNode(node, "BindExpression"), startPos, startLoc, noCalls);
	    } else if (this.eat(_tokenizerTypes.types.dot)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.object = base;
	      node.property = this.parseIdentifier(true);
	      node.computed = false;
	      base = this.finishNode(node, "MemberExpression");
	    } else if (this.eat(_tokenizerTypes.types.bracketL)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.object = base;
	      node.property = this.parseExpression();
	      node.computed = true;
	      this.expect(_tokenizerTypes.types.bracketR);
	      base = this.finishNode(node, "MemberExpression");
	    } else if (!noCalls && this.match(_tokenizerTypes.types.parenL)) {
	      var possibleAsync = this.state.potentialArrowAt === base.start && base.type === "Identifier" && base.name === "async" && !this.canInsertSemicolon();
	      this.next();

	      var node = this.startNodeAt(startPos, startLoc);
	      node.callee = base;
	      node.arguments = this.parseCallExpressionArguments(_tokenizerTypes.types.parenR, this.hasPlugin("trailingFunctionCommas"), possibleAsync);
	      base = this.finishNode(node, "CallExpression");

	      if (possibleAsync && this.shouldParseAsyncArrow()) {
	        return this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);
	      } else {
	        this.toReferencedList(node.arguments);
	      }
	    } else if (this.match(_tokenizerTypes.types.backQuote)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.tag = base;
	      node.quasi = this.parseTemplate();
	      base = this.finishNode(node, "TaggedTemplateExpression");
	    } else {
	      return base;
	    }
	  }
	};

	pp.parseCallExpressionArguments = function (close, allowTrailingComma, possibleAsyncArrow) {
	  var innerParenStart = undefined;

	  var elts = [],
	      first = true;
	  while (!this.eat(close)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (allowTrailingComma && this.eat(close)) break;
	    }

	    // we need to make sure that if this is an async arrow functions, that we don't allow inner parens inside the params
	    if (this.match(_tokenizerTypes.types.parenL) && !innerParenStart) {
	      innerParenStart = this.state.start;
	    }

	    elts.push(this.parseExprListItem());
	  }

	  // we found an async arrow function so let's not allow any inner parens
	  if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {
	    this.unexpected();
	  }

	  return elts;
	};

	pp.shouldParseAsyncArrow = function () {
	  return this.match(_tokenizerTypes.types.arrow);
	};

	pp.parseAsyncArrowFromCallExpression = function (node, call) {
	  if (!this.hasPlugin("asyncFunctions")) this.unexpected();
	  this.expect(_tokenizerTypes.types.arrow);
	  return this.parseArrowExpression(node, call.arguments, true);
	};

	// Parse a no-call expression (like argument of `new` or `::` operators).

	pp.parseNoCallExpr = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
	};

	// Parse an atomic expression — either a single token that is an
	// expression, an expression started by a keyword like `function` or
	// `new`, or an expression wrapped in punctuation like `()`, `[]`,
	// or `{}`.

	pp.parseExprAtom = function (refShorthandDefaultPos) {
	  var node = undefined,
	      canBeArrow = this.state.potentialArrowAt === this.state.start;
	  switch (this.state.type) {
	    case _tokenizerTypes.types._super:
	      if (!this.state.inMethod && !this.options.allowSuperOutsideMethod) {
	        this.raise(this.state.start, "'super' outside of function or class");
	      }

	      node = this.startNode();
	      this.next();
	      if (!this.match(_tokenizerTypes.types.parenL) && !this.match(_tokenizerTypes.types.bracketL) && !this.match(_tokenizerTypes.types.dot)) {
	        this.unexpected();
	      }
	      if (this.match(_tokenizerTypes.types.parenL) && this.state.inMethod !== "constructor" && !this.options.allowSuperOutsideMethod) {
	        this.raise(node.start, "super() outside of class constructor");
	      }
	      return this.finishNode(node, "Super");

	    case _tokenizerTypes.types._this:
	      node = this.startNode();
	      this.next();
	      return this.finishNode(node, "ThisExpression");

	    case _tokenizerTypes.types._yield:
	      if (this.state.inGenerator) this.unexpected();

	    case _tokenizerTypes.types.name:
	      node = this.startNode();
	      var allowAwait = this.hasPlugin("asyncFunctions") && this.state.value === "await" && this.state.inAsync;
	      var allowYield = this.shouldAllowYieldIdentifier();
	      var id = this.parseIdentifier(allowAwait || allowYield);

	      if (this.hasPlugin("asyncFunctions")) {
	        if (id.name === "await") {
	          if (this.state.inAsync || this.inModule) {
	            return this.parseAwait(node);
	          }
	        } else if (id.name === "async" && this.match(_tokenizerTypes.types._function) && !this.canInsertSemicolon()) {
	          this.next();
	          return this.parseFunction(node, false, false, true);
	        } else if (canBeArrow && id.name === "async" && this.match(_tokenizerTypes.types.name)) {
	          var params = [this.parseIdentifier()];
	          this.expect(_tokenizerTypes.types.arrow);
	          // let foo = bar => {};
	          return this.parseArrowExpression(node, params, true);
	        }
	      }

	      if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokenizerTypes.types.arrow)) {
	        return this.parseArrowExpression(node, [id]);
	      }

	      return id;

	    case _tokenizerTypes.types._do:
	      if (this.hasPlugin("doExpressions")) {
	        var _node = this.startNode();
	        this.next();
	        var oldInFunction = this.state.inFunction;
	        var oldLabels = this.state.labels;
	        this.state.labels = [];
	        this.state.inFunction = false;
	        _node.body = this.parseBlock(false, true);
	        this.state.inFunction = oldInFunction;
	        this.state.labels = oldLabels;
	        return this.finishNode(_node, "DoExpression");
	      }

	    case _tokenizerTypes.types.regexp:
	      var value = this.state.value;
	      node = this.parseLiteral(value.value, "RegExpLiteral");
	      node.pattern = value.pattern;
	      node.flags = value.flags;
	      return node;

	    case _tokenizerTypes.types.num:
	      return this.parseLiteral(this.state.value, "NumericLiteral");

	    case _tokenizerTypes.types.string:
	      return this.parseLiteral(this.state.value, "StringLiteral");

	    case _tokenizerTypes.types._null:
	      node = this.startNode();
	      this.next();
	      return this.finishNode(node, "NullLiteral");

	    case _tokenizerTypes.types._true:case _tokenizerTypes.types._false:
	      node = this.startNode();
	      node.value = this.match(_tokenizerTypes.types._true);
	      this.next();
	      return this.finishNode(node, "BooleanLiteral");

	    case _tokenizerTypes.types.parenL:
	      return this.parseParenAndDistinguishExpression(null, null, canBeArrow);

	    case _tokenizerTypes.types.bracketL:
	      node = this.startNode();
	      this.next();
	      node.elements = this.parseExprList(_tokenizerTypes.types.bracketR, true, true, refShorthandDefaultPos);
	      this.toReferencedList(node.elements);
	      return this.finishNode(node, "ArrayExpression");

	    case _tokenizerTypes.types.braceL:
	      return this.parseObj(false, refShorthandDefaultPos);

	    case _tokenizerTypes.types._function:
	      return this.parseFunctionExpression();

	    case _tokenizerTypes.types.at:
	      this.parseDecorators();

	    case _tokenizerTypes.types._class:
	      node = this.startNode();
	      this.takeDecorators(node);
	      return this.parseClass(node, false);

	    case _tokenizerTypes.types._new:
	      return this.parseNew();

	    case _tokenizerTypes.types.backQuote:
	      return this.parseTemplate();

	    case _tokenizerTypes.types.doubleColon:
	      node = this.startNode();
	      this.next();
	      node.object = null;
	      var callee = node.callee = this.parseNoCallExpr();
	      if (callee.type === "MemberExpression") {
	        return this.finishNode(node, "BindExpression");
	      } else {
	        this.raise(callee.start, "Binding should be performed on object property.");
	      }

	    default:
	      this.unexpected();
	  }
	};

	pp.parseFunctionExpression = function () {
	  var node = this.startNode();
	  var meta = this.parseIdentifier(true);
	  if (this.state.inGenerator && this.eat(_tokenizerTypes.types.dot) && this.hasPlugin("functionSent")) {
	    return this.parseMetaProperty(node, meta, "sent");
	  } else {
	    return this.parseFunction(node, false);
	  }
	};

	pp.parseMetaProperty = function (node, meta, propertyName) {
	  node.meta = meta;
	  node.property = this.parseIdentifier(true);

	  if (node.property.name !== propertyName) {
	    this.raise(node.property.start, "The only valid meta property for new is " + meta.name + "." + propertyName);
	  }

	  return this.finishNode(node, "MetaProperty");
	};

	pp.parseLiteral = function (value, type) {
	  var node = this.startNode();
	  this.addExtra(node, "rawValue", value);
	  this.addExtra(node, "raw", this.input.slice(this.state.start, this.state.end));
	  node.value = value;
	  this.next();
	  return this.finishNode(node, type);
	};

	pp.parseParenExpression = function () {
	  this.expect(_tokenizerTypes.types.parenL);
	  var val = this.parseExpression();
	  this.expect(_tokenizerTypes.types.parenR);
	  return val;
	};

	pp.parseParenAndDistinguishExpression = function (startPos, startLoc, canBeArrow, isAsync) {
	  startPos = startPos || this.state.start;
	  startLoc = startLoc || this.state.startLoc;

	  var val = undefined;
	  this.next();

	  var innerStartPos = this.state.start,
	      innerStartLoc = this.state.startLoc;
	  var exprList = [],
	      first = true;
	  var refShorthandDefaultPos = { start: 0 },
	      spreadStart = undefined,
	      optionalCommaStart = undefined;
	  while (!this.match(_tokenizerTypes.types.parenR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (this.match(_tokenizerTypes.types.parenR) && this.hasPlugin("trailingFunctionCommas")) {
	        optionalCommaStart = this.state.start;
	        break;
	      }
	    }

	    if (this.match(_tokenizerTypes.types.ellipsis)) {
	      var spreadNodeStartPos = this.state.start,
	          spreadNodeStartLoc = this.state.startLoc;
	      spreadStart = this.state.start;
	      exprList.push(this.parseParenItem(this.parseRest(), spreadNodeStartLoc, spreadNodeStartPos));
	      break;
	    } else {
	      exprList.push(this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem));
	    }
	  }

	  var innerEndPos = this.state.start;
	  var innerEndLoc = this.state.startLoc;
	  this.expect(_tokenizerTypes.types.parenR);

	  if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokenizerTypes.types.arrow)) {
	    for (var _i = 0; _i < exprList.length; _i++) {
	      var param = exprList[_i];
	      if (param.extra && param.extra.parenthesized) this.unexpected(param.extra.parenStart);
	    }

	    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, isAsync);
	  }

	  if (!exprList.length) {
	    if (isAsync) {
	      return;
	    } else {
	      this.unexpected(this.state.lastTokStart);
	    }
	  }
	  if (optionalCommaStart) this.unexpected(optionalCommaStart);
	  if (spreadStart) this.unexpected(spreadStart);
	  if (refShorthandDefaultPos.start) this.unexpected(refShorthandDefaultPos.start);

	  if (exprList.length > 1) {
	    val = this.startNodeAt(innerStartPos, innerStartLoc);
	    val.expressions = exprList;
	    this.toReferencedList(val.expressions);
	    this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
	  } else {
	    val = exprList[0];
	  }

	  this.addExtra(val, "parenthesized", true);
	  this.addExtra(val, "parenStart", startPos);

	  return val;
	};

	pp.parseParenItem = function (node) {
	  return node;
	};

	// New's precedence is slightly tricky. It must allow its argument
	// to be a `[]` or dot subscript expression, but not a call — at
	// least, not without wrapping it in parentheses. Thus, it uses the

	pp.parseNew = function () {
	  var node = this.startNode();
	  var meta = this.parseIdentifier(true);

	  if (this.eat(_tokenizerTypes.types.dot)) {
	    return this.parseMetaProperty(node, meta, "target");
	  }

	  node.callee = this.parseNoCallExpr();

	  if (this.eat(_tokenizerTypes.types.parenL)) {
	    node.arguments = this.parseExprList(_tokenizerTypes.types.parenR, this.hasPlugin("trailingFunctionCommas"));
	    this.toReferencedList(node.arguments);
	  } else {
	    node.arguments = [];
	  }

	  return this.finishNode(node, "NewExpression");
	};

	// Parse template expression.

	pp.parseTemplateElement = function () {
	  var elem = this.startNode();
	  elem.value = {
	    raw: this.input.slice(this.state.start, this.state.end).replace(/\r\n?/g, "\n"),
	    cooked: this.state.value
	  };
	  this.next();
	  elem.tail = this.match(_tokenizerTypes.types.backQuote);
	  return this.finishNode(elem, "TemplateElement");
	};

	pp.parseTemplate = function () {
	  var node = this.startNode();
	  this.next();
	  node.expressions = [];
	  var curElt = this.parseTemplateElement();
	  node.quasis = [curElt];
	  while (!curElt.tail) {
	    this.expect(_tokenizerTypes.types.dollarBraceL);
	    node.expressions.push(this.parseExpression());
	    this.expect(_tokenizerTypes.types.braceR);
	    node.quasis.push(curElt = this.parseTemplateElement());
	  }
	  this.next();
	  return this.finishNode(node, "TemplateLiteral");
	};

	// Parse an object literal or binding pattern.

	pp.parseObj = function (isPattern, refShorthandDefaultPos) {
	  var decorators = [];
	  var propHash = _Object$create(null);
	  var first = true;
	  var node = this.startNode();

	  node.properties = [];
	  this.next();

	  while (!this.eat(_tokenizerTypes.types.braceR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (this.eat(_tokenizerTypes.types.braceR)) break;
	    }

	    while (this.match(_tokenizerTypes.types.at)) {
	      decorators.push(this.parseDecorator());
	    }

	    var prop = this.startNode(),
	        isGenerator = false,
	        isAsync = false,
	        startPos = undefined,
	        startLoc = undefined;
	    if (decorators.length) {
	      prop.decorators = decorators;
	      decorators = [];
	    }

	    if (this.hasPlugin("objectRestSpread") && this.match(_tokenizerTypes.types.ellipsis)) {
	      prop = this.parseSpread();
	      prop.type = isPattern ? "RestProperty" : "SpreadProperty";
	      node.properties.push(prop);
	      continue;
	    }

	    prop.method = false;
	    prop.shorthand = false;

	    if (isPattern || refShorthandDefaultPos) {
	      startPos = this.state.start;
	      startLoc = this.state.startLoc;
	    }

	    if (!isPattern) {
	      isGenerator = this.eat(_tokenizerTypes.types.star);
	    }

	    if (!isPattern && this.hasPlugin("asyncFunctions") && this.isContextual("async")) {
	      if (isGenerator) this.unexpected();

	      var asyncId = this.parseIdentifier();
	      if (this.match(_tokenizerTypes.types.colon) || this.match(_tokenizerTypes.types.parenL) || this.match(_tokenizerTypes.types.braceR)) {
	        prop.key = asyncId;
	      } else {
	        isAsync = true;
	        if (this.hasPlugin("asyncGenerators")) isGenerator = this.eat(_tokenizerTypes.types.star);
	        this.parsePropertyName(prop);
	      }
	    } else {
	      this.parsePropertyName(prop);
	    }

	    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos);
	    this.checkPropClash(prop, propHash);

	    if (prop.shorthand) {
	      this.addExtra(prop, "shorthand", true);
	    }

	    node.properties.push(prop);
	  }

	  if (decorators.length) {
	    this.raise(this.state.start, "You have trailing decorators with no property");
	  }

	  return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
	};

	pp.parseObjPropValue = function (prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos) {
	  if (isAsync || isGenerator || this.match(_tokenizerTypes.types.parenL)) {
	    if (isPattern) this.unexpected();
	    prop.kind = "method";
	    prop.method = true;
	    this.parseMethod(prop, isGenerator, isAsync);
	    return this.finishNode(prop, "ObjectMethod");
	  }

	  if (this.eat(_tokenizerTypes.types.colon)) {
	    prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssign(false, refShorthandDefaultPos);
	    return this.finishNode(prop, "ObjectProperty");
	  }

	  if (!prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && !this.match(_tokenizerTypes.types.comma) && !this.match(_tokenizerTypes.types.braceR)) {
	    if (isGenerator || isAsync || isPattern) this.unexpected();
	    prop.kind = prop.key.name;
	    this.parsePropertyName(prop);
	    this.parseMethod(prop, false);
	    var paramCount = prop.kind === "get" ? 0 : 1;
	    if (prop.params.length !== paramCount) {
	      var start = prop.start;
	      if (prop.kind === "get") {
	        this.raise(start, "getter should have no params");
	      } else {
	        this.raise(start, "setter should have exactly one param");
	      }
	    }
	    return this.finishNode(prop, "ObjectMethod");
	  }

	  if (!prop.computed && prop.key.type === "Identifier") {
	    if (isPattern) {
	      var illegalBinding = this.isKeyword(prop.key.name);
	      if (!illegalBinding && this.state.strict) {
	        illegalBinding = _utilIdentifier.reservedWords.strictBind(prop.key.name) || _utilIdentifier.reservedWords.strict(prop.key.name);
	      }
	      if (illegalBinding) {
	        this.raise(prop.key.start, "Binding " + prop.key.name);
	      }
	      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());
	    } else if (this.match(_tokenizerTypes.types.eq) && refShorthandDefaultPos) {
	      if (!refShorthandDefaultPos.start) {
	        refShorthandDefaultPos.start = this.state.start;
	      }
	      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());
	    } else {
	      prop.value = prop.key.__clone();
	    }
	    prop.shorthand = true;
	    return this.finishNode(prop, "ObjectProperty");
	  }

	  this.unexpected();
	};

	pp.parsePropertyName = function (prop) {
	  if (this.eat(_tokenizerTypes.types.bracketL)) {
	    prop.computed = true;
	    prop.key = this.parseMaybeAssign();
	    this.expect(_tokenizerTypes.types.bracketR);
	    return prop.key;
	  } else {
	    prop.computed = false;
	    return prop.key = this.match(_tokenizerTypes.types.num) || this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.parseIdentifier(true);
	  }
	};

	// Initialize empty function node.

	pp.initFunction = function (node, isAsync) {
	  node.id = null;
	  node.generator = false;
	  node.expression = false;
	  if (this.hasPlugin("asyncFunctions")) {
	    node.async = !!isAsync;
	  }
	};

	// Parse object or class method.

	pp.parseMethod = function (node, isGenerator, isAsync) {
	  var oldInMethod = this.state.inMethod;
	  this.state.inMethod = node.kind || true;
	  this.initFunction(node, isAsync);
	  this.expect(_tokenizerTypes.types.parenL);
	  node.params = this.parseBindingList(_tokenizerTypes.types.parenR, false, this.hasPlugin("trailingFunctionCommas"));
	  node.generator = isGenerator;
	  this.parseFunctionBody(node);
	  this.state.inMethod = oldInMethod;
	  return node;
	};

	// Parse arrow function expression with given parameters.

	pp.parseArrowExpression = function (node, params, isAsync) {
	  this.initFunction(node, isAsync);
	  node.params = this.toAssignableList(params, true);
	  this.parseFunctionBody(node, true);
	  return this.finishNode(node, "ArrowFunctionExpression");
	};

	// Parse function body and check parameters.

	pp.parseFunctionBody = function (node, allowExpression) {
	  var isExpression = allowExpression && !this.match(_tokenizerTypes.types.braceL);

	  var oldInAsync = this.state.inAsync;
	  this.state.inAsync = node.async;
	  if (isExpression) {
	    node.body = this.parseMaybeAssign();
	    node.expression = true;
	  } else {
	    // Start a new scope with regard to labels and the `inFunction`
	    // flag (restore them to their old value afterwards).
	    var oldInFunc = this.state.inFunction,
	        oldInGen = this.state.inGenerator,
	        oldLabels = this.state.labels;
	    this.state.inFunction = true;this.state.inGenerator = node.generator;this.state.labels = [];
	    node.body = this.parseBlock(true);
	    node.expression = false;
	    this.state.inFunction = oldInFunc;this.state.inGenerator = oldInGen;this.state.labels = oldLabels;
	  }
	  this.state.inAsync = oldInAsync;

	  // If this is a strict mode function, verify that argument names
	  // are not repeated, and it does not try to bind the words `eval`
	  // or `arguments`.
	  var checkLVal = this.state.strict;
	  var checkLValStrict = false;
	  var isStrict = false;

	  // arrow function
	  if (allowExpression) checkLVal = true;

	  // normal function
	  if (!isExpression && node.body.directives.length) {
	    for (var _iterator = (node.body.directives /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i2 >= _iterator.length) break;
	        _ref = _iterator[_i2++];
	      } else {
	        _i2 = _iterator.next();
	        if (_i2.done) break;
	        _ref = _i2.value;
	      }

	      var directive = _ref;

	      if (directive.value.value === "use strict") {
	        isStrict = true;
	        checkLVal = true;
	        checkLValStrict = true;
	        break;
	      }
	    }
	  }

	  //
	  if (isStrict && node.id && node.id.type === "Identifier" && node.id.name === "yield") {
	    this.raise(node.id.start, "Binding yield in strict mode");
	  }

	  if (checkLVal) {
	    var nameHash = _Object$create(null);
	    var oldStrict = this.state.strict;
	    if (checkLValStrict) this.state.strict = true;
	    if (node.id) {
	      this.checkLVal(node.id, true);
	    }
	    for (var _iterator2 = (node.params /*: Array<Object>*/), _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i3 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i3++];
	      } else {
	        _i3 = _iterator2.next();
	        if (_i3.done) break;
	        _ref2 = _i3.value;
	      }

	      var param = _ref2;

	      this.checkLVal(param, true, nameHash);
	    }
	    this.state.strict = oldStrict;
	  }
	};

	// Parses a comma-separated list of expressions, and returns them as
	// an array. `close` is the token type that ends the list, and
	// `allowEmpty` can be turned on to allow subsequent commas with
	// nothing in between them to be parsed as `null` (which is needed
	// for array literals).

	pp.parseExprList = function (close, allowTrailingComma, allowEmpty, refShorthandDefaultPos) {
	  var elts = [],
	      first = true;
	  while (!this.eat(close)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (allowTrailingComma && this.eat(close)) break;
	    }

	    elts.push(this.parseExprListItem(allowEmpty, refShorthandDefaultPos));
	  }
	  return elts;
	};

	pp.parseExprListItem = function (allowEmpty, refShorthandDefaultPos) {
	  var elt = undefined;
	  if (allowEmpty && this.match(_tokenizerTypes.types.comma)) {
	    elt = null;
	  } else if (this.match(_tokenizerTypes.types.ellipsis)) {
	    elt = this.parseSpread(refShorthandDefaultPos);
	  } else {
	    elt = this.parseMaybeAssign(false, refShorthandDefaultPos);
	  }
	  return elt;
	};

	// Parse the next token as an identifier. If `liberal` is true (used
	// when parsing properties), it will also convert keywords into
	// identifiers.

	pp.parseIdentifier = function (liberal) {
	  var node = this.startNode();

	  if (this.match(_tokenizerTypes.types.name)) {
	    if (!liberal && this.state.strict && _utilIdentifier.reservedWords.strict(this.state.value)) {
	      this.raise(this.state.start, "The keyword '" + this.state.value + "' is reserved");
	    }

	    node.name = this.state.value;
	  } else if (liberal && this.state.type.keyword) {
	    node.name = this.state.type.keyword;
	  } else {
	    this.unexpected();
	  }

	  if (!liberal && node.name === "await" && this.state.inAsync) {
	    this.raise(node.start, "invalid use of await inside of an async function");
	  }

	  this.next();
	  return this.finishNode(node, "Identifier");
	};

	// Parses await expression inside async function.

	pp.parseAwait = function (node) {
	  if (!this.state.inAsync) {
	    this.unexpected();
	  }
	  if (this.isLineTerminator()) {
	    this.unexpected();
	  }
	  if (this.match(_tokenizerTypes.types.star)) {
	    this.raise(node.start, "await* has been removed from the async functions proposal. Use Promise.all() instead.");
	  }
	  node.argument = this.parseMaybeUnary();
	  return this.finishNode(node, "AwaitExpression");
	};

	// Parses yield expression inside generator.

	pp.parseYield = function () {
	  var node = this.startNode();
	  this.next();
	  if (this.match(_tokenizerTypes.types.semi) || this.canInsertSemicolon() || !this.match(_tokenizerTypes.types.star) && !this.state.type.startsExpr) {
	    node.delegate = false;
	    node.argument = null;
	  } else {
	    node.delegate = this.eat(_tokenizerTypes.types.star);
	    node.argument = this.parseMaybeAssign();
	  }
	  return this.finishNode(node, "YieldExpression");
	};
	},{"../tokenizer/types":17,"../util/identifier":18,"./index":5,"babel-runtime/core-js/get-iterator":21,"babel-runtime/core-js/object/create":22,"babel-runtime/helpers/interop-require-default":26}],5:[function(require,module,exports){
	/* @noflow */

	"use strict";

	var _inherits = require("babel-runtime/helpers/inherits")["default"];

	var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

	var _getIterator = require("babel-runtime/core-js/get-iterator")["default"];

	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

	exports.__esModule = true;

	var _utilIdentifier = require("../util/identifier");

	var _options = require("../options");

	var _tokenizer = require("../tokenizer");

	var _tokenizer2 = _interopRequireDefault(_tokenizer);

	var plugins = {};

	exports.plugins = plugins;

	var Parser = (function (_Tokenizer) {
	  _inherits(Parser, _Tokenizer);

	  function Parser(options, input /*: string*/) {
	    _classCallCheck(this, Parser);

	    options = _options.getOptions(options);
	    _Tokenizer.call(this, options, input);

	    this.options = options;
	    this.inModule = this.options.sourceType === "module";
	    this.isReservedWord = _utilIdentifier.reservedWords[6];
	    this.input = input;
	    this.plugins = this.loadPlugins(this.options.plugins);

	    // If enabled, skip leading hashbang line.
	    if (this.state.pos === 0 && this.input[0] === "#" && this.input[1] === "!") {
	      this.skipLineComment(2);
	    }
	  }

	  Parser.prototype.hasPlugin = function hasPlugin(name /*: string*/) /*: boolean*/ {
	    return !!(this.plugins["*"] || this.plugins[name]);
	  };

	  Parser.prototype.extend = function extend(name /*: string*/, f /*: Function*/) {
	    this[name] = f(this[name]);
	  };

	  Parser.prototype.loadPlugins = function loadPlugins(plugins /*: Array<string>*/) {
	    var pluginMap = {};

	    if (plugins.indexOf("flow") >= 0) {
	      // ensure flow plugin loads last
	      plugins.splice(plugins.indexOf("flow"), 1);
	      plugins.push("flow");
	    }

	    for (var _iterator = plugins, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var _name = _ref;

	      pluginMap[_name] = true;

	      var plugin = exports.plugins[_name];
	      if (plugin) plugin(this);
	    }

	    return pluginMap;
	  };

	  Parser.prototype.parse = function parse() /*: {
	                                                type: "File",
	                                                program: {
	                                                  type: "Program",
	                                                  body: Array<Object>
	                                                }
	                                              }*/ {
	    var file = this.startNode();
	    var program = this.startNode();
	    this.nextToken();
	    return this.parseTopLevel(file, program);
	  };

	  return Parser;
	})(_tokenizer2["default"]);

	exports["default"] = Parser;
	},{"../options":2,"../tokenizer":15,"../util/identifier":18,"babel-runtime/core-js/get-iterator":21,"babel-runtime/helpers/class-call-check":24,"babel-runtime/helpers/inherits":25,"babel-runtime/helpers/interop-require-default":26}],6:[function(require,module,exports){
	"use strict";

	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

	var _utilLocation = require("../util/location");

	var _index = require("./index");

	var _index2 = _interopRequireDefault(_index);

	var pp = _index2["default"].prototype;

	// This function is used to raise exceptions on parse errors. It
	// takes an offset integer (into the current `input`) to indicate
	// the location of the error, attaches the position to the end
	// of the error message, and then raises a `SyntaxError` with that
	// message.

	pp.raise = function (pos, message) {
	  var loc = _utilLocation.getLineInfo(this.input, pos);
	  message += " (" + loc.line + ":" + loc.column + ")";
	  var err = new SyntaxError(message);
	  err.pos = pos;
	  err.loc = loc;
	  throw err;
	};
	},{"../util/location":19,"./index":5,"babel-runtime/helpers/interop-require-default":26}],7:[function(require,module,exports){
	"use strict";

	var _getIterator = require("babel-runtime/core-js/get-iterator")["default"];

	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

	var _tokenizerTypes = require("../tokenizer/types");

	var _index = require("./index");

	var _index2 = _interopRequireDefault(_index);

	var _utilIdentifier = require("../util/identifier");

	var pp = _index2["default"].prototype;

	// Convert existing expression atom to assignable pattern
	// if possible.

	pp.toAssignable = function (node, isBinding) {
	  if (node) {
	    switch (node.type) {
	      case "Identifier":
	      case "ObjectPattern":
	      case "ArrayPattern":
	      case "AssignmentPattern":
	        break;

	      case "ObjectExpression":
	        node.type = "ObjectPattern";
	        for (var _iterator = (node.properties /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	          var _ref;

	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }

	          var prop = _ref;

	          if (prop.type === "ObjectMethod") {
	            if (prop.kind === "get" || prop.kind === "set") {
	              this.raise(prop.key.start, "Object pattern can't contain getter or setter");
	            } else {
	              this.raise(prop.key.start, "Object pattern can't contain methods");
	            }
	          } else {
	            this.toAssignable(prop, isBinding);
	          }
	        }
	        break;

	      case "ObjectProperty":
	        this.toAssignable(node.value, isBinding);
	        break;

	      case "SpreadProperty":
	        node.type = "RestProperty";
	        break;

	      case "ArrayExpression":
	        node.type = "ArrayPattern";
	        this.toAssignableList(node.elements, isBinding);
	        break;

	      case "AssignmentExpression":
	        if (node.operator === "=") {
	          node.type = "AssignmentPattern";
	          delete node.operator;
	        } else {
	          this.raise(node.left.end, "Only '=' operator can be used for specifying default value.");
	        }
	        break;

	      case "MemberExpression":
	        if (!isBinding) break;

	      default:
	        this.raise(node.start, "Assigning to rvalue");
	    }
	  }
	  return node;
	};

	// Convert list of expression atoms to binding list.

	pp.toAssignableList = function (exprList, isBinding) {
	  var end = exprList.length;
	  if (end) {
	    var last = exprList[end - 1];
	    if (last && last.type === "RestElement") {
	      --end;
	    } else if (last && last.type === "SpreadElement") {
	      last.type = "RestElement";
	      var arg = last.argument;
	      this.toAssignable(arg, isBinding);
	      if (arg.type !== "Identifier" && arg.type !== "MemberExpression" && arg.type !== "ArrayPattern") {
	        this.unexpected(arg.start);
	      }
	      --end;
	    }
	  }
	  for (var i = 0; i < end; i++) {
	    var elt = exprList[i];
	    if (elt) this.toAssignable(elt, isBinding);
	  }
	  return exprList;
	};

	// Convert list of expression atoms to a list of

	pp.toReferencedList = function (exprList) {
	  return exprList;
	};

	// Parses spread element.

	pp.parseSpread = function (refShorthandDefaultPos) {
	  var node = this.startNode();
	  this.next();
	  node.argument = this.parseMaybeAssign(refShorthandDefaultPos);
	  return this.finishNode(node, "SpreadElement");
	};

	pp.parseRest = function () {
	  var node = this.startNode();
	  this.next();
	  node.argument = this.parseBindingIdentifier();
	  return this.finishNode(node, "RestElement");
	};

	pp.shouldAllowYieldIdentifier = function () {
	  return this.match(_tokenizerTypes.types._yield) && !this.state.strict && !this.state.inGenerator;
	};

	pp.parseBindingIdentifier = function () {
	  return this.parseIdentifier(this.shouldAllowYieldIdentifier());
	};

	// Parses lvalue (assignable) atom.

	pp.parseBindingAtom = function () {
	  switch (this.state.type) {
	    case _tokenizerTypes.types._yield:
	      if (this.state.strict || this.state.inGenerator) this.unexpected();

	    case _tokenizerTypes.types.name:
	      return this.parseIdentifier(true);

	    case _tokenizerTypes.types.bracketL:
	      var node = this.startNode();
	      this.next();
	      node.elements = this.parseBindingList(_tokenizerTypes.types.bracketR, true, true);
	      return this.finishNode(node, "ArrayPattern");

	    case _tokenizerTypes.types.braceL:
	      return this.parseObj(true);

	    default:
	      this.unexpected();
	  }
	};

	pp.parseBindingList = function (close, allowEmpty, allowTrailingComma) {
	  var elts = [];
	  var first = true;
	  while (!this.eat(close)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	    if (allowEmpty && this.match(_tokenizerTypes.types.comma)) {
	      elts.push(null);
	    } else if (allowTrailingComma && this.eat(close)) {
	      break;
	    } else if (this.match(_tokenizerTypes.types.ellipsis)) {
	      elts.push(this.parseAssignableListItemTypes(this.parseRest()));
	      this.expect(close);
	      break;
	    } else {
	      var left = this.parseMaybeDefault();
	      this.parseAssignableListItemTypes(left);
	      elts.push(this.parseMaybeDefault(null, null, left));
	    }
	  }
	  return elts;
	};

	pp.parseAssignableListItemTypes = function (param) {
	  return param;
	};

	// Parses assignment pattern around given atom if possible.

	pp.parseMaybeDefault = function (startPos, startLoc, left) {
	  startLoc = startLoc || this.state.startLoc;
	  startPos = startPos || this.state.start;
	  left = left || this.parseBindingAtom();
	  if (!this.eat(_tokenizerTypes.types.eq)) return left;

	  var node = this.startNodeAt(startPos, startLoc);
	  node.left = left;
	  node.right = this.parseMaybeAssign();
	  return this.finishNode(node, "AssignmentPattern");
	};

	// Verify that a node is an lval — something that can be assigned
	// to.

	pp.checkLVal = function (expr, isBinding, checkClashes) {
	  switch (expr.type) {
	    case "Identifier":
	      if (this.state.strict && (_utilIdentifier.reservedWords.strictBind(expr.name) || _utilIdentifier.reservedWords.strict(expr.name))) {
	        this.raise(expr.start, (isBinding ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
	      }

	      if (checkClashes) {
	        // we need to prefix this with an underscore for the cases where we have a key of
	        // `__proto__`. there's a bug in old V8 where the following wouldn't work:
	        //
	        //   > var obj = Object.create(null);
	        //   undefined
	        //   > obj.__proto__
	        //   null
	        //   > obj.__proto__ = true;
	        //   true
	        //   > obj.__proto__
	        //   null
	        var key = "_" + expr.name;

	        if (checkClashes[key]) {
	          this.raise(expr.start, "Argument name clash in strict mode");
	        } else {
	          checkClashes[key] = true;
	        }
	      }
	      break;

	    case "MemberExpression":
	      if (isBinding) this.raise(expr.start, (isBinding ? "Binding" : "Assigning to") + " member expression");
	      break;

	    case "ObjectPattern":
	      for (var _iterator2 = (expr.properties /*: Array<Object>*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	        var _ref2;

	        if (_isArray2) {
	          if (_i2 >= _iterator2.length) break;
	          _ref2 = _iterator2[_i2++];
	        } else {
	          _i2 = _iterator2.next();
	          if (_i2.done) break;
	          _ref2 = _i2.value;
	        }

	        var prop = _ref2;

	        if (prop.type === "ObjectProperty") prop = prop.value;
	        this.checkLVal(prop, isBinding, checkClashes);
	      }
	      break;

	    case "ArrayPattern":
	      for (var _iterator3 = (expr.elements /*: Array<Object>*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	        var _ref3;

	        if (_isArray3) {
	          if (_i3 >= _iterator3.length) break;
	          _ref3 = _iterator3[_i3++];
	        } else {
	          _i3 = _iterator3.next();
	          if (_i3.done) break;
	          _ref3 = _i3.value;
	        }

	        var elem = _ref3;

	        if (elem) this.checkLVal(elem, isBinding, checkClashes);
	      }
	      break;

	    case "AssignmentPattern":
	      this.checkLVal(expr.left, isBinding, checkClashes);
	      break;

	    case "RestProperty":
	    case "RestElement":
	      this.checkLVal(expr.argument, isBinding, checkClashes);
	      break;

	    default:
	      this.raise(expr.start, (isBinding ? "Binding" : "Assigning to") + " rvalue");
	  }
	};
	},{"../tokenizer/types":17,"../util/identifier":18,"./index":5,"babel-runtime/core-js/get-iterator":21,"babel-runtime/helpers/interop-require-default":26}],8:[function(require,module,exports){
	"use strict";

	var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

	var _index = require("./index");

	var _index2 = _interopRequireDefault(_index);

	var _utilLocation = require("../util/location");

	// Start an AST node, attaching a start offset.

	var pp = _index2["default"].prototype;

	var Node = (function () {
	  function Node(pos /*:: ?: number*/, loc /*:: ?: SourceLocation*/) {
	    _classCallCheck(this, Node);

	    this.type = "";
	    this.start = pos;
	    this.end = 0;
	    this.loc = new _utilLocation.SourceLocation(loc);
	  }

	  Node.prototype.__clone = function __clone() /*: Node*/ {
	    var node2 = new Node();
	    for (var key in this) {
	      node2[key] = this[key];
	    }return node2;
	  };

	  return Node;
	})();

	pp.startNode = function () {
	  return new Node(this.state.start, this.state.startLoc);
	};

	pp.startNodeAt = function (pos, loc) {
	  return new Node(pos, loc);
	};

	function finishNodeAt(node, type, pos, loc) {
	  node.type = type;
	  node.end = pos;
	  node.loc.end = loc;
	  this.processComment(node);
	  return node;
	}

	// Finish an AST node, adding `type` and `end` properties.

	pp.finishNode = function (node, type) {
	  return finishNodeAt.call(this, node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);
	};

	// Finish node at given position

	pp.finishNodeAt = function (node, type, pos, loc) {
	  return finishNodeAt.call(this, node, type, pos, loc);
	};
	},{"../util/location":19,"./index":5,"babel-runtime/helpers/class-call-check":24,"babel-runtime/helpers/interop-require-default":26}],9:[function(require,module,exports){
	"use strict";

	var _Object$create = require("babel-runtime/core-js/object/create")["default"];

	var _getIterator = require("babel-runtime/core-js/get-iterator")["default"];

	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

	var _tokenizerTypes = require("../tokenizer/types");

	var _index = require("./index");

	var _index2 = _interopRequireDefault(_index);

	var _utilWhitespace = require("../util/whitespace");

	var pp = _index2["default"].prototype;

	// ### Statement parsing

	// Parse a program. Initializes the parser, reads any number of
	// statements, and wraps them in a Program node.  Optionally takes a
	// `program` argument.  If present, the statements will be appended
	// to its body instead of creating a new node.

	pp.parseTopLevel = function (file, program) {
	  program.sourceType = this.options.sourceType;

	  this.parseBlockBody(program, true, true, _tokenizerTypes.types.eof);

	  file.program = this.finishNode(program, "Program");
	  file.comments = this.state.comments;
	  file.tokens = this.state.tokens;

	  return this.finishNode(file, "File");
	};

	var loopLabel = { kind: "loop" },
	    switchLabel = { kind: "switch" };

	// TODO

	pp.stmtToDirective = function (stmt) {
	  var expr = stmt.expression;

	  var directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);
	  var directive = this.startNodeAt(stmt.start, stmt.loc.start);

	  var raw = this.input.slice(expr.start, expr.end);
	  var val = directiveLiteral.value = raw.slice(1, -1); // remove quotes

	  this.addExtra(directiveLiteral, "raw", raw);
	  this.addExtra(directiveLiteral, "rawValue", val);

	  directive.value = this.finishNodeAt(directiveLiteral, "DirectiveLiteral", expr.end, expr.loc.end);

	  return this.finishNodeAt(directive, "Directive", stmt.end, stmt.loc.end);
	};

	// Parse a single statement.
	//
	// If expecting a statement and finding a slash operator, parse a
	// regular expression literal. This is to handle cases like
	// `if (foo) /blah/.exec(foo)`, where looking at the previous token
	// does not help.

	pp.parseStatement = function (declaration, topLevel) {
	  if (this.match(_tokenizerTypes.types.at)) {
	    this.parseDecorators(true);
	  }

	  var starttype = this.state.type,
	      node = this.startNode();

	  // Most types of statements are recognized by the keyword they
	  // start with. Many are trivial to parse, some require a bit of
	  // complexity.

	  switch (starttype) {
	    case _tokenizerTypes.types._break:case _tokenizerTypes.types._continue:
	      return this.parseBreakContinueStatement(node, starttype.keyword);
	    case _tokenizerTypes.types._debugger:
	      return this.parseDebuggerStatement(node);
	    case _tokenizerTypes.types._do:
	      return this.parseDoStatement(node);
	    case _tokenizerTypes.types._for:
	      return this.parseForStatement(node);
	    case _tokenizerTypes.types._function:
	      if (!declaration) this.unexpected();
	      return this.parseFunctionStatement(node);

	    case _tokenizerTypes.types._class:
	      if (!declaration) this.unexpected();
	      this.takeDecorators(node);
	      return this.parseClass(node, true);

	    case _tokenizerTypes.types._if:
	      return this.parseIfStatement(node);
	    case _tokenizerTypes.types._return:
	      return this.parseReturnStatement(node);
	    case _tokenizerTypes.types._switch:
	      return this.parseSwitchStatement(node);
	    case _tokenizerTypes.types._throw:
	      return this.parseThrowStatement(node);
	    case _tokenizerTypes.types._try:
	      return this.parseTryStatement(node);

	    case _tokenizerTypes.types._let:
	    case _tokenizerTypes.types._const:
	      if (!declaration) this.unexpected(); // NOTE: falls through to _var

	    case _tokenizerTypes.types._var:
	      return this.parseVarStatement(node, starttype);

	    case _tokenizerTypes.types._while:
	      return this.parseWhileStatement(node);
	    case _tokenizerTypes.types._with:
	      return this.parseWithStatement(node);
	    case _tokenizerTypes.types.braceL:
	      return this.parseBlock();
	    case _tokenizerTypes.types.semi:
	      return this.parseEmptyStatement(node);
	    case _tokenizerTypes.types._export:
	    case _tokenizerTypes.types._import:
	      if (!this.options.allowImportExportEverywhere) {
	        if (!topLevel) {
	          this.raise(this.state.start, "'import' and 'export' may only appear at the top level");
	        }

	        if (!this.inModule) {
	          this.raise(this.state.start, "'import' and 'export' may appear only with 'sourceType: module'");
	        }
	      }
	      return starttype === _tokenizerTypes.types._import ? this.parseImport(node) : this.parseExport(node);

	    case _tokenizerTypes.types.name:
	      if (this.hasPlugin("asyncFunctions") && this.state.value === "async") {
	        // peek ahead and see if next token is a function
	        var state = this.state.clone();
	        this.next();
	        if (this.match(_tokenizerTypes.types._function) && !this.canInsertSemicolon()) {
	          this.expect(_tokenizerTypes.types._function);
	          return this.parseFunction(node, true, false, true);
	        } else {
	          this.state = state;
	        }
	      }
	  }

	  // If the statement does not start with a statement keyword or a
	  // brace, it's an ExpressionStatement or LabeledStatement. We
	  // simply start parsing an expression, and afterwards, if the
	  // next token is a colon and the expression was a simple
	  // Identifier node, we switch to interpreting it as a label.
	  var maybeName = this.state.value;
	  var expr = this.parseExpression();

	  if (starttype === _tokenizerTypes.types.name && expr.type === "Identifier" && this.eat(_tokenizerTypes.types.colon)) {
	    return this.parseLabeledStatement(node, maybeName, expr);
	  } else {
	    return this.parseExpressionStatement(node, expr);
	  }
	};

	pp.takeDecorators = function (node) {
	  if (this.state.decorators.length) {
	    node.decorators = this.state.decorators;
	    this.state.decorators = [];
	  }
	};

	pp.parseDecorators = function (allowExport) {
	  while (this.match(_tokenizerTypes.types.at)) {
	    this.state.decorators.push(this.parseDecorator());
	  }

	  if (allowExport && this.match(_tokenizerTypes.types._export)) {
	    return;
	  }

	  if (!this.match(_tokenizerTypes.types._class)) {
	    this.raise(this.state.start, "Leading decorators must be attached to a class declaration");
	  }
	};

	pp.parseDecorator = function () {
	  if (!this.hasPlugin("decorators")) {
	    this.unexpected();
	  }
	  var node = this.startNode();
	  this.next();
	  node.expression = this.parseMaybeAssign();
	  return this.finishNode(node, "Decorator");
	};

	pp.parseBreakContinueStatement = function (node, keyword) {
	  var isBreak = keyword === "break";
	  this.next();

	  if (this.isLineTerminator()) {
	    node.label = null;
	  } else if (!this.match(_tokenizerTypes.types.name)) {
	    this.unexpected();
	  } else {
	    node.label = this.parseIdentifier();
	    this.semicolon();
	  }

	  // Verify that there is an actual destination to break or
	  // continue to.
	  var i = undefined;
	  for (i = 0; i < this.state.labels.length; ++i) {
	    var lab = this.state.labels[i];
	    if (node.label == null || lab.name === node.label.name) {
	      if (lab.kind != null && (isBreak || lab.kind === "loop")) break;
	      if (node.label && isBreak) break;
	    }
	  }
	  if (i === this.state.labels.length) this.raise(node.start, "Unsyntactic " + keyword);
	  return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
	};

	pp.parseDebuggerStatement = function (node) {
	  this.next();
	  this.semicolon();
	  return this.finishNode(node, "DebuggerStatement");
	};

	pp.parseDoStatement = function (node) {
	  this.next();
	  this.state.labels.push(loopLabel);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  this.expect(_tokenizerTypes.types._while);
	  node.test = this.parseParenExpression();
	  this.eat(_tokenizerTypes.types.semi);
	  return this.finishNode(node, "DoWhileStatement");
	};

	// Disambiguating between a `for` and a `for`/`in` or `for`/`of`
	// loop is non-trivial. Basically, we have to parse the init `var`
	// statement or expression, disallowing the `in` operator (see
	// the second parameter to `parseExpression`), and then check
	// whether the next token is `in` or `of`. When there is no init
	// part (semicolon immediately after the opening parenthesis), it
	// is a regular `for` loop.

	pp.parseForStatement = function (node) {
	  this.next();
	  this.state.labels.push(loopLabel);
	  this.expect(_tokenizerTypes.types.parenL);

	  if (this.match(_tokenizerTypes.types.semi)) {
	    return this.parseFor(node, null);
	  }

	  if (this.match(_tokenizerTypes.types._var) || this.match(_tokenizerTypes.types._let) || this.match(_tokenizerTypes.types._const)) {
	    var _init = this.startNode(),
	        varKind = this.state.type;
	    this.next();
	    this.parseVar(_init, true, varKind);
	    this.finishNode(_init, "VariableDeclaration");

	    if (this.match(_tokenizerTypes.types._in) || this.isContextual("of")) {
	      if (_init.declarations.length === 1 && !_init.declarations[0].init) {
	        return this.parseForIn(node, _init);
	      }
	    }

	    return this.parseFor(node, _init);
	  }

	  var refShorthandDefaultPos = { start: 0 };
	  var init = this.parseExpression(true, refShorthandDefaultPos);
	  if (this.match(_tokenizerTypes.types._in) || this.isContextual("of")) {
	    this.toAssignable(init);
	    this.checkLVal(init);
	    return this.parseForIn(node, init);
	  } else if (refShorthandDefaultPos.start) {
	    this.unexpected(refShorthandDefaultPos.start);
	  }
	  return this.parseFor(node, init);
	};

	pp.parseFunctionStatement = function (node) {
	  this.next();
	  return this.parseFunction(node, true);
	};

	pp.parseIfStatement = function (node) {
	  this.next();
	  node.test = this.parseParenExpression();
	  node.consequent = this.parseStatement(false);
	  node.alternate = this.eat(_tokenizerTypes.types._else) ? this.parseStatement(false) : null;
	  return this.finishNode(node, "IfStatement");
	};

	pp.parseReturnStatement = function (node) {
	  if (!this.state.inFunction && !this.options.allowReturnOutsideFunction) {
	    this.raise(this.state.start, "'return' outside of function");
	  }

	  this.next();

	  // In `return` (and `break`/`continue`), the keywords with
	  // optional arguments, we eagerly look for a semicolon or the
	  // possibility to insert one.

	  if (this.isLineTerminator()) {
	    node.argument = null;
	  } else {
	    node.argument = this.parseExpression();
	    this.semicolon();
	  }

	  return this.finishNode(node, "ReturnStatement");
	};

	pp.parseSwitchStatement = function (node) {
	  this.next();
	  node.discriminant = this.parseParenExpression();
	  node.cases = [];
	  this.expect(_tokenizerTypes.types.braceL);
	  this.state.labels.push(switchLabel);

	  // Statements under must be grouped (by label) in SwitchCase
	  // nodes. `cur` is used to keep the node that we are currently
	  // adding statements to.

	  var cur = undefined;
	  for (var sawDefault = undefined; !this.match(_tokenizerTypes.types.braceR);) {
	    if (this.match(_tokenizerTypes.types._case) || this.match(_tokenizerTypes.types._default)) {
	      var isCase = this.match(_tokenizerTypes.types._case);
	      if (cur) this.finishNode(cur, "SwitchCase");
	      node.cases.push(cur = this.startNode());
	      cur.consequent = [];
	      this.next();
	      if (isCase) {
	        cur.test = this.parseExpression();
	      } else {
	        if (sawDefault) this.raise(this.state.lastTokStart, "Multiple default clauses");
	        sawDefault = true;
	        cur.test = null;
	      }
	      this.expect(_tokenizerTypes.types.colon);
	    } else {
	      if (cur) {
	        cur.consequent.push(this.parseStatement(true));
	      } else {
	        this.unexpected();
	      }
	    }
	  }
	  if (cur) this.finishNode(cur, "SwitchCase");
	  this.next(); // Closing brace
	  this.state.labels.pop();
	  return this.finishNode(node, "SwitchStatement");
	};

	pp.parseThrowStatement = function (node) {
	  this.next();
	  if (_utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))) this.raise(this.state.lastTokEnd, "Illegal newline after throw");
	  node.argument = this.parseExpression();
	  this.semicolon();
	  return this.finishNode(node, "ThrowStatement");
	};

	// Reused empty array added for node fields that are always empty.

	var empty = [];

	pp.parseTryStatement = function (node) {
	  this.next();

	  node.block = this.parseBlock();
	  node.handler = null;

	  if (this.match(_tokenizerTypes.types._catch)) {
	    var clause = this.startNode();
	    this.next();

	    this.expect(_tokenizerTypes.types.parenL);
	    clause.param = this.parseBindingAtom();
	    this.checkLVal(clause.param, true, _Object$create(null));
	    this.expect(_tokenizerTypes.types.parenR);

	    clause.body = this.parseBlock();
	    node.handler = this.finishNode(clause, "CatchClause");
	  }

	  node.guardedHandlers = empty;
	  node.finalizer = this.eat(_tokenizerTypes.types._finally) ? this.parseBlock() : null;

	  if (!node.handler && !node.finalizer) {
	    this.raise(node.start, "Missing catch or finally clause");
	  }

	  return this.finishNode(node, "TryStatement");
	};

	pp.parseVarStatement = function (node, kind) {
	  this.next();
	  this.parseVar(node, false, kind);
	  this.semicolon();
	  return this.finishNode(node, "VariableDeclaration");
	};

	pp.parseWhileStatement = function (node) {
	  this.next();
	  node.test = this.parseParenExpression();
	  this.state.labels.push(loopLabel);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  return this.finishNode(node, "WhileStatement");
	};

	pp.parseWithStatement = function (node) {
	  if (this.state.strict) this.raise(this.state.start, "'with' in strict mode");
	  this.next();
	  node.object = this.parseParenExpression();
	  node.body = this.parseStatement(false);
	  return this.finishNode(node, "WithStatement");
	};

	pp.parseEmptyStatement = function (node) {
	  this.next();
	  return this.finishNode(node, "EmptyStatement");
	};

	pp.parseLabeledStatement = function (node, maybeName, expr) {
	  for (var _iterator = (this.state.labels /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var label = _ref;

	    if (label.name === maybeName) {
	      this.raise(expr.start, "Label '" + maybeName + "' is already declared");
	    }
	  }

	  var kind = this.state.type.isLoop ? "loop" : this.match(_tokenizerTypes.types._switch) ? "switch" : null;
	  for (var i = this.state.labels.length - 1; i >= 0; i--) {
	    var label = this.state.labels[i];
	    if (label.statementStart === node.start) {
	      label.statementStart = this.state.start;
	      label.kind = kind;
	    } else {
	      break;
	    }
	  }

	  this.state.labels.push({ name: maybeName, kind: kind, statementStart: this.state.start });
	  node.body = this.parseStatement(true);
	  this.state.labels.pop();
	  node.label = expr;
	  return this.finishNode(node, "LabeledStatement");
	};

	pp.parseExpressionStatement = function (node, expr) {
	  node.expression = expr;
	  this.semicolon();
	  return this.finishNode(node, "ExpressionStatement");
	};

	// Parse a semicolon-enclosed block of statements, handling `"use
	// strict"` declarations when `allowStrict` is true (used for
	// function bodies).

	pp.parseBlock = function (allowDirectives /*:: ?*/) {
	  var node = this.startNode();
	  this.expect(_tokenizerTypes.types.braceL);
	  this.parseBlockBody(node, allowDirectives, false, _tokenizerTypes.types.braceR);
	  return this.finishNode(node, "BlockStatement");
	};

	// TODO

	pp.parseBlockBody = function (node, allowDirectives, topLevel, end) {
	  node.body = [];
	  node.directives = [];

	  var parsedNonDirective = false;
	  var oldStrict = undefined;
	  var octalPosition = undefined;

	  while (!this.eat(end)) {
	    if (!parsedNonDirective && this.state.containsOctal && !octalPosition) {
	      octalPosition = this.state.octalPosition;
	    }

	    var stmt = this.parseStatement(true, topLevel);

	    if (allowDirectives && !parsedNonDirective && stmt.type === "ExpressionStatement" && stmt.expression.type === "StringLiteral" && !stmt.expression.extra.parenthesized) {
	      var directive = this.stmtToDirective(stmt);
	      node.directives.push(directive);

	      if (oldStrict === undefined && directive.value.value === "use strict") {
	        oldStrict = this.state.strict;
	        this.setStrict(true);

	        if (octalPosition) {
	          this.raise(octalPosition, "Octal literal in strict mode");
	        }
	      }

	      continue;
	    }

	    parsedNonDirective = true;
	    node.body.push(stmt);
	  }

	  if (oldStrict === false) {
	    this.setStrict(false);
	  }
	};

	// Parse a regular `for` loop. The disambiguation code in
	// `parseStatement` will already have parsed the init statement or
	// expression.

	pp.parseFor = function (node, init) {
	  node.init = init;
	  this.expect(_tokenizerTypes.types.semi);
	  node.test = this.match(_tokenizerTypes.types.semi) ? null : this.parseExpression();
	  this.expect(_tokenizerTypes.types.semi);
	  node.update = this.match(_tokenizerTypes.types.parenR) ? null : this.parseExpression();
	  this.expect(_tokenizerTypes.types.parenR);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  return this.finishNode(node, "ForStatement");
	};

	// Parse a `for`/`in` and `for`/`of` loop, which are almost
	// same from parser's perspective.

	pp.parseForIn = function (node, init) {
	  var type = this.match(_tokenizerTypes.types._in) ? "ForInStatement" : "ForOfStatement";
	  this.next();
	  node.left = init;
	  node.right = this.parseExpression();
	  this.expect(_tokenizerTypes.types.parenR);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  return this.finishNode(node, type);
	};

	// Parse a list of variable declarations.

	pp.parseVar = function (node, isFor, kind) {
	  node.declarations = [];
	  node.kind = kind.keyword;
	  for (;;) {
	    var decl = this.startNode();
	    this.parseVarHead(decl);
	    if (this.eat(_tokenizerTypes.types.eq)) {
	      decl.init = this.parseMaybeAssign(isFor);
	    } else if (kind === _tokenizerTypes.types._const && !(this.match(_tokenizerTypes.types._in) || this.isContextual("of"))) {
	      this.unexpected();
	    } else if (decl.id.type !== "Identifier" && !(isFor && (this.match(_tokenizerTypes.types._in) || this.isContextual("of")))) {
	      this.raise(this.state.lastTokEnd, "Complex binding patterns require an initialization value");
	    } else {
	      decl.init = null;
	    }
	    node.declarations.push(this.finishNode(decl, "VariableDeclarator"));
	    if (!this.eat(_tokenizerTypes.types.comma)) break;
	  }
	  return node;
	};

	pp.parseVarHead = function (decl) {
	  decl.id = this.parseBindingAtom();
	  this.checkLVal(decl.id, true);
	};

	// Parse a function declaration or literal (depending on the
	// `isStatement` parameter).

	pp.parseFunction = function (node, isStatement, allowExpressionBody, isAsync, optionalId) {
	  var oldInMethod = this.state.inMethod;
	  this.state.inMethod = false;

	  this.initFunction(node, isAsync);

	  if (this.match(_tokenizerTypes.types.star)) {
	    if (node.async && !this.hasPlugin("asyncGenerators")) {
	      this.unexpected();
	    } else {
	      node.generator = true;
	      this.next();
	    }
	  }

	  if (isStatement && !optionalId && !this.match(_tokenizerTypes.types.name) && !this.match(_tokenizerTypes.types._yield)) {
	    this.unexpected();
	  }

	  if (this.match(_tokenizerTypes.types.name) || this.match(_tokenizerTypes.types._yield)) {
	    node.id = this.parseBindingIdentifier();
	  }

	  this.parseFunctionParams(node);
	  this.parseFunctionBody(node, allowExpressionBody);

	  this.state.inMethod = oldInMethod;

	  return this.finishNode(node, isStatement ? "FunctionDeclaration" : "FunctionExpression");
	};

	pp.parseFunctionParams = function (node) {
	  this.expect(_tokenizerTypes.types.parenL);
	  node.params = this.parseBindingList(_tokenizerTypes.types.parenR, false, this.hasPlugin("trailingFunctionCommas"));
	};

	// Parse a class declaration or literal (depending on the
	// `isStatement` parameter).

	pp.parseClass = function (node, isStatement, optionalId) {
	  this.next();
	  this.parseClassId(node, isStatement, optionalId);
	  this.parseClassSuper(node);
	  this.parseClassBody(node);
	  return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
	};

	pp.isClassProperty = function () {
	  return this.match(_tokenizerTypes.types.eq) || this.match(_tokenizerTypes.types.semi) || this.canInsertSemicolon();
	};

	pp.parseClassBody = function (node) {
	  // class bodies are implicitly strict
	  var oldStrict = this.state.strict;
	  this.state.strict = true;

	  var hadConstructorCall = false;
	  var hadConstructor = false;
	  var decorators = [];
	  var classBody = this.startNode();

	  classBody.body = [];

	  this.expect(_tokenizerTypes.types.braceL);

	  while (!this.eat(_tokenizerTypes.types.braceR)) {
	    if (this.eat(_tokenizerTypes.types.semi)) {
	      continue;
	    }

	    if (this.match(_tokenizerTypes.types.at)) {
	      decorators.push(this.parseDecorator());
	      continue;
	    }

	    var method = this.startNode();

	    // steal the decorators if there are any
	    if (decorators.length) {
	      method.decorators = decorators;
	      decorators = [];
	    }

	    var isConstructorCall = false;
	    var isMaybeStatic = this.match(_tokenizerTypes.types.name) && this.state.value === "static";
	    var isGenerator = this.eat(_tokenizerTypes.types.star);
	    var isGetSet = false;
	    var isAsync = false;

	    this.parsePropertyName(method);

	    method["static"] = isMaybeStatic && !this.match(_tokenizerTypes.types.parenL);
	    if (method["static"]) {
	      if (isGenerator) this.unexpected();
	      isGenerator = this.eat(_tokenizerTypes.types.star);
	      this.parsePropertyName(method);
	    }

	    if (!isGenerator && method.key.type === "Identifier" && !method.computed) {
	      if (this.isClassProperty()) {
	        classBody.body.push(this.parseClassProperty(method));
	        continue;
	      }

	      if (this.hasPlugin("classConstructorCall") && method.key.name === "call" && this.match(_tokenizerTypes.types.name) && this.state.value === "constructor") {
	        isConstructorCall = true;
	        this.parsePropertyName(method);
	      }
	    }

	    var isAsyncMethod = this.hasPlugin("asyncFunctions") && !this.match(_tokenizerTypes.types.parenL) && !method.computed && method.key.type === "Identifier" && method.key.name === "async";
	    if (isAsyncMethod) {
	      if (this.hasPlugin("asyncGenerators") && this.eat(_tokenizerTypes.types.star)) isGenerator = true;
	      isAsync = true;
	      this.parsePropertyName(method);
	    }

	    method.kind = "method";

	    if (!method.computed) {
	      var key = method.key;

	      // handle get/set methods
	      // eg. class Foo { get bar() {} set bar() {} }
	      if (!isAsync && !isGenerator && key.type === "Identifier" && !this.match(_tokenizerTypes.types.parenL) && (key.name === "get" || key.name === "set")) {
	        isGetSet = true;
	        method.kind = key.name;
	        key = this.parsePropertyName(method);
	      }

	      // disallow invalid constructors
	      var isConstructor = !isConstructorCall && !method["static"] && (key.type === "Identifier" && key.name === "constructor" || key.type === "StringLiteral" && key.value === "constructor");
	      if (isConstructor) {
	        if (hadConstructor) this.raise(key.start, "Duplicate constructor in the same class");
	        if (isGetSet) this.raise(key.start, "Constructor can't have get/set modifier");
	        if (isGenerator) this.raise(key.start, "Constructor can't be a generator");
	        if (isAsync) this.raise(key.start, "Constructor can't be an async function");
	        method.kind = "constructor";
	        hadConstructor = true;
	      }

	      // disallow static prototype method
	      var isStaticPrototype = method["static"] && (key.type === "Identifier" && key.name === "prototype" || key.type === "StringLiteral" && key.value === "prototype");
	      if (isStaticPrototype) {
	        this.raise(key.start, "Classes may not have static property named prototype");
	      }
	    }

	    // convert constructor to a constructor call
	    if (isConstructorCall) {
	      if (hadConstructorCall) this.raise(method.start, "Duplicate constructor call in the same class");
	      method.kind = "constructorCall";
	      hadConstructorCall = true;
	    }

	    // disallow decorators on class constructors
	    if ((method.kind === "constructor" || method.kind === "constructorCall") && method.decorators) {
	      this.raise(method.start, "You can't attach decorators to a class constructor");
	    }

	    this.parseClassMethod(classBody, method, isGenerator, isAsync);

	    // get methods aren't allowed to have any parameters
	    // set methods must have exactly 1 parameter
	    if (isGetSet) {
	      var paramCount = method.kind === "get" ? 0 : 1;
	      if (method.params.length !== paramCount) {
	        var start = method.start;
	        if (method.kind === "get") {
	          this.raise(start, "getter should have no params");
	        } else {
	          this.raise(start, "setter should have exactly one param");
	        }
	      }
	    }
	  }

	  if (decorators.length) {
	    this.raise(this.state.start, "You have trailing decorators with no method");
	  }

	  node.body = this.finishNode(classBody, "ClassBody");

	  this.state.strict = oldStrict;
	};

	pp.parseClassProperty = function (node) {
	  if (this.match(_tokenizerTypes.types.eq)) {
	    if (!this.hasPlugin("classProperties")) this.unexpected();
	    this.next();
	    node.value = this.parseMaybeAssign();
	  } else {
	    node.value = null;
	  }
	  if (!this.eat(_tokenizerTypes.types.semi)) {
	    this.raise(this.state.start, "A semicolon is required after a class property");
	  }
	  return this.finishNode(node, "ClassProperty");
	};

	pp.parseClassMethod = function (classBody, method, isGenerator, isAsync) {
	  this.parseMethod(method, isGenerator, isAsync);
	  classBody.body.push(this.finishNode(method, "ClassMethod"));
	};

	pp.parseClassId = function (node, isStatement, optionalId) {
	  if (this.match(_tokenizerTypes.types.name)) {
	    node.id = this.parseIdentifier();
	  } else {
	    if (optionalId || !isStatement) {
	      node.id = null;
	    } else {
	      this.unexpected();
	    }
	  }
	};

	pp.parseClassSuper = function (node) {
	  node.superClass = this.eat(_tokenizerTypes.types._extends) ? this.parseExprSubscripts() : null;
	};

	// Parses module export declaration.

	pp.parseExport = function (node) {
	  this.next();
	  // export * from '...'
	  if (this.match(_tokenizerTypes.types.star)) {
	    var specifier = this.startNode();
	    this.next();
	    if (this.hasPlugin("exportExtensions") && this.eatContextual("as")) {
	      specifier.exported = this.parseIdentifier();
	      node.specifiers = [this.finishNode(specifier, "ExportNamespaceSpecifier")];
	      this.parseExportSpecifiersMaybe(node);
	      this.parseExportFrom(node, true);
	    } else {
	      this.parseExportFrom(node, true);
	      return this.finishNode(node, "ExportAllDeclaration");
	    }
	  } else if (this.hasPlugin("exportExtensions") && this.isExportDefaultSpecifier()) {
	    var specifier = this.startNode();
	    specifier.exported = this.parseIdentifier(true);
	    node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
	    if (this.match(_tokenizerTypes.types.comma) && this.lookahead().type === _tokenizerTypes.types.star) {
	      this.expect(_tokenizerTypes.types.comma);
	      var _specifier = this.startNode();
	      this.expect(_tokenizerTypes.types.star);
	      this.expectContextual("as");
	      _specifier.exported = this.parseIdentifier();
	      node.specifiers.push(this.finishNode(_specifier, "ExportNamespaceSpecifier"));
	    } else {
	      this.parseExportSpecifiersMaybe(node);
	    }
	    this.parseExportFrom(node, true);
	  } else if (this.eat(_tokenizerTypes.types._default)) {
	    // export default ...
	    var expr = this.startNode();
	    var needsSemi = false;
	    if (this.eat(_tokenizerTypes.types._function)) {
	      expr = this.parseFunction(expr, true, false, false, true);
	    } else if (this.match(_tokenizerTypes.types._class)) {
	      expr = this.parseClass(expr, true, true);
	    } else {
	      needsSemi = true;
	      expr = this.parseMaybeAssign();
	    }
	    node.declaration = expr;
	    if (needsSemi) this.semicolon();
	    this.checkExport(node);
	    return this.finishNode(node, "ExportDefaultDeclaration");
	  } else if (this.state.type.keyword || this.shouldParseExportDeclaration()) {
	    node.specifiers = [];
	    node.source = null;
	    node.declaration = this.parseExportDeclaration(node);
	  } else {
	    // export { x, y as z } [from '...']
	    node.declaration = null;
	    node.specifiers = this.parseExportSpecifiers();
	    this.parseExportFrom(node);
	  }
	  this.checkExport(node);
	  return this.finishNode(node, "ExportNamedDeclaration");
	};

	pp.parseExportDeclaration = function () {
	  return this.parseStatement(true);
	};

	pp.isExportDefaultSpecifier = function () {
	  if (this.match(_tokenizerTypes.types.name)) {
	    return this.state.value !== "type" && this.state.value !== "async" && this.state.value !== "interface";
	  }

	  if (!this.match(_tokenizerTypes.types._default)) {
	    return false;
	  }

	  var lookahead = this.lookahead();
	  return lookahead.type === _tokenizerTypes.types.comma || lookahead.type === _tokenizerTypes.types.name && lookahead.value === "from";
	};

	pp.parseExportSpecifiersMaybe = function (node) {
	  if (this.eat(_tokenizerTypes.types.comma)) {
	    node.specifiers = node.specifiers.concat(this.parseExportSpecifiers());
	  }
	};

	pp.parseExportFrom = function (node, expect /*:: ?*/) {
	  if (this.eatContextual("from")) {
	    node.source = this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.unexpected();
	    this.checkExport(node);
	  } else {
	    if (expect) {
	      this.unexpected();
	    } else {
	      node.source = null;
	    }
	  }

	  this.semicolon();
	};

	pp.shouldParseExportDeclaration = function () {
	  return this.hasPlugin("asyncFunctions") && this.isContextual("async");
	};

	pp.checkExport = function (node) {
	  if (this.state.decorators.length) {
	    var isClass = node.declaration && (node.declaration.type === "ClassDeclaration" || node.declaration.type === "ClassExpression");
	    if (!node.declaration || !isClass) {
	      this.raise(node.start, "You can only use decorators on an export when exporting a class");
	    }
	    this.takeDecorators(node.declaration);
	  }
	};

	// Parses a comma-separated list of module exports.

	pp.parseExportSpecifiers = function () {
	  var nodes = [];
	  var first = true;
	  var needsFrom = undefined;

	  // export { x, y as z } [from '...']
	  this.expect(_tokenizerTypes.types.braceL);

	  while (!this.eat(_tokenizerTypes.types.braceR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (this.eat(_tokenizerTypes.types.braceR)) break;
	    }

	    var isDefault = this.match(_tokenizerTypes.types._default);
	    if (isDefault && !needsFrom) needsFrom = true;

	    var node = this.startNode();
	    node.local = this.parseIdentifier(isDefault);
	    node.exported = this.eatContextual("as") ? this.parseIdentifier(true) : node.local.__clone();
	    nodes.push(this.finishNode(node, "ExportSpecifier"));
	  }

	  // https://github.com/ember-cli/ember-cli/pull/3739
	  if (needsFrom && !this.isContextual("from")) {
	    this.unexpected();
	  }

	  return nodes;
	};

	// Parses import declaration.

	pp.parseImport = function (node) {
	  this.next();

	  // import '...'
	  if (this.match(_tokenizerTypes.types.string)) {
	    node.specifiers = [];
	    node.source = this.parseExprAtom();
	  } else {
	    node.specifiers = [];
	    this.parseImportSpecifiers(node);
	    this.expectContextual("from");
	    node.source = this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.unexpected();
	  }
	  this.semicolon();
	  return this.finishNode(node, "ImportDeclaration");
	};

	// Parses a comma-separated list of module imports.

	pp.parseImportSpecifiers = function (node) {
	  var first = true;
	  if (this.match(_tokenizerTypes.types.name)) {
	    // import defaultObj, { x, y as z } from '...'
	    var startPos = this.state.start,
	        startLoc = this.state.startLoc;
	    node.specifiers.push(this.parseImportSpecifierDefault(this.parseIdentifier(), startPos, startLoc));
	    if (!this.eat(_tokenizerTypes.types.comma)) return;
	  }

	  if (this.match(_tokenizerTypes.types.star)) {
	    var specifier = this.startNode();
	    this.next();
	    this.expectContextual("as");
	    specifier.local = this.parseIdentifier();
	    this.checkLVal(specifier.local, true);
	    node.specifiers.push(this.finishNode(specifier, "ImportNamespaceSpecifier"));
	    return;
	  }

	  this.expect(_tokenizerTypes.types.braceL);
	  while (!this.eat(_tokenizerTypes.types.braceR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (this.eat(_tokenizerTypes.types.braceR)) break;
	    }

	    var specifier = this.startNode();
	    specifier.imported = this.parseIdentifier(true);
	    specifier.local = this.eatContextual("as") ? this.parseIdentifier() : specifier.imported.__clone();
	    this.checkLVal(specifier.local, true);
	    node.specifiers.push(this.finishNode(specifier, "ImportSpecifier"));
	  }
	};

	pp.parseImportSpecifierDefault = function (id, startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.local = id;
	  this.checkLVal(node.local, true);
	  return this.finishNode(node, "ImportDefaultSpecifier");
	};
	},{"../tokenizer/types":17,"../util/whitespace":20,"./index":5,"babel-runtime/core-js/get-iterator":21,"babel-runtime/core-js/object/create":22,"babel-runtime/helpers/interop-require-default":26}],10:[function(require,module,exports){
	/* @flow */

	"use strict";

	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

	var _tokenizerTypes = require("../tokenizer/types");

	var _index = require("./index");

	var _index2 = _interopRequireDefault(_index);

	var _utilWhitespace = require("../util/whitespace");

	var pp = _index2["default"].prototype;

	// ## Parser utilities

	// TODO

	pp.addExtra = function (node, key, val) {
	  if (!node) return;

	  var extra = node.extra = node.extra || {};
	  extra[key] = val;
	};

	// TODO

	pp.isRelational = function (op) {
	  return this.match(_tokenizerTypes.types.relational) && this.state.value === op;
	};

	// TODO

	pp.expectRelational = function (op) {
	  if (this.isRelational(op)) {
	    this.next();
	  } else {
	    this.unexpected();
	  }
	};

	// Tests whether parsed token is a contextual keyword.

	pp.isContextual = function (name) {
	  return this.match(_tokenizerTypes.types.name) && this.state.value === name;
	};

	// Consumes contextual keyword if possible.

	pp.eatContextual = function (name) {
	  return this.state.value === name && this.eat(_tokenizerTypes.types.name);
	};

	// Asserts that following token is given contextual keyword.

	pp.expectContextual = function (name) {
	  if (!this.eatContextual(name)) this.unexpected();
	};

	// Test whether a semicolon can be inserted at the current position.

	pp.canInsertSemicolon = function () {
	  return this.match(_tokenizerTypes.types.eof) || this.match(_tokenizerTypes.types.braceR) || _utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));
	};

	// TODO

	pp.isLineTerminator = function () {
	  return this.eat(_tokenizerTypes.types.semi) || this.canInsertSemicolon();
	};

	// Consume a semicolon, or, failing that, see if we are allowed to
	// pretend that there is a semicolon at this position.

	pp.semicolon = function () {
	  if (!this.isLineTerminator()) this.unexpected();
	};

	// Expect a token of a given type. If found, consume it, otherwise,
	// raise an unexpected token error.

	pp.expect = function (type) {
	  return this.eat(type) || this.unexpected();
	};

	// Raise an unexpected token error.

	pp.unexpected = function (pos) {
	  this.raise(pos != null ? pos : this.state.start, "Unexpected token");
	};

	},{"../tokenizer/types":17,"../util/whitespace":20,"./index":5,"babel-runtime/helpers/interop-require-default":26}],11:[function(require,module,exports){
	"use strict";

	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

	exports.__esModule = true;

	var _tokenizerTypes = require("../tokenizer/types");

	var _parser = require("../parser");

	var _parser2 = _interopRequireDefault(_parser);

	var pp = _parser2["default"].prototype;

	pp.flowParseTypeInitialiser = function (tok) {
	  var oldInType = this.state.inType;
	  this.state.inType = true;
	  this.expect(tok || _tokenizerTypes.types.colon);
	  var type = this.flowParseType();
	  this.state.inType = oldInType;
	  return type;
	};

	pp.flowParseDeclareClass = function (node) {
	  this.next();
	  this.flowParseInterfaceish(node, true);
	  return this.finishNode(node, "DeclareClass");
	};

	pp.flowParseDeclareFunction = function (node) {
	  this.next();

	  var id = node.id = this.parseIdentifier();

	  var typeNode = this.startNode();
	  var typeContainer = this.startNode();

	  if (this.isRelational("<")) {
	    typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
	  } else {
	    typeNode.typeParameters = null;
	  }

	  this.expect(_tokenizerTypes.types.parenL);
	  var tmp = this.flowParseFunctionTypeParams();
	  typeNode.params = tmp.params;
	  typeNode.rest = tmp.rest;
	  this.expect(_tokenizerTypes.types.parenR);
	  typeNode.returnType = this.flowParseTypeInitialiser();

	  typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation");
	  id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation");

	  this.finishNode(id, id.type);

	  this.semicolon();

	  return this.finishNode(node, "DeclareFunction");
	};

	pp.flowParseDeclare = function (node) {
	  if (this.match(_tokenizerTypes.types._class)) {
	    return this.flowParseDeclareClass(node);
	  } else if (this.match(_tokenizerTypes.types._function)) {
	    return this.flowParseDeclareFunction(node);
	  } else if (this.match(_tokenizerTypes.types._var)) {
	    return this.flowParseDeclareVariable(node);
	  } else if (this.isContextual("module")) {
	    return this.flowParseDeclareModule(node);
	  } else if (this.isContextual("type")) {
	    return this.flowParseDeclareTypeAlias(node);
	  } else if (this.isContextual("interface")) {
	    return this.flowParseDeclareInterface(node);
	  } else {
	    this.unexpected();
	  }
	};

	pp.flowParseDeclareVariable = function (node) {
	  this.next();
	  node.id = this.flowParseTypeAnnotatableIdentifier();
	  this.semicolon();
	  return this.finishNode(node, "DeclareVariable");
	};

	pp.flowParseDeclareModule = function (node) {
	  this.next();

	  if (this.match(_tokenizerTypes.types.string)) {
	    node.id = this.parseExprAtom();
	  } else {
	    node.id = this.parseIdentifier();
	  }

	  var bodyNode = node.body = this.startNode();
	  var body = bodyNode.body = [];
	  this.expect(_tokenizerTypes.types.braceL);
	  while (!this.match(_tokenizerTypes.types.braceR)) {
	    var node2 = this.startNode();

	    // todo: declare check
	    this.next();

	    body.push(this.flowParseDeclare(node2));
	  }
	  this.expect(_tokenizerTypes.types.braceR);

	  this.finishNode(bodyNode, "BlockStatement");
	  return this.finishNode(node, "DeclareModule");
	};

	pp.flowParseDeclareTypeAlias = function (node) {
	  this.next();
	  this.flowParseTypeAlias(node);
	  return this.finishNode(node, "DeclareTypeAlias");
	};

	pp.flowParseDeclareInterface = function (node) {
	  this.next();
	  this.flowParseInterfaceish(node);
	  return this.finishNode(node, "DeclareInterface");
	};

	// Interfaces

	pp.flowParseInterfaceish = function (node, allowStatic) {
	  node.id = this.parseIdentifier();

	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterDeclaration();
	  } else {
	    node.typeParameters = null;
	  }

	  node["extends"] = [];
	  node.mixins = [];

	  if (this.eat(_tokenizerTypes.types._extends)) {
	    do {
	      node["extends"].push(this.flowParseInterfaceExtends());
	    } while (this.eat(_tokenizerTypes.types.comma));
	  }

	  if (this.isContextual("mixins")) {
	    this.next();
	    do {
	      node.mixins.push(this.flowParseInterfaceExtends());
	    } while (this.eat(_tokenizerTypes.types.comma));
	  }

	  node.body = this.flowParseObjectType(allowStatic);
	};

	pp.flowParseInterfaceExtends = function () {
	  var node = this.startNode();

	  node.id = this.parseIdentifier();
	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterInstantiation();
	  } else {
	    node.typeParameters = null;
	  }

	  return this.finishNode(node, "InterfaceExtends");
	};

	pp.flowParseInterface = function (node) {
	  this.flowParseInterfaceish(node, false);
	  return this.finishNode(node, "InterfaceDeclaration");
	};

	// Type aliases

	pp.flowParseTypeAlias = function (node) {
	  node.id = this.parseIdentifier();

	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterDeclaration();
	  } else {
	    node.typeParameters = null;
	  }

	  node.right = this.flowParseTypeInitialiser(_tokenizerTypes.types.eq);
	  this.semicolon();

	  return this.finishNode(node, "TypeAlias");
	};

	// Type annotations

	pp.flowParseTypeParameterDeclaration = function () {
	  var node = this.startNode();
	  node.params = [];

	  this.expectRelational("<");
	  while (!this.isRelational(">")) {
	    node.params.push(this.flowParseExistentialTypeParam() || this.flowParseTypeAnnotatableIdentifier());
	    if (!this.isRelational(">")) {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	  }
	  this.expectRelational(">");

	  return this.finishNode(node, "TypeParameterDeclaration");
	};

	pp.flowParseExistentialTypeParam = function () {
	  if (this.match(_tokenizerTypes.types.star)) {
	    var node = this.startNode();
	    this.next();
	    return this.finishNode(node, "ExistentialTypeParam");
	  }
	};

	pp.flowParseTypeParameterInstantiation = function () {
	  var node = this.startNode(),
	      oldInType = this.state.inType;
	  node.params = [];

	  this.state.inType = true;

	  this.expectRelational("<");
	  while (!this.isRelational(">")) {
	    node.params.push(this.flowParseExistentialTypeParam() || this.flowParseType());
	    if (!this.isRelational(">")) {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	  }
	  this.expectRelational(">");

	  this.state.inType = oldInType;

	  return this.finishNode(node, "TypeParameterInstantiation");
	};

	pp.flowParseObjectPropertyKey = function () {
	  return this.match(_tokenizerTypes.types.num) || this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.parseIdentifier(true);
	};

	pp.flowParseObjectTypeIndexer = function (node, isStatic) {
	  node["static"] = isStatic;

	  this.expect(_tokenizerTypes.types.bracketL);
	  node.id = this.flowParseObjectPropertyKey();
	  node.key = this.flowParseTypeInitialiser();
	  this.expect(_tokenizerTypes.types.bracketR);
	  node.value = this.flowParseTypeInitialiser();

	  this.flowObjectTypeSemicolon();
	  return this.finishNode(node, "ObjectTypeIndexer");
	};

	pp.flowParseObjectTypeMethodish = function (node) {
	  node.params = [];
	  node.rest = null;
	  node.typeParameters = null;

	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterDeclaration();
	  }

	  this.expect(_tokenizerTypes.types.parenL);
	  while (this.match(_tokenizerTypes.types.name)) {
	    node.params.push(this.flowParseFunctionTypeParam());
	    if (!this.match(_tokenizerTypes.types.parenR)) {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	  }

	  if (this.eat(_tokenizerTypes.types.ellipsis)) {
	    node.rest = this.flowParseFunctionTypeParam();
	  }
	  this.expect(_tokenizerTypes.types.parenR);
	  node.returnType = this.flowParseTypeInitialiser();

	  return this.finishNode(node, "FunctionTypeAnnotation");
	};

	pp.flowParseObjectTypeMethod = function (startPos, startLoc, isStatic, key) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(startPos, startLoc));
	  node["static"] = isStatic;
	  node.key = key;
	  node.optional = false;
	  this.flowObjectTypeSemicolon();
	  return this.finishNode(node, "ObjectTypeProperty");
	};

	pp.flowParseObjectTypeCallProperty = function (node, isStatic) {
	  var valueNode = this.startNode();
	  node["static"] = isStatic;
	  node.value = this.flowParseObjectTypeMethodish(valueNode);
	  this.flowObjectTypeSemicolon();
	  return this.finishNode(node, "ObjectTypeCallProperty");
	};

	pp.flowParseObjectType = function (allowStatic) {
	  var nodeStart = this.startNode();
	  var node = undefined;
	  var propertyKey = undefined;
	  var isStatic = undefined;

	  nodeStart.callProperties = [];
	  nodeStart.properties = [];
	  nodeStart.indexers = [];

	  this.expect(_tokenizerTypes.types.braceL);

	  while (!this.match(_tokenizerTypes.types.braceR)) {
	    var optional = false;
	    var startPos = this.state.start,
	        startLoc = this.state.startLoc;
	    node = this.startNode();
	    if (allowStatic && this.isContextual("static")) {
	      this.next();
	      isStatic = true;
	    }

	    if (this.match(_tokenizerTypes.types.bracketL)) {
	      nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic));
	    } else if (this.match(_tokenizerTypes.types.parenL) || this.isRelational("<")) {
	      nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, allowStatic));
	    } else {
	      if (isStatic && this.match(_tokenizerTypes.types.colon)) {
	        propertyKey = this.parseIdentifier();
	      } else {
	        propertyKey = this.flowParseObjectPropertyKey();
	      }
	      if (this.isRelational("<") || this.match(_tokenizerTypes.types.parenL)) {
	        // This is a method property
	        nodeStart.properties.push(this.flowParseObjectTypeMethod(startPos, startLoc, isStatic, propertyKey));
	      } else {
	        if (this.eat(_tokenizerTypes.types.question)) {
	          optional = true;
	        }
	        node.key = propertyKey;
	        node.value = this.flowParseTypeInitialiser();
	        node.optional = optional;
	        node["static"] = isStatic;
	        this.flowObjectTypeSemicolon();
	        nodeStart.properties.push(this.finishNode(node, "ObjectTypeProperty"));
	      }
	    }
	  }

	  this.expect(_tokenizerTypes.types.braceR);

	  return this.finishNode(nodeStart, "ObjectTypeAnnotation");
	};

	pp.flowObjectTypeSemicolon = function () {
	  if (!this.eat(_tokenizerTypes.types.semi) && !this.eat(_tokenizerTypes.types.comma) && !this.match(_tokenizerTypes.types.braceR)) {
	    this.unexpected();
	  }
	};

	pp.flowParseGenericType = function (startPos, startLoc, id) {
	  var node = this.startNodeAt(startPos, startLoc);

	  node.typeParameters = null;
	  node.id = id;

	  while (this.eat(_tokenizerTypes.types.dot)) {
	    var node2 = this.startNodeAt(startPos, startLoc);
	    node2.qualification = node.id;
	    node2.id = this.parseIdentifier();
	    node.id = this.finishNode(node2, "QualifiedTypeIdentifier");
	  }

	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterInstantiation();
	  }

	  return this.finishNode(node, "GenericTypeAnnotation");
	};

	pp.flowParseTypeofType = function () {
	  var node = this.startNode();
	  this.expect(_tokenizerTypes.types._typeof);
	  node.argument = this.flowParsePrimaryType();
	  return this.finishNode(node, "TypeofTypeAnnotation");
	};

	pp.flowParseTupleType = function () {
	  var node = this.startNode();
	  node.types = [];
	  this.expect(_tokenizerTypes.types.bracketL);
	  // We allow trailing commas
	  while (this.state.pos < this.input.length && !this.match(_tokenizerTypes.types.bracketR)) {
	    node.types.push(this.flowParseType());
	    if (this.match(_tokenizerTypes.types.bracketR)) break;
	    this.expect(_tokenizerTypes.types.comma);
	  }
	  this.expect(_tokenizerTypes.types.bracketR);
	  return this.finishNode(node, "TupleTypeAnnotation");
	};

	pp.flowParseFunctionTypeParam = function () {
	  var optional = false;
	  var node = this.startNode();
	  node.name = this.parseIdentifier();
	  if (this.eat(_tokenizerTypes.types.question)) {
	    optional = true;
	  }
	  node.optional = optional;
	  node.typeAnnotation = this.flowParseTypeInitialiser();
	  return this.finishNode(node, "FunctionTypeParam");
	};

	pp.flowParseFunctionTypeParams = function () {
	  var ret = { params: [], rest: null };
	  while (this.match(_tokenizerTypes.types.name)) {
	    ret.params.push(this.flowParseFunctionTypeParam());
	    if (!this.match(_tokenizerTypes.types.parenR)) {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	  }
	  if (this.eat(_tokenizerTypes.types.ellipsis)) {
	    ret.rest = this.flowParseFunctionTypeParam();
	  }
	  return ret;
	};

	pp.flowIdentToTypeAnnotation = function (startPos, startLoc, node, id) {
	  switch (id.name) {
	    case "any":
	      return this.finishNode(node, "AnyTypeAnnotation");

	    case "void":
	      return this.finishNode(node, "VoidTypeAnnotation");

	    case "bool":
	    case "boolean":
	      return this.finishNode(node, "BooleanTypeAnnotation");

	    case "mixed":
	      return this.finishNode(node, "MixedTypeAnnotation");

	    case "number":
	      return this.finishNode(node, "NumberTypeAnnotation");

	    case "string":
	      return this.finishNode(node, "StringTypeAnnotation");

	    default:
	      return this.flowParseGenericType(startPos, startLoc, id);
	  }
	};

	// The parsing of types roughly parallels the parsing of expressions, and
	// primary types are kind of like primary expressions...they're the
	// primitives with which other types are constructed.
	pp.flowParsePrimaryType = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var node = this.startNode();
	  var tmp = undefined;
	  var type = undefined;
	  var isGroupedType = false;

	  switch (this.state.type) {
	    case _tokenizerTypes.types.name:
	      return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());

	    case _tokenizerTypes.types.braceL:
	      return this.flowParseObjectType();

	    case _tokenizerTypes.types.bracketL:
	      return this.flowParseTupleType();

	    case _tokenizerTypes.types.relational:
	      if (this.state.value === "<") {
	        node.typeParameters = this.flowParseTypeParameterDeclaration();
	        this.expect(_tokenizerTypes.types.parenL);
	        tmp = this.flowParseFunctionTypeParams();
	        node.params = tmp.params;
	        node.rest = tmp.rest;
	        this.expect(_tokenizerTypes.types.parenR);

	        this.expect(_tokenizerTypes.types.arrow);

	        node.returnType = this.flowParseType();

	        return this.finishNode(node, "FunctionTypeAnnotation");
	      }

	    case _tokenizerTypes.types.parenL:
	      this.next();

	      // Check to see if this is actually a grouped type
	      if (!this.match(_tokenizerTypes.types.parenR) && !this.match(_tokenizerTypes.types.ellipsis)) {
	        if (this.match(_tokenizerTypes.types.name)) {
	          var token = this.lookahead().type;
	          isGroupedType = token !== _tokenizerTypes.types.question && token !== _tokenizerTypes.types.colon;
	        } else {
	          isGroupedType = true;
	        }
	      }

	      if (isGroupedType) {
	        type = this.flowParseType();
	        this.expect(_tokenizerTypes.types.parenR);

	        // If we see a => next then someone was probably confused about
	        // function types, so we can provide a better error message
	        if (this.eat(_tokenizerTypes.types.arrow)) {
	          this.raise(node, "Unexpected token =>. It looks like " + "you are trying to write a function type, but you ended up " + "writing a grouped type followed by an =>, which is a syntax " + "error. Remember, function type parameters are named so function " + "types look like (name1: type1, name2: type2) => returnType. You " + "probably wrote (type1) => returnType");
	        }

	        return type;
	      }

	      tmp = this.flowParseFunctionTypeParams();
	      node.params = tmp.params;
	      node.rest = tmp.rest;

	      this.expect(_tokenizerTypes.types.parenR);

	      this.expect(_tokenizerTypes.types.arrow);

	      node.returnType = this.flowParseType();
	      node.typeParameters = null;

	      return this.finishNode(node, "FunctionTypeAnnotation");

	    case _tokenizerTypes.types.string:
	      node.value = this.state.value;
	      this.addExtra(node, "rawValue", node.value);
	      this.addExtra(node, "raw", this.input.slice(this.state.start, this.state.end));
	      this.next();
	      return this.finishNode(node, "StringLiteralTypeAnnotation");

	    case _tokenizerTypes.types._true:case _tokenizerTypes.types._false:
	      node.value = this.match(_tokenizerTypes.types._true);
	      this.next();
	      return this.finishNode(node, "BooleanLiteralTypeAnnotation");

	    case _tokenizerTypes.types.num:
	      node.value = this.state.value;
	      this.addExtra(node, "rawValue", node.value);
	      this.addExtra(node, "raw", this.input.slice(this.state.start, this.state.end));
	      this.next();
	      return this.finishNode(node, "NumericLiteralTypeAnnotation");

	    case _tokenizerTypes.types._null:
	      node.value = this.match(_tokenizerTypes.types._null);
	      this.next();
	      return this.finishNode(node, "NullLiteralTypeAnnotation");

	    case _tokenizerTypes.types._this:
	      node.value = this.match(_tokenizerTypes.types._this);
	      this.next();
	      return this.finishNode(node, "ThisTypeAnnotation");

	    default:
	      if (this.state.type.keyword === "typeof") {
	        return this.flowParseTypeofType();
	      }
	  }

	  this.unexpected();
	};

	pp.flowParsePostfixType = function () {
	  var node = this.startNode();
	  var type = node.elementType = this.flowParsePrimaryType();
	  if (this.match(_tokenizerTypes.types.bracketL)) {
	    this.expect(_tokenizerTypes.types.bracketL);
	    this.expect(_tokenizerTypes.types.bracketR);
	    return this.finishNode(node, "ArrayTypeAnnotation");
	  } else {
	    return type;
	  }
	};

	pp.flowParsePrefixType = function () {
	  var node = this.startNode();
	  if (this.eat(_tokenizerTypes.types.question)) {
	    node.typeAnnotation = this.flowParsePrefixType();
	    return this.finishNode(node, "NullableTypeAnnotation");
	  } else {
	    return this.flowParsePostfixType();
	  }
	};

	pp.flowParseIntersectionType = function () {
	  var node = this.startNode();
	  var type = this.flowParsePrefixType();
	  node.types = [type];
	  while (this.eat(_tokenizerTypes.types.bitwiseAND)) {
	    node.types.push(this.flowParsePrefixType());
	  }
	  return node.types.length === 1 ? type : this.finishNode(node, "IntersectionTypeAnnotation");
	};

	pp.flowParseUnionType = function () {
	  var node = this.startNode();
	  var type = this.flowParseIntersectionType();
	  node.types = [type];
	  while (this.eat(_tokenizerTypes.types.bitwiseOR)) {
	    node.types.push(this.flowParseIntersectionType());
	  }
	  return node.types.length === 1 ? type : this.finishNode(node, "UnionTypeAnnotation");
	};

	pp.flowParseType = function () {
	  var oldInType = this.state.inType;
	  this.state.inType = true;
	  var type = this.flowParseUnionType();
	  this.state.inType = oldInType;
	  return type;
	};

	pp.flowParseTypeAnnotation = function () {
	  var node = this.startNode();
	  node.typeAnnotation = this.flowParseTypeInitialiser();
	  return this.finishNode(node, "TypeAnnotation");
	};

	pp.flowParseTypeAnnotatableIdentifier = function (requireTypeAnnotation, canBeOptionalParam) {
	  var ident = this.parseIdentifier();
	  var isOptionalParam = false;

	  if (canBeOptionalParam && this.eat(_tokenizerTypes.types.question)) {
	    this.expect(_tokenizerTypes.types.question);
	    isOptionalParam = true;
	  }

	  if (requireTypeAnnotation || this.match(_tokenizerTypes.types.colon)) {
	    ident.typeAnnotation = this.flowParseTypeAnnotation();
	    this.finishNode(ident, ident.type);
	  }

	  if (isOptionalParam) {
	    ident.optional = true;
	    this.finishNode(ident, ident.type);
	  }

	  return ident;
	};

	exports["default"] = function (instance) {
	  // plain function return types: function name(): string {}
	  instance.extend("parseFunctionBody", function (inner) {
	    return function (node, allowExpression) {
	      if (this.match(_tokenizerTypes.types.colon) && !allowExpression) {
	        // if allowExpression is true then we're parsing an arrow function and if
	        // there's a return type then it's been handled elsewhere
	        node.returnType = this.flowParseTypeAnnotation();
	      }

	      return inner.call(this, node, allowExpression);
	    };
	  });

	  // interfaces
	  instance.extend("parseStatement", function (inner) {
	    return function (declaration, topLevel) {
	      // strict mode handling of `interface` since it's a reserved word
	      if (this.state.strict && this.match(_tokenizerTypes.types.name) && this.state.value === "interface") {
	        var node = this.startNode();
	        this.next();
	        return this.flowParseInterface(node);
	      } else {
	        return inner.call(this, declaration, topLevel);
	      }
	    };
	  });

	  // declares, interfaces and type aliases
	  instance.extend("parseExpressionStatement", function (inner) {
	    return function (node, expr) {
	      if (expr.type === "Identifier") {
	        if (expr.name === "declare") {
	          if (this.match(_tokenizerTypes.types._class) || this.match(_tokenizerTypes.types.name) || this.match(_tokenizerTypes.types._function) || this.match(_tokenizerTypes.types._var)) {
	            return this.flowParseDeclare(node);
	          }
	        } else if (this.match(_tokenizerTypes.types.name)) {
	          if (expr.name === "interface") {
	            return this.flowParseInterface(node);
	          } else if (expr.name === "type") {
	            return this.flowParseTypeAlias(node);
	          }
	        }
	      }

	      return inner.call(this, node, expr);
	    };
	  });

	  // export type
	  instance.extend("shouldParseExportDeclaration", function (inner) {
	    return function () {
	      return this.isContextual("type") || this.isContextual("interface") || inner.call(this);
	    };
	  });

	  instance.extend("parseParenItem", function () {
	    return function (node, startLoc, startPos, forceArrow /*:: ?*/) {
	      var canBeArrow = this.state.potentialArrowAt = startPos;
	      if (this.match(_tokenizerTypes.types.colon)) {
	        var typeCastNode = this.startNodeAt(startLoc, startPos);
	        typeCastNode.expression = node;
	        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();

	        if (forceArrow && !this.match(_tokenizerTypes.types.arrow)) {
	          this.unexpected();
	        }

	        if (canBeArrow && this.eat(_tokenizerTypes.types.arrow)) {
	          // ((lol): number => {});
	          var params = node.type === "SequenceExpression" ? node.expressions : [node];
	          var func = this.parseArrowExpression(this.startNodeAt(startLoc, startPos), params);
	          func.returnType = typeCastNode.typeAnnotation;
	          return func;
	        } else {
	          return this.finishNode(typeCastNode, "TypeCastExpression");
	        }
	      } else {
	        return node;
	      }
	    };
	  });

	  instance.extend("parseExport", function (inner) {
	    return function (node) {
	      node = inner.call(this, node);
	      if (node.type === "ExportNamedDeclaration") {
	        node.exportKind = node.exportKind || "value";
	      }
	      return node;
	    };
	  });

	  instance.extend("parseExportDeclaration", function (inner) {
	    return function (node) {
	      if (this.isContextual("type")) {
	        node.exportKind = "type";

	        var declarationNode = this.startNode();
	        this.next();

	        if (this.match(_tokenizerTypes.types.braceL)) {
	          // export type { foo, bar };
	          node.specifiers = this.parseExportSpecifiers();
	          this.parseExportFrom(node);
	          return null;
	        } else {
	          // export type Foo = Bar;
	          return this.flowParseTypeAlias(declarationNode);
	        }
	      } else if (this.isContextual("interface")) {
	        node.exportKind = "type";
	        var declarationNode = this.startNode();
	        this.next();
	        return this.flowParseInterface(declarationNode);
	      } else {
	        return inner.call(this, node);
	      }
	    };
	  });

	  instance.extend("parseClassId", function (inner) {
	    return function (node) {
	      inner.apply(this, arguments);
	      if (this.isRelational("<")) {
	        node.typeParameters = this.flowParseTypeParameterDeclaration();
	      }
	    };
	  });

	  // don't consider `void` to be a keyword as then it'll use the void token type
	  // and set startExpr
	  instance.extend("isKeyword", function (inner) {
	    return function (name) {
	      if (this.state.inType && name === "void") {
	        return false;
	      } else {
	        return inner.call(this, name);
	      }
	    };
	  });

	  // ensure that inside flow types, we bypass the jsx parser plugin
	  instance.extend("readToken", function (inner) {
	    return function (code) {
	      if (this.state.inType && (code === 62 || code === 60)) {
	        return this.finishOp(_tokenizerTypes.types.relational, 1);
	      } else {
	        return inner.call(this, code);
	      }
	    };
	  });

	  // don't lex any token as a jsx one inside a flow type
	  instance.extend("jsx_readToken", function (inner) {
	    return function () {
	      if (!this.state.inType) return inner.call(this);
	    };
	  });

	  function typeCastToParameter(node) {
	    node.expression.typeAnnotation = node.typeAnnotation;
	    return node.expression;
	  }

	  instance.extend("toAssignable", function (inner) {
	    return function (node) {
	      if (node.type === "TypeCastExpression") {
	        return typeCastToParameter(node);
	      } else {
	        return inner.apply(this, arguments);
	      }
	    };
	  });

	  // turn type casts that we found in function parameter head into type annotated params
	  instance.extend("toAssignableList", function (inner) {
	    return function (exprList, isBinding) {
	      for (var i = 0; i < exprList.length; i++) {
	        var expr = exprList[i];
	        if (expr && expr.type === "TypeCastExpression") {
	          exprList[i] = typeCastToParameter(expr);
	        }
	      }
	      return inner.call(this, exprList, isBinding);
	    };
	  });

	  // this is a list of nodes, from something like a call expression, we need to filter the
	  // type casts that we've found that are illegal in this context
	  instance.extend("toReferencedList", function () {
	    return function (exprList) {
	      for (var i = 0; i < exprList.length; i++) {
	        var expr = exprList[i];
	        if (expr && expr._exprListItem && expr.type === "TypeCastExpression") {
	          this.raise(expr.start, "Unexpected type cast");
	        }
	      }

	      return exprList;
	    };
	  });

	  // parse an item inside a expression list eg. `(NODE, NODE)` where NODE represents
	  // the position where this function is cal;ed
	  instance.extend("parseExprListItem", function (inner) {
	    return function (allowEmpty, refShorthandDefaultPos) {
	      var container = this.startNode();
	      var node = inner.call(this, allowEmpty, refShorthandDefaultPos);
	      if (this.match(_tokenizerTypes.types.colon)) {
	        container._exprListItem = true;
	        container.expression = node;
	        container.typeAnnotation = this.flowParseTypeAnnotation();
	        return this.finishNode(container, "TypeCastExpression");
	      } else {
	        return node;
	      }
	    };
	  });

	  instance.extend("checkLVal", function (inner) {
	    return function (node) {
	      if (node.type !== "TypeCastExpression") {
	        return inner.apply(this, arguments);
	      }
	    };
	  });

	  // parse class property type annotations
	  instance.extend("parseClassProperty", function (inner) {
	    return function (node) {
	      if (this.match(_tokenizerTypes.types.colon)) {
	        node.typeAnnotation = this.flowParseTypeAnnotation();
	      }
	      return inner.call(this, node);
	    };
	  });

	  // determine whether or not we're currently in the position where a class property would appear
	  instance.extend("isClassProperty", function (inner) {
	    return function () {
	      return this.match(_tokenizerTypes.types.colon) || inner.call(this);
	    };
	  });

	  // parse type parameters for class methods
	  instance.extend("parseClassMethod", function () {
	    return function (classBody, method, isGenerator, isAsync) {
	      if (this.isRelational("<")) {
	        method.typeParameters = this.flowParseTypeParameterDeclaration();
	      }
	      this.parseMethod(method, isGenerator, isAsync);
	      classBody.body.push(this.finishNode(method, "ClassMethod"));
	    };
	  });

	  // parse a the super class type parameters and implements
	  instance.extend("parseClassSuper", function (inner) {
	    return function (node, isStatement) {
	      inner.call(this, node, isStatement);
	      if (node.superClass && this.isRelational("<")) {
	        node.superTypeParameters = this.flowParseTypeParameterInstantiation();
	      }
	      if (this.isContextual("implements")) {
	        this.next();
	        var implemented = node["implements"] = [];
	        do {
	          var _node = this.startNode();
	          _node.id = this.parseIdentifier();
	          if (this.isRelational("<")) {
	            _node.typeParameters = this.flowParseTypeParameterInstantiation();
	          } else {
	            _node.typeParameters = null;
	          }
	          implemented.push(this.finishNode(_node, "ClassImplements"));
	        } while (this.eat(_tokenizerTypes.types.comma));
	      }
	    };
	  });

	  // parse type parameters for object method shorthand
	  instance.extend("parseObjPropValue", function (inner) {
	    return function (prop) {
	      var typeParameters = undefined;

	      // method shorthand
	      if (this.isRelational("<")) {
	        typeParameters = this.flowParseTypeParameterDeclaration();
	        if (!this.match(_tokenizerTypes.types.parenL)) this.unexpected();
	      }

	      inner.apply(this, arguments);

	      // add typeParameters if we found them
	      if (typeParameters) {
	        (prop.value || prop).typeParameters = typeParameters;
	      }
	    };
	  });

	  instance.extend("parseAssignableListItemTypes", function () {
	    return function (param) {
	      if (this.eat(_tokenizerTypes.types.question)) {
	        param.optional = true;
	      }
	      if (this.match(_tokenizerTypes.types.colon)) {
	        param.typeAnnotation = this.flowParseTypeAnnotation();
	      }
	      this.finishNode(param, param.type);
	      return param;
	    };
	  });

	  // parse typeof and type imports
	  instance.extend("parseImportSpecifiers", function (inner) {
	    return function (node) {
	      node.importKind = "value";

	      var kind = null;
	      if (this.match(_tokenizerTypes.types._typeof)) {
	        kind = "typeof";
	      } else if (this.isContextual("type")) {
	        kind = "type";
	      }
	      if (kind) {
	        var lh = this.lookahead();
	        if (lh.type === _tokenizerTypes.types.name && lh.value !== "from" || lh.type === _tokenizerTypes.types.braceL || lh.type === _tokenizerTypes.types.star) {
	          this.next();
	          node.importKind = kind;
	        }
	      }

	      inner.call(this, node);
	    };
	  });

	  // parse function type parameters - function foo<T>() {}
	  instance.extend("parseFunctionParams", function (inner) {
	    return function (node) {
	      if (this.isRelational("<")) {
	        node.typeParameters = this.flowParseTypeParameterDeclaration();
	      }
	      inner.call(this, node);
	    };
	  });

	  // parse flow type annotations on variable declarator heads - let foo: string = bar
	  instance.extend("parseVarHead", function (inner) {
	    return function (decl) {
	      inner.call(this, decl);
	      if (this.match(_tokenizerTypes.types.colon)) {
	        decl.id.typeAnnotation = this.flowParseTypeAnnotation();
	        this.finishNode(decl.id, decl.id.type);
	      }
	    };
	  });

	  // parse the return type of an async arrow function - let foo = (async (): number => {});
	  instance.extend("parseAsyncArrowFromCallExpression", function (inner) {
	    return function (node, call) {
	      if (this.match(_tokenizerTypes.types.colon)) {
	        node.returnType = this.flowParseTypeAnnotation();
	      }

	      return inner.call(this, node, call);
	    };
	  });

	  // todo description
	  instance.extend("shouldParseAsyncArrow", function (inner) {
	    return function () {
	      return this.match(_tokenizerTypes.types.colon) || inner.call(this);
	    };
	  });

	  // handle return types for arrow functions
	  instance.extend("parseParenAndDistinguishExpression", function (inner) {
	    return function (startPos, startLoc, canBeArrow, isAsync) {
	      startPos = startPos || this.state.start;
	      startLoc = startLoc || this.state.startLoc;

	      if (canBeArrow && this.lookahead().type === _tokenizerTypes.types.parenR) {
	        // let foo = (): number => {};
	        this.expect(_tokenizerTypes.types.parenL);
	        this.expect(_tokenizerTypes.types.parenR);

	        var node = this.startNodeAt(startPos, startLoc);
	        if (this.match(_tokenizerTypes.types.colon)) node.returnType = this.flowParseTypeAnnotation();
	        this.expect(_tokenizerTypes.types.arrow);
	        return this.parseArrowExpression(node, [], isAsync);
	      } else {
	        // let foo = (foo): number => {};
	        var node = inner.call(this, startPos, startLoc, canBeArrow, isAsync);

	        if (this.match(_tokenizerTypes.types.colon)) {
	          var state = this.state.clone();
	          try {
	            return this.parseParenItem(node, startPos, startLoc, true);
	          } catch (err) {
	            if (err instanceof SyntaxError) {
	              this.state = state;
	              return node;
	            } else {
	              throw err;
	            }
	          }
	        } else {
	          return node;
	        }
	      }
	    };
	  });
	};

	module.exports = exports["default"];
	},{"../parser":5,"../tokenizer/types":17,"babel-runtime/helpers/interop-require-default":26}],12:[function(require,module,exports){
	"use strict";

	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

	exports.__esModule = true;

	var _xhtml = require("./xhtml");

	var _xhtml2 = _interopRequireDefault(_xhtml);

	var _tokenizerTypes = require("../../tokenizer/types");

	var _tokenizerContext = require("../../tokenizer/context");

	var _parser = require("../../parser");

	var _parser2 = _interopRequireDefault(_parser);

	var _utilIdentifier = require("../../util/identifier");

	var _utilWhitespace = require("../../util/whitespace");

	var HEX_NUMBER = /^[\da-fA-F]+$/;
	var DECIMAL_NUMBER = /^\d+$/;

	_tokenizerContext.types.j_oTag = new _tokenizerContext.TokContext("<tag", false);
	_tokenizerContext.types.j_cTag = new _tokenizerContext.TokContext("</tag", false);
	_tokenizerContext.types.j_expr = new _tokenizerContext.TokContext("<tag>...</tag>", true, true);

	_tokenizerTypes.types.jsxName = new _tokenizerTypes.TokenType("jsxName");
	_tokenizerTypes.types.jsxText = new _tokenizerTypes.TokenType("jsxText", { beforeExpr: true });
	_tokenizerTypes.types.jsxTagStart = new _tokenizerTypes.TokenType("jsxTagStart");
	_tokenizerTypes.types.jsxTagEnd = new _tokenizerTypes.TokenType("jsxTagEnd");

	_tokenizerTypes.types.jsxTagStart.updateContext = function () {
	  this.state.context.push(_tokenizerContext.types.j_expr); // treat as beginning of JSX expression
	  this.state.context.push(_tokenizerContext.types.j_oTag); // start opening tag context
	  this.state.exprAllowed = false;
	};

	_tokenizerTypes.types.jsxTagEnd.updateContext = function (prevType) {
	  var out = this.state.context.pop();
	  if (out === _tokenizerContext.types.j_oTag && prevType === _tokenizerTypes.types.slash || out === _tokenizerContext.types.j_cTag) {
	    this.state.context.pop();
	    this.state.exprAllowed = this.curContext() === _tokenizerContext.types.j_expr;
	  } else {
	    this.state.exprAllowed = true;
	  }
	};

	var pp = _parser2["default"].prototype;

	// Reads inline JSX contents token.

	pp.jsxReadToken = function () {
	  var out = "";
	  var chunkStart = this.state.pos;
	  for (;;) {
	    if (this.state.pos >= this.input.length) {
	      this.raise(this.state.start, "Unterminated JSX contents");
	    }

	    var ch = this.input.charCodeAt(this.state.pos);

	    switch (ch) {
	      case 60: // "<"
	      case 123:
	        // "{"
	        if (this.state.pos === this.state.start) {
	          if (ch === 60 && this.state.exprAllowed) {
	            ++this.state.pos;
	            return this.finishToken(_tokenizerTypes.types.jsxTagStart);
	          }
	          return this.getTokenFromCode(ch);
	        }
	        out += this.input.slice(chunkStart, this.state.pos);
	        return this.finishToken(_tokenizerTypes.types.jsxText, out);

	      case 38:
	        // "&"
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.jsxReadEntity();
	        chunkStart = this.state.pos;
	        break;

	      default:
	        if (_utilWhitespace.isNewLine(ch)) {
	          out += this.input.slice(chunkStart, this.state.pos);
	          out += this.jsxReadNewLine(true);
	          chunkStart = this.state.pos;
	        } else {
	          ++this.state.pos;
	        }
	    }
	  }
	};

	pp.jsxReadNewLine = function (normalizeCRLF) {
	  var ch = this.input.charCodeAt(this.state.pos);
	  var out = undefined;
	  ++this.state.pos;
	  if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
	    ++this.state.pos;
	    out = normalizeCRLF ? "\n" : "\r\n";
	  } else {
	    out = String.fromCharCode(ch);
	  }
	  ++this.state.curLine;
	  this.state.lineStart = this.state.pos;

	  return out;
	};

	pp.jsxReadString = function (quote) {
	  var out = "";
	  var chunkStart = ++this.state.pos;
	  for (;;) {
	    if (this.state.pos >= this.input.length) {
	      this.raise(this.state.start, "Unterminated string constant");
	    }

	    var ch = this.input.charCodeAt(this.state.pos);
	    if (ch === quote) break;
	    if (ch === 38) {
	      // "&"
	      out += this.input.slice(chunkStart, this.state.pos);
	      out += this.jsxReadEntity();
	      chunkStart = this.state.pos;
	    } else if (_utilWhitespace.isNewLine(ch)) {
	      out += this.input.slice(chunkStart, this.state.pos);
	      out += this.jsxReadNewLine(false);
	      chunkStart = this.state.pos;
	    } else {
	      ++this.state.pos;
	    }
	  }
	  out += this.input.slice(chunkStart, this.state.pos++);
	  return this.finishToken(_tokenizerTypes.types.string, out);
	};

	pp.jsxReadEntity = function () {
	  var str = "";
	  var count = 0;
	  var entity = undefined;
	  var ch = this.input[this.state.pos];

	  var startPos = ++this.state.pos;
	  while (this.state.pos < this.input.length && count++ < 10) {
	    ch = this.input[this.state.pos++];
	    if (ch === ";") {
	      if (str[0] === "#") {
	        if (str[1] === "x") {
	          str = str.substr(2);
	          if (HEX_NUMBER.test(str)) entity = String.fromCharCode(parseInt(str, 16));
	        } else {
	          str = str.substr(1);
	          if (DECIMAL_NUMBER.test(str)) entity = String.fromCharCode(parseInt(str, 10));
	        }
	      } else {
	        entity = _xhtml2["default"][str];
	      }
	      break;
	    }
	    str += ch;
	  }
	  if (!entity) {
	    this.state.pos = startPos;
	    return "&";
	  }
	  return entity;
	};

	// Read a JSX identifier (valid tag or attribute name).
	//
	// Optimized version since JSX identifiers can"t contain
	// escape characters and so can be read as single slice.
	// Also assumes that first character was already checked
	// by isIdentifierStart in readToken.

	pp.jsxReadWord = function () {
	  var ch = undefined;
	  var start = this.state.pos;
	  do {
	    ch = this.input.charCodeAt(++this.state.pos);
	  } while (_utilIdentifier.isIdentifierChar(ch) || ch === 45); // "-"
	  return this.finishToken(_tokenizerTypes.types.jsxName, this.input.slice(start, this.state.pos));
	};

	// Transforms JSX element name to string.

	function getQualifiedJSXName(object) {
	  if (object.type === "JSXIdentifier") {
	    return object.name;
	  }

	  if (object.type === "JSXNamespacedName") {
	    return object.namespace.name + ":" + object.name.name;
	  }

	  if (object.type === "JSXMemberExpression") {
	    return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
	  }
	}

	// Parse next token as JSX identifier

	pp.jsxParseIdentifier = function () {
	  var node = this.startNode();
	  if (this.match(_tokenizerTypes.types.jsxName)) {
	    node.name = this.state.value;
	  } else if (this.state.type.keyword) {
	    node.name = this.state.type.keyword;
	  } else {
	    this.unexpected();
	  }
	  this.next();
	  return this.finishNode(node, "JSXIdentifier");
	};

	// Parse namespaced identifier.

	pp.jsxParseNamespacedName = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var name = this.jsxParseIdentifier();
	  if (!this.eat(_tokenizerTypes.types.colon)) return name;

	  var node = this.startNodeAt(startPos, startLoc);
	  node.namespace = name;
	  node.name = this.jsxParseIdentifier();
	  return this.finishNode(node, "JSXNamespacedName");
	};

	// Parses element name in any form - namespaced, member
	// or single identifier.

	pp.jsxParseElementName = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var node = this.jsxParseNamespacedName();
	  while (this.eat(_tokenizerTypes.types.dot)) {
	    var newNode = this.startNodeAt(startPos, startLoc);
	    newNode.object = node;
	    newNode.property = this.jsxParseIdentifier();
	    node = this.finishNode(newNode, "JSXMemberExpression");
	  }
	  return node;
	};

	// Parses any type of JSX attribute value.

	pp.jsxParseAttributeValue = function () {
	  var node = undefined;
	  switch (this.state.type) {
	    case _tokenizerTypes.types.braceL:
	      node = this.jsxParseExpressionContainer();
	      if (node.expression.type === "JSXEmptyExpression") {
	        this.raise(node.start, "JSX attributes must only be assigned a non-empty expression");
	      } else {
	        return node;
	      }

	    case _tokenizerTypes.types.jsxTagStart:
	    case _tokenizerTypes.types.string:
	      node = this.parseExprAtom();
	      node.extra = null;
	      return node;

	    default:
	      this.raise(this.state.start, "JSX value should be either an expression or a quoted JSX text");
	  }
	};

	// JSXEmptyExpression is unique type since it doesn't actually parse anything,
	// and so it should start at the end of last read token (left brace) and finish
	// at the beginning of the next one (right brace).

	pp.jsxParseEmptyExpression = function () {
	  var node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);
	  return this.finishNodeAt(node, "JSXEmptyExpression", this.start, this.startLoc);
	};

	// Parses JSX expression enclosed into curly brackets.

	pp.jsxParseExpressionContainer = function () {
	  var node = this.startNode();
	  this.next();
	  if (this.match(_tokenizerTypes.types.braceR)) {
	    node.expression = this.jsxParseEmptyExpression();
	  } else {
	    node.expression = this.parseExpression();
	  }
	  this.expect(_tokenizerTypes.types.braceR);
	  return this.finishNode(node, "JSXExpressionContainer");
	};

	// Parses following JSX attribute name-value pair.

	pp.jsxParseAttribute = function () {
	  var node = this.startNode();
	  if (this.eat(_tokenizerTypes.types.braceL)) {
	    this.expect(_tokenizerTypes.types.ellipsis);
	    node.argument = this.parseMaybeAssign();
	    this.expect(_tokenizerTypes.types.braceR);
	    return this.finishNode(node, "JSXSpreadAttribute");
	  }
	  node.name = this.jsxParseNamespacedName();
	  node.value = this.eat(_tokenizerTypes.types.eq) ? this.jsxParseAttributeValue() : null;
	  return this.finishNode(node, "JSXAttribute");
	};

	// Parses JSX opening tag starting after "<".

	pp.jsxParseOpeningElementAt = function (startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.attributes = [];
	  node.name = this.jsxParseElementName();
	  while (!this.match(_tokenizerTypes.types.slash) && !this.match(_tokenizerTypes.types.jsxTagEnd)) {
	    node.attributes.push(this.jsxParseAttribute());
	  }
	  node.selfClosing = this.eat(_tokenizerTypes.types.slash);
	  this.expect(_tokenizerTypes.types.jsxTagEnd);
	  return this.finishNode(node, "JSXOpeningElement");
	};

	// Parses JSX closing tag starting after "</".

	pp.jsxParseClosingElementAt = function (startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.name = this.jsxParseElementName();
	  this.expect(_tokenizerTypes.types.jsxTagEnd);
	  return this.finishNode(node, "JSXClosingElement");
	};

	// Parses entire JSX element, including it"s opening tag
	// (starting after "<"), attributes, contents and closing tag.

	pp.jsxParseElementAt = function (startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  var children = [];
	  var openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);
	  var closingElement = null;

	  if (!openingElement.selfClosing) {
	    contents: for (;;) {
	      switch (this.state.type) {
	        case _tokenizerTypes.types.jsxTagStart:
	          startPos = this.state.start;startLoc = this.state.startLoc;
	          this.next();
	          if (this.eat(_tokenizerTypes.types.slash)) {
	            closingElement = this.jsxParseClosingElementAt(startPos, startLoc);
	            break contents;
	          }
	          children.push(this.jsxParseElementAt(startPos, startLoc));
	          break;

	        case _tokenizerTypes.types.jsxText:
	          children.push(this.parseExprAtom());
	          break;

	        case _tokenizerTypes.types.braceL:
	          children.push(this.jsxParseExpressionContainer());
	          break;

	        default:
	          this.unexpected();
	      }
	    }

	    if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
	      this.raise(closingElement.start, "Expected corresponding JSX closing tag for <" + getQualifiedJSXName(openingElement.name) + ">");
	    }
	  }

	  node.openingElement = openingElement;
	  node.closingElement = closingElement;
	  node.children = children;
	  if (this.match(_tokenizerTypes.types.relational) && this.state.value === "<") {
	    this.raise(this.state.start, "Adjacent JSX elements must be wrapped in an enclosing tag");
	  }
	  return this.finishNode(node, "JSXElement");
	};

	// Parses entire JSX element from current position.

	pp.jsxParseElement = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  this.next();
	  return this.jsxParseElementAt(startPos, startLoc);
	};

	exports["default"] = function (instance) {
	  instance.extend("parseExprAtom", function (inner) {
	    return function (refShortHandDefaultPos) {
	      if (this.match(_tokenizerTypes.types.jsxText)) {
	        var node = this.parseLiteral(this.state.value, "JSXText");
	        // https://github.com/babel/babel/issues/2078
	        node.extra = null;
	        return node;
	      } else if (this.match(_tokenizerTypes.types.jsxTagStart)) {
	        return this.jsxParseElement();
	      } else {
	        return inner.call(this, refShortHandDefaultPos);
	      }
	    };
	  });

	  instance.extend("readToken", function (inner) {
	    return function (code) {
	      var context = this.curContext();

	      if (context === _tokenizerContext.types.j_expr) {
	        return this.jsxReadToken();
	      }

	      if (context === _tokenizerContext.types.j_oTag || context === _tokenizerContext.types.j_cTag) {
	        if (_utilIdentifier.isIdentifierStart(code)) {
	          return this.jsxReadWord();
	        }

	        if (code === 62) {
	          ++this.state.pos;
	          return this.finishToken(_tokenizerTypes.types.jsxTagEnd);
	        }

	        if ((code === 34 || code === 39) && context === _tokenizerContext.types.j_oTag) {
	          return this.jsxReadString(code);
	        }
	      }

	      if (code === 60 && this.state.exprAllowed) {
	        ++this.state.pos;
	        return this.finishToken(_tokenizerTypes.types.jsxTagStart);
	      }

	      return inner.call(this, code);
	    };
	  });

	  instance.extend("updateContext", function (inner) {
	    return function (prevType) {
	      if (this.match(_tokenizerTypes.types.braceL)) {
	        var curContext = this.curContext();
	        if (curContext === _tokenizerContext.types.j_oTag) {
	          this.state.context.push(_tokenizerContext.types.b_expr);
	        } else if (curContext === _tokenizerContext.types.j_expr) {
	          this.state.context.push(_tokenizerContext.types.b_tmpl);
	        } else {
	          inner.call(this, prevType);
	        }
	        this.state.exprAllowed = true;
	      } else if (this.match(_tokenizerTypes.types.slash) && prevType === _tokenizerTypes.types.jsxTagStart) {
	        this.state.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore
	        this.state.context.push(_tokenizerContext.types.j_cTag); // reconsider as closing tag context
	        this.state.exprAllowed = false;
	      } else {
	        return inner.call(this, prevType);
	      }
	    };
	  });
	};

	module.exports = exports["default"];
	},{"../../parser":5,"../../tokenizer/context":14,"../../tokenizer/types":17,"../../util/identifier":18,"../../util/whitespace":20,"./xhtml":13,"babel-runtime/helpers/interop-require-default":26}],13:[function(require,module,exports){
	"use strict";

	exports.__esModule = true;
	exports["default"] = {
	  quot: "\"",
	  amp: "&",
	  apos: "'",
	  lt: "<",
	  gt: ">",
	  nbsp: " ",
	  iexcl: "¡",
	  cent: "¢",
	  pound: "£",
	  curren: "¤",
	  yen: "¥",
	  brvbar: "¦",
	  sect: "§",
	  uml: "¨",
	  copy: "©",
	  ordf: "ª",
	  laquo: "«",
	  not: "¬",
	  shy: "­",
	  reg: "®",
	  macr: "¯",
	  deg: "°",
	  plusmn: "±",
	  sup2: "²",
	  sup3: "³",
	  acute: "´",
	  micro: "µ",
	  para: "¶",
	  middot: "·",
	  cedil: "¸",
	  sup1: "¹",
	  ordm: "º",
	  raquo: "»",
	  frac14: "¼",
	  frac12: "½",
	  frac34: "¾",
	  iquest: "¿",
	  Agrave: "À",
	  Aacute: "Á",
	  Acirc: "Â",
	  Atilde: "Ã",
	  Auml: "Ä",
	  Aring: "Å",
	  AElig: "Æ",
	  Ccedil: "Ç",
	  Egrave: "È",
	  Eacute: "É",
	  Ecirc: "Ê",
	  Euml: "Ë",
	  Igrave: "Ì",
	  Iacute: "Í",
	  Icirc: "Î",
	  Iuml: "Ï",
	  ETH: "Ð",
	  Ntilde: "Ñ",
	  Ograve: "Ò",
	  Oacute: "Ó",
	  Ocirc: "Ô",
	  Otilde: "Õ",
	  Ouml: "Ö",
	  times: "×",
	  Oslash: "Ø",
	  Ugrave: "Ù",
	  Uacute: "Ú",
	  Ucirc: "Û",
	  Uuml: "Ü",
	  Yacute: "Ý",
	  THORN: "Þ",
	  szlig: "ß",
	  agrave: "à",
	  aacute: "á",
	  acirc: "â",
	  atilde: "ã",
	  auml: "ä",
	  aring: "å",
	  aelig: "æ",
	  ccedil: "ç",
	  egrave: "è",
	  eacute: "é",
	  ecirc: "ê",
	  euml: "ë",
	  igrave: "ì",
	  iacute: "í",
	  icirc: "î",
	  iuml: "ï",
	  eth: "ð",
	  ntilde: "ñ",
	  ograve: "ò",
	  oacute: "ó",
	  ocirc: "ô",
	  otilde: "õ",
	  ouml: "ö",
	  divide: "÷",
	  oslash: "ø",
	  ugrave: "ù",
	  uacute: "ú",
	  ucirc: "û",
	  uuml: "ü",
	  yacute: "ý",
	  thorn: "þ",
	  yuml: "ÿ",
	  OElig: "Œ",
	  oelig: "œ",
	  Scaron: "Š",
	  scaron: "š",
	  Yuml: "Ÿ",
	  fnof: "ƒ",
	  circ: "ˆ",
	  tilde: "˜",
	  Alpha: "Α",
	  Beta: "Β",
	  Gamma: "Γ",
	  Delta: "Δ",
	  Epsilon: "Ε",
	  Zeta: "Ζ",
	  Eta: "Η",
	  Theta: "Θ",
	  Iota: "Ι",
	  Kappa: "Κ",
	  Lambda: "Λ",
	  Mu: "Μ",
	  Nu: "Ν",
	  Xi: "Ξ",
	  Omicron: "Ο",
	  Pi: "Π",
	  Rho: "Ρ",
	  Sigma: "Σ",
	  Tau: "Τ",
	  Upsilon: "Υ",
	  Phi: "Φ",
	  Chi: "Χ",
	  Psi: "Ψ",
	  Omega: "Ω",
	  alpha: "α",
	  beta: "β",
	  gamma: "γ",
	  delta: "δ",
	  epsilon: "ε",
	  zeta: "ζ",
	  eta: "η",
	  theta: "θ",
	  iota: "ι",
	  kappa: "κ",
	  lambda: "λ",
	  mu: "μ",
	  nu: "ν",
	  xi: "ξ",
	  omicron: "ο",
	  pi: "π",
	  rho: "ρ",
	  sigmaf: "ς",
	  sigma: "σ",
	  tau: "τ",
	  upsilon: "υ",
	  phi: "φ",
	  chi: "χ",
	  psi: "ψ",
	  omega: "ω",
	  thetasym: "ϑ",
	  upsih: "ϒ",
	  piv: "ϖ",
	  ensp: " ",
	  emsp: " ",
	  thinsp: " ",
	  zwnj: "‌",
	  zwj: "‍",
	  lrm: "‎",
	  rlm: "‏",
	  ndash: "–",
	  mdash: "—",
	  lsquo: "‘",
	  rsquo: "’",
	  sbquo: "‚",
	  ldquo: "“",
	  rdquo: "”",
	  bdquo: "„",
	  dagger: "†",
	  Dagger: "‡",
	  bull: "•",
	  hellip: "…",
	  permil: "‰",
	  prime: "′",
	  Prime: "″",
	  lsaquo: "‹",
	  rsaquo: "›",
	  oline: "‾",
	  frasl: "⁄",
	  euro: "€",
	  image: "ℑ",
	  weierp: "℘",
	  real: "ℜ",
	  trade: "™",
	  alefsym: "ℵ",
	  larr: "←",
	  uarr: "↑",
	  rarr: "→",
	  darr: "↓",
	  harr: "↔",
	  crarr: "↵",
	  lArr: "⇐",
	  uArr: "⇑",
	  rArr: "⇒",
	  dArr: "⇓",
	  hArr: "⇔",
	  forall: "∀",
	  part: "∂",
	  exist: "∃",
	  empty: "∅",
	  nabla: "∇",
	  isin: "∈",
	  notin: "∉",
	  ni: "∋",
	  prod: "∏",
	  sum: "∑",
	  minus: "−",
	  lowast: "∗",
	  radic: "√",
	  prop: "∝",
	  infin: "∞",
	  ang: "∠",
	  and: "∧",
	  or: "∨",
	  cap: "∩",
	  cup: "∪",
	  "int": "∫",
	  there4: "∴",
	  sim: "∼",
	  cong: "≅",
	  asymp: "≈",
	  ne: "≠",
	  equiv: "≡",
	  le: "≤",
	  ge: "≥",
	  sub: "⊂",
	  sup: "⊃",
	  nsub: "⊄",
	  sube: "⊆",
	  supe: "⊇",
	  oplus: "⊕",
	  otimes: "⊗",
	  perp: "⊥",
	  sdot: "⋅",
	  lceil: "⌈",
	  rceil: "⌉",
	  lfloor: "⌊",
	  rfloor: "⌋",
	  lang: "〈",
	  rang: "〉",
	  loz: "◊",
	  spades: "♠",
	  clubs: "♣",
	  hearts: "♥",
	  diams: "♦"
	};
	module.exports = exports["default"];
	},{}],14:[function(require,module,exports){
	/* @flow */

	// The algorithm used to determine whether a regexp can appear at a
	// given point in the program is loosely based on sweet.js' approach.
	// See https://github.com/mozilla/sweet.js/wiki/design

	"use strict";

	var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

	exports.__esModule = true;

	var _types = require("./types");

	var _utilWhitespace = require("../util/whitespace");

	var TokContext = function TokContext(token /*: string*/, isExpr /*:: ?: boolean*/, preserveSpace /*:: ?: boolean*/, override /*:: ?: Function*/) {
	  _classCallCheck(this, TokContext);

	  this.token = token;
	  this.isExpr = !!isExpr;
	  this.preserveSpace = !!preserveSpace;
	  this.override = override;
	};

	exports.TokContext = TokContext;
	var types = {
	  b_stat: new TokContext("{", false),
	  b_expr: new TokContext("{", true),
	  b_tmpl: new TokContext("${", true),
	  p_stat: new TokContext("(", false),
	  p_expr: new TokContext("(", true),
	  q_tmpl: new TokContext("`", true, true, function (p) {
	    return p.readTmplToken();
	  }),
	  f_expr: new TokContext("function", true)
	};

	exports.types = types;
	// Token-specific context update code

	_types.types.parenR.updateContext = _types.types.braceR.updateContext = function () {
	  if (this.state.context.length === 1) {
	    this.state.exprAllowed = true;
	    return;
	  }

	  var out = this.state.context.pop();
	  if (out === types.b_stat && this.curContext() === types.f_expr) {
	    this.state.context.pop();
	    this.state.exprAllowed = false;
	  } else if (out === types.b_tmpl) {
	    this.state.exprAllowed = true;
	  } else {
	    this.state.exprAllowed = !out.isExpr;
	  }
	};

	_types.types.name.updateContext = function (prevType) {
	  this.state.exprAllowed = false;

	  if (prevType === _types.types._let || prevType === _types.types._const || prevType === _types.types._var) {
	    if (_utilWhitespace.lineBreak.test(this.input.slice(this.state.end))) {
	      this.state.exprAllowed = true;
	    }
	  }
	};

	_types.types.braceL.updateContext = function (prevType) {
	  this.state.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);
	  this.state.exprAllowed = true;
	};

	_types.types.dollarBraceL.updateContext = function () {
	  this.state.context.push(types.b_tmpl);
	  this.state.exprAllowed = true;
	};

	_types.types.parenL.updateContext = function (prevType) {
	  var statementParens = prevType === _types.types._if || prevType === _types.types._for || prevType === _types.types._with || prevType === _types.types._while;
	  this.state.context.push(statementParens ? types.p_stat : types.p_expr);
	  this.state.exprAllowed = true;
	};

	_types.types.incDec.updateContext = function () {
	  // tokExprAllowed stays unchanged
	};

	_types.types._function.updateContext = function () {
	  if (this.curContext() !== types.b_stat) {
	    this.state.context.push(types.f_expr);
	  }

	  this.state.exprAllowed = false;
	};

	_types.types.backQuote.updateContext = function () {
	  if (this.curContext() === types.q_tmpl) {
	    this.state.context.pop();
	  } else {
	    this.state.context.push(types.q_tmpl);
	  }
	  this.state.exprAllowed = false;
	};
	},{"../util/whitespace":20,"./types":17,"babel-runtime/helpers/class-call-check":24}],15:[function(require,module,exports){
	"use strict";

	var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

	var _interopRequireDefault = require("babel-runtime/helpers/interop-require-default")["default"];

	exports.__esModule = true;

	var _utilIdentifier = require("../util/identifier");

	var _types = require("./types");

	var _context = require("./context");

	var _utilLocation = require("../util/location");

	var _utilWhitespace = require("../util/whitespace");

	var _state = require("./state");

	var _state2 = _interopRequireDefault(_state);

	// Object type used to represent tokens. Note that normally, tokens
	// simply exist as properties on the parser object. This is only
	// used for the onToken callback and the external tokenizer.

	/*:: import type { TokenType } from "./types";*/
	var Token = function Token(state) {
	  _classCallCheck(this, Token);

	  this.type = state.type;
	  this.value = state.value;
	  this.start = state.start;
	  this.end = state.end;
	  this.loc = new _utilLocation.SourceLocation(state.startLoc, state.endLoc);
	}

	// ## Tokenizer

	;

	exports.Token = Token;
	function codePointToString(code) {
	  // UTF-16 Decoding
	  if (code <= 0xFFFF) {
	    return String.fromCharCode(code);
	  } else {
	    return String.fromCharCode((code - 0x10000 >> 10) + 0xD800, (code - 0x10000 & 1023) + 0xDC00);
	  }
	}

	var Tokenizer = (function () {
	  function Tokenizer(options, input) {
	    _classCallCheck(this, Tokenizer);

	    this.state = new _state2["default"]();
	    this.state.init(options, input);
	  }

	  // Move to the next token

	  Tokenizer.prototype.next = function next() {
	    if (!this.isLookahead) {
	      this.state.tokens.push(new Token(this.state));
	    }

	    this.state.lastTokEnd = this.state.end;
	    this.state.lastTokStart = this.state.start;
	    this.state.lastTokEndLoc = this.state.endLoc;
	    this.state.lastTokStartLoc = this.state.startLoc;
	    this.nextToken();
	  };

	  // TODO

	  Tokenizer.prototype.eat = function eat(type) {
	    if (this.match(type)) {
	      this.next();
	      return true;
	    } else {
	      return false;
	    }
	  };

	  // TODO

	  Tokenizer.prototype.match = function match(type) {
	    return this.state.type === type;
	  };

	  // TODO

	  Tokenizer.prototype.isKeyword = function isKeyword(word) {
	    return _utilIdentifier.isKeyword(word);
	  };

	  // TODO

	  Tokenizer.prototype.lookahead = function lookahead() {
	    var old = this.state;
	    this.state = old.clone(true);

	    this.isLookahead = true;
	    this.next();
	    this.isLookahead = false;

	    var curr = this.state.clone(true);
	    this.state = old;
	    return curr;
	  };

	  // Toggle strict mode. Re-reads the next number or string to please
	  // pedantic tests (`"use strict"; 010;` should fail).

	  Tokenizer.prototype.setStrict = function setStrict(strict) {
	    this.state.strict = strict;
	    if (!this.match(_types.types.num) && !this.match(_types.types.string)) return;
	    this.state.pos = this.state.start;
	    while (this.state.pos < this.state.lineStart) {
	      this.state.lineStart = this.input.lastIndexOf("\n", this.state.lineStart - 2) + 1;
	      --this.state.curLine;
	    }
	    this.nextToken();
	  };

	  Tokenizer.prototype.curContext = function curContext() {
	    return this.state.context[this.state.context.length - 1];
	  };

	  // Read a single token, updating the parser object's token-related
	  // properties.

	  Tokenizer.prototype.nextToken = function nextToken() {
	    var curContext = this.curContext();
	    if (!curContext || !curContext.preserveSpace) this.skipSpace();

	    this.state.containsOctal = false;
	    this.state.octalPosition = null;
	    this.state.start = this.state.pos;
	    this.state.startLoc = this.state.curPosition();
	    if (this.state.pos >= this.input.length) return this.finishToken(_types.types.eof);

	    if (curContext.override) {
	      return curContext.override(this);
	    } else {
	      return this.readToken(this.fullCharCodeAtPos());
	    }
	  };

	  Tokenizer.prototype.readToken = function readToken(code) {
	    // Identifier or keyword. '\uXXXX' sequences are allowed in
	    // identifiers, so '\' also dispatches to that.
	    if (_utilIdentifier.isIdentifierStart(code) || code === 92 /* '\' */) {
	        return this.readWord();
	      } else {
	      return this.getTokenFromCode(code);
	    }
	  };

	  Tokenizer.prototype.fullCharCodeAtPos = function fullCharCodeAtPos() {
	    var code = this.input.charCodeAt(this.state.pos);
	    if (code <= 0xd7ff || code >= 0xe000) return code;

	    var next = this.input.charCodeAt(this.state.pos + 1);
	    return (code << 10) + next - 0x35fdc00;
	  };

	  Tokenizer.prototype.pushComment = function pushComment(block, text, start, end, startLoc, endLoc) {
	    var comment = {
	      type: block ? "CommentBlock" : "CommentLine",
	      value: text,
	      start: start,
	      end: end,
	      loc: new _utilLocation.SourceLocation(startLoc, endLoc)
	    };

	    if (!this.isLookahead) {
	      this.state.tokens.push(comment);
	      this.state.comments.push(comment);
	    }

	    this.addComment(comment);
	  };

	  Tokenizer.prototype.skipBlockComment = function skipBlockComment() {
	    var startLoc = this.state.curPosition();
	    var start = this.state.pos,
	        end = this.input.indexOf("*/", this.state.pos += 2);
	    if (end === -1) this.raise(this.state.pos - 2, "Unterminated comment");

	    this.state.pos = end + 2;
	    _utilWhitespace.lineBreakG.lastIndex = start;
	    var match = undefined;
	    while ((match = _utilWhitespace.lineBreakG.exec(this.input)) && match.index < this.state.pos) {
	      ++this.state.curLine;
	      this.state.lineStart = match.index + match[0].length;
	    }

	    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());
	  };

	  Tokenizer.prototype.skipLineComment = function skipLineComment(startSkip) {
	    var start = this.state.pos;
	    var startLoc = this.state.curPosition();
	    var ch = this.input.charCodeAt(this.state.pos += startSkip);
	    while (this.state.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {
	      ++this.state.pos;
	      ch = this.input.charCodeAt(this.state.pos);
	    }

	    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());
	  };

	  // Called at the start of the parse and after every token. Skips
	  // whitespace and comments, and.

	  Tokenizer.prototype.skipSpace = function skipSpace() {
	    loop: while (this.state.pos < this.input.length) {
	      var ch = this.input.charCodeAt(this.state.pos);
	      switch (ch) {
	        case 32:case 160:
	          // ' '
	          ++this.state.pos;
	          break;

	        case 13:
	          if (this.input.charCodeAt(this.state.pos + 1) === 10) {
	            ++this.state.pos;
	          }

	        case 10:case 8232:case 8233:
	          ++this.state.pos;
	          ++this.state.curLine;
	          this.state.lineStart = this.state.pos;
	          break;

	        case 47:
	          // '/'
	          switch (this.input.charCodeAt(this.state.pos + 1)) {
	            case 42:
	              // '*'
	              this.skipBlockComment();
	              break;

	            case 47:
	              this.skipLineComment(2);
	              break;

	            default:
	              break loop;
	          }
	          break;

	        default:
	          if (ch > 8 && ch < 14 || ch >= 5760 && _utilWhitespace.nonASCIIwhitespace.test(String.fromCharCode(ch))) {
	            ++this.state.pos;
	          } else {
	            break loop;
	          }
	      }
	    }
	  };

	  // Called at the end of every token. Sets `end`, `val`, and
	  // maintains `context` and `exprAllowed`, and skips the space after
	  // the token, so that the next one's `start` will point at the
	  // right position.

	  Tokenizer.prototype.finishToken = function finishToken(type, val) {
	    this.state.end = this.state.pos;
	    this.state.endLoc = this.state.curPosition();
	    var prevType = this.state.type;
	    this.state.type = type;
	    this.state.value = val;

	    this.updateContext(prevType);
	  };

	  // ### Token reading

	  // This is the function that is called to fetch the next token. It
	  // is somewhat obscure, because it works in character codes rather
	  // than characters, and because operator parsing has been inlined
	  // into it.
	  //
	  // All in the name of speed.
	  //

	  Tokenizer.prototype.readToken_dot = function readToken_dot() {
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next >= 48 && next <= 57) {
	      return this.readNumber(true);
	    }

	    var next2 = this.input.charCodeAt(this.state.pos + 2);
	    if (next === 46 && next2 === 46) {
	      // 46 = dot '.'
	      this.state.pos += 3;
	      return this.finishToken(_types.types.ellipsis);
	    } else {
	      ++this.state.pos;
	      return this.finishToken(_types.types.dot);
	    }
	  };

	  Tokenizer.prototype.readToken_slash = function readToken_slash() {
	    // '/'
	    if (this.state.exprAllowed) {
	      ++this.state.pos;
	      return this.readRegexp();
	    }

	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === 61) {
	      return this.finishOp(_types.types.assign, 2);
	    } else {
	      return this.finishOp(_types.types.slash, 1);
	    }
	  };

	  Tokenizer.prototype.readToken_mult_modulo = function readToken_mult_modulo(code) {
	    // '%*'
	    var type = code === 42 ? _types.types.star : _types.types.modulo;
	    var width = 1;
	    var next = this.input.charCodeAt(this.state.pos + 1);

	    if (next === 42 && this.hasPlugin("exponentiationOperator")) {
	      // '*'
	      width++;
	      next = this.input.charCodeAt(this.state.pos + 2);
	      type = _types.types.exponent;
	    }

	    if (next === 61) {
	      width++;
	      type = _types.types.assign;
	    }

	    return this.finishOp(type, width);
	  };

	  Tokenizer.prototype.readToken_pipe_amp = function readToken_pipe_amp(code) {
	    // '|&'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === code) return this.finishOp(code === 124 ? _types.types.logicalOR : _types.types.logicalAND, 2);
	    if (next === 61) return this.finishOp(_types.types.assign, 2);
	    return this.finishOp(code === 124 ? _types.types.bitwiseOR : _types.types.bitwiseAND, 1);
	  };

	  Tokenizer.prototype.readToken_caret = function readToken_caret() {
	    // '^'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === 61) {
	      return this.finishOp(_types.types.assign, 2);
	    } else {
	      return this.finishOp(_types.types.bitwiseXOR, 1);
	    }
	  };

	  Tokenizer.prototype.readToken_plus_min = function readToken_plus_min(code) {
	    // '+-'
	    var next = this.input.charCodeAt(this.state.pos + 1);

	    if (next === code) {
	      if (next === 45 && this.input.charCodeAt(this.state.pos + 2) === 62 && _utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.pos))) {
	        // A `-->` line comment
	        this.skipLineComment(3);
	        this.skipSpace();
	        return this.nextToken();
	      }
	      return this.finishOp(_types.types.incDec, 2);
	    }

	    if (next === 61) {
	      return this.finishOp(_types.types.assign, 2);
	    } else {
	      return this.finishOp(_types.types.plusMin, 1);
	    }
	  };

	  Tokenizer.prototype.readToken_lt_gt = function readToken_lt_gt(code) {
	    // '<>'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    var size = 1;

	    if (next === code) {
	      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;
	      if (this.input.charCodeAt(this.state.pos + size) === 61) return this.finishOp(_types.types.assign, size + 1);
	      return this.finishOp(_types.types.bitShift, size);
	    }

	    if (next === 33 && code === 60 && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {
	      if (this.inModule) this.unexpected();
	      // `<!--`, an XML-style comment that should be interpreted as a line comment
	      this.skipLineComment(4);
	      this.skipSpace();
	      return this.nextToken();
	    }

	    if (next === 61) {
	      size = this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2;
	    }

	    return this.finishOp(_types.types.relational, size);
	  };

	  Tokenizer.prototype.readToken_eq_excl = function readToken_eq_excl(code) {
	    // '=!'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === 61) return this.finishOp(_types.types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
	    if (code === 61 && next === 62) {
	      // '=>'
	      this.state.pos += 2;
	      return this.finishToken(_types.types.arrow);
	    }
	    return this.finishOp(code === 61 ? _types.types.eq : _types.types.prefix, 1);
	  };

	  Tokenizer.prototype.getTokenFromCode = function getTokenFromCode(code) {
	    switch (code) {
	      // The interpretation of a dot depends on whether it is followed
	      // by a digit or another two dots.
	      case 46:
	        // '.'
	        return this.readToken_dot();

	      // Punctuation tokens.
	      case 40:
	        ++this.state.pos;return this.finishToken(_types.types.parenL);
	      case 41:
	        ++this.state.pos;return this.finishToken(_types.types.parenR);
	      case 59:
	        ++this.state.pos;return this.finishToken(_types.types.semi);
	      case 44:
	        ++this.state.pos;return this.finishToken(_types.types.comma);
	      case 91:
	        ++this.state.pos;return this.finishToken(_types.types.bracketL);
	      case 93:
	        ++this.state.pos;return this.finishToken(_types.types.bracketR);
	      case 123:
	        ++this.state.pos;return this.finishToken(_types.types.braceL);
	      case 125:
	        ++this.state.pos;return this.finishToken(_types.types.braceR);

	      case 58:
	        if (this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58) {
	          return this.finishOp(_types.types.doubleColon, 2);
	        } else {
	          ++this.state.pos;
	          return this.finishToken(_types.types.colon);
	        }

	      case 63:
	        ++this.state.pos;return this.finishToken(_types.types.question);
	      case 64:
	        ++this.state.pos;return this.finishToken(_types.types.at);

	      case 96:
	        // '`'
	        ++this.state.pos;
	        return this.finishToken(_types.types.backQuote);

	      case 48:
	        // '0'
	        var next = this.input.charCodeAt(this.state.pos + 1);
	        if (next === 120 || next === 88) return this.readRadixNumber(16); // '0x', '0X' - hex number
	        if (next === 111 || next === 79) return this.readRadixNumber(8); // '0o', '0O' - octal number
	        if (next === 98 || next === 66) return this.readRadixNumber(2); // '0b', '0B' - binary number
	      // Anything else beginning with a digit is an integer, octal
	      // number, or float.
	      case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
	        // 1-9
	        return this.readNumber(false);

	      // Quotes produce strings.
	      case 34:case 39:
	        // '"', "'"
	        return this.readString(code);

	      // Operators are parsed inline in tiny state machines. '=' (61) is
	      // often referred to. `finishOp` simply skips the amount of
	      // characters it is given as second argument, and returns a token
	      // of the type given by its first argument.

	      case 47:
	        // '/'
	        return this.readToken_slash();

	      case 37:case 42:
	        // '%*'
	        return this.readToken_mult_modulo(code);

	      case 124:case 38:
	        // '|&'
	        return this.readToken_pipe_amp(code);

	      case 94:
	        // '^'
	        return this.readToken_caret();

	      case 43:case 45:
	        // '+-'
	        return this.readToken_plus_min(code);

	      case 60:case 62:
	        // '<>'
	        return this.readToken_lt_gt(code);

	      case 61:case 33:
	        // '=!'
	        return this.readToken_eq_excl(code);

	      case 126:
	        // '~'
	        return this.finishOp(_types.types.prefix, 1);
	    }

	    this.raise(this.state.pos, "Unexpected character '" + codePointToString(code) + "'");
	  };

	  Tokenizer.prototype.finishOp = function finishOp(type, size) {
	    var str = this.input.slice(this.state.pos, this.state.pos + size);
	    this.state.pos += size;
	    return this.finishToken(type, str);
	  };

	  Tokenizer.prototype.readRegexp = function readRegexp() {
	    var escaped = undefined,
	        inClass = undefined,
	        start = this.state.pos;
	    for (;;) {
	      if (this.state.pos >= this.input.length) this.raise(start, "Unterminated regular expression");
	      var ch = this.input.charAt(this.state.pos);
	      if (_utilWhitespace.lineBreak.test(ch)) {
	        this.raise(start, "Unterminated regular expression");
	      }
	      if (escaped) {
	        escaped = false;
	      } else {
	        if (ch === "[") {
	          inClass = true;
	        } else if (ch === "]" && inClass) {
	          inClass = false;
	        } else if (ch === "/" && !inClass) {
	          break;
	        }
	        escaped = ch === "\\";
	      }
	      ++this.state.pos;
	    }
	    var content = this.input.slice(start, this.state.pos);
	    ++this.state.pos;
	    // Need to use `readWord1` because '\uXXXX' sequences are allowed
	    // here (don't ask).
	    var mods = this.readWord1();
	    if (mods) {
	      var validFlags = /^[gmsiyu]*$/;
	      if (!validFlags.test(mods)) this.raise(start, "Invalid regular expression flag");
	    }
	    return this.finishToken(_types.types.regexp, {
	      pattern: content,
	      flags: mods
	    });
	  };

	  // Read an integer in the given radix. Return null if zero digits
	  // were read, the integer value otherwise. When `len` is given, this
	  // will return `null` unless the integer has exactly `len` digits.

	  Tokenizer.prototype.readInt = function readInt(radix, len) {
	    var start = this.state.pos,
	        total = 0;
	    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
	      var code = this.input.charCodeAt(this.state.pos),
	          val = undefined;
	      if (code >= 97) {
	        val = code - 97 + 10; // a
	      } else if (code >= 65) {
	          val = code - 65 + 10; // A
	        } else if (code >= 48 && code <= 57) {
	            val = code - 48; // 0-9
	          } else {
	              val = Infinity;
	            }
	      if (val >= radix) break;
	      ++this.state.pos;
	      total = total * radix + val;
	    }
	    if (this.state.pos === start || len != null && this.state.pos - start !== len) return null;

	    return total;
	  };

	  Tokenizer.prototype.readRadixNumber = function readRadixNumber(radix) {
	    this.state.pos += 2; // 0x
	    var val = this.readInt(radix);
	    if (val == null) this.raise(this.state.start + 2, "Expected number in radix " + radix);
	    if (_utilIdentifier.isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.state.pos, "Identifier directly after number");
	    return this.finishToken(_types.types.num, val);
	  };

	  // Read an integer, octal integer, or floating-point number.

	  Tokenizer.prototype.readNumber = function readNumber(startsWithDot) {
	    var start = this.state.pos,
	        isFloat = false,
	        octal = this.input.charCodeAt(this.state.pos) === 48;
	    if (!startsWithDot && this.readInt(10) === null) this.raise(start, "Invalid number");
	    var next = this.input.charCodeAt(this.state.pos);
	    if (next === 46) {
	      // '.'
	      ++this.state.pos;
	      this.readInt(10);
	      isFloat = true;
	      next = this.input.charCodeAt(this.state.pos);
	    }
	    if (next === 69 || next === 101) {
	      // 'eE'
	      next = this.input.charCodeAt(++this.state.pos);
	      if (next === 43 || next === 45) ++this.state.pos; // '+-'
	      if (this.readInt(10) === null) this.raise(start, "Invalid number");
	      isFloat = true;
	    }
	    if (_utilIdentifier.isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.state.pos, "Identifier directly after number");

	    var str = this.input.slice(start, this.state.pos),
	        val = undefined;
	    if (isFloat) {
	      val = parseFloat(str);
	    } else if (!octal || str.length === 1) {
	      val = parseInt(str, 10);
	    } else if (/[89]/.test(str) || this.state.strict) {
	      this.raise(start, "Invalid number");
	    } else {
	      val = parseInt(str, 8);
	    }
	    return this.finishToken(_types.types.num, val);
	  };

	  // Read a string value, interpreting backslash-escapes.

	  Tokenizer.prototype.readCodePoint = function readCodePoint() {
	    var ch = this.input.charCodeAt(this.state.pos),
	        code = undefined;

	    if (ch === 123) {
	      var codePos = ++this.state.pos;
	      code = this.readHexChar(this.input.indexOf("}", this.state.pos) - this.state.pos);
	      ++this.state.pos;
	      if (code > 0x10FFFF) this.raise(codePos, "Code point out of bounds");
	    } else {
	      code = this.readHexChar(4);
	    }
	    return code;
	  };

	  Tokenizer.prototype.readString = function readString(quote) {
	    var out = "",
	        chunkStart = ++this.state.pos;
	    for (;;) {
	      if (this.state.pos >= this.input.length) this.raise(this.state.start, "Unterminated string constant");
	      var ch = this.input.charCodeAt(this.state.pos);
	      if (ch === quote) break;
	      if (ch === 92) {
	        // '\'
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.readEscapedChar(false);
	        chunkStart = this.state.pos;
	      } else {
	        if (_utilWhitespace.isNewLine(ch)) this.raise(this.state.start, "Unterminated string constant");
	        ++this.state.pos;
	      }
	    }
	    out += this.input.slice(chunkStart, this.state.pos++);
	    return this.finishToken(_types.types.string, out);
	  };

	  // Reads template string tokens.

	  Tokenizer.prototype.readTmplToken = function readTmplToken() {
	    var out = "",
	        chunkStart = this.state.pos;
	    for (;;) {
	      if (this.state.pos >= this.input.length) this.raise(this.state.start, "Unterminated template");
	      var ch = this.input.charCodeAt(this.state.pos);
	      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {
	        // '`', '${'
	        if (this.state.pos === this.state.start && this.match(_types.types.template)) {
	          if (ch === 36) {
	            this.state.pos += 2;
	            return this.finishToken(_types.types.dollarBraceL);
	          } else {
	            ++this.state.pos;
	            return this.finishToken(_types.types.backQuote);
	          }
	        }
	        out += this.input.slice(chunkStart, this.state.pos);
	        return this.finishToken(_types.types.template, out);
	      }
	      if (ch === 92) {
	        // '\'
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.readEscapedChar(true);
	        chunkStart = this.state.pos;
	      } else if (_utilWhitespace.isNewLine(ch)) {
	        out += this.input.slice(chunkStart, this.state.pos);
	        ++this.state.pos;
	        switch (ch) {
	          case 13:
	            if (this.input.charCodeAt(this.state.pos) === 10) ++this.state.pos;
	          case 10:
	            out += "\n";
	            break;
	          default:
	            out += String.fromCharCode(ch);
	            break;
	        }
	        ++this.state.curLine;
	        this.state.lineStart = this.state.pos;
	        chunkStart = this.state.pos;
	      } else {
	        ++this.state.pos;
	      }
	    }
	  };

	  // Used to read escaped characters

	  Tokenizer.prototype.readEscapedChar = function readEscapedChar(inTemplate) {
	    var ch = this.input.charCodeAt(++this.state.pos);
	    ++this.state.pos;
	    switch (ch) {
	      case 110:
	        return "\n"; // 'n' -> '\n'
	      case 114:
	        return "\r"; // 'r' -> '\r'
	      case 120:
	        return String.fromCharCode(this.readHexChar(2)); // 'x'
	      case 117:
	        return codePointToString(this.readCodePoint()); // 'u'
	      case 116:
	        return "\t"; // 't' -> '\t'
	      case 98:
	        return "\b"; // 'b' -> '\b'
	      case 118:
	        return "\u000b"; // 'v' -> '\u000b'
	      case 102:
	        return "\f"; // 'f' -> '\f'
	      case 13:
	        if (this.input.charCodeAt(this.state.pos) === 10) ++this.state.pos; // '\r\n'
	      case 10:
	        // ' \n'
	        this.state.lineStart = this.state.pos;
	        ++this.state.curLine;
	        return "";
	      default:
	        if (ch >= 48 && ch <= 55) {
	          var octalStr = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/)[0];
	          var octal = parseInt(octalStr, 8);
	          if (octal > 255) {
	            octalStr = octalStr.slice(0, -1);
	            octal = parseInt(octalStr, 8);
	          }
	          if (octal > 0) {
	            if (!this.state.containsOctal) {
	              this.state.containsOctal = true;
	              this.state.octalPosition = this.state.pos - 2;
	            }
	            if (this.state.strict || inTemplate) {
	              this.raise(this.state.pos - 2, "Octal literal in strict mode");
	            }
	          }
	          this.state.pos += octalStr.length - 1;
	          return String.fromCharCode(octal);
	        }
	        return String.fromCharCode(ch);
	    }
	  };

	  // Used to read character escape sequences ('\x', '\u', '\U').

	  Tokenizer.prototype.readHexChar = function readHexChar(len) {
	    var codePos = this.state.pos;
	    var n = this.readInt(16, len);
	    if (n === null) this.raise(codePos, "Bad character escape sequence");
	    return n;
	  };

	  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`
	  // to whether the word contained a '\u' escape.
	  //
	  // Incrementally adds only escaped chars, adding other chunks as-is
	  // as a micro-optimization.

	  Tokenizer.prototype.readWord1 = function readWord1() {
	    this.state.containsEsc = false;
	    var word = "",
	        first = true,
	        chunkStart = this.state.pos;
	    while (this.state.pos < this.input.length) {
	      var ch = this.fullCharCodeAtPos();
	      if (_utilIdentifier.isIdentifierChar(ch)) {
	        this.state.pos += ch <= 0xffff ? 1 : 2;
	      } else if (ch === 92) {
	        // "\"
	        this.state.containsEsc = true;

	        word += this.input.slice(chunkStart, this.state.pos);
	        var escStart = this.state.pos;

	        if (this.input.charCodeAt(++this.state.pos) !== 117) {
	          // "u"
	          this.raise(this.state.pos, "Expecting Unicode escape sequence \\uXXXX");
	        }

	        ++this.state.pos;
	        var esc = this.readCodePoint();
	        if (!(first ? _utilIdentifier.isIdentifierStart : _utilIdentifier.isIdentifierChar)(esc, true)) {
	          this.raise(escStart, "Invalid Unicode escape");
	        }

	        word += codePointToString(esc);
	        chunkStart = this.state.pos;
	      } else {
	        break;
	      }
	      first = false;
	    }
	    return word + this.input.slice(chunkStart, this.state.pos);
	  };

	  // Read an identifier or keyword token. Will check for reserved
	  // words when necessary.

	  Tokenizer.prototype.readWord = function readWord() {
	    var word = this.readWord1();
	    var type = _types.types.name;
	    if (!this.state.containsEsc && this.isKeyword(word)) {
	      type = _types.keywords[word];
	    }
	    return this.finishToken(type, word);
	  };

	  Tokenizer.prototype.braceIsBlock = function braceIsBlock(prevType) {
	    if (prevType === _types.types.colon) {
	      var _parent = this.curContext();
	      if (_parent === _context.types.b_stat || _parent === _context.types.b_expr) {
	        return !_parent.isExpr;
	      }
	    }

	    if (prevType === _types.types._return) {
	      return _utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));
	    }

	    if (prevType === _types.types._else || prevType === _types.types.semi || prevType === _types.types.eof || prevType === _types.types.parenR) {
	      return true;
	    }

	    if (prevType === _types.types.braceL) {
	      return this.curContext() === _context.types.b_stat;
	    }

	    return !this.state.exprAllowed;
	  };

	  Tokenizer.prototype.updateContext = function updateContext(prevType) {
	    var update = undefined,
	        type = this.state.type;
	    if (type.keyword && prevType === _types.types.dot) {
	      this.state.exprAllowed = false;
	    } else if (update = type.updateContext) {
	      update.call(this, prevType);
	    } else {
	      this.state.exprAllowed = type.beforeExpr;
	    }
	  };

	  return Tokenizer;
	})();

	exports["default"] = Tokenizer;
	},{"../util/identifier":18,"../util/location":19,"../util/whitespace":20,"./context":14,"./state":16,"./types":17,"babel-runtime/helpers/class-call-check":24,"babel-runtime/helpers/interop-require-default":26}],16:[function(require,module,exports){
	"use strict";

	var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

	exports.__esModule = true;

	var _utilLocation = require("../util/location");

	var _context = require("./context");

	var _types = require("./types");

	/*:: import type { TokContext } from "./context";*/
	/*:: import type { Token } from "./index";*/
	var State = (function () {
	  function State() {
	    _classCallCheck(this, State);
	  }

	  State.prototype.init = function init(options /*: Object*/, input /*: string*/) {
	    this.strict = options.strictMode === false ? false : options.sourceType === "module";

	    this.input = input;

	    this.potentialArrowAt = -1;

	    this.inMethod = this.inFunction = this.inGenerator = this.inAsync = false;

	    this.labels = [];

	    this.decorators = [];

	    this.tokens = [];

	    this.comments = [];

	    this.trailingComments = [];
	    this.leadingComments = [];
	    this.commentStack = [];

	    this.pos = this.lineStart = 0;
	    this.curLine = 1;

	    this.type = _types.types.eof;
	    this.value = null;
	    this.start = this.end = this.pos;
	    this.startLoc = this.endLoc = this.curPosition();

	    this.lastTokEndLoc = this.lastTokStartLoc = null;
	    this.lastTokStart = this.lastTokEnd = this.pos;

	    this.context = [_context.types.b_stat];
	    this.exprAllowed = true;

	    this.containsEsc = this.containsOctal = false;
	    this.octalPosition = null;

	    return this;
	  };

	  // TODO

	  State.prototype.curPosition = function curPosition() {
	    return new _utilLocation.Position(this.curLine, this.pos - this.lineStart);
	  };

	  State.prototype.clone = function clone(skipArrays /*:: ?*/) {
	    var state = new State();
	    for (var key in this) {
	      var val = this[key];

	      if ((!skipArrays || key === "context") && Array.isArray(val)) {
	        val = val.slice();
	      }

	      state[key] = val;
	    }
	    return state;
	  };

	  return State;
	})();

	exports["default"] = State;
	module.exports = exports["default"];

	// TODO

	// Used to signify the start of a potential arrow function

	// Flags to track whether we are in a function, a generator.

	// Labels in scope.

	// Leading decorators.

	// Token store.

	// Comment store.

	// Comment attachment store

	// The current position of the tokenizer in the input.

	// Properties of the current token:
	// Its type

	// For tokens that include more information than their type, the value

	// Its start and end offset

	// And, if locations are used, the {line, column} object
	// corresponding to those offsets

	// Position information for the previous token

	// The context stack is used to superficially track syntactic
	// context to predict whether a regular expression is allowed in a
	// given position.

	// Used to signal to callers of `readWord1` whether the word
	// contained any escape sequences. This is needed because words with
	// escape sequences must not be interpreted as keywords.

	// TODO
	},{"../util/location":19,"./context":14,"./types":17,"babel-runtime/helpers/class-call-check":24}],17:[function(require,module,exports){
	// ## Token types

	// The assignment of fine-grained, information-carrying type objects
	// allows the tokenizer to store the information it has about a
	// token in a way that is very cheap for the parser to look up.

	// All token type variables start with an underscore, to make them
	// easy to recognize.

	// The `beforeExpr` property is used to disambiguate between regular
	// expressions and divisions. It is set on all token types that can
	// be followed by an expression (thus, a slash after them would be a
	// regular expression).
	//
	// `isLoop` marks a keyword as starting a loop, which is important
	// to know when parsing a label, in order to allow or disallow
	// continue jumps to that label.

	"use strict";

	var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

	exports.__esModule = true;

	var TokenType = function TokenType(label) {
	  var conf = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  _classCallCheck(this, TokenType);

	  this.label = label;
	  this.keyword = conf.keyword;
	  this.beforeExpr = !!conf.beforeExpr;
	  this.startsExpr = !!conf.startsExpr;
	  this.rightAssociative = !!conf.rightAssociative;
	  this.isLoop = !!conf.isLoop;
	  this.isAssign = !!conf.isAssign;
	  this.prefix = !!conf.prefix;
	  this.postfix = !!conf.postfix;
	  this.binop = conf.binop || null;
	  this.updateContext = null;
	};

	exports.TokenType = TokenType;

	function binop(name, prec) {
	  return new TokenType(name, { beforeExpr: true, binop: prec });
	}
	var beforeExpr = { beforeExpr: true },
	    startsExpr = { startsExpr: true };

	var types = {
	  num: new TokenType("num", startsExpr),
	  regexp: new TokenType("regexp", startsExpr),
	  string: new TokenType("string", startsExpr),
	  name: new TokenType("name", startsExpr),
	  eof: new TokenType("eof"),

	  // Punctuation token types.
	  bracketL: new TokenType("[", { beforeExpr: true, startsExpr: true }),
	  bracketR: new TokenType("]"),
	  braceL: new TokenType("{", { beforeExpr: true, startsExpr: true }),
	  braceR: new TokenType("}"),
	  parenL: new TokenType("(", { beforeExpr: true, startsExpr: true }),
	  parenR: new TokenType(")"),
	  comma: new TokenType(",", beforeExpr),
	  semi: new TokenType(";", beforeExpr),
	  colon: new TokenType(":", beforeExpr),
	  doubleColon: new TokenType("::", beforeExpr),
	  dot: new TokenType("."),
	  question: new TokenType("?", beforeExpr),
	  arrow: new TokenType("=>", beforeExpr),
	  template: new TokenType("template"),
	  ellipsis: new TokenType("...", beforeExpr),
	  backQuote: new TokenType("`", startsExpr),
	  dollarBraceL: new TokenType("${", { beforeExpr: true, startsExpr: true }),
	  at: new TokenType("@"),

	  // Operators. These carry several kinds of properties to help the
	  // parser use them properly (the presence of these properties is
	  // what categorizes them as operators).
	  //
	  // `binop`, when present, specifies that this operator is a binary
	  // operator, and will refer to its precedence.
	  //
	  // `prefix` and `postfix` mark the operator as a prefix or postfix
	  // unary operator.
	  //
	  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
	  // binary operators with a very low precedence, that should result
	  // in AssignmentExpression nodes.

	  eq: new TokenType("=", { beforeExpr: true, isAssign: true }),
	  assign: new TokenType("_=", { beforeExpr: true, isAssign: true }),
	  incDec: new TokenType("++/--", { prefix: true, postfix: true, startsExpr: true }),
	  prefix: new TokenType("prefix", { beforeExpr: true, prefix: true, startsExpr: true }),
	  logicalOR: binop("||", 1),
	  logicalAND: binop("&&", 2),
	  bitwiseOR: binop("|", 3),
	  bitwiseXOR: binop("^", 4),
	  bitwiseAND: binop("&", 5),
	  equality: binop("==/!=", 6),
	  relational: binop("</>", 7),
	  bitShift: binop("<</>>", 8),
	  plusMin: new TokenType("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),
	  modulo: binop("%", 10),
	  star: binop("*", 10),
	  slash: binop("/", 10),
	  exponent: new TokenType("**", { beforeExpr: true, binop: 11, rightAssociative: true })
	};

	exports.types = types;
	// Map keyword names to token types.

	var keywords = {};

	exports.keywords = keywords;
	// Succinct definitions of keyword token types
	function kw(name) {
	  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  options.keyword = name;
	  keywords[name] = types["_" + name] = new TokenType(name, options);
	}

	kw("break");
	kw("case", beforeExpr);
	kw("catch");
	kw("continue");
	kw("debugger");
	kw("default", beforeExpr);
	kw("do", { isLoop: true, beforeExpr: true });
	kw("else", beforeExpr);
	kw("finally");
	kw("for", { isLoop: true });
	kw("function", startsExpr);
	kw("if");
	kw("return", beforeExpr);
	kw("switch");
	kw("throw", beforeExpr);
	kw("try");
	kw("var");
	kw("let");
	kw("const");
	kw("while", { isLoop: true });
	kw("with");
	kw("new", { beforeExpr: true, startsExpr: true });
	kw("this", startsExpr);
	kw("super", startsExpr);
	kw("class");
	kw("extends", beforeExpr);
	kw("export");
	kw("import");
	kw("yield", { beforeExpr: true, startsExpr: true });
	kw("null", startsExpr);
	kw("true", startsExpr);
	kw("false", startsExpr);
	kw("in", { beforeExpr: true, binop: 7 });
	kw("instanceof", { beforeExpr: true, binop: 7 });
	kw("typeof", { beforeExpr: true, prefix: true, startsExpr: true });
	kw("void", { beforeExpr: true, prefix: true, startsExpr: true });
	kw("delete", { beforeExpr: true, prefix: true, startsExpr: true });
	},{"babel-runtime/helpers/class-call-check":24}],18:[function(require,module,exports){
	// This is a trick taken from Esprima. It turns out that, on
	// non-Chrome browsers, to check whether a string is in a set, a
	// predicate containing a big ugly `switch` statement is faster than
	// a regular expression, and on Chrome the two are about on par.
	// This function uses `eval` (non-lexical) to produce such a
	// predicate from a space-separated string of words.
	//
	// It starts by sorting the words by length.

	"use strict";

	exports.__esModule = true;
	exports.isIdentifierStart = isIdentifierStart;
	exports.isIdentifierChar = isIdentifierChar;
	function makePredicate(words) {
	  words = words.split(" ");
	  return function (str) {
	    return words.indexOf(str) >= 0;
	  };
	}

	// Reserved word lists for various dialects of the language

	var reservedWords = {
	  6: makePredicate("enum await"),
	  strict: makePredicate("implements interface let package private protected public static yield"),
	  strictBind: makePredicate("eval arguments")
	};

	exports.reservedWords = reservedWords;
	// And the keywords

	var isKeyword = makePredicate("break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this let const class extends export import yield super");

	exports.isKeyword = isKeyword;
	// ## Character categories

	// Big ugly regular expressions that match characters in the
	// whitespace, identifier, and identifier-start categories. These
	// are only applied when a character is found to actually have a
	// code point above 128.
	// Generated by `tools/generate-identifier-regex.js`.

	var nonASCIIidentifierStartChars = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";
	var nonASCIIidentifierChars = "‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࣤ-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఃా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഁ-ഃാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ູົຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏ᦰ-ᧀᧈᧉ᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭ᳲ-᳴᳸᳹᷀-᷵᷼-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-꣄꣐-꣙꣠-꣱꤀-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︭︳︴﹍-﹏０-９＿";

	var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
	var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");

	nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;

	// These are a run-length and offset encoded representation of the
	// >0xffff code points that are a valid part of identifiers. The
	// offset starts at 0x10000, and each pair of numbers represents an
	// offset to the next range, and then a size of the range. They were
	// generated by tools/generate-identifier-regex.js
	var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 17, 26, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 99, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 98, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 26, 45, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 955, 52, 76, 44, 33, 24, 27, 35, 42, 34, 4, 0, 13, 47, 15, 3, 22, 0, 38, 17, 2, 24, 133, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 32, 4, 287, 47, 21, 1, 2, 0, 185, 46, 82, 47, 21, 0, 60, 42, 502, 63, 32, 0, 449, 56, 1288, 920, 104, 110, 2962, 1070, 13266, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 881, 68, 12, 0, 67, 12, 16481, 1, 3071, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 1340, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 16355, 541];
	var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 1306, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 52, 0, 13, 2, 49, 13, 16, 9, 83, 11, 168, 11, 6, 9, 8, 2, 57, 0, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 316, 19, 13, 9, 214, 6, 3, 8, 112, 16, 16, 9, 82, 12, 9, 9, 535, 9, 20855, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 4305, 6, 792618, 239];

	// This has a complexity linear to the value of the code. The
	// assumption is that looking up astral identifier characters is
	// rare.
	function isInAstralSet(code, set) {
	  var pos = 0x10000;
	  for (var i = 0; i < set.length; i += 2) {
	    pos += set[i];
	    if (pos > code) return false;

	    pos += set[i + 1];
	    if (pos >= code) return true;
	  }
	}

	// Test whether a given character code starts an identifier.

	function isIdentifierStart(code) {
	  if (code < 65) return code === 36;
	  if (code < 91) return true;
	  if (code < 97) return code === 95;
	  if (code < 123) return true;
	  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
	  return isInAstralSet(code, astralIdentifierStartCodes);
	}

	// Test whether a given character is part of an identifier.

	function isIdentifierChar(code) {
	  if (code < 48) return code === 36;
	  if (code < 58) return true;
	  if (code < 65) return false;
	  if (code < 91) return true;
	  if (code < 97) return code === 95;
	  if (code < 123) return true;
	  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
	  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
	}
	},{}],19:[function(require,module,exports){
	"use strict";

	var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

	exports.__esModule = true;
	exports.getLineInfo = getLineInfo;

	var _whitespace = require("./whitespace");

	// These are used when `options.locations` is on, for the
	// `startLoc` and `endLoc` properties.

	var Position = function Position(line, col) {
	  _classCallCheck(this, Position);

	  this.line = line;
	  this.column = col;
	};

	exports.Position = Position;

	var SourceLocation = function SourceLocation(start, end) {
	  _classCallCheck(this, SourceLocation);

	  this.start = start;
	  this.end = end;
	}

	// The `getLineInfo` function is mostly useful when the
	// `locations` option is off (for performance reasons) and you
	// want to find the line/column position for a given character
	// offset. `input` should be the code string that the offset refers
	// into.

	;

	exports.SourceLocation = SourceLocation;

	function getLineInfo(input, offset) {
	  for (var line = 1, cur = 0;;) {
	    _whitespace.lineBreakG.lastIndex = cur;
	    var match = _whitespace.lineBreakG.exec(input);
	    if (match && match.index < offset) {
	      ++line;
	      cur = match.index + match[0].length;
	    } else {
	      return new Position(line, offset - cur);
	    }
	  }
	}
	},{"./whitespace":20,"babel-runtime/helpers/class-call-check":24}],20:[function(require,module,exports){
	/* @flow */

	// Matches a whole line break (where CRLF is considered a single
	// line break). Used to count lines.

	"use strict";

	exports.__esModule = true;
	exports.isNewLine = isNewLine;
	var lineBreak = /\r\n?|\n|\u2028|\u2029/;
	exports.lineBreak = lineBreak;
	var lineBreakG = new RegExp(lineBreak.source, "g");

	exports.lineBreakG = lineBreakG;

	function isNewLine(code /*: number*/) /*: boolean*/ {
	  return code === 10 || code === 13 || code === 0x2028 || code === 0x2029;
	}

	var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
	exports.nonASCIIwhitespace = nonASCIIwhitespace;
	},{}],21:[function(require,module,exports){
	module.exports = { "default": require("core-js/library/fn/get-iterator"), __esModule: true };
	},{"core-js/library/fn/get-iterator":27}],22:[function(require,module,exports){
	module.exports = { "default": require("core-js/library/fn/object/create"), __esModule: true };
	},{"core-js/library/fn/object/create":28}],23:[function(require,module,exports){
	module.exports = { "default": require("core-js/library/fn/object/set-prototype-of"), __esModule: true };
	},{"core-js/library/fn/object/set-prototype-of":29}],24:[function(require,module,exports){
	"use strict";

	exports["default"] = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

	exports.__esModule = true;
	},{}],25:[function(require,module,exports){
	"use strict";

	var _Object$create = require("babel-runtime/core-js/object/create")["default"];

	var _Object$setPrototypeOf = require("babel-runtime/core-js/object/set-prototype-of")["default"];

	exports["default"] = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	  }

	  subClass.prototype = _Object$create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _Object$setPrototypeOf ? _Object$setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	};

	exports.__esModule = true;
	},{"babel-runtime/core-js/object/create":22,"babel-runtime/core-js/object/set-prototype-of":23}],26:[function(require,module,exports){
	"use strict";

	exports["default"] = function (obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	};

	exports.__esModule = true;
	},{}],27:[function(require,module,exports){
	require('../modules/web.dom.iterable');
	require('../modules/es6.string.iterator');
	module.exports = require('../modules/core.get-iterator');
	},{"../modules/core.get-iterator":63,"../modules/es6.string.iterator":66,"../modules/web.dom.iterable":67}],28:[function(require,module,exports){
	var $ = require('../../modules/$');
	module.exports = function create(P, D){
	  return $.create(P, D);
	};
	},{"../../modules/$":50}],29:[function(require,module,exports){
	require('../../modules/es6.object.set-prototype-of');
	module.exports = require('../../modules/$.core').Object.setPrototypeOf;
	},{"../../modules/$.core":35,"../../modules/es6.object.set-prototype-of":65}],30:[function(require,module,exports){
	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};
	},{}],31:[function(require,module,exports){
	module.exports = function(){ /* empty */ };
	},{}],32:[function(require,module,exports){
	var isObject = require('./$.is-object');
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};
	},{"./$.is-object":45}],33:[function(require,module,exports){
	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = require('./$.cof')
	  , TAG = require('./$.wks')('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = (O = Object(it))[TAG]) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};
	},{"./$.cof":34,"./$.wks":61}],34:[function(require,module,exports){
	var toString = {}.toString;

	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};
	},{}],35:[function(require,module,exports){
	var core = module.exports = {version: '1.2.6'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
	},{}],36:[function(require,module,exports){
	// optional / simple context binding
	var aFunction = require('./$.a-function');
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};
	},{"./$.a-function":30}],37:[function(require,module,exports){
	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};
	},{}],38:[function(require,module,exports){
	// Thank's IE8 for his funny defineProperty
	module.exports = !require('./$.fails')(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});
	},{"./$.fails":40}],39:[function(require,module,exports){
	var global    = require('./$.global')
	  , core      = require('./$.core')
	  , ctx       = require('./$.ctx')
	  , PROTOTYPE = 'prototype';

	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && key in target;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(param){
	        return this instanceof C ? new C(param) : C(param);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
	  }
	};
	// type bitmap
	$export.F = 1;  // forced
	$export.G = 2;  // global
	$export.S = 4;  // static
	$export.P = 8;  // proto
	$export.B = 16; // bind
	$export.W = 32; // wrap
	module.exports = $export;
	},{"./$.core":35,"./$.ctx":36,"./$.global":41}],40:[function(require,module,exports){
	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};
	},{}],41:[function(require,module,exports){
	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
	},{}],42:[function(require,module,exports){
	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};
	},{}],43:[function(require,module,exports){
	var $          = require('./$')
	  , createDesc = require('./$.property-desc');
	module.exports = require('./$.descriptors') ? function(object, key, value){
	  return $.setDesc(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};
	},{"./$":50,"./$.descriptors":38,"./$.property-desc":52}],44:[function(require,module,exports){
	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = require('./$.cof');
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};
	},{"./$.cof":34}],45:[function(require,module,exports){
	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};
	},{}],46:[function(require,module,exports){
	'use strict';
	var $              = require('./$')
	  , descriptor     = require('./$.property-desc')
	  , setToStringTag = require('./$.set-to-string-tag')
	  , IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	require('./$.hide')(IteratorPrototype, require('./$.wks')('iterator'), function(){ return this; });

	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = $.create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};
	},{"./$":50,"./$.hide":43,"./$.property-desc":52,"./$.set-to-string-tag":55,"./$.wks":61}],47:[function(require,module,exports){
	'use strict';
	var LIBRARY        = require('./$.library')
	  , $export        = require('./$.export')
	  , redefine       = require('./$.redefine')
	  , hide           = require('./$.hide')
	  , has            = require('./$.has')
	  , Iterators      = require('./$.iterators')
	  , $iterCreate    = require('./$.iter-create')
	  , setToStringTag = require('./$.set-to-string-tag')
	  , getProto       = require('./$').getProto
	  , ITERATOR       = require('./$.wks')('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';

	var returnThis = function(){ return this; };

	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , methods, key;
	  // Fix native
	  if($native){
	    var IteratorPrototype = getProto($default.call(new Base));
	    // Set @@toStringTag to native iterators
	    setToStringTag(IteratorPrototype, TAG, true);
	    // FF fix
	    if(!LIBRARY && has(proto, FF_ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    // fix Array#{values, @@iterator}.name in V8 / FF
	    if(DEF_VALUES && $native.name !== VALUES){
	      VALUES_BUG = true;
	      $default = function values(){ return $native.call(this); };
	    }
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES  ? $default : getMethod(VALUES),
	      keys:    IS_SET      ? $default : getMethod(KEYS),
	      entries: !DEF_VALUES ? $default : getMethod('entries')
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};
	},{"./$":50,"./$.export":39,"./$.has":42,"./$.hide":43,"./$.iter-create":46,"./$.iterators":49,"./$.library":51,"./$.redefine":53,"./$.set-to-string-tag":55,"./$.wks":61}],48:[function(require,module,exports){
	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};
	},{}],49:[function(require,module,exports){
	module.exports = {};
	},{}],50:[function(require,module,exports){
	var $Object = Object;
	module.exports = {
	  create:     $Object.create,
	  getProto:   $Object.getPrototypeOf,
	  isEnum:     {}.propertyIsEnumerable,
	  getDesc:    $Object.getOwnPropertyDescriptor,
	  setDesc:    $Object.defineProperty,
	  setDescs:   $Object.defineProperties,
	  getKeys:    $Object.keys,
	  getNames:   $Object.getOwnPropertyNames,
	  getSymbols: $Object.getOwnPropertySymbols,
	  each:       [].forEach
	};
	},{}],51:[function(require,module,exports){
	module.exports = true;
	},{}],52:[function(require,module,exports){
	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};
	},{}],53:[function(require,module,exports){
	module.exports = require('./$.hide');
	},{"./$.hide":43}],54:[function(require,module,exports){
	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var getDesc  = require('./$').getDesc
	  , isObject = require('./$.is-object')
	  , anObject = require('./$.an-object');
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = require('./$.ctx')(Function.call, getDesc(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};
	},{"./$":50,"./$.an-object":32,"./$.ctx":36,"./$.is-object":45}],55:[function(require,module,exports){
	var def = require('./$').setDesc
	  , has = require('./$.has')
	  , TAG = require('./$.wks')('toStringTag');

	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};
	},{"./$":50,"./$.has":42,"./$.wks":61}],56:[function(require,module,exports){
	var global = require('./$.global')
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};
	},{"./$.global":41}],57:[function(require,module,exports){
	var toInteger = require('./$.to-integer')
	  , defined   = require('./$.defined');
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};
	},{"./$.defined":37,"./$.to-integer":58}],58:[function(require,module,exports){
	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};
	},{}],59:[function(require,module,exports){
	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = require('./$.iobject')
	  , defined = require('./$.defined');
	module.exports = function(it){
	  return IObject(defined(it));
	};
	},{"./$.defined":37,"./$.iobject":44}],60:[function(require,module,exports){
	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};
	},{}],61:[function(require,module,exports){
	var store  = require('./$.shared')('wks')
	  , uid    = require('./$.uid')
	  , Symbol = require('./$.global').Symbol;
	module.exports = function(name){
	  return store[name] || (store[name] =
	    Symbol && Symbol[name] || (Symbol || uid)('Symbol.' + name));
	};
	},{"./$.global":41,"./$.shared":56,"./$.uid":60}],62:[function(require,module,exports){
	var classof   = require('./$.classof')
	  , ITERATOR  = require('./$.wks')('iterator')
	  , Iterators = require('./$.iterators');
	module.exports = require('./$.core').getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};
	},{"./$.classof":33,"./$.core":35,"./$.iterators":49,"./$.wks":61}],63:[function(require,module,exports){
	var anObject = require('./$.an-object')
	  , get      = require('./core.get-iterator-method');
	module.exports = require('./$.core').getIterator = function(it){
	  var iterFn = get(it);
	  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');
	  return anObject(iterFn.call(it));
	};
	},{"./$.an-object":32,"./$.core":35,"./core.get-iterator-method":62}],64:[function(require,module,exports){
	'use strict';
	var addToUnscopables = require('./$.add-to-unscopables')
	  , step             = require('./$.iter-step')
	  , Iterators        = require('./$.iterators')
	  , toIObject        = require('./$.to-iobject');

	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = require('./$.iter-define')(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;

	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');
	},{"./$.add-to-unscopables":31,"./$.iter-define":47,"./$.iter-step":48,"./$.iterators":49,"./$.to-iobject":59}],65:[function(require,module,exports){
	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = require('./$.export');
	$export($export.S, 'Object', {setPrototypeOf: require('./$.set-proto').set});
	},{"./$.export":39,"./$.set-proto":54}],66:[function(require,module,exports){
	'use strict';
	var $at  = require('./$.string-at')(true);

	// 21.1.3.27 String.prototype[@@iterator]()
	require('./$.iter-define')(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});
	},{"./$.iter-define":47,"./$.string-at":57}],67:[function(require,module,exports){
	require('./es6.array.iterator');
	var Iterators = require('./$.iterators');
	Iterators.NodeList = Iterators.HTMLCollection = Iterators.Array;
	},{"./$.iterators":49,"./es6.array.iterator":64}]},{},[1])(1)
	});

/***/ },
/* 746 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.forEach` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}

	module.exports = arrayEach;


/***/ },
/* 747 */
[7134, 2525, 2526, 427, 1345, 2561],
/* 748 */
[7140, 181],
/* 749 */
/***/ function(module, exports) {

	/**
	 * Converts `value` to a string if it's not one. An empty string is returned
	 * for `null` or `undefined` values.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  return value == null ? '' : (value + '');
	}

	module.exports = baseToString;


/***/ },
/* 750 */
[7160, 1334],
/* 751 */
[7166, 105, 181],
/* 752 */
[7170, 749, 105],
/* 753 */
[7180, 154],
/* 754 */
[7181, 180, 154],
/* 755 */
[7182, 2520, 1325, 1336],
/* 756 */
[7186, 429, 105, 519, 180, 108],
/* 757 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(2576)["default"];

	exports.__esModule = true;

	exports["default"] = function (_ref2) {
	  var messages = _ref2.messages;

	  return {
	    visitor: {
	      Scope: function Scope(_ref3) {
	        var scope = _ref3.scope;

	        for (var _name in scope.bindings) {
	          var binding = scope.bindings[_name];
	          if (binding.kind !== "const" && binding.kind !== "module") continue;

	          for (var _iterator = (binding.constantViolations /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	            var _ref;

	            if (_isArray) {
	              if (_i >= _iterator.length) break;
	              _ref = _iterator[_i++];
	            } else {
	              _i = _iterator.next();
	              if (_i.done) break;
	              _ref = _i.value;
	            }

	            var violation = _ref;

	            throw violation.buildCodeFrameError(messages.get("readOnly", _name));
	          }
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 758 */
107,
/* 759 */
423,
/* 760 */
[7060, 522, 1355, 2583],
/* 761 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("flow");
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 762 */
519,
/* 763 */
154,
/* 764 */
[7169, 433],
/* 765 */
[7173, 1369, 763],
/* 766 */
[7106, 288, 1401, 88, 1399, 53, 35, 768, 1383, 2653, 349, 2701, 767, 1374, 2674, 40],
/* 767 */
[7028, 35],
/* 768 */
[7130, 2684, 1379, 526, 771, 434, 2700, 2703],
/* 769 */
[7164, 1379, 434],
/* 770 */
519,
/* 771 */
[7165, 769, 770, 350],
/* 772 */
[7110, 2777],
/* 773 */
[7149, 1398],
/* 774 */
[7164, 1392, 351],
/* 775 */
519,
/* 776 */
[7173, 774, 183],
/* 777 */
734,
/* 778 */
512,
/* 779 */
422,
/* 780 */
513,
/* 781 */
[7060, 109, 783, 1404],
/* 782 */
[7066, 530, 186, 779],
/* 783 */
738,
/* 784 */
[7069, 109, 780, 352],
/* 785 */
[7084, 109, 531, 780, 1404, 530, 1408, 779, 1409, 784, 1410, 352, 2800, 1405, 2794, 2796, 1403, 435, 783, 1407],
/* 786 */
519,
/* 787 */
154,
/* 788 */
[7169, 437],
/* 789 */
[7173, 1413, 787],
/* 790 */
[7106, 99, 798, 26, 796, 18, 6, 792, 1427, 2863, 438, 2911, 791, 1418, 2884, 11],
/* 791 */
[7028, 6],
/* 792 */
[7130, 2894, 1423, 534, 795, 439, 2910, 2913],
/* 793 */
[7164, 1423, 439],
/* 794 */
519,
/* 795 */
[7165, 793, 794, 354],
/* 796 */
[7031, 2926],
/* 797 */
[7036, 2931],
/* 798 */
[7038, 2933],
/* 799 */
734,
/* 800 */
512,
/* 801 */
422,
/* 802 */
513,
/* 803 */
[7060, 110, 805, 1430],
/* 804 */
[7066, 537, 187, 801],
/* 805 */
738,
/* 806 */
[7069, 110, 802, 355],
/* 807 */
[7084, 110, 538, 802, 1430, 537, 1434, 801, 1435, 806, 1436, 355, 2944, 1431, 2938, 2940, 1429, 440, 805, 1433],
/* 808 */
[7110, 2921],
/* 809 */
[7106, 99, 798, 26, 796, 18, 6, 811, 1442, 2985, 441, 3058, 810, 1441, 3003, 11],
/* 810 */
[7028, 6],
/* 811 */
[7130, 1451, 812, 162, 542, 291, 1458, 3060],
/* 812 */
[7160, 1453],
/* 813 */
[7164, 812, 291],
/* 814 */
519,
/* 815 */
[7173, 813, 189],
/* 816 */
[7038, 3080],
/* 817 */
734,
/* 818 */
512,
/* 819 */
422,
/* 820 */
513,
/* 821 */
[7060, 111, 823, 1467],
/* 822 */
[7066, 543, 191, 819],
/* 823 */
738,
/* 824 */
[7069, 111, 820, 357],
/* 825 */
[7084, 111, 544, 820, 1467, 543, 1471, 819, 1472, 824, 1473, 357, 3091, 1468, 3085, 3087, 1466, 442, 823, 1470],
/* 826 */
[7106, 292, 816, 83, 1463, 69, 45, 829, 1479, 3122, 358, 3208, 827, 1477, 3142, 59],
/* 827 */
[7028, 45],
/* 828 */
[7110, 3068],
/* 829 */
[7130, 1490, 831, 155, 548, 193, 1496, 3211],
/* 830 */
[7140, 195],
/* 831 */
[7160, 1492],
/* 832 */
[7164, 831, 193],
/* 833 */
[7166, 155, 195],
/* 834 */
[7170, 3179, 155],
/* 835 */
107,
/* 836 */
423,
/* 837 */
[7060, 551, 1505, 3220],
/* 838 */
[7036, 3255],
/* 839 */
[7038, 3257],
/* 840 */
734,
/* 841 */
512,
/* 842 */
422,
/* 843 */
513,
/* 844 */
[7060, 112, 846, 1510],
/* 845 */
[7066, 554, 196, 842],
/* 846 */
738,
/* 847 */
[7069, 112, 843, 360],
/* 848 */
[7084, 112, 555, 843, 1510, 554, 1514, 842, 1515, 847, 1516, 360, 3268, 1511, 3262, 3264, 1509, 445, 846, 1513],
/* 849 */
[7106, 100, 839, 19, 552, 20, 7, 851, 1522, 3299, 446, 3353, 850, 1520, 3319, 13],
/* 850 */
[7028, 7],
/* 851 */
[7130, 3332, 1527, 295, 854, 361, 3352, 3356],
/* 852 */
[7149, 3357],
/* 853 */
[7164, 1527, 361],
/* 854 */
[7165, 853, 557, 362],
/* 855 */
[7169, 362],
/* 856 */
[7173, 853, 558],
/* 857 */
[7110, 3245],
/* 858 */
[7106, 100, 839, 19, 552, 20, 7, 860, 1535, 3385, 447, 3458, 859, 1534, 3403, 13],
/* 859 */
[7028, 7],
/* 860 */
[7130, 1544, 861, 163, 562, 297, 1551, 3460],
/* 861 */
[7160, 1546],
/* 862 */
[7164, 861, 297],
/* 863 */
519,
/* 864 */
[7173, 862, 198],
/* 865 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  return {
	    visitor: {
	      ArrowFunctionExpression: function ArrowFunctionExpression(path, state) {
	        if (state.opts.spec) {
	          var node = path.node;

	          if (node.shadow) return;

	          node.shadow = { "this": false };
	          node.type = "FunctionExpression";

	          var boundThis = t.thisExpression();
	          boundThis._forceShadow = path;

	          // make sure that arrow function won't be instantiated
	          path.ensureBlock();
	          path.get("body").unshiftContainer("body", t.expressionStatement(t.callExpression(state.addHelper("newArrowCheck"), [t.thisExpression(), boundThis])));

	          path.replaceWith(t.callExpression(t.memberExpression(node, t.identifier("bind")), [t.thisExpression()]));
	        } else {
	          path.arrowFunctionToShadowed();
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 866 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(3463)["default"];

	exports.__esModule = true;

	exports["default"] = function (_ref2) {
	  var t = _ref2.types;

	  function statementList(key, path) {
	    var paths /*: Array*/ = path.get(key);

	    for (var _iterator = paths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var _path = _ref;

	      var func = _path.node;
	      if (!_path.isFunctionDeclaration()) continue;

	      var declar = t.variableDeclaration("let", [t.variableDeclarator(func.id, t.toExpression(func))]);

	      // hoist it up above everything else
	      declar._blockHoist = 2;

	      // todo: name this
	      func.id = null;

	      _path.replaceWith(declar);
	    }
	  }

	  return {
	    visitor: {
	      BlockStatement: function BlockStatement(path) {
	        var node = path.node;
	        var parent = path.parent;

	        if (t.isFunction(parent, { body: node }) || t.isExportDeclaration(parent)) {
	          return;
	        }

	        statementList("body", path);
	      },

	      SwitchCase: function SwitchCase(path) {
	        statementList("consequent", path);
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 867 */
107,
/* 868 */
423,
/* 869 */
[7060, 564, 1560, 3470],
/* 870 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _classCallCheck = __webpack_require__(200)["default"];

	var _Object$create = __webpack_require__(871)["default"];

	var _Symbol = __webpack_require__(872)["default"];

	var _interopRequireDefault = __webpack_require__(70)["default"];

	var _interopRequireWildcard = __webpack_require__(38)["default"];

	exports.__esModule = true;

	var _babelTraverse = __webpack_require__(298);

	var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

	var _tdz = __webpack_require__(3489);

	var _babelTypes = __webpack_require__(46);

	var t = _interopRequireWildcard(_babelTypes);

	var _lodashObjectValues = __webpack_require__(1595);

	var _lodashObjectValues2 = _interopRequireDefault(_lodashObjectValues);

	var _lodashObjectExtend = __webpack_require__(3638);

	var _lodashObjectExtend2 = _interopRequireDefault(_lodashObjectExtend);

	var _babelTemplate = __webpack_require__(3532);

	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

	/*:: import type NodePath from "babel-traverse";*/
	/*:: import type Scope from "babel-traverse";*/
	/*:: import type File from "../../../file";*/
	exports["default"] = function () {
	  return {
	    visitor: {
	      VariableDeclaration: function VariableDeclaration(path, file) {
	        var node = path.node;
	        var parent = path.parent;
	        var scope = path.scope;

	        if (!isBlockScoped(node)) return;
	        convertBlockScopedToVar(node, parent, scope);

	        if (node._tdzThis) {
	          var nodes = [node];

	          for (var i = 0; i < node.declarations.length; i++) {
	            var decl = node.declarations[i];
	            if (decl.init) {
	              var assign = t.assignmentExpression("=", decl.id, decl.init);
	              assign._ignoreBlockScopingTDZ = true;
	              nodes.push(t.expressionStatement(assign));
	            }
	            decl.init = file.addHelper("temporalUndefined");
	          }

	          node._blockHoist = 2;

	          if (path.isCompletionRecord()) {
	            // ensure we don't break completion record semantics by returning
	            // the initialiser of the last declarator
	            nodes.push(t.expressionStatement(scope.buildUndefinedNode()));
	          }

	          path.replaceWithMultiple(nodes);
	        }
	      },

	      Loop: function Loop(path, file) {
	        var node = path.node;
	        var parent = path.parent;
	        var scope = path.scope;

	        t.ensureBlock(node);
	        var blockScoping = new BlockScoping(path, path.get("body"), parent, scope, file);
	        var replace = blockScoping.run();
	        if (replace) path.replaceWith(replace);
	      },

	      "BlockStatement|Program": function BlockStatementProgram(path, file) {
	        if (!t.isLoop(path.parent)) {
	          var blockScoping = new BlockScoping(null, path, path.parent, path.scope, file);
	          blockScoping.run();
	        }
	      }
	    }
	  };
	};

	var buildRetCheck = _babelTemplate2["default"]("\n  if (typeof RETURN === \"object\") return RETURN.v;\n");

	function isBlockScoped(node) {
	  if (!t.isVariableDeclaration(node)) return false;
	  if (node[t.BLOCK_SCOPED_SYMBOL]) return true;
	  if (node.kind !== "let" && node.kind !== "const") return false;
	  return true;
	}

	function convertBlockScopedToVar(node, parent, scope) {
	  // https://github.com/babel/babel/issues/255
	  if (!t.isFor(parent)) {
	    for (var i = 0; i < node.declarations.length; i++) {
	      var declar = node.declarations[i];
	      declar.init = declar.init || scope.buildUndefinedNode();
	    }
	  }

	  node[t.BLOCK_SCOPED_SYMBOL] = true;
	  node.kind = "var";
	}

	function isVar(node) {
	  return t.isVariableDeclaration(node, { kind: "var" }) && !isBlockScoped(node);
	}

	function replace(path, node, scope, remaps) {
	  var remap = remaps[node.name];
	  if (!remap) return;

	  var ownBinding = scope.getBindingIdentifier(node.name);
	  if (ownBinding === remap.binding) {
	    node.name = remap.uid;
	  } else {
	    // scope already has it's own binding that doesn't
	    // match the one we have a stored replacement for
	    if (path) path.skip();
	  }
	}

	var replaceVisitor = {
	  ReferencedIdentifier: function ReferencedIdentifier(path, remaps) {
	    replace(path, path.node, path.scope, remaps);
	  },

	  AssignmentExpression: function AssignmentExpression(path, remaps) {
	    var ids = path.getBindingIdentifiers();
	    for (var _name in ids) {
	      replace(null, ids[_name], path.scope, remaps);
	    }
	  }
	};

	function traverseReplace(node, parent, scope, remaps) {
	  if (t.isIdentifier(node)) {
	    replace(node, parent, scope, remaps);
	  }

	  if (t.isAssignmentExpression(node)) {
	    var ids = t.getBindingIdentifiers(node);
	    for (var _name2 in ids) {
	      replace(ids[_name2], parent, scope, remaps);
	    }
	  }

	  scope.traverse(node, replaceVisitor, remaps);
	}

	var letReferenceBlockVisitor = _babelTraverse2["default"].visitors.merge([{
	  Function: function Function(path, state) {
	    path.traverse(letReferenceFunctionVisitor, state);
	    return path.skip();
	  }
	}, _tdz.visitor]);

	var letReferenceFunctionVisitor = _babelTraverse2["default"].visitors.merge([{
	  ReferencedIdentifier: function ReferencedIdentifier(path, state) {
	    var ref = state.letReferences[path.node.name];

	    // not a part of our scope
	    if (!ref) return;

	    // this scope has a variable with the same name so it couldn't belong
	    // to our let scope
	    var localBinding = path.scope.getBindingIdentifier(path.node.name);
	    if (localBinding && localBinding !== ref) return;

	    state.closurify = true;
	  }
	}, _tdz.visitor]);

	var hoistVarDeclarationsVisitor = {
	  enter: function enter(path, self) {
	    var node = path.node;
	    var parent = path.parent;

	    if (path.isForStatement()) {
	      if (isVar(node.init, node)) {
	        var nodes = self.pushDeclar(node.init);
	        if (nodes.length === 1) {
	          node.init = nodes[0];
	        } else {
	          node.init = t.sequenceExpression(nodes);
	        }
	      }
	    } else if (path.isFor()) {
	      if (isVar(node.left, node)) {
	        self.pushDeclar(node.left);
	        node.left = node.left.declarations[0].id;
	      }
	    } else if (isVar(node, parent)) {
	      path.replaceWithMultiple(self.pushDeclar(node).map(function (expr) {
	        return t.expressionStatement(expr);
	      }));
	    } else if (path.isFunction()) {
	      return path.skip();
	    }
	  }
	};

	var loopLabelVisitor = {
	  LabeledStatement: function LabeledStatement(_ref, state) {
	    var node = _ref.node;

	    state.innerLabels.push(node.label.name);
	  }
	};

	var continuationVisitor = {
	  enter: function enter(path, state) {
	    if (path.isAssignmentExpression() || path.isUpdateExpression()) {
	      var bindings = path.getBindingIdentifiers();
	      for (var _name3 in bindings) {
	        if (state.outsideReferences[_name3] !== path.scope.getBindingIdentifier(_name3)) continue;
	        state.reassignments[_name3] = true;
	      }
	    }
	  }
	};

	function loopNodeTo(node) {
	  if (t.isBreakStatement(node)) {
	    return "break";
	  } else if (t.isContinueStatement(node)) {
	    return "continue";
	  }
	}

	var loopVisitor = {
	  Loop: function Loop(path, state) {
	    var oldIgnoreLabeless = state.ignoreLabeless;
	    state.ignoreLabeless = true;
	    path.traverse(loopVisitor, state);
	    state.ignoreLabeless = oldIgnoreLabeless;
	    path.skip();
	  },

	  Function: function Function(path) {
	    path.skip();
	  },

	  SwitchCase: function SwitchCase(path, state) {
	    var oldInSwitchCase = state.inSwitchCase;
	    state.inSwitchCase = true;
	    path.traverse(loopVisitor, state);
	    state.inSwitchCase = oldInSwitchCase;
	    path.skip();
	  },

	  "BreakStatement|ContinueStatement|ReturnStatement": function BreakStatementContinueStatementReturnStatement(path, state) {
	    var node = path.node;
	    var parent = path.parent;
	    var scope = path.scope;

	    if (node[this.LOOP_IGNORE]) return;

	    var replace = undefined;
	    var loopText = loopNodeTo(node);

	    if (loopText) {
	      if (node.label) {
	        // we shouldn't be transforming this because it exists somewhere inside
	        if (state.innerLabels.indexOf(node.label.name) >= 0) {
	          return;
	        }

	        loopText = loopText + "|" + node.label.name;
	      } else {
	        // we shouldn't be transforming these statements because
	        // they don't refer to the actual loop we're scopifying
	        if (state.ignoreLabeless) return;

	        //
	        if (state.inSwitchCase) return;

	        // break statements mean something different in this context
	        if (t.isBreakStatement(node) && t.isSwitchCase(parent)) return;
	      }

	      state.hasBreakContinue = true;
	      state.map[loopText] = node;
	      replace = t.stringLiteral(loopText);
	    }

	    if (path.isReturnStatement()) {
	      state.hasReturn = true;
	      replace = t.objectExpression([t.objectProperty(t.identifier("v"), node.argument || scope.buildUndefinedNode())]);
	    }

	    if (replace) {
	      replace = t.returnStatement(replace);
	      replace[this.LOOP_IGNORE] = true;
	      path.skip();
	      path.replaceWith(t.inherits(replace, node));
	    }
	  }
	};

	var BlockScoping = (function () {
	  function BlockScoping(loopPath /*:: ?: NodePath*/, blockPath /*: NodePath*/, parent /*: Object*/, scope /*: Scope*/, file /*: File*/) {
	    _classCallCheck(this, BlockScoping);

	    this.parent = parent;
	    this.scope = scope;
	    this.file = file;

	    this.blockPath = blockPath;
	    this.block = blockPath.node;

	    this.outsideLetReferences = _Object$create(null);
	    this.hasLetReferences = false;
	    this.letReferences = _Object$create(null);
	    this.body = [];

	    if (loopPath) {
	      this.loopParent = loopPath.parent;
	      this.loopLabel = t.isLabeledStatement(this.loopParent) && this.loopParent.label;
	      this.loopPath = loopPath;
	      this.loop = loopPath.node;
	    }
	  }

	  /**
	   * Start the ball rolling.
	   */

	  BlockScoping.prototype.run = function run() {
	    var block = this.block;
	    if (block._letDone) return;
	    block._letDone = true;

	    var needsClosure = this.getLetReferences();

	    // this is a block within a `Function/Program` so we can safely leave it be
	    if (t.isFunction(this.parent) || t.isProgram(this.block)) return;

	    // we can skip everything
	    if (!this.hasLetReferences) return;

	    if (needsClosure) {
	      this.wrapClosure();
	    } else {
	      this.remap();
	    }

	    if (this.loopLabel && !t.isLabeledStatement(this.loopParent)) {
	      return t.labeledStatement(this.loopLabel, this.loop);
	    }
	  };

	  BlockScoping.prototype.remap = function remap() {
	    var hasRemaps = false;
	    var letRefs = this.letReferences;
	    var scope = this.scope;

	    // alright, so since we aren't wrapping this block in a closure
	    // we have to check if any of our let variables collide with
	    // those in upper scopes and then if they do, generate a uid
	    // for them and replace all references with it
	    var remaps = _Object$create(null);

	    for (var key in letRefs) {
	      // just an Identifier node we collected in `getLetReferences`
	      // this is the defining identifier of a declaration
	      var ref = letRefs[key];

	      // todo: could skip this if the colliding binding is in another function
	      if (scope.parentHasBinding(key) || scope.hasGlobal(key)) {
	        var uid = scope.generateUidIdentifier(ref.name).name;
	        ref.name = uid;

	        hasRemaps = true;
	        remaps[key] = remaps[uid] = {
	          binding: ref,
	          uid: uid
	        };
	      }
	    }

	    if (!hasRemaps) return;

	    //

	    var loop = this.loop;
	    if (loop) {
	      traverseReplace(loop.right, loop, scope, remaps);
	      traverseReplace(loop.test, loop, scope, remaps);
	      traverseReplace(loop.update, loop, scope, remaps);
	    }

	    this.blockPath.traverse(replaceVisitor, remaps);
	  };

	  BlockScoping.prototype.wrapClosure = function wrapClosure() {
	    var block = this.block;

	    var outsideRefs = this.outsideLetReferences;

	    // remap loop heads with colliding variables
	    if (this.loop) {
	      for (var _name4 in outsideRefs) {
	        var id = outsideRefs[_name4];

	        if (this.scope.hasGlobal(id.name) || this.scope.parentHasBinding(id.name)) {
	          delete outsideRefs[id.name];
	          delete this.letReferences[id.name];

	          this.scope.rename(id.name);

	          this.letReferences[id.name] = id;
	          outsideRefs[id.name] = id;
	        }
	      }
	    }

	    // if we're inside of a for loop then we search to see if there are any
	    // `break`s, `continue`s, `return`s etc
	    this.has = this.checkLoop();

	    // hoist let references to retain scope
	    this.hoistVarDeclarations();

	    // turn outsideLetReferences into an array
	    var params = _lodashObjectValues2["default"](outsideRefs);
	    var args = _lodashObjectValues2["default"](outsideRefs);

	    // build the closure that we're going to wrap the block with
	    var fn = t.functionExpression(null, params, t.blockStatement(block.body));
	    fn.shadow = true;

	    // continuation
	    this.addContinuations(fn);

	    // replace the current block body with the one we're going to build
	    block.body = this.body;

	    var ref = fn;

	    if (this.loop) {
	      ref = this.scope.generateUidIdentifier("loop");
	      this.loopPath.insertBefore(t.variableDeclaration("var", [t.variableDeclarator(ref, fn)]));
	    }

	    // build a call and a unique id that we can assign the return value to
	    var call = t.callExpression(ref, args);
	    var ret = this.scope.generateUidIdentifier("ret");

	    // handle generators
	    var hasYield = _babelTraverse2["default"].hasType(fn.body, this.scope, "YieldExpression", t.FUNCTION_TYPES);
	    if (hasYield) {
	      fn.generator = true;
	      call = t.yieldExpression(call, true);
	    }

	    // handlers async functions
	    var hasAsync = _babelTraverse2["default"].hasType(fn.body, this.scope, "AwaitExpression", t.FUNCTION_TYPES);
	    if (hasAsync) {
	      fn.async = true;
	      call = t.awaitExpression(call);
	    }

	    this.buildClosure(ret, call);
	  };

	  /**
	   * Push the closure to the body.
	   */

	  BlockScoping.prototype.buildClosure = function buildClosure(ret /*: { type: "Identifier" }*/, call /*: { type: "CallExpression" }*/) {
	    var has = this.has;
	    if (has.hasReturn || has.hasBreakContinue) {
	      this.buildHas(ret, call);
	    } else {
	      this.body.push(t.expressionStatement(call));
	    }
	  };

	  /**
	   * If any of the outer let variables are reassigned then we need to rename them in
	   * the closure so we can get direct access to the outer variable to continue the
	   * iteration with bindings based on each iteration.
	   *
	   * Reference: https://github.com/babel/babel/issues/1078
	   */

	  BlockScoping.prototype.addContinuations = function addContinuations(fn) {
	    var state = {
	      reassignments: {},
	      outsideReferences: this.outsideLetReferences
	    };

	    this.scope.traverse(fn, continuationVisitor, state);

	    for (var i = 0; i < fn.params.length; i++) {
	      var param = fn.params[i];
	      if (!state.reassignments[param.name]) continue;

	      var newParam = this.scope.generateUidIdentifier(param.name);
	      fn.params[i] = newParam;

	      this.scope.rename(param.name, newParam.name, fn);

	      // assign outer reference as it's been modified internally and needs to be retained
	      fn.body.body.push(t.expressionStatement(t.assignmentExpression("=", param, newParam)));
	    }
	  };

	  BlockScoping.prototype.getLetReferences = function getLetReferences() {
	    var block = this.block;

	    var declarators = [];

	    if (this.loop) {
	      var init = this.loop.left || this.loop.init;
	      if (isBlockScoped(init)) {
	        declarators.push(init);
	        _lodashObjectExtend2["default"](this.outsideLetReferences, t.getBindingIdentifiers(init));
	      }
	    }

	    //
	    if (block.body) {
	      for (var i = 0; i < block.body.length; i++) {
	        var declar = block.body[i];
	        if (t.isClassDeclaration(declar) || t.isFunctionDeclaration(declar) || isBlockScoped(declar)) {
	          if (isBlockScoped(declar)) convertBlockScopedToVar(declar, block, this.scope);
	          declarators = declarators.concat(declar.declarations || declar);
	        }
	      }
	    }

	    //
	    for (var i = 0; i < declarators.length; i++) {
	      var declar = declarators[i];
	      var keys = t.getBindingIdentifiers(declar);
	      _lodashObjectExtend2["default"](this.letReferences, keys);
	      this.hasLetReferences = true;
	    }

	    // no let references so we can just quit
	    if (!this.hasLetReferences) return;

	    var state = {
	      letReferences: this.letReferences,
	      closurify: false,
	      file: this.file
	    };

	    // traverse through this block, stopping on functions and checking if they
	    // contain any local let references
	    this.blockPath.traverse(letReferenceBlockVisitor, state);

	    return state.closurify;
	  };

	  /**
	   * If we're inside of a loop then traverse it and check if it has one of
	   * the following node types `ReturnStatement`, `BreakStatement`,
	   * `ContinueStatement` and replace it with a return value that we can track
	   * later on.
	   */

	  BlockScoping.prototype.checkLoop = function checkLoop() /*: Object*/ {
	    var state = {
	      hasBreakContinue: false,
	      ignoreLabeless: false,
	      inSwitchCase: false,
	      innerLabels: [],
	      hasReturn: false,
	      isLoop: !!this.loop,
	      map: {},
	      LOOP_IGNORE: _Symbol()
	    };

	    this.blockPath.traverse(loopLabelVisitor, state);
	    this.blockPath.traverse(loopVisitor, state);

	    return state;
	  };

	  /**
	   * Hoist all let declarations in this block to before it so they retain scope
	   * once we wrap everything in a closure.
	   */

	  BlockScoping.prototype.hoistVarDeclarations = function hoistVarDeclarations() {
	    this.blockPath.traverse(hoistVarDeclarationsVisitor, this);
	  };

	  /**
	   * Turn a `VariableDeclaration` into an array of `AssignmentExpressions` with
	   * their declarations hoisted to before the closure wrapper.
	   */

	  BlockScoping.prototype.pushDeclar = function pushDeclar(node /*: { type: "VariableDeclaration" }*/) /*: Array<Object>*/ {
	    var declars = [];
	    var names = t.getBindingIdentifiers(node);
	    for (var _name5 in names) {
	      declars.push(t.variableDeclarator(names[_name5]));
	    }

	    this.body.push(t.variableDeclaration(node.kind, declars));

	    var replace = [];

	    for (var i = 0; i < node.declarations.length; i++) {
	      var declar = node.declarations[i];
	      if (!declar.init) continue;

	      var expr = t.assignmentExpression("=", declar.id, declar.init);
	      replace.push(t.inherits(expr, declar));
	    }

	    return replace;
	  };

	  BlockScoping.prototype.buildHas = function buildHas(ret /*: { type: "Identifier" }*/, call /*: { type: "CallExpression" }*/) {
	    var body = this.body;

	    body.push(t.variableDeclaration("var", [t.variableDeclarator(ret, call)]));

	    var retCheck = undefined;
	    var has = this.has;
	    var cases = [];

	    if (has.hasReturn) {
	      // typeof ret === "object"
	      retCheck = buildRetCheck({
	        RETURN: ret
	      });
	    }

	    if (has.hasBreakContinue) {
	      for (var key in has.map) {
	        cases.push(t.switchCase(t.stringLiteral(key), [has.map[key]]));
	      }

	      if (has.hasReturn) {
	        cases.push(t.switchCase(null, [retCheck]));
	      }

	      if (cases.length === 1) {
	        var single = cases[0];
	        body.push(t.ifStatement(t.binaryExpression("===", ret, single.test), single.consequent[0]));
	      } else {
	        // https://github.com/babel/babel/issues/998
	        for (var i = 0; i < cases.length; i++) {
	          var caseConsequent = cases[i].consequent[0];
	          if (t.isBreakStatement(caseConsequent) && !caseConsequent.label) {
	            caseConsequent.label = this.loopLabel = this.loopLabel || this.scope.generateUidIdentifier("loop");
	          }
	        }

	        body.push(t.switchStatement(ret, cases));
	      }
	    } else {
	      if (has.hasReturn) {
	        body.push(retCheck);
	      }
	    }
	  };

	  return BlockScoping;
	})();

	module.exports = exports["default"];

/***/ },
/* 871 */
[7031, 3500],
/* 872 */
[7038, 3507],
/* 873 */
734,
/* 874 */
512,
/* 875 */
422,
/* 876 */
513,
/* 877 */
[7060, 113, 879, 1565],
/* 878 */
[7066, 565, 201, 875],
/* 879 */
738,
/* 880 */
[7069, 113, 876, 364],
/* 881 */
[7084, 113, 566, 876, 1565, 565, 1569, 875, 1570, 880, 1571, 364, 3518, 1566, 3512, 3514, 1564, 449, 879, 1568],
/* 882 */
[7106, 200, 872, 89, 871, 70, 38, 885, 1577, 3550, 298, 3637, 883, 1575, 3571, 46],
/* 883 */
[7028, 38],
/* 884 */
[7110, 3495],
/* 885 */
[7130, 1587, 887, 156, 570, 203, 1593, 1595],
/* 886 */
[7140, 205],
/* 887 */
[7160, 1589],
/* 888 */
[7164, 887, 203],
/* 889 */
[7166, 156, 205],
/* 890 */
[7170, 3608, 156],
/* 891 */
[7182, 3598, 1583, 3614],
/* 892 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Symbol = __webpack_require__(575)["default"];

	var _interopRequireDefault = __webpack_require__(39)["default"];

	exports.__esModule = true;

	var _loose = __webpack_require__(3642);

	var _loose2 = _interopRequireDefault(_loose);

	var _vanilla = __webpack_require__(1597);

	var _vanilla2 = _interopRequireDefault(_vanilla);

	var _babelHelperFunctionName = __webpack_require__(896);

	var _babelHelperFunctionName2 = _interopRequireDefault(_babelHelperFunctionName);

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  // todo: investigate traversal requeueing
	  var VISITED = _Symbol();

	  return {
	    visitor: {
	      ExportDefaultDeclaration: function ExportDefaultDeclaration(path) {
	        if (!path.get("declaration").isClassDeclaration()) return;

	        var node = path.node;

	        var ref = node.declaration.id || path.scope.generateUidIdentifier("class");
	        node.declaration.id = ref;

	        // Split the class declaration and the export into two separate statements.
	        path.replaceWith(node.declaration);
	        path.insertAfter(t.exportDefaultDeclaration(ref));
	      },

	      ClassDeclaration: function ClassDeclaration(path) {
	        var node = path.node;

	        var ref = node.id || path.scope.generateUidIdentifier("class");

	        path.replaceWith(t.variableDeclaration("let", [t.variableDeclarator(ref, t.toExpression(node))]));
	      },

	      ClassExpression: function ClassExpression(path, state) {
	        var node = path.node;

	        if (node[VISITED]) return;

	        var inferred = _babelHelperFunctionName2["default"](path);
	        if (inferred && inferred !== node) return path.replaceWith(inferred);

	        node[VISITED] = true;

	        var Constructor = _vanilla2["default"];
	        if (state.opts.loose) Constructor = _loose2["default"];

	        path.replaceWith(new Constructor(path, state.file).run());
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 893 */
519,
/* 894 */
154,
/* 895 */
[7173, 1600, 894],
/* 896 */
[7191, 39, 28, 3668, 1613, 31],
/* 897 */
[7031, 3682],
/* 898 */
[7053, 1607],
/* 899 */
734,
/* 900 */
512,
/* 901 */
422,
/* 902 */
513,
/* 903 */
[7060, 106, 905, 1605],
/* 904 */
[7066, 451, 164, 901],
/* 905 */
738,
/* 906 */
[7069, 106, 902, 368],
/* 907 */
[7084, 106, 576, 902, 1605, 451, 1610, 901, 1611, 906, 1612, 368, 3699, 1606, 3694, 3696, 898, 452, 905, 1609],
/* 908 */
519,
/* 909 */
154,
/* 910 */
[7169, 454],
/* 911 */
[7173, 1615, 909],
/* 912 */
[7106, 157, 575, 84, 897, 39, 28, 913, 1629, 3760, 300, 3808, 574, 1620, 3781, 31],
/* 913 */
[7130, 3791, 1625, 579, 916, 455, 3807, 3810],
/* 914 */
[7164, 1625, 455],
/* 915 */
519,
/* 916 */
[7165, 914, 915, 370],
/* 917 */
[7110, 3676],
/* 918 */
[7149, 1644],
/* 919 */
[7164, 1638, 371],
/* 920 */
519,
/* 921 */
[7173, 919, 207],
/* 922 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(3879)["default"];

	exports.__esModule = true;

	exports["default"] = function (_ref5) {
	  var t = _ref5.types;
	  var template = _ref5.template;

	  var buildMutatorMapAssign = template("\n    MUTATOR_MAP_REF[KEY] = MUTATOR_MAP_REF[KEY] || {};\n    MUTATOR_MAP_REF[KEY].KIND = VALUE;\n  ");

	  function getValue(prop) {
	    if (t.isObjectProperty(prop)) {
	      return prop.value;
	    } else if (t.isObjectMethod(prop)) {
	      return t.functionExpression(null, prop.params, prop.body, prop.generator, prop.async);
	    }
	  }

	  function pushAssign(objId, prop, body) {
	    if (prop.kind === "get" && prop.kind === "set") {
	      pushMutatorDefine(objId, prop, body);
	    } else {
	      body.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(objId, prop.key, prop.computed || t.isLiteral(prop.key)), getValue(prop))));
	    }
	  }

	  function pushMutatorDefine(_ref6, prop) {
	    var objId = _ref6.objId;
	    var body = _ref6.body;
	    var getMutatorId = _ref6.getMutatorId;
	    var scope = _ref6.scope;

	    var key = prop.key;

	    var maybeMemoise = scope.maybeGenerateMemoised(prop.key);
	    if (maybeMemoise) {
	      body.push(t.expressionStatement(t.assignmentExpression("=", maybeMemoise, key)));
	      key = maybeMemoise;
	    }

	    body.push.apply(body, buildMutatorMapAssign({
	      MUTATOR_MAP_REF: getMutatorId(),
	      KEY: key,
	      VALUE: getValue(prop),
	      KIND: t.identifier(prop.kind)
	    }));
	  }

	  function loose(info) {
	    for (var _iterator = info.computedProps, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var prop = _ref;

	      if (prop.kind === "get" || prop.kind === "set") {
	        pushMutatorDefine(info, prop);
	      } else {
	        pushAssign(info.objId, prop, info.body);
	      }
	    }
	  }

	  function spec(info) {
	    var objId = info.objId;
	    var body = info.body;
	    var computedProps = info.computedProps;
	    var state = info.state;

	    for (var _iterator2 = computedProps, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var prop = _ref2;

	      var key = t.toComputedKey(prop);

	      if (prop.kind === "get" || prop.kind === "set") {
	        pushMutatorDefine(info, prop);
	      } else if (t.isStringLiteral(key, { value: "__proto__" })) {
	        pushAssign(objId, prop, body);
	      } else {
	        if (computedProps.length === 1) {
	          return t.callExpression(state.addHelper("defineProperty"), [info.initPropExpression, key, getValue(prop)]);
	        } else {
	          body.push(t.expressionStatement(t.callExpression(state.addHelper("defineProperty"), [objId, key, getValue(prop)])));
	        }
	      }
	    }
	  }

	  return {
	    visitor: {
	      ObjectExpression: {
	        exit: function exit(path, state) {
	          var node = path.node;
	          var parent = path.parent;
	          var scope = path.scope;

	          var hasComputed = false;
	          for (var _iterator3 = (node.properties /*: Array<Object>*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	            var _ref3;

	            if (_isArray3) {
	              if (_i3 >= _iterator3.length) break;
	              _ref3 = _iterator3[_i3++];
	            } else {
	              _i3 = _iterator3.next();
	              if (_i3.done) break;
	              _ref3 = _i3.value;
	            }

	            var prop = _ref3;

	            hasComputed = prop.computed === true;
	            if (hasComputed) break;
	          }
	          if (!hasComputed) return;

	          // put all getters/setters into the first object expression as well as all initialisers up
	          // to the first computed property

	          var initProps = [];
	          var computedProps = [];
	          var foundComputed = false;

	          for (var _iterator4 = node.properties, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	            var _ref4;

	            if (_isArray4) {
	              if (_i4 >= _iterator4.length) break;
	              _ref4 = _iterator4[_i4++];
	            } else {
	              _i4 = _iterator4.next();
	              if (_i4.done) break;
	              _ref4 = _i4.value;
	            }

	            var prop = _ref4;

	            if (prop.computed) {
	              foundComputed = true;
	            }

	            if (foundComputed) {
	              computedProps.push(prop);
	            } else {
	              initProps.push(prop);
	            }
	          }

	          var objId = scope.generateUidIdentifierBasedOnNode(parent);
	          var initPropExpression = t.objectExpression(initProps);
	          var body = [];

	          body.push(t.variableDeclaration("var", [t.variableDeclarator(objId, initPropExpression)]));

	          var callback = spec;
	          if (state.opts.loose) callback = loose;

	          var mutatorRef = undefined;

	          var getMutatorId = function getMutatorId() {
	            if (!mutatorRef) {
	              mutatorRef = scope.generateUidIdentifier("mutatorMap");

	              body.push(t.variableDeclaration("var", [t.variableDeclarator(mutatorRef, t.objectExpression([]))]));
	            }

	            return mutatorRef;
	          };

	          var single = callback({
	            scope: scope,
	            objId: objId,
	            body: body,
	            computedProps: computedProps,
	            initPropExpression: initPropExpression,
	            getMutatorId: getMutatorId,
	            state: state
	          });

	          if (mutatorRef) {
	            body.push(t.expressionStatement(t.callExpression(state.addHelper("defineEnumerableProperties"), [objId, mutatorRef])));
	          }

	          if (single) {
	            path.replaceWith(single);
	          } else {
	            body.push(t.expressionStatement(objId));
	            path.replaceWithMultiple(body);
	          }
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 923 */
107,
/* 924 */
423,
/* 925 */
[7060, 584, 1649, 3886],
/* 926 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _classCallCheck = __webpack_require__(3906)["default"];

	var _getIterator = __webpack_require__(3905)["default"];

	exports.__esModule = true;

	exports["default"] = function (_ref5) {
	  var t = _ref5.types;

	  /**
	   * Test if a VariableDeclaration's declarations contains any Patterns.
	   */

	  function variableDeclarationHasPattern(node) {
	    for (var _iterator = (node.declarations /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var declar = _ref;

	      if (t.isPattern(declar.id)) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * Test if an ArrayPattern's elements contain any RestElements.
	   */

	  function hasRest(pattern) {
	    for (var _iterator2 = (pattern.elements /*: Array*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var elem = _ref2;

	      if (t.isRestElement(elem)) {
	        return true;
	      }
	    }
	    return false;
	  }

	  var arrayUnpackVisitor = {
	    ReferencedIdentifier: function ReferencedIdentifier(path, state) {
	      if (state.bindings[path.node.name]) {
	        state.deopt = true;
	        path.stop();
	      }
	    }
	  };

	  var DestructuringTransformer = (function () {
	    function DestructuringTransformer(opts) {
	      _classCallCheck(this, DestructuringTransformer);

	      this.blockHoist = opts.blockHoist;
	      this.operator = opts.operator;
	      this.arrays = {};
	      this.nodes = opts.nodes || [];
	      this.scope = opts.scope;
	      this.file = opts.file;
	      this.kind = opts.kind;
	    }

	    DestructuringTransformer.prototype.buildVariableAssignment = function buildVariableAssignment(id, init) {
	      var op = this.operator;
	      if (t.isMemberExpression(id)) op = "=";

	      var node = undefined;

	      if (op) {
	        node = t.expressionStatement(t.assignmentExpression(op, id, init));
	      } else {
	        node = t.variableDeclaration(this.kind, [t.variableDeclarator(id, init)]);
	      }

	      node._blockHoist = this.blockHoist;

	      return node;
	    };

	    DestructuringTransformer.prototype.buildVariableDeclaration = function buildVariableDeclaration(id, init) {
	      var declar = t.variableDeclaration("var", [t.variableDeclarator(id, init)]);
	      declar._blockHoist = this.blockHoist;
	      return declar;
	    };

	    DestructuringTransformer.prototype.push = function push(id, init) {
	      if (t.isObjectPattern(id)) {
	        this.pushObjectPattern(id, init);
	      } else if (t.isArrayPattern(id)) {
	        this.pushArrayPattern(id, init);
	      } else if (t.isAssignmentPattern(id)) {
	        this.pushAssignmentPattern(id, init);
	      } else {
	        this.nodes.push(this.buildVariableAssignment(id, init));
	      }
	    };

	    DestructuringTransformer.prototype.toArray = function toArray(node, count) {
	      if (this.file.opts.loose || t.isIdentifier(node) && this.arrays[node.name]) {
	        return node;
	      } else {
	        return this.scope.toArray(node, count);
	      }
	    };

	    DestructuringTransformer.prototype.pushAssignmentPattern = function pushAssignmentPattern(pattern, valueRef) {
	      // we need to assign the current value of the assignment to avoid evaluating
	      // it more than once

	      var tempValueRef = this.scope.generateUidIdentifierBasedOnNode(valueRef);

	      var declar = t.variableDeclaration("var", [t.variableDeclarator(tempValueRef, valueRef)]);
	      declar._blockHoist = this.blockHoist;
	      this.nodes.push(declar);

	      //

	      var tempConditional = t.conditionalExpression(t.binaryExpression("===", tempValueRef, t.identifier("undefined")), pattern.right, tempValueRef);

	      var left = pattern.left;
	      if (t.isPattern(left)) {
	        var tempValueDefault = t.expressionStatement(t.assignmentExpression("=", tempValueRef, tempConditional));
	        tempValueDefault._blockHoist = this.blockHoist;

	        this.nodes.push(tempValueDefault);
	        this.push(left, tempValueRef);
	      } else {
	        this.nodes.push(this.buildVariableAssignment(left, tempConditional));
	      }
	    };

	    DestructuringTransformer.prototype.pushObjectRest = function pushObjectRest(pattern, objRef, spreadProp, spreadPropIndex) {
	      // get all the keys that appear in this object before the current spread

	      var keys = [];

	      for (var i = 0; i < pattern.properties.length; i++) {
	        var prop = pattern.properties[i];

	        // we've exceeded the index of the spread property to all properties to the
	        // right need to be ignored
	        if (i >= spreadPropIndex) break;

	        // ignore other spread properties
	        if (t.isRestProperty(prop)) continue;

	        var key = prop.key;
	        if (t.isIdentifier(key) && !prop.computed) key = t.stringLiteral(prop.key.name);
	        keys.push(key);
	      }

	      keys = t.arrayExpression(keys);

	      //

	      var value = t.callExpression(this.file.addHelper("objectWithoutProperties"), [objRef, keys]);
	      this.nodes.push(this.buildVariableAssignment(spreadProp.argument, value));
	    };

	    DestructuringTransformer.prototype.pushObjectProperty = function pushObjectProperty(prop, propRef) {
	      if (t.isLiteral(prop.key)) prop.computed = true;

	      var pattern = prop.value;
	      var objRef = t.memberExpression(propRef, prop.key, prop.computed);

	      if (t.isPattern(pattern)) {
	        this.push(pattern, objRef);
	      } else {
	        this.nodes.push(this.buildVariableAssignment(pattern, objRef));
	      }
	    };

	    DestructuringTransformer.prototype.pushObjectPattern = function pushObjectPattern(pattern, objRef) {
	      // https://github.com/babel/babel/issues/681

	      if (!pattern.properties.length) {
	        this.nodes.push(t.expressionStatement(t.callExpression(this.file.addHelper("objectDestructuringEmpty"), [objRef])));
	      }

	      // if we have more than one properties in this pattern and the objectRef is a
	      // member expression then we need to assign it to a temporary variable so it's
	      // only evaluated once

	      if (pattern.properties.length > 1 && !this.scope.isStatic(objRef)) {
	        var temp = this.scope.generateUidIdentifierBasedOnNode(objRef);
	        this.nodes.push(this.buildVariableDeclaration(temp, objRef));
	        objRef = temp;
	      }

	      //

	      for (var i = 0; i < pattern.properties.length; i++) {
	        var prop = pattern.properties[i];
	        if (t.isRestProperty(prop)) {
	          this.pushObjectRest(pattern, objRef, prop, i);
	        } else {
	          this.pushObjectProperty(prop, objRef);
	        }
	      }
	    };

	    DestructuringTransformer.prototype.canUnpackArrayPattern = function canUnpackArrayPattern(pattern, arr) {
	      // not an array so there's no way we can deal with this
	      if (!t.isArrayExpression(arr)) return false;

	      // pattern has less elements than the array and doesn't have a rest so some
	      // elements wont be evaluated
	      if (pattern.elements.length > arr.elements.length) return;
	      if (pattern.elements.length < arr.elements.length && !hasRest(pattern)) return false;

	      for (var _iterator3 = (pattern.elements /*: Array*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	        var _ref3;

	        if (_isArray3) {
	          if (_i3 >= _iterator3.length) break;
	          _ref3 = _iterator3[_i3++];
	        } else {
	          _i3 = _iterator3.next();
	          if (_i3.done) break;
	          _ref3 = _i3.value;
	        }

	        var elem = _ref3;

	        // deopt on holes
	        if (!elem) return false;

	        // deopt on member expressions as they may be included in the RHS
	        if (t.isMemberExpression(elem)) return false;
	      }

	      for (var _iterator4 = (arr.elements /*: Array*/), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	        var _ref4;

	        if (_isArray4) {
	          if (_i4 >= _iterator4.length) break;
	          _ref4 = _iterator4[_i4++];
	        } else {
	          _i4 = _iterator4.next();
	          if (_i4.done) break;
	          _ref4 = _i4.value;
	        }

	        var elem = _ref4;

	        // deopt on spread elements
	        if (t.isSpreadElement(elem)) return false;
	      }

	      // deopt on reference to left side identifiers
	      var bindings = t.getBindingIdentifiers(pattern);
	      var state = { deopt: false, bindings: bindings };
	      this.scope.traverse(arr, arrayUnpackVisitor, state);
	      return !state.deopt;
	    };

	    DestructuringTransformer.prototype.pushUnpackedArrayPattern = function pushUnpackedArrayPattern(pattern, arr) {
	      for (var i = 0; i < pattern.elements.length; i++) {
	        var elem = pattern.elements[i];
	        if (t.isRestElement(elem)) {
	          this.push(elem.argument, t.arrayExpression(arr.elements.slice(i)));
	        } else {
	          this.push(elem, arr.elements[i]);
	        }
	      }
	    };

	    DestructuringTransformer.prototype.pushArrayPattern = function pushArrayPattern(pattern, arrayRef) {
	      if (!pattern.elements) return;

	      // optimise basic array destructuring of an array expression
	      //
	      // we can't do this to a pattern of unequal size to it's right hand
	      // array expression as then there will be values that wont be evaluated
	      //
	      // eg: let [a, b] = [1, 2];

	      if (this.canUnpackArrayPattern(pattern, arrayRef)) {
	        return this.pushUnpackedArrayPattern(pattern, arrayRef);
	      }

	      // if we have a rest then we need all the elements so don't tell
	      // `scope.toArray` to only get a certain amount

	      var count = !hasRest(pattern) && pattern.elements.length;

	      // so we need to ensure that the `arrayRef` is an array, `scope.toArray` will
	      // return a locally bound identifier if it's been inferred to be an array,
	      // otherwise it'll be a call to a helper that will ensure it's one

	      var toArray = this.toArray(arrayRef, count);

	      if (t.isIdentifier(toArray)) {
	        // we've been given an identifier so it must have been inferred to be an
	        // array
	        arrayRef = toArray;
	      } else {
	        arrayRef = this.scope.generateUidIdentifierBasedOnNode(arrayRef);
	        this.arrays[arrayRef.name] = true;
	        this.nodes.push(this.buildVariableDeclaration(arrayRef, toArray));
	      }

	      //

	      for (var i = 0; i < pattern.elements.length; i++) {
	        var elem = pattern.elements[i];

	        // hole
	        if (!elem) continue;

	        var elemRef = undefined;

	        if (t.isRestElement(elem)) {
	          elemRef = this.toArray(arrayRef);

	          if (i > 0) {
	            elemRef = t.callExpression(t.memberExpression(elemRef, t.identifier("slice")), [t.numericLiteral(i)]);
	          }

	          // set the element to the rest element argument since we've dealt with it
	          // being a rest already
	          elem = elem.argument;
	        } else {
	          elemRef = t.memberExpression(arrayRef, t.numericLiteral(i), true);
	        }

	        this.push(elem, elemRef);
	      }
	    };

	    DestructuringTransformer.prototype.init = function init(pattern, ref) {
	      // trying to destructure a value that we can't evaluate more than once so we
	      // need to save it to a variable

	      if (!t.isArrayExpression(ref) && !t.isMemberExpression(ref)) {
	        var memo = this.scope.maybeGenerateMemoised(ref, true);
	        if (memo) {
	          this.nodes.push(this.buildVariableDeclaration(memo, ref));
	          ref = memo;
	        }
	      }

	      //

	      this.push(pattern, ref);

	      return this.nodes;
	    };

	    return DestructuringTransformer;
	  })();

	  return {
	    visitor: {
	      ExportNamedDeclaration: function ExportNamedDeclaration(path) {
	        var declaration = path.get("declaration");
	        if (!declaration.isVariableDeclaration()) return;
	        if (!variableDeclarationHasPattern(declaration.node)) return;

	        var specifiers = [];

	        for (var _name in path.getOuterBindingIdentifiers(path)) {
	          var id = t.identifier(_name);
	          specifiers.push(t.exportSpecifier(id, id));
	        }

	        // Split the declaration and export list into two declarations so that the variable
	        // declaration can be split up later without needing to worry about not being a
	        // top-level statement.
	        path.replaceWith(declaration.node);
	        path.insertAfter(t.exportNamedDeclaration(null, specifiers));
	      },

	      ForXStatement: function ForXStatement(path, file) {
	        var node = path.node;
	        var scope = path.scope;

	        var left = node.left;

	        if (t.isPattern(left)) {
	          // for ({ length: k } in { abc: 3 });

	          var temp = scope.generateUidIdentifier("ref");

	          node.left = t.variableDeclaration("var", [t.variableDeclarator(temp)]);

	          path.ensureBlock();

	          node.body.body.unshift(t.variableDeclaration("var", [t.variableDeclarator(left, temp)]));

	          return;
	        }

	        if (!t.isVariableDeclaration(left)) return;

	        var pattern = left.declarations[0].id;
	        if (!t.isPattern(pattern)) return;

	        var key = scope.generateUidIdentifier("ref");
	        node.left = t.variableDeclaration(left.kind, [t.variableDeclarator(key, null)]);

	        var nodes = [];

	        var destructuring = new DestructuringTransformer({
	          kind: left.kind,
	          file: file,
	          scope: scope,
	          nodes: nodes
	        });

	        destructuring.init(pattern, key);

	        path.ensureBlock();

	        var block = node.body;
	        block.body = nodes.concat(block.body);
	      },

	      CatchClause: function CatchClause(_ref6, file) {
	        var node = _ref6.node;
	        var scope = _ref6.scope;

	        var pattern = node.param;
	        if (!t.isPattern(pattern)) return;

	        var ref = scope.generateUidIdentifier("ref");
	        node.param = ref;

	        var nodes = [];

	        var destructuring = new DestructuringTransformer({
	          kind: "let",
	          file: file,
	          scope: scope,
	          nodes: nodes
	        });
	        destructuring.init(pattern, ref);

	        node.body.body = nodes.concat(node.body.body);
	      },

	      AssignmentExpression: function AssignmentExpression(path, file) {
	        var node = path.node;
	        var scope = path.scope;

	        if (!t.isPattern(node.left)) return;

	        var nodes = [];

	        var destructuring = new DestructuringTransformer({
	          operator: node.operator,
	          file: file,
	          scope: scope,
	          nodes: nodes
	        });

	        var ref = undefined;
	        if (path.isCompletionRecord() || !path.parentPath.isExpressionStatement()) {
	          ref = scope.generateUidIdentifierBasedOnNode(node.right, "ref");

	          nodes.push(t.variableDeclaration("var", [t.variableDeclarator(ref, node.right)]));

	          if (t.isArrayExpression(node.right)) {
	            destructuring.arrays[ref.name] = true;
	          }
	        }

	        destructuring.init(node.left, ref || node.right);

	        if (ref) {
	          nodes.push(t.expressionStatement(ref));
	        }

	        path.replaceWithMultiple(nodes);
	      },

	      VariableDeclaration: function VariableDeclaration(path, file) {
	        var node = path.node;
	        var scope = path.scope;
	        var parent = path.parent;

	        if (t.isForXStatement(parent)) return;
	        if (!parent || !path.container) return; // i don't know why this is necessary - TODO
	        if (!variableDeclarationHasPattern(node)) return;

	        var nodes = [];
	        var declar = undefined;

	        for (var i = 0; i < node.declarations.length; i++) {
	          declar = node.declarations[i];

	          var patternId = declar.init;
	          var pattern = declar.id;

	          var destructuring = new DestructuringTransformer({
	            blockHoist: node._blockHoist,
	            nodes: nodes,
	            scope: scope,
	            kind: node.kind,
	            file: file
	          });

	          if (t.isPattern(pattern)) {
	            destructuring.init(pattern, patternId);

	            if (+i !== node.declarations.length - 1) {
	              // we aren't the last declarator so let's just make the
	              // last transformed node inherit from us
	              t.inherits(nodes[nodes.length - 1], declar);
	            }
	          } else {
	            nodes.push(t.inherits(destructuring.buildVariableAssignment(declar.id, declar.init), declar));
	          }
	        }

	        path.replaceWithMultiple(nodes);
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 927 */
107,
/* 928 */
423,
/* 929 */
[7060, 586, 1655, 3913],
/* 930 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var messages = _ref.messages;
	  var template = _ref.template;
	  var t = _ref.types;

	  var buildForOfArray = template("\n    for (var KEY = 0; KEY < ARR.length; KEY++) BODY;\n  ");

	  var buildForOfLoose = template("\n    for (var LOOP_OBJECT = OBJECT,\n             IS_ARRAY = Array.isArray(LOOP_OBJECT),\n             INDEX = 0,\n             LOOP_OBJECT = IS_ARRAY ? LOOP_OBJECT : LOOP_OBJECT[Symbol.iterator]();;) {\n      var ID;\n      if (IS_ARRAY) {\n        if (INDEX >= LOOP_OBJECT.length) break;\n        ID = LOOP_OBJECT[INDEX++];\n      } else {\n        INDEX = LOOP_OBJECT.next();\n        if (INDEX.done) break;\n        ID = INDEX.value;\n      }\n    }\n  ");

	  var buildForOf = template("\n    var ITERATOR_COMPLETION = true;\n    var ITERATOR_HAD_ERROR_KEY = false;\n    var ITERATOR_ERROR_KEY = undefined;\n    try {\n      for (var ITERATOR_KEY = OBJECT[Symbol.iterator](), STEP_KEY; !(ITERATOR_COMPLETION = (STEP_KEY = ITERATOR_KEY.next()).done); ITERATOR_COMPLETION = true) {\n      }\n    } catch (err) {\n      ITERATOR_HAD_ERROR_KEY = true;\n      ITERATOR_ERROR_KEY = err;\n    } finally {\n      try {\n        if (!ITERATOR_COMPLETION && ITERATOR_KEY.return) {\n          ITERATOR_KEY.return();\n        }\n      } finally {\n        if (ITERATOR_HAD_ERROR_KEY) {\n          throw ITERATOR_ERROR_KEY;\n        }\n      }\n    }\n  ");

	  function _ForOfStatementArray(path) {
	    var node = path.node;
	    var scope = path.scope;

	    var nodes = [];
	    var right = node.right;

	    if (!t.isIdentifier(right) || !scope.hasBinding(right.name)) {
	      var uid = scope.generateUidIdentifier("arr");
	      nodes.push(t.variableDeclaration("var", [t.variableDeclarator(uid, right)]));
	      right = uid;
	    }

	    var iterationKey = scope.generateUidIdentifier("i");

	    var loop = buildForOfArray({
	      BODY: node.body,
	      KEY: iterationKey,
	      ARR: right
	    });

	    t.inherits(loop, node);
	    t.ensureBlock(loop);

	    var iterationValue = t.memberExpression(right, iterationKey, true);

	    var left = node.left;
	    if (t.isVariableDeclaration(left)) {
	      left.declarations[0].init = iterationValue;
	      loop.body.body.unshift(left);
	    } else {
	      loop.body.body.unshift(t.expressionStatement(t.assignmentExpression("=", left, iterationValue)));
	    }

	    if (path.parentPath.isLabeledStatement()) {
	      loop = t.labeledStatement(path.parentPath.node.label, loop);
	    }

	    nodes.push(loop);

	    return nodes;
	  }

	  return {
	    visitor: {
	      ForOfStatement: function ForOfStatement(path, state) {
	        if (path.get("right").isArrayExpression()) {
	          return path.replaceWithMultiple(_ForOfStatementArray.call(this, path, state));
	        }

	        var callback = spec;
	        if (state.opts.loose) callback = loose;

	        var node = path.node;

	        var build = callback(path, state);
	        var declar = build.declar;
	        var loop = build.loop;
	        var block = loop.body;

	        // ensure that it's a block so we can take all its statements
	        path.ensureBlock();

	        // add the value declaration to the new loop body
	        if (declar) {
	          block.body.push(declar);
	        }

	        // push the rest of the original loop body onto our new body
	        block.body = block.body.concat(node.body.body);

	        t.inherits(loop, node);
	        t.inherits(loop.body, node.body);

	        if (build.replaceParent) {
	          path.parentPath.replaceWithMultiple(build.node);
	          path.remove();
	        } else {
	          path.replaceWithMultiple(build.node);
	        }
	      }
	    }
	  };

	  function loose(path, file) {
	    var node = path.node;
	    var scope = path.scope;

	    var left = node.left;
	    var declar = undefined,
	        id = undefined;

	    if (t.isIdentifier(left) || t.isPattern(left) || t.isMemberExpression(left)) {
	      // for (i of test), for ({ i } of test)
	      id = left;
	    } else if (t.isVariableDeclaration(left)) {
	      // for (let i of test)
	      id = scope.generateUidIdentifier("ref");
	      declar = t.variableDeclaration(left.kind, [t.variableDeclarator(left.declarations[0].id, id)]);
	    } else {
	      throw file.buildCodeFrameError(left, messages.get("unknownForHead", left.type));
	    }

	    var iteratorKey = scope.generateUidIdentifier("iterator");
	    var isArrayKey = scope.generateUidIdentifier("isArray");

	    var loop = buildForOfLoose({
	      LOOP_OBJECT: iteratorKey,
	      IS_ARRAY: isArrayKey,
	      OBJECT: node.right,
	      INDEX: scope.generateUidIdentifier("i"),
	      ID: id
	    });

	    if (!declar) {
	      // no declaration so we need to remove the variable declaration at the top of
	      // the for-of-loose template
	      loop.body.body.shift();
	    }

	    //

	    return {
	      declar: declar,
	      node: loop,
	      loop: loop
	    };
	  }

	  function spec(path, file) {
	    var node = path.node;
	    var scope = path.scope;
	    var parent = path.parent;

	    var left = node.left;
	    var declar = undefined;

	    var stepKey = scope.generateUidIdentifier("step");
	    var stepValue = t.memberExpression(stepKey, t.identifier("value"));

	    if (t.isIdentifier(left) || t.isPattern(left) || t.isMemberExpression(left)) {
	      // for (i of test), for ({ i } of test)
	      declar = t.expressionStatement(t.assignmentExpression("=", left, stepValue));
	    } else if (t.isVariableDeclaration(left)) {
	      // for (let i of test)
	      declar = t.variableDeclaration(left.kind, [t.variableDeclarator(left.declarations[0].id, stepValue)]);
	    } else {
	      throw file.buildCodeFrameError(left, messages.get("unknownForHead", left.type));
	    }

	    //

	    var iteratorKey = scope.generateUidIdentifier("iterator");

	    var template = buildForOf({
	      ITERATOR_HAD_ERROR_KEY: scope.generateUidIdentifier("didIteratorError"),
	      ITERATOR_COMPLETION: scope.generateUidIdentifier("iteratorNormalCompletion"),
	      ITERATOR_ERROR_KEY: scope.generateUidIdentifier("iteratorError"),
	      ITERATOR_KEY: iteratorKey,
	      STEP_KEY: stepKey,
	      OBJECT: node.right,
	      BODY: null
	    });

	    var isLabeledParent = t.isLabeledStatement(parent);

	    var tryBody = template[3].block.body;
	    var loop = tryBody[0];

	    if (isLabeledParent) {
	      tryBody[0] = t.labeledStatement(parent.label, loop);
	    }

	    //

	    return {
	      replaceParent: isLabeledParent,
	      declar: declar,
	      loop: loop,
	      node: template
	    };
	  }
	};

	module.exports = exports["default"];

/***/ },
/* 931 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(21)["default"];

	exports.__esModule = true;

	var _babelHelperFunctionName = __webpack_require__(3932);

	var _babelHelperFunctionName2 = _interopRequireDefault(_babelHelperFunctionName);

	exports["default"] = function () {
	  return {
	    visitor: {
	      "ArrowFunctionExpression|FunctionExpression": {
	        exit: function exit(path) {
	          if (path.key !== "value" && !path.parentPath.isObjectProperty()) {
	            var replacement = _babelHelperFunctionName2["default"](path);
	            if (replacement) path.replaceWith(replacement);
	          }
	        }
	      },

	      ObjectProperty: function ObjectProperty(path) {
	        var value = path.get("value");
	        if (value.isFunction()) {
	          var newNode = _babelHelperFunctionName2["default"](value);
	          if (newNode) value.replaceWith(newNode);
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 932 */
519,
/* 933 */
154,
/* 934 */
[7169, 459],
/* 935 */
[7173, 1658, 933],
/* 936 */
[7106, 101, 944, 27, 942, 21, 8, 938, 1672, 3980, 460, 4028, 937, 1663, 4001, 14],
/* 937 */
[7028, 8],
/* 938 */
[7130, 4011, 1668, 588, 941, 461, 4027, 4030],
/* 939 */
[7164, 1668, 461],
/* 940 */
519,
/* 941 */
[7165, 939, 940, 373],
/* 942 */
[7031, 4043],
/* 943 */
[7036, 4048],
/* 944 */
[7038, 4050],
/* 945 */
734,
/* 946 */
512,
/* 947 */
422,
/* 948 */
513,
/* 949 */
[7060, 114, 951, 1675],
/* 950 */
[7066, 591, 210, 947],
/* 951 */
738,
/* 952 */
[7069, 114, 948, 374],
/* 953 */
[7084, 114, 592, 948, 1675, 591, 1679, 947, 1680, 952, 1681, 374, 4061, 1676, 4055, 4057, 1674, 462, 951, 1678],
/* 954 */
[7110, 4038],
/* 955 */
[7106, 101, 944, 27, 942, 21, 8, 957, 1687, 4102, 463, 4175, 956, 1686, 4120, 14],
/* 956 */
[7028, 8],
/* 957 */
[7130, 1696, 958, 165, 596, 304, 1703, 4177],
/* 958 */
[7160, 1698],
/* 959 */
[7164, 958, 304],
/* 960 */
519,
/* 961 */
[7173, 959, 212],
/* 962 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    visitor: {
	      NumericLiteral: function NumericLiteral(_ref) {
	        var node = _ref.node;

	        // number octal like 0b10 or 0o70
	        if (node.extra && /^0[ob]/i.test(node.extra.raw)) {
	          node.extra = undefined;
	        }
	      },

	      StringLiteral: function StringLiteral(_ref2) {
	        var node = _ref2.node;

	        // unicode escape
	        if (node.extra && /\\[u]/gi.test(node.extra.raw)) {
	          node.extra = undefined;
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 963 */
[7031, 4191],
/* 964 */
734,
/* 965 */
512,
/* 966 */
422,
/* 967 */
513,
/* 968 */
[7060, 115, 970, 1712],
/* 969 */
[7066, 597, 214, 966],
/* 970 */
738,
/* 971 */
[7069, 115, 967, 376],
/* 972 */
[7084, 115, 598, 967, 1712, 597, 1716, 966, 1717, 971, 1718, 376, 4209, 1713, 4203, 4205, 1711, 464, 970, 1715],
/* 973 */
[7106, 305, 1709, 90, 963, 71, 47, 976, 1724, 4240, 377, 4326, 974, 1722, 4260, 60],
/* 974 */
[7028, 47],
/* 975 */
[7110, 4186],
/* 976 */
[7130, 1735, 978, 158, 602, 216, 1741, 4329],
/* 977 */
[7140, 218],
/* 978 */
[7160, 1737],
/* 979 */
[7164, 978, 216],
/* 980 */
[7166, 158, 218],
/* 981 */
[7170, 4297, 158],
/* 982 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Symbol = __webpack_require__(606)["default"];

	var _getIterator = __webpack_require__(23)["default"];

	var _Object$create = __webpack_require__(604)["default"];

	var _Object$keys = __webpack_require__(605)["default"];

	var _interopRequireDefault = __webpack_require__(24)["default"];

	var _interopRequireWildcard = __webpack_require__(9)["default"];

	exports.__esModule = true;

	var _path2 = __webpack_require__(175);

	var _babelTemplate = __webpack_require__(4372);

	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

	var _babelTypes = __webpack_require__(15);

	var t = _interopRequireWildcard(_babelTypes);

	var buildRequire = _babelTemplate2["default"]("\n  require($0);\n");

	var buildExportsModuleDeclaration = _babelTemplate2["default"]("\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n");

	var buildExportsFrom = _babelTemplate2["default"]("\n  Object.defineProperty(exports, $0, {\n    enumerable: true,\n    get: function () {\n      return $1;\n    }\n  });\n");

	var buildLooseExportsModuleDeclaration = _babelTemplate2["default"]("\n  exports.__esModule = true;\n");

	var buildExportsAssignment = _babelTemplate2["default"]("\n  exports.$0 = $1;\n");

	var buildExportAll = _babelTemplate2["default"]("\n  for (let KEY in OBJECT) {\n    if (KEY === \"default\") continue;\n\n    Object.defineProperty(exports, KEY, {\n      enumerable: true,\n      get: function () {\n        return OBJECT[KEY];\n      }\n    });\n  }\n");

	var THIS_BREAK_KEYS = ["FunctionExpression", "FunctionDeclaration", "ClassProperty", "ClassMethod", "ObjectMethod"];

	exports["default"] = function () {
	  var REASSIGN_REMAP_SKIP = _Symbol();

	  var reassignmentVisitor = {
	    ReferencedIdentifier: function ReferencedIdentifier(path) {
	      var name = path.node.name;
	      var remap = this.remaps[name];
	      if (!remap) return;

	      // redeclared in this scope
	      if (this.scope.getBinding(name) !== path.scope.getBinding(name)) return;

	      if (path.parentPath.isCallExpression({ callee: path.node })) {
	        path.replaceWith(t.sequenceExpression([t.numericLiteral(0), remap]));
	      } else {
	        path.replaceWith(remap);
	      }
	    },

	    AssignmentExpression: function AssignmentExpression(path) {
	      var node = path.node;
	      if (node[REASSIGN_REMAP_SKIP]) return;

	      var left = path.get("left");
	      if (!left.isIdentifier()) return;

	      var name = left.node.name;
	      var exports = this.exports[name];
	      if (!exports) return;

	      // redeclared in this scope
	      if (this.scope.getBinding(name) !== path.scope.getBinding(name)) return;

	      node[REASSIGN_REMAP_SKIP] = true;

	      for (var _iterator = exports, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	        var _ref;

	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }

	        var reid = _ref;

	        node = buildExportsAssignment(reid, node).expression;
	      }

	      path.replaceWith(node);
	    },

	    UpdateExpression: function UpdateExpression(path) {
	      var arg = path.get("argument");
	      if (!arg.isIdentifier()) return;

	      var name = arg.node.name;
	      var exports = this.exports[name];
	      if (!exports) return;

	      // redeclared in this scope
	      if (this.scope.getBinding(name) !== path.scope.getBinding(name)) return;

	      var node = t.assignmentExpression(path.node.operator[0] + "=", arg.node, t.numericLiteral(1));

	      if (path.parentPath.isExpressionStatement() && !path.isCompletionRecord() || path.node.prefix) {
	        return path.replaceWith(node);
	      }

	      var nodes = [];
	      nodes.push(node);

	      var operator = undefined;
	      if (path.node.operator === "--") {
	        operator = "+";
	      } else {
	        // "++"
	        operator = "-";
	      }
	      nodes.push(t.binaryExpression(operator, arg.node, t.numericLiteral(1)));

	      path.replaceWithMultiple(t.sequenceExpression(nodes));
	    }
	  };

	  return {
	    inherits: __webpack_require__(1274),

	    visitor: {
	      ThisExpression: function ThisExpression(path, state) {
	        if (state.opts.allowTopLevelThis !== true && !path.findParent(function (path) {
	          return !path.is("shadow") && THIS_BREAK_KEYS.indexOf(path.type) >= 0;
	        })) {
	          path.replaceWith(t.identifier("undefined"));
	        }
	      },

	      Program: {
	        exit: function exit(path) {
	          var strict = !!this.opts.strict;

	          var scope = path.scope;

	          // rename these commonjs variables if they're declared in the file
	          scope.rename("module");
	          scope.rename("exports");
	          scope.rename("require");

	          var hasExports = false;
	          var hasImports = false;

	          var body /*: Array<Object>*/ = path.get("body");
	          var imports = _Object$create(null);
	          var exports = _Object$create(null);

	          var nonHoistedExportNames = _Object$create(null);

	          var topNodes = [];
	          var remaps = _Object$create(null);

	          var requires = _Object$create(null);

	          function addRequire(source) {
	            var cached = requires[source];
	            if (cached) return cached;

	            var ref = path.scope.generateUidIdentifier(_path2.basename(source, _path2.extname(source)));

	            topNodes.push(t.variableDeclaration("var", [t.variableDeclarator(ref, buildRequire(t.stringLiteral(source)).expression)]));

	            return requires[source] = ref;
	          }

	          function addTo(obj, key, arr) {
	            var existing = obj[key] || [];
	            obj[key] = existing.concat(arr);
	          }

	          for (var _iterator2 = body, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	            var _ref2;

	            if (_isArray2) {
	              if (_i2 >= _iterator2.length) break;
	              _ref2 = _iterator2[_i2++];
	            } else {
	              _i2 = _iterator2.next();
	              if (_i2.done) break;
	              _ref2 = _i2.value;
	            }

	            var _path = _ref2;

	            if (_path.isExportDeclaration()) {
	              hasExports = true;

	              var specifiers = [].concat(_path.get("declaration"), _path.get("specifiers"));
	              for (var _iterator3 = specifiers, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	                var _ref3;

	                if (_isArray3) {
	                  if (_i3 >= _iterator3.length) break;
	                  _ref3 = _iterator3[_i3++];
	                } else {
	                  _i3 = _iterator3.next();
	                  if (_i3.done) break;
	                  _ref3 = _i3.value;
	                }

	                var specifier = _ref3;

	                var ids = specifier.getBindingIdentifiers();
	                if (ids.__esModule) {
	                  throw specifier.buildCodeFrameError("Illegal export \"__esModule\"");
	                }
	              }
	            }

	            if (_path.isImportDeclaration()) {
	              hasImports = true;
	              addTo(imports, _path.node.source.value, _path.node.specifiers);
	              _path.remove();
	            } else if (_path.isExportDefaultDeclaration()) {
	              var declaration = _path.get("declaration");
	              if (declaration.isFunctionDeclaration()) {
	                var id = declaration.node.id;
	                var defNode = t.identifier("default");
	                if (id) {
	                  addTo(exports, id.name, defNode);
	                  topNodes.push(buildExportsAssignment(defNode, id));
	                  _path.replaceWith(declaration.node);
	                } else {
	                  topNodes.push(buildExportsAssignment(defNode, t.toExpression(declaration.node)));
	                  _path.remove();
	                }
	              } else if (declaration.isClassDeclaration()) {
	                var id = declaration.node.id;
	                var defNode = t.identifier("default");
	                if (id) {
	                  addTo(exports, id.name, defNode);
	                  _path.replaceWithMultiple([declaration.node, buildExportsAssignment(defNode, id)]);
	                } else {
	                  _path.replaceWith(buildExportsAssignment(defNode, t.toExpression(declaration.node)));
	                }
	              } else {
	                _path.replaceWith(buildExportsAssignment(t.identifier("default"), declaration.node));
	              }
	            } else if (_path.isExportNamedDeclaration()) {
	              var declaration = _path.get("declaration");
	              if (declaration.node) {
	                if (declaration.isFunctionDeclaration()) {
	                  var id = declaration.node.id;
	                  addTo(exports, id.name, id);
	                  topNodes.push(buildExportsAssignment(id, id));
	                  _path.replaceWith(declaration.node);
	                } else if (declaration.isClassDeclaration()) {
	                  var id = declaration.node.id;
	                  addTo(exports, id.name, id);
	                  _path.replaceWithMultiple([declaration.node, buildExportsAssignment(id, id)]);
	                  nonHoistedExportNames[id.name] = true;
	                } else if (declaration.isVariableDeclaration()) {
	                  var declarators = declaration.get("declarations");
	                  for (var _iterator4 = declarators, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	                    var _ref4;

	                    if (_isArray4) {
	                      if (_i4 >= _iterator4.length) break;
	                      _ref4 = _iterator4[_i4++];
	                    } else {
	                      _i4 = _iterator4.next();
	                      if (_i4.done) break;
	                      _ref4 = _i4.value;
	                    }

	                    var decl = _ref4;

	                    var id = decl.get("id");

	                    var init = decl.get("init");
	                    if (!init.node) init.replaceWith(t.identifier("undefined"));

	                    if (id.isIdentifier()) {
	                      addTo(exports, id.node.name, id.node);
	                      init.replaceWith(buildExportsAssignment(id.node, init.node).expression);
	                      nonHoistedExportNames[id.node.name] = true;
	                    } else {
	                      // todo
	                    }
	                  }
	                  _path.replaceWith(declaration.node);
	                }
	                continue;
	              }

	              var specifiers = _path.get("specifiers");
	              if (specifiers.length) {
	                var nodes = [];
	                var source = _path.node.source;
	                if (source) {
	                  var ref = addRequire(source.value);

	                  for (var _iterator5 = specifiers, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
	                    var _ref5;

	                    if (_isArray5) {
	                      if (_i5 >= _iterator5.length) break;
	                      _ref5 = _iterator5[_i5++];
	                    } else {
	                      _i5 = _iterator5.next();
	                      if (_i5.done) break;
	                      _ref5 = _i5.value;
	                    }

	                    var specifier = _ref5;

	                    if (specifier.isExportNamespaceSpecifier()) {
	                      // todo
	                    } else if (specifier.isExportDefaultSpecifier()) {
	                        // todo
	                      } else if (specifier.isExportSpecifier()) {
	                          topNodes.push(buildExportsFrom(t.stringLiteral(specifier.node.exported.name), t.memberExpression(ref, specifier.node.local)));
	                          nonHoistedExportNames[specifier.node.exported.name] = true;
	                        }
	                  }
	                } else {
	                  for (var _iterator6 = specifiers, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _getIterator(_iterator6);;) {
	                    var _ref6;

	                    if (_isArray6) {
	                      if (_i6 >= _iterator6.length) break;
	                      _ref6 = _iterator6[_i6++];
	                    } else {
	                      _i6 = _iterator6.next();
	                      if (_i6.done) break;
	                      _ref6 = _i6.value;
	                    }

	                    var specifier = _ref6;

	                    if (specifier.isExportSpecifier()) {
	                      addTo(exports, specifier.node.local.name, specifier.node.exported);
	                      nonHoistedExportNames[specifier.node.exported.name] = true;
	                      nodes.push(buildExportsAssignment(specifier.node.exported, specifier.node.local));
	                    }
	                  }
	                }
	                _path.replaceWithMultiple(nodes);
	              }
	            } else if (_path.isExportAllDeclaration()) {
	              topNodes.push(buildExportAll({
	                KEY: _path.scope.generateUidIdentifier("key"),
	                OBJECT: addRequire(_path.node.source.value)
	              }));
	              _path.remove();
	            }
	          }

	          for (var source in imports) {
	            var specifiers = imports[source];
	            if (specifiers.length) {
	              var uid = addRequire(source);

	              var wildcard = undefined;

	              for (var i = 0; i < specifiers.length; i++) {
	                var specifier = specifiers[i];
	                if (t.isImportNamespaceSpecifier(specifier)) {
	                  if (strict) {
	                    remaps[specifier.local.name] = uid;
	                  } else {
	                    topNodes.push(t.variableDeclaration("var", [t.variableDeclarator(specifier.local, t.callExpression(this.addHelper("interopRequireWildcard"), [uid]))]));
	                  }
	                  wildcard = specifier.local;
	                } else if (t.isImportDefaultSpecifier(specifier)) {
	                  specifiers[i] = t.importSpecifier(specifier.local, t.identifier("default"));
	                }
	              }

	              for (var _iterator7 = specifiers, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _getIterator(_iterator7);;) {
	                var _ref7;

	                if (_isArray7) {
	                  if (_i7 >= _iterator7.length) break;
	                  _ref7 = _iterator7[_i7++];
	                } else {
	                  _i7 = _iterator7.next();
	                  if (_i7.done) break;
	                  _ref7 = _i7.value;
	                }

	                var specifier = _ref7;

	                if (t.isImportSpecifier(specifier)) {
	                  var target = uid;
	                  if (specifier.imported.name === "default") {
	                    if (wildcard) {
	                      target = wildcard;
	                    } else {
	                      target = wildcard = path.scope.generateUidIdentifier(uid.name);
	                      topNodes.push(t.variableDeclaration("var", [t.variableDeclarator(target, t.callExpression(this.addHelper("interopRequireDefault"), [uid]))]));
	                    }
	                  }
	                  remaps[specifier.local.name] = t.memberExpression(target, specifier.imported);
	                }
	              }
	            } else {
	              // bare import
	              topNodes.push(buildRequire(t.stringLiteral(source)));
	            }
	          }

	          if (hasImports && _Object$keys(nonHoistedExportNames).length) {
	            var hoistedExportsNode = t.identifier("undefined");

	            for (var _name in nonHoistedExportNames) {
	              hoistedExportsNode = buildExportsAssignment(t.identifier(_name), hoistedExportsNode).expression;
	            }

	            topNodes.unshift(t.expressionStatement(hoistedExportsNode));
	          }

	          // add __esModule declaration if this file has any exports
	          if (hasExports && !strict) {
	            var buildTemplate = buildExportsModuleDeclaration;
	            if (this.opts.loose) buildTemplate = buildLooseExportsModuleDeclaration;
	            topNodes.unshift(buildTemplate());
	          }

	          path.unshiftContainer("body", topNodes);
	          path.traverse(reassignmentVisitor, { remaps: remaps, scope: scope, exports: exports });
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 983 */
734,
/* 984 */
512,
/* 985 */
422,
/* 986 */
513,
/* 987 */
[7060, 116, 989, 1747],
/* 988 */
[7066, 608, 219, 985],
/* 989 */
738,
/* 990 */
[7069, 116, 986, 379],
/* 991 */
[7084, 116, 609, 986, 1747, 608, 1751, 985, 1752, 990, 1753, 379, 4358, 1748, 4352, 4354, 1746, 466, 989, 1750],
/* 992 */
[7106, 102, 606, 23, 604, 24, 9, 994, 1759, 4389, 467, 4443, 993, 1757, 4409, 15],
/* 993 */
[7028, 9],
/* 994 */
[7130, 4422, 1764, 308, 997, 380, 4442, 4446],
/* 995 */
[7149, 4447],
/* 996 */
[7164, 1764, 380],
/* 997 */
[7165, 996, 611, 381],
/* 998 */
[7169, 381],
/* 999 */
[7173, 996, 612],
/* 1000 */
[7110, 4335],
/* 1001 */
[7106, 102, 606, 23, 604, 24, 9, 1003, 1772, 4475, 468, 4548, 1002, 1771, 4493, 15],
/* 1002 */
[7028, 9],
/* 1003 */
[7130, 1781, 1004, 166, 616, 310, 1788, 4550],
/* 1004 */
[7160, 1783],
/* 1005 */
[7164, 1004, 310],
/* 1006 */
519,
/* 1007 */
[7173, 1005, 221],
/* 1008 */
[7110, 1819],
/* 1009 */
[7106, 103, 621, 17, 470, 10, 2, 1011, 1797, 4582, 469, 4655, 1010, 1796, 4600, 61],
/* 1010 */
[7028, 2],
/* 1011 */
[7130, 1806, 1012, 167, 619, 312, 1813, 4657],
/* 1012 */
[7160, 1808],
/* 1013 */
[7164, 1012, 312],
/* 1014 */
519,
/* 1015 */
[7173, 1013, 224],
/* 1016 */
734,
/* 1017 */
512,
/* 1018 */
422,
/* 1019 */
513,
/* 1020 */
[7060, 117, 1022, 1823],
/* 1021 */
[7066, 623, 226, 1018],
/* 1022 */
738,
/* 1023 */
[7069, 117, 1019, 384],
/* 1024 */
[7084, 117, 624, 1019, 1823, 623, 1827, 1018, 1828, 1023, 1829, 384, 4683, 1824, 4677, 4679, 1822, 471, 1022, 1826],
/* 1025 */
[7106, 103, 621, 17, 470, 10, 2, 1028, 1835, 4714, 385, 4800, 1026, 1833, 4734, 62],
/* 1026 */
[7028, 2],
/* 1027 */
[7110, 1819],
/* 1028 */
[7130, 1846, 1030, 159, 628, 228, 1852, 4803],
/* 1029 */
[7140, 230],
/* 1030 */
[7160, 1848],
/* 1031 */
[7164, 1030, 228],
/* 1032 */
[7166, 159, 230],
/* 1033 */
[7170, 4771, 159],
/* 1034 */
734,
/* 1035 */
512,
/* 1036 */
422,
/* 1037 */
513,
/* 1038 */
[7060, 118, 1040, 1861],
/* 1039 */
[7066, 630, 231, 1036],
/* 1040 */
738,
/* 1041 */
[7069, 118, 1037, 387],
/* 1042 */
[7084, 118, 631, 1037, 1861, 630, 1865, 1036, 1866, 1041, 1867, 387, 4834, 1862, 4828, 4830, 1860, 473, 1040, 1864],
/* 1043 */
[7106, 314, 1858, 91, 1856, 72, 48, 1046, 1873, 4865, 388, 4951, 1044, 1871, 4885, 63],
/* 1044 */
[7028, 48],
/* 1045 */
[7110, 4811],
/* 1046 */
[7130, 1884, 1048, 160, 635, 233, 1890, 4954],
/* 1047 */
[7140, 235],
/* 1048 */
[7160, 1886],
/* 1049 */
[7164, 1048, 233],
/* 1050 */
[7166, 160, 235],
/* 1051 */
[7170, 4922, 160],
/* 1052 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Symbol = __webpack_require__(1063)["default"];

	var _getIterator = __webpack_require__(85)["default"];

	var _interopRequireDefault = __webpack_require__(73)["default"];

	exports.__esModule = true;

	var _babelHelperReplaceSupers = __webpack_require__(4956);

	var _babelHelperReplaceSupers2 = _interopRequireDefault(_babelHelperReplaceSupers);

	exports["default"] = function (_ref2) {
	  var t = _ref2.types;

	  function Property(path, node, scope, getObjectRef, file) {
	    var replaceSupers = new _babelHelperReplaceSupers2["default"]({
	      getObjectRef: getObjectRef,
	      methodNode: node,
	      methodPath: path,
	      isStatic: true,
	      scope: scope,
	      file: file
	    });

	    replaceSupers.replace();
	  }

	  var CONTAINS_SUPER = _Symbol();

	  return {
	    visitor: {
	      Super: function Super(path) {
	        var parentObj = path.findParent(function (path) {
	          return path.isObjectExpression();
	        });
	        if (parentObj) parentObj.node[CONTAINS_SUPER] = true;
	      },

	      ObjectExpression: {
	        exit: function exit(path, file) {
	          if (!path.node[CONTAINS_SUPER]) return;

	          var objectRef = undefined;
	          var getObjectRef = function getObjectRef() {
	            return objectRef = objectRef || path.scope.generateUidIdentifier("obj");
	          };

	          var propPaths /*: Array*/ = path.get("properties");
	          for (var _iterator = propPaths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	            var _ref;

	            if (_isArray) {
	              if (_i >= _iterator.length) break;
	              _ref = _iterator[_i++];
	            } else {
	              _i = _iterator.next();
	              if (_i.done) break;
	              _ref = _i.value;
	            }

	            var propPath = _ref;

	            if (propPath.isObjectProperty()) propPath = propPath.get("value");
	            Property(propPath, propPath.node, path.scope, getObjectRef, file);
	          }

	          if (objectRef) {
	            path.scope.push({ id: objectRef });
	            path.replaceWith(t.assignmentExpression("=", objectRef, path.node));
	          }
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1053 */
[7106, 240, 1063, 85, 1922, 73, 41, 1054, 1906, 4974, 475, 5022, 637, 1897, 4995, 54],
/* 1054 */
[7130, 5005, 1902, 639, 1057, 476, 5021, 5024],
/* 1055 */
[7164, 1902, 476],
/* 1056 */
519,
/* 1057 */
[7165, 1055, 1056, 390],
/* 1058 */
[7110, 5098],
/* 1059 */
[7149, 1921],
/* 1060 */
[7164, 1915, 391],
/* 1061 */
519,
/* 1062 */
[7173, 1060, 237],
/* 1063 */
[7038, 5110],
/* 1064 */
734,
/* 1065 */
512,
/* 1066 */
422,
/* 1067 */
513,
/* 1068 */
[7060, 119, 1070, 1926],
/* 1069 */
[7066, 643, 241, 1066],
/* 1070 */
738,
/* 1071 */
[7069, 119, 1067, 392],
/* 1072 */
[7084, 119, 644, 1067, 1926, 643, 1930, 1066, 1931, 1071, 1932, 392, 5121, 1927, 5115, 5117, 1925, 477, 1070, 1929],
/* 1073 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(74)["default"];

	var _interopRequireWildcard = __webpack_require__(29)["default"];

	exports.__esModule = true;

	var _babelTraverse = __webpack_require__(318);

	var _destructuring = __webpack_require__(5136);

	var destructuring = _interopRequireWildcard(_destructuring);

	var _default = __webpack_require__(5135);

	var def = _interopRequireWildcard(_default);

	var _rest = __webpack_require__(5137);

	var rest = _interopRequireWildcard(_rest);

	/*:: import type { NodePath } from "babel-traverse";*/
	exports["default"] = function () {
	  return {
	    visitor: _babelTraverse.visitors.merge([{
	      ArrowFunctionExpression: function ArrowFunctionExpression(path) {
	        // default/rest visitors require access to `arguments`
	        var params /*: Array<NodePath>*/ = path.get("params");
	        for (var _iterator = params, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	          var _ref;

	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }

	          var param = _ref;

	          if (param.isRestElement() || param.isAssignmentPattern()) {
	            path.arrowFunctionToShadowed();
	            break;
	          }
	        }
	      }
	    }, destructuring.visitor, rest.visitor, def.visitor])
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1074 */
734,
/* 1075 */
512,
/* 1076 */
422,
/* 1077 */
513,
/* 1078 */
[7060, 120, 1080, 1938],
/* 1079 */
[7066, 646, 242, 1076],
/* 1080 */
738,
/* 1081 */
[7069, 120, 1077, 393],
/* 1082 */
[7084, 120, 647, 1077, 1938, 646, 1942, 1076, 1943, 1081, 1944, 393, 5169, 1939, 5163, 5165, 1937, 478, 1080, 1941],
/* 1083 */
519,
/* 1084 */
154,
/* 1085 */
[7169, 480],
/* 1086 */
[7173, 1947, 1084],
/* 1087 */
[7106, 317, 1935, 74, 1933, 55, 29, 1089, 1961, 5228, 318, 5276, 1088, 1952, 5249, 34],
/* 1088 */
[7028, 29],
/* 1089 */
[7130, 5259, 1957, 650, 1092, 481, 5275, 5278],
/* 1090 */
[7164, 1957, 481],
/* 1091 */
519,
/* 1092 */
[7165, 1090, 1091, 395],
/* 1093 */
[7110, 5146],
/* 1094 */
[7149, 1976],
/* 1095 */
[7164, 1970, 396],
/* 1096 */
519,
/* 1097 */
[7173, 1095, 244],
/* 1098 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireWildcard = __webpack_require__(49)["default"];

	exports.__esModule = true;

	var _babelTypes = __webpack_require__(64);

	var t = _interopRequireWildcard(_babelTypes);

	exports["default"] = function () {
	  return {
	    visitor: {
	      ObjectMethod: function ObjectMethod(path) {
	        var node = path.node;

	        if (node.kind === "method") {
	          path.replaceWith(t.objectProperty(node.key, t.functionExpression(null, node.params, node.body, node.generator, node.async), node.computed));
	        }
	      },

	      ObjectProperty: function ObjectProperty(_ref) {
	        var node = _ref.node;

	        if (node.shorthand) {
	          node.shorthand = false;
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1099 */
734,
/* 1100 */
512,
/* 1101 */
422,
/* 1102 */
513,
/* 1103 */
[7060, 121, 1105, 1981],
/* 1104 */
[7066, 654, 247, 1101],
/* 1105 */
738,
/* 1106 */
[7069, 121, 1102, 397],
/* 1107 */
[7084, 121, 655, 1102, 1981, 654, 1985, 1101, 1986, 1106, 1987, 397, 5376, 1982, 5370, 5372, 1980, 482, 1105, 1984],
/* 1108 */
[7110, 5353],
/* 1109 */
[7106, 320, 5352, 92, 1977, 80, 49, 1111, 1993, 5417, 483, 5490, 1110, 1992, 5435, 64],
/* 1110 */
[7028, 49],
/* 1111 */
[7130, 2002, 1112, 168, 659, 322, 2009, 5492],
/* 1112 */
[7160, 2004],
/* 1113 */
[7164, 1112, 322],
/* 1114 */
519,
/* 1115 */
[7173, 1113, 249],
/* 1116 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(5495)["default"];

	exports.__esModule = true;

	exports["default"] = function (_ref2) {
	  var t = _ref2.types;

	  function getSpreadLiteral(spread, scope, state) {
	    if (state.opts.loose && !t.isIdentifier(spread.argument, { name: "arguments" })) {
	      return spread.argument;
	    } else {
	      return scope.toArray(spread.argument, true);
	    }
	  }

	  function hasSpread(nodes) {
	    for (var i = 0; i < nodes.length; i++) {
	      if (t.isSpreadElement(nodes[i])) {
	        return true;
	      }
	    }
	    return false;
	  }

	  function build(props /*: Array*/, scope, state) {
	    var nodes = [];

	    var _props = [];

	    function push() {
	      if (!_props.length) return;
	      nodes.push(t.arrayExpression(_props));
	      _props = [];
	    }

	    for (var _iterator = props, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var prop = _ref;

	      if (t.isSpreadElement(prop)) {
	        push();
	        nodes.push(getSpreadLiteral(prop, scope, state));
	      } else {
	        _props.push(prop);
	      }
	    }

	    push();

	    return nodes;
	  }

	  return {
	    visitor: {
	      ArrayExpression: function ArrayExpression(path, state) {
	        var node = path.node;
	        var scope = path.scope;

	        var elements = node.elements;
	        if (!hasSpread(elements)) return;

	        var nodes = build(elements, scope, state);
	        var first = nodes.shift();

	        if (!t.isArrayExpression(first)) {
	          nodes.unshift(first);
	          first = t.arrayExpression([]);
	        }

	        path.replaceWith(t.callExpression(t.memberExpression(first, t.identifier("concat")), nodes));
	      },

	      CallExpression: function CallExpression(path, state) {
	        var node = path.node;
	        var scope = path.scope;

	        var args = node.arguments;
	        if (!hasSpread(args)) return;

	        var calleePath = path.get("callee");
	        if (calleePath.isSuper()) return;

	        var contextLiteral = t.identifier("undefined");

	        node.arguments = [];

	        var nodes = undefined;
	        if (args.length === 1 && args[0].argument.name === "arguments") {
	          nodes = [args[0].argument];
	        } else {
	          nodes = build(args, scope, state);
	        }

	        var first = nodes.shift();
	        if (nodes.length) {
	          node.arguments.push(t.callExpression(t.memberExpression(first, t.identifier("concat")), nodes));
	        } else {
	          node.arguments.push(first);
	        }

	        var callee = node.callee;

	        if (calleePath.isMemberExpression()) {
	          var temp = scope.maybeGenerateMemoised(callee.object);
	          if (temp) {
	            callee.object = t.assignmentExpression("=", temp, callee.object);
	            contextLiteral = temp;
	          } else {
	            contextLiteral = callee.object;
	          }
	          t.appendToMemberExpression(callee, t.identifier("apply"));
	        } else {
	          node.callee = t.memberExpression(node.callee, t.identifier("apply"));
	        }

	        node.arguments.unshift(contextLiteral);
	      },

	      NewExpression: function NewExpression(path, state) {
	        var node = path.node;
	        var scope = path.scope;

	        var args = node.arguments;
	        if (!hasSpread(args)) return;

	        var nodes = build(args, scope, state);

	        var context = t.arrayExpression([t.nullLiteral()]);

	        args = t.callExpression(t.memberExpression(context, t.identifier("concat")), nodes);

	        path.replaceWith(t.newExpression(t.callExpression(t.memberExpression(t.memberExpression(t.memberExpression(t.identifier("Function"), t.identifier("prototype")), t.identifier("bind")), t.identifier("apply")), [node.callee, args]), []));
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1117 */
107,
/* 1118 */
423,
/* 1119 */
[7060, 661, 2017, 5502],
/* 1120 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireWildcard = __webpack_require__(42)["default"];

	exports.__esModule = true;

	var _babelHelperRegex = __webpack_require__(5521);

	var regex = _interopRequireWildcard(_babelHelperRegex);

	var _babelTypes = __webpack_require__(56);

	var t = _interopRequireWildcard(_babelTypes);

	exports["default"] = function () {
	  return {
	    visitor: {
	      RegExpLiteral: function RegExpLiteral(path) {
	        var node = path.node;

	        if (!regex.is(node, "y")) return;

	        path.replaceWith(t.newExpression(t.identifier("RegExp"), [t.stringLiteral(node.pattern), t.stringLiteral(node.flags)]));
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1121 */
734,
/* 1122 */
512,
/* 1123 */
422,
/* 1124 */
513,
/* 1125 */
[7060, 122, 1127, 2023],
/* 1126 */
[7066, 662, 251, 1123],
/* 1127 */
738,
/* 1128 */
[7069, 122, 1124, 399],
/* 1129 */
[7084, 122, 663, 1124, 2023, 662, 2027, 1123, 2028, 1128, 2029, 399, 5554, 2024, 5548, 5550, 2022, 485, 1127, 2026],
/* 1130 */
[7110, 5531],
/* 1131 */
[7106, 323, 5530, 93, 2019, 77, 42, 1133, 2035, 5595, 486, 5668, 1132, 2034, 5613, 56],
/* 1132 */
[7028, 42],
/* 1133 */
[7130, 2044, 1134, 169, 667, 325, 2051, 5670],
/* 1134 */
[7160, 2046],
/* 1135 */
[7164, 1134, 325],
/* 1136 */
519,
/* 1137 */
[7173, 1135, 253],
/* 1138 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(5673)["default"];

	exports.__esModule = true;

	exports["default"] = function (_ref4) {
	  var t = _ref4.types;

	  function isString(node) {
	    return t.isLiteral(node) && typeof node.value === "string";
	  }

	  function buildBinaryExpression(left, right) {
	    return t.binaryExpression("+", left, right);
	  }

	  return {
	    visitor: {
	      TaggedTemplateExpression: function TaggedTemplateExpression(path, state) {
	        var node = path.node;

	        var quasi = node.quasi;
	        var args = [];

	        var strings = [];
	        var raw = [];

	        for (var _iterator = (quasi.quasis /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	          var _ref;

	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }

	          var elem = _ref;

	          strings.push(t.stringLiteral(elem.value.cooked));
	          raw.push(t.stringLiteral(elem.value.raw));
	        }

	        strings = t.arrayExpression(strings);
	        raw = t.arrayExpression(raw);

	        var templateName = "taggedTemplateLiteral";
	        if (state.opts.loose) templateName += "Loose";

	        var templateObject = state.file.addTemplateObject(templateName, strings, raw);
	        args.push(templateObject);

	        args = args.concat(quasi.expressions);

	        path.replaceWith(t.callExpression(node.tag, args));
	      },

	      TemplateLiteral: function TemplateLiteral(path, state) {
	        var nodes /*: Array<Object>*/ = [];

	        var expressions = path.get("expressions");

	        for (var _iterator2 = (path.node.quasis /*: Array*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	          var _ref2;

	          if (_isArray2) {
	            if (_i2 >= _iterator2.length) break;
	            _ref2 = _iterator2[_i2++];
	          } else {
	            _i2 = _iterator2.next();
	            if (_i2.done) break;
	            _ref2 = _i2.value;
	          }

	          var elem = _ref2;

	          nodes.push(t.stringLiteral(elem.value.cooked));

	          var expr = expressions.shift();
	          if (expr) {
	            if (state.opts.spec && !expr.isBaseType("string") && !expr.isBaseType("number")) {
	              nodes.push(t.callExpression(t.identifier("String"), [expr.node]));
	            } else {
	              nodes.push(expr.node);
	            }
	          }
	        }

	        // filter out empty string literals
	        nodes = nodes.filter(function (n) {
	          return !t.isLiteral(n, { value: "" });
	        });

	        // since `+` is left-to-right associative
	        // ensure the first node is a string if first/second isn't
	        if (!isString(nodes[0]) && !isString(nodes[1])) {
	          nodes.unshift(t.stringLiteral(""));
	        }

	        if (nodes.length > 1) {
	          var root = buildBinaryExpression(nodes.shift(), nodes.shift());

	          for (var _iterator3 = nodes, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	            var _ref3;

	            if (_isArray3) {
	              if (_i3 >= _iterator3.length) break;
	              _ref3 = _iterator3[_i3++];
	            } else {
	              _i3 = _iterator3.next();
	              if (_i3.done) break;
	              _ref3 = _i3.value;
	            }

	            var node = _ref3;

	            root = buildBinaryExpression(root, node);
	          }

	          path.replaceWith(root);
	        } else {
	          path.replaceWith(nodes[0]);
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1139 */
107,
/* 1140 */
423,
/* 1141 */
[7060, 669, 2059, 5680],
/* 1142 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Symbol = __webpack_require__(5699)["default"];

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  var IGNORE = _Symbol();

	  return {
	    visitor: {
	      UnaryExpression: function UnaryExpression(path) {
	        var node = path.node;
	        var parent = path.parent;

	        if (node[IGNORE]) return;
	        if (path.find(function (path) {
	          return path.node && !!path.node._generated;
	        })) return;

	        if (path.parentPath.isBinaryExpression() && t.EQUALITY_BINARY_OPERATORS.indexOf(parent.operator) >= 0) {
	          // optimise `typeof foo === "string"` since we can determine that they'll never need to handle symbols
	          var opposite = path.getOpposite();
	          if (opposite.isLiteral() && opposite.node.value !== "symbol" && opposite.node.value !== "object") {
	            return;
	          }
	        }

	        if (node.operator === "typeof") {
	          var call = t.callExpression(this.addHelper("typeof"), [node.argument]);
	          if (path.get("argument").isIdentifier()) {
	            var undefLiteral = t.stringLiteral("undefined");
	            var unary = t.unaryExpression("typeof", node.argument);
	            unary[IGNORE] = true;
	            path.replaceWith(t.conditionalExpression(t.binaryExpression("===", unary, undefLiteral), undefLiteral, call));
	          } else {
	            path.replaceWith(call);
	          }
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1143 */
[7072, 5709, 5704],
/* 1144 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(75)["default"];

	var _interopRequireWildcard = __webpack_require__(43)["default"];

	exports.__esModule = true;

	var _regexpuRewritePattern = __webpack_require__(5871);

	var _regexpuRewritePattern2 = _interopRequireDefault(_regexpuRewritePattern);

	var _babelHelperRegex = __webpack_require__(5718);

	var regex = _interopRequireWildcard(_babelHelperRegex);

	exports["default"] = function () {
	  return {
	    visitor: {
	      RegExpLiteral: function RegExpLiteral(_ref) {
	        var node = _ref.node;

	        if (!regex.is(node, "u")) return;
	        node.pattern = _regexpuRewritePattern2["default"](node.pattern, node.flags);
	        regex.pullFlag(node, "u");
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1145 */
[7110, 5831],
/* 1146 */
[7106, 328, 5830, 94, 2094, 75, 43, 1148, 2075, 5746, 488, 5821, 1147, 2074, 5764, 65],
/* 1147 */
[7028, 43],
/* 1148 */
[7130, 1149, 1150, 170, 673, 327, 2090, 5823],
/* 1149 */
[7141, 5809],
/* 1150 */
[7160, 2085],
/* 1151 */
[7164, 1150, 327],
/* 1152 */
519,
/* 1153 */
[7173, 1151, 256],
/* 1154 */
734,
/* 1155 */
512,
/* 1156 */
422,
/* 1157 */
513,
/* 1158 */
[7060, 123, 1160, 2098],
/* 1159 */
[7066, 674, 258, 1156],
/* 1160 */
738,
/* 1161 */
[7069, 123, 1157, 403],
/* 1162 */
[7084, 123, 675, 1157, 2098, 674, 2102, 1156, 2103, 1161, 2104, 403, 5854, 2099, 5848, 5850, 2097, 489, 1160, 2101],
/* 1163 */
[7106, 104, 1177, 25, 1175, 22, 4, 404, 2111, 5896, 490, 2134, 1164, 2109, 5917, 12],
/* 1164 */
[7028, 4],
/* 1165 */
[7110, 6026],
/* 1166 */
[7106, 104, 1177, 25, 1175, 22, 4, 404, 2117, 5948, 491, 2134, 1167, 2116, 5966, 12],
/* 1167 */
[7028, 4],
/* 1168 */
[7140, 262],
/* 1169 */
[7160, 2130],
/* 1170 */
[7164, 1169, 260],
/* 1171 */
[7166, 161, 262],
/* 1172 */
[7170, 5990, 161],
/* 1173 */
[7171, 2125, 492, 679],
/* 1174 */
[7182, 5980, 2124, 5996],
/* 1175 */
[7031, 6031],
/* 1176 */
[7036, 6036],
/* 1177 */
[7038, 6038],
/* 1178 */
734,
/* 1179 */
512,
/* 1180 */
422,
/* 1181 */
513,
/* 1182 */
[7060, 124, 1184, 2140],
/* 1183 */
[7066, 682, 263, 1180],
/* 1184 */
738,
/* 1185 */
[7069, 124, 1181, 406],
/* 1186 */
[7084, 124, 683, 1181, 2140, 682, 2144, 1180, 2145, 1185, 2146, 406, 6049, 2141, 6043, 6045, 2139, 493, 1184, 2143],
/* 1187 */
[7110, 6177],
/* 1188 */
[7106, 333, 6176, 95, 2173, 76, 44, 1190, 2153, 6093, 494, 6166, 1189, 2152, 6111, 57],
/* 1189 */
[7028, 44],
/* 1190 */
[7130, 2162, 1191, 171, 687, 332, 2169, 6168],
/* 1191 */
[7160, 2164],
/* 1192 */
[7164, 1191, 332],
/* 1193 */
519,
/* 1194 */
[7173, 1192, 265],
/* 1195 */
734,
/* 1196 */
512,
/* 1197 */
422,
/* 1198 */
513,
/* 1199 */
[7060, 125, 1201, 2177],
/* 1200 */
[7066, 688, 267, 1197],
/* 1201 */
738,
/* 1202 */
[7069, 125, 1198, 408],
/* 1203 */
[7084, 125, 689, 1198, 2177, 688, 2181, 1197, 2182, 1202, 2183, 408, 6200, 2178, 6194, 6196, 2176, 495, 1201, 2180],
/* 1204 */
107,
/* 1205 */
423,
/* 1206 */
[7060, 692, 2190, 6221],
/* 1207 */
107,
/* 1208 */
423,
/* 1209 */
[7060, 694, 2198, 6254],
/* 1210 */
107,
/* 1211 */
423,
/* 1212 */
[7060, 696, 2204, 6284],
/* 1213 */
107,
/* 1214 */
423,
/* 1215 */
[7060, 698, 2211, 6316],
/* 1216 */
[7110, 6448],
/* 1217 */
[7106, 336, 6447, 96, 2237, 78, 50, 1220, 2218, 6364, 500, 6438, 1218, 2217, 6382, 66],
/* 1218 */
[7028, 50],
/* 1219 */
[7024, 6387, 2219, 6388],
/* 1220 */
[7130, 2226, 1221, 172, 701, 335, 2233, 6440],
/* 1221 */
[7160, 2228],
/* 1222 */
[7164, 1221, 335],
/* 1223 */
519,
/* 1224 */
[7173, 1222, 269],
/* 1225 */
734,
/* 1226 */
512,
/* 1227 */
422,
/* 1228 */
513,
/* 1229 */
[7060, 126, 1231, 2241],
/* 1230 */
[7066, 702, 271, 1227],
/* 1231 */
738,
/* 1232 */
[7069, 126, 1228, 410],
/* 1233 */
[7084, 126, 703, 1228, 2241, 702, 2245, 1227, 2246, 1232, 2247, 410, 6471, 2242, 6465, 6467, 2240, 501, 1231, 2244],
/* 1234 */
[7110, 6599],
/* 1235 */
[7106, 339, 6598, 86, 2273, 79, 51, 1238, 2254, 6515, 502, 6589, 1236, 2253, 6533, 67],
/* 1236 */
[7028, 51],
/* 1237 */
[7024, 6538, 2255, 6539],
/* 1238 */
[7130, 2262, 1239, 173, 707, 338, 2269, 6591],
/* 1239 */
[7160, 2264],
/* 1240 */
[7164, 1239, 338],
/* 1241 */
519,
/* 1242 */
[7173, 1240, 273],
/* 1243 */
734,
/* 1244 */
512,
/* 1245 */
422,
/* 1246 */
513,
/* 1247 */
[7060, 127, 1249, 2277],
/* 1248 */
[7066, 708, 275, 1245],
/* 1249 */
738,
/* 1250 */
[7069, 127, 1246, 412],
/* 1251 */
[7084, 127, 709, 1246, 2277, 708, 2281, 1245, 2282, 1250, 2283, 412, 6622, 2278, 6616, 6618, 2276, 503, 1249, 2280],
/* 1252 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return __webpack_require__(6639);
	};

	module.exports = exports["default"];

/***/ },
/* 1253 */
[7036, 6656],
/* 1254 */
734,
/* 1255 */
512,
/* 1256 */
422,
/* 1257 */
513,
/* 1258 */
[7060, 128, 1260, 2289],
/* 1259 */
[7066, 711, 276, 1256],
/* 1260 */
738,
/* 1261 */
[7069, 128, 1257, 413],
/* 1262 */
[7084, 128, 712, 1257, 2289, 711, 2293, 1256, 2294, 1261, 2295, 413, 6669, 2290, 6663, 6665, 2288, 504, 1260, 2292],
/* 1263 */
[7106, 340, 6645, 97, 2286, 58, 32, 1265, 2308, 6699, 505, 6746, 1264, 2299, 6719, 36],
/* 1264 */
[7028, 32],
/* 1265 */
[7130, 6729, 2304, 715, 1268, 506, 6745, 6748],
/* 1266 */
[7164, 2304, 506],
/* 1267 */
519,
/* 1268 */
[7165, 1266, 1267, 414],
/* 1269 */
[7110, 6646],
/* 1270 */
[7149, 2323],
/* 1271 */
[7164, 2317, 415],
/* 1272 */
519,
/* 1273 */
[7173, 1271, 278],
/* 1274 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(87)["default"];

	var _interopRequireWildcard = __webpack_require__(52)["default"];

	exports.__esModule = true;

	var _babelTypes = __webpack_require__(68);

	var t = _interopRequireWildcard(_babelTypes);

	exports["default"] = function () {
	  return {
	    visitor: {
	      Program: function Program(path, state) {
	        if (state.opts.strict === false) return;

	        var node = path.node;

	        for (var _iterator = (node.directives /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	          var _ref;

	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }

	          var directive = _ref;

	          if (directive.value.value === "use strict") return;
	        }

	        path.unshiftContainer("directives", t.directive(t.directiveLiteral("use strict")));
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1275 */
734,
/* 1276 */
512,
/* 1277 */
422,
/* 1278 */
513,
/* 1279 */
[7060, 129, 1281, 2329],
/* 1280 */
[7066, 719, 281, 1277],
/* 1281 */
738,
/* 1282 */
[7069, 129, 1278, 416],
/* 1283 */
[7084, 129, 720, 1278, 2329, 719, 2333, 1277, 2334, 1282, 2335, 416, 6853, 2330, 6847, 6849, 2328, 507, 1281, 2332],
/* 1284 */
[7110, 6830],
/* 1285 */
[7106, 342, 6829, 87, 2325, 81, 52, 1287, 2341, 6894, 508, 6967, 1286, 2340, 6912, 68],
/* 1286 */
[7028, 52],
/* 1287 */
[7130, 2350, 1288, 174, 724, 344, 2357, 6969],
/* 1288 */
[7160, 2352],
/* 1289 */
[7164, 1288, 344],
/* 1290 */
519,
/* 1291 */
[7173, 1289, 283],
/* 1292 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(5)["default"];

	var _interopRequireWildcard = __webpack_require__(3)["default"];

	var _interopRequire = __webpack_require__(733)["default"];

	exports.__esModule = true;
	exports.transformFile = transformFile;
	exports.transformFileSync = transformFileSync;

	var _lodashLangIsFunction = __webpack_require__(1340);

	var _lodashLangIsFunction2 = _interopRequireDefault(_lodashLangIsFunction);

	var _fs = __webpack_require__(345);

	var _fs2 = _interopRequireDefault(_fs);

	//

	//

	var _util = __webpack_require__(731);

	var util = _interopRequireWildcard(_util);

	var _babelMessages = __webpack_require__(176);

	var messages = _interopRequireWildcard(_babelMessages);

	var _babelTypes = __webpack_require__(16);

	var t = _interopRequireWildcard(_babelTypes);

	var _babelTraverse = __webpack_require__(153);

	var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

	var _transformationFileOptionsOptionManager = __webpack_require__(419);

	var _transformationFileOptionsOptionManager2 = _interopRequireDefault(_transformationFileOptionsOptionManager);

	//

	var _transformationPipeline = __webpack_require__(2374);

	var _transformationPipeline2 = _interopRequireDefault(_transformationPipeline);

	var _transformationFile = __webpack_require__(727);

	exports.File = _interopRequire(_transformationFile);

	var _transformationFileOptionsConfig = __webpack_require__(418);

	exports.options = _interopRequire(_transformationFileOptionsConfig);

	var _toolsBuildExternalHelpers = __webpack_require__(2369);

	exports.buildExternalHelpers = _interopRequire(_toolsBuildExternalHelpers);

	var _babelTemplate = __webpack_require__(742);

	exports.template = _interopRequire(_babelTemplate);

	var _package = __webpack_require__(6980);

	exports.version = _package.version;
	exports.util = util;
	exports.messages = messages;
	exports.types = t;
	exports.traverse = _babelTraverse2["default"];
	exports.OptionManager = _transformationFileOptionsOptionManager2["default"];
	exports.Pipeline = _transformationPipeline2["default"];

	var pipeline = new _transformationPipeline2["default"]();
	var transform = pipeline.transform.bind(pipeline);
	exports.transform = transform;
	var transformFromAst = pipeline.transformFromAst.bind(pipeline);

	exports.transformFromAst = transformFromAst;
	//

	function transformFile(filename /*: string*/, opts /*:: ?: Object*/, callback /*: Function*/) {
	  if (_lodashLangIsFunction2["default"](opts)) {
	    callback = opts;
	    opts = {};
	  }

	  opts.filename = filename;

	  _fs2["default"].readFile(filename, function (err, code) {
	    var result = undefined;

	    if (!err) {
	      try {
	        result = transform(code, opts);
	      } catch (_err) {
	        err = _err;
	      }
	    }

	    if (err) {
	      callback(err);
	    } else {
	      callback(null, result);
	    }
	  });
	}

	function transformFileSync(filename /*: string*/) /*: string*/ {
	  var opts /*:: ?: Object*/ = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  opts.filename = filename;
	  return transform(_fs2["default"].readFileSync(filename, "utf8"), opts);
	}

/***/ },
/* 1293 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./config": 418,
		"./config.js": 418,
		"./index": 728,
		"./index.js": 728,
		"./option-manager": 419,
		"./option-manager.js": 419,
		"./parsers": 729,
		"./parsers.js": 729
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 1293;


/***/ },
/* 1294 */
[7019, 5, 2388, 2390, 2387, 2386, 2376],
/* 1295 */
/***/ function(module, exports) {

	/*
	  Copyright (C) 2013-2014 Yusuke Suzuki <utatane.tea@gmail.com>
	  Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>

	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:

	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.

	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	(function () {
	    'use strict';

	    var ES6Regex, ES5Regex, NON_ASCII_WHITESPACES, IDENTIFIER_START, IDENTIFIER_PART, ch;

	    // See `tools/generate-identifier-regex.js`.
	    ES5Regex = {
	        // ECMAScript 5.1/Unicode v7.0.0 NonAsciiIdentifierStart:
	        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
	        // ECMAScript 5.1/Unicode v7.0.0 NonAsciiIdentifierPart:
	        NonAsciiIdentifierPart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/
	    };

	    ES6Regex = {
	        // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierStart:
	        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDE00-\uDE11\uDE13-\uDE2B\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDE00-\uDE2F\uDE44\uDE80-\uDEAA]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]/,
	        // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierPart:
	        NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDD0-\uDDDA\uDE00-\uDE11\uDE13-\uDE37\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF01-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
	    };

	    function isDecimalDigit(ch) {
	        return 0x30 <= ch && ch <= 0x39;  // 0..9
	    }

	    function isHexDigit(ch) {
	        return 0x30 <= ch && ch <= 0x39 ||  // 0..9
	            0x61 <= ch && ch <= 0x66 ||     // a..f
	            0x41 <= ch && ch <= 0x46;       // A..F
	    }

	    function isOctalDigit(ch) {
	        return ch >= 0x30 && ch <= 0x37;  // 0..7
	    }

	    // 7.2 White Space

	    NON_ASCII_WHITESPACES = [
	        0x1680, 0x180E,
	        0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A,
	        0x202F, 0x205F,
	        0x3000,
	        0xFEFF
	    ];

	    function isWhiteSpace(ch) {
	        return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 ||
	            ch >= 0x1680 && NON_ASCII_WHITESPACES.indexOf(ch) >= 0;
	    }

	    // 7.3 Line Terminators

	    function isLineTerminator(ch) {
	        return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;
	    }

	    // 7.6 Identifier Names and Identifiers

	    function fromCodePoint(cp) {
	        if (cp <= 0xFFFF) { return String.fromCharCode(cp); }
	        var cu1 = String.fromCharCode(Math.floor((cp - 0x10000) / 0x400) + 0xD800);
	        var cu2 = String.fromCharCode(((cp - 0x10000) % 0x400) + 0xDC00);
	        return cu1 + cu2;
	    }

	    IDENTIFIER_START = new Array(0x80);
	    for(ch = 0; ch < 0x80; ++ch) {
	        IDENTIFIER_START[ch] =
	            ch >= 0x61 && ch <= 0x7A ||  // a..z
	            ch >= 0x41 && ch <= 0x5A ||  // A..Z
	            ch === 0x24 || ch === 0x5F;  // $ (dollar) and _ (underscore)
	    }

	    IDENTIFIER_PART = new Array(0x80);
	    for(ch = 0; ch < 0x80; ++ch) {
	        IDENTIFIER_PART[ch] =
	            ch >= 0x61 && ch <= 0x7A ||  // a..z
	            ch >= 0x41 && ch <= 0x5A ||  // A..Z
	            ch >= 0x30 && ch <= 0x39 ||  // 0..9
	            ch === 0x24 || ch === 0x5F;  // $ (dollar) and _ (underscore)
	    }

	    function isIdentifierStartES5(ch) {
	        return ch < 0x80 ? IDENTIFIER_START[ch] : ES5Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
	    }

	    function isIdentifierPartES5(ch) {
	        return ch < 0x80 ? IDENTIFIER_PART[ch] : ES5Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
	    }

	    function isIdentifierStartES6(ch) {
	        return ch < 0x80 ? IDENTIFIER_START[ch] : ES6Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
	    }

	    function isIdentifierPartES6(ch) {
	        return ch < 0x80 ? IDENTIFIER_PART[ch] : ES6Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
	    }

	    module.exports = {
	        isDecimalDigit: isDecimalDigit,
	        isHexDigit: isHexDigit,
	        isOctalDigit: isOctalDigit,
	        isWhiteSpace: isWhiteSpace,
	        isLineTerminator: isLineTerminator,
	        isIdentifierStartES5: isIdentifierStartES5,
	        isIdentifierPartES5: isIdentifierPartES5,
	        isIdentifierStartES6: isIdentifierStartES6,
	        isIdentifierPartES6: isIdentifierPartES6
	    };
	}());
	/* vim: set sw=4 ts=4 et tw=80 : */


/***/ },
/* 1296 */
/***/ function(module, exports, __webpack_require__) {

	/* @flow */

	/* eslint quotes: 0 */

	"use strict";

	var _interopRequireWildcard = __webpack_require__(3)["default"];

	exports.__esModule = true;
	exports.Identifier = Identifier;
	exports.RestElement = RestElement;
	exports.ObjectExpression = ObjectExpression;
	exports.ObjectMethod = ObjectMethod;
	exports.ObjectProperty = ObjectProperty;
	exports.ArrayExpression = ArrayExpression;
	exports.RegExpLiteral = RegExpLiteral;
	exports.BooleanLiteral = BooleanLiteral;
	exports.NullLiteral = NullLiteral;
	exports.NumericLiteral = NumericLiteral;
	exports.StringLiteral = StringLiteral;
	exports._stringLiteral = _stringLiteral;

	var _babelTypes = __webpack_require__(16);

	var t = _interopRequireWildcard(_babelTypes);

	function Identifier(node /*: Object*/) {
	  this.push(node.name);
	}

	function RestElement(node /*: Object*/) {
	  this.push("...");
	  this.print(node.argument, node);
	}

	exports.SpreadElement = RestElement;
	exports.SpreadProperty = RestElement;
	exports.RestProperty = RestElement;

	function ObjectExpression(node /*: Object*/) {
	  var props = node.properties;

	  this.push("{");
	  this.printInnerComments(node);

	  if (props.length) {
	    this.space();
	    this.printList(props, node, { indent: true });
	    this.space();
	  }

	  this.push("}");
	}

	exports.ObjectPattern = ObjectExpression;

	function ObjectMethod(node /*: Object*/) {
	  this.printJoin(node.decorators, node, { separator: "" });
	  this._method(node);
	}

	function ObjectProperty(node /*: Object*/) {
	  this.printJoin(node.decorators, node, { separator: "" });

	  if (node.computed) {
	    this.push("[");
	    this.print(node.key, node);
	    this.push("]");
	  } else {
	    // print `({ foo: foo = 5 } = {})` as `({ foo = 5 } = {});`
	    if (t.isAssignmentPattern(node.value) && t.isIdentifier(node.key) && node.key.name === node.value.left.name) {
	      this.print(node.value, node);
	      return;
	    }

	    this.print(node.key, node);

	    // shorthand!
	    if (node.shorthand && t.isIdentifier(node.key) && t.isIdentifier(node.value) && node.key.name === node.value.name) {
	      return;
	    }
	  }

	  this.push(":");
	  this.space();
	  this.print(node.value, node);
	}

	function ArrayExpression(node /*: Object*/) {
	  var elems = node.elements;
	  var len = elems.length;

	  this.push("[");
	  this.printInnerComments(node);

	  for (var i = 0; i < elems.length; i++) {
	    var elem = elems[i];
	    if (elem) {
	      if (i > 0) this.space();
	      this.print(elem, node);
	      if (i < len - 1) this.push(",");
	    } else {
	      // If the array expression ends with a hole, that hole
	      // will be ignored by the interpreter, but if it ends with
	      // two (or more) holes, we need to write out two (or more)
	      // commas so that the resulting code is interpreted with
	      // both (all) of the holes.
	      this.push(",");
	    }
	  }

	  this.push("]");
	}

	exports.ArrayPattern = ArrayExpression;

	function RegExpLiteral(node /*: Object*/) {
	  this.push("/" + node.pattern + "/" + node.flags);
	}

	function BooleanLiteral(node /*: Object*/) {
	  this.push(node.value ? "true" : "false");
	}

	function NullLiteral() {
	  this.push("null");
	}

	function NumericLiteral(node /*: Object*/) {
	  this.push(node.value + "");
	}

	function StringLiteral(node /*: Object*/, parent /*: Object*/) {
	  this.push(this._stringLiteral(node.value, parent));
	}

	function _stringLiteral(val /*: string*/, parent /*: Object*/) /*: string*/ {
	  val = JSON.stringify(val);

	  // escape illegal js but valid json unicode characters
	  val = val.replace(/[\u000A\u000D\u2028\u2029]/g, function (c) {
	    return "\\u" + ("0000" + c.charCodeAt(0).toString(16)).slice(-4);
	  });

	  if (this.format.quotes === "single" && !t.isJSX(parent)) {
	    // remove double quotes
	    val = val.slice(1, -1);

	    // unescape double quotes
	    val = val.replace(/\\"/g, '"');

	    // escape single quotes
	    val = val.replace(/'/g, "\\'");

	    // add single quotes
	    val = "'" + val + "'";
	  }

	  return val;
	}

/***/ },
/* 1297 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _inherits = __webpack_require__(346)["default"];

	var _classCallCheck = __webpack_require__(82)["default"];

	var _interopRequireDefault = __webpack_require__(5)["default"];

	var _interopRequireWildcard = __webpack_require__(3)["default"];

	exports.__esModule = true;

	var _detectIndent = __webpack_require__(2409);

	var _detectIndent2 = _interopRequireDefault(_detectIndent);

	var _whitespace = __webpack_require__(2408);

	var _whitespace2 = _interopRequireDefault(_whitespace);

	var _sourceMap = __webpack_require__(2407);

	var _sourceMap2 = _interopRequireDefault(_sourceMap);

	var _position = __webpack_require__(2405);

	var _position2 = _interopRequireDefault(_position);

	var _babelMessages = __webpack_require__(176);

	var messages = _interopRequireWildcard(_babelMessages);

	var _printer = __webpack_require__(2406);

	var _printer2 = _interopRequireDefault(_printer);

	/**
	 * Babel's code generator, turns an ast into code, maintaining sourcemaps,
	 * user preferences, and valid output.
	 */

	var CodeGenerator = (function (_Printer) {
	  _inherits(CodeGenerator, _Printer);

	  function CodeGenerator(ast, opts, code) {
	    _classCallCheck(this, CodeGenerator);

	    opts = opts || {};

	    var comments = ast.comments || [];
	    var tokens = ast.tokens || [];
	    var format = CodeGenerator.normalizeOptions(code, opts, tokens);

	    var position = new _position2["default"]();

	    _Printer.call(this, position, format);

	    this.comments = comments;
	    this.position = position;
	    this.tokens = tokens;
	    this.format = format;
	    this.opts = opts;
	    this.ast = ast;

	    this.whitespace = new _whitespace2["default"](tokens);
	    this.map = new _sourceMap2["default"](position, opts, code);
	  }

	  /**
	   * Normalize generator options, setting defaults.
	   *
	   * - Detects code indentation.
	   * - If `opts.compact = "auto"` and the code is over 100KB, `compact` will be set to `true`.
	    */

	  CodeGenerator.normalizeOptions = function normalizeOptions(code, opts, tokens) {
	    var style = "  ";
	    if (code) {
	      var _indent = _detectIndent2["default"](code).indent;
	      if (_indent && _indent !== " ") style = _indent;
	    }

	    var format = {
	      auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
	      auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
	      shouldPrintComment: opts.shouldPrintComment,
	      retainLines: opts.retainLines,
	      comments: opts.comments == null || opts.comments,
	      compact: opts.compact,
	      minified: opts.minified,
	      concise: opts.concise,
	      quotes: opts.quotes || CodeGenerator.findCommonStringDelimiter(code, tokens),
	      indent: {
	        adjustMultilineComment: true,
	        style: style,
	        base: 0
	      }
	    };

	    if (format.minified) {
	      format.compact = true;
	    }

	    if (format.compact === "auto") {
	      format.compact = code.length > 100000; // 100KB

	      if (format.compact) {
	        console.error("[BABEL] " + messages.get("codeGeneratorDeopt", opts.filename, "100KB"));
	      }
	    }

	    if (format.compact) {
	      format.indent.adjustMultilineComment = false;
	    }

	    return format;
	  };

	  /**
	   * Determine if input code uses more single or double quotes.
	   */

	  CodeGenerator.findCommonStringDelimiter = function findCommonStringDelimiter(code, tokens) {
	    var occurences = {
	      single: 0,
	      double: 0
	    };

	    var checked = 0;

	    for (var i = 0; i < tokens.length; i++) {
	      var token = tokens[i];
	      if (token.type.label !== "string") continue;

	      var raw = code.slice(token.start, token.end);
	      if (raw[0] === "'") {
	        occurences.single++;
	      } else {
	        occurences.double++;
	      }

	      checked++;
	      if (checked >= 3) break;
	    }
	    if (occurences.single > occurences.double) {
	      return "single";
	    } else {
	      return "double";
	    }
	  };

	  /**
	   * Generate code and sourcemap from ast.
	   *
	   * Appends comments that weren't attached to any node to the end of the generated output.
	   */

	  CodeGenerator.prototype.generate = function generate() {
	    this.print(this.ast);
	    this.printAuxAfterComment();

	    return {
	      map: this.map.get(),
	      code: this.get()
	    };
	  };

	  return CodeGenerator;
	})(_printer2["default"]);

	exports.CodeGenerator = CodeGenerator;

	exports["default"] = function (ast /*: Object*/, opts /*: Object*/, code /*: string*/) /*: Object*/ {
	  var gen = new CodeGenerator(ast, opts, code);
	  return gen.generate();
	};

/***/ },
/* 1298 */
/***/ function(module, exports, __webpack_require__) {

	/* @noflow */

	"use strict";

	var _classCallCheck = __webpack_require__(82)["default"];

	var _Object$keys = __webpack_require__(510)["default"];

	var _interopRequireDefault = __webpack_require__(5)["default"];

	var _interopRequireWildcard = __webpack_require__(3)["default"];

	exports.__esModule = true;

	var _whitespace = __webpack_require__(2404);

	var _whitespace2 = _interopRequireDefault(_whitespace);

	var _parentheses = __webpack_require__(2403);

	var parens = _interopRequireWildcard(_parentheses);

	var _lodashCollectionEach = __webpack_require__(516);

	var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);

	var _babelTypes = __webpack_require__(16);

	var t = _interopRequireWildcard(_babelTypes);

	function find(obj, node, parent, printStack) {
	  if (!obj) return;
	  var result = undefined;

	  var types = _Object$keys(obj);
	  for (var i = 0; i < types.length; i++) {
	    var type = types[i];

	    if (t.is(type, node)) {
	      var fn = obj[type];
	      result = fn(node, parent, printStack);
	      if (result != null) break;
	    }
	  }

	  return result;
	}

	function isOrHasCallExpression(node) {
	  if (t.isCallExpression(node)) {
	    return true;
	  }

	  if (t.isMemberExpression(node)) {
	    return isOrHasCallExpression(node.object) || !node.computed && isOrHasCallExpression(node.property);
	  } else {
	    return false;
	  }
	}

	var Node = (function () {
	  function Node(node /*: Object*/, parent /*: Object*/) {
	    _classCallCheck(this, Node);

	    this.parent = parent;
	    this.node = node;
	  }

	  Node.isUserWhitespacable = function isUserWhitespacable(node) {
	    return t.isUserWhitespacable(node);
	  };

	  Node.needsWhitespace = function needsWhitespace(node, parent, type) {
	    if (!node) return 0;

	    if (t.isExpressionStatement(node)) {
	      node = node.expression;
	    }

	    var linesInfo = find(_whitespace2["default"].nodes, node, parent);

	    if (!linesInfo) {
	      var items = find(_whitespace2["default"].list, node, parent);
	      if (items) {
	        for (var i = 0; i < items.length; i++) {
	          linesInfo = Node.needsWhitespace(items[i], node, type);
	          if (linesInfo) break;
	        }
	      }
	    }

	    return linesInfo && linesInfo[type] || 0;
	  };

	  Node.needsWhitespaceBefore = function needsWhitespaceBefore(node, parent) {
	    return Node.needsWhitespace(node, parent, "before");
	  };

	  Node.needsWhitespaceAfter = function needsWhitespaceAfter(node, parent) {
	    return Node.needsWhitespace(node, parent, "after");
	  };

	  Node.needsParens = function needsParens(node, parent, printStack) {
	    if (!parent) return false;

	    if (t.isNewExpression(parent) && parent.callee === node) {
	      if (isOrHasCallExpression(node)) return true;
	    }

	    return find(parens, node, parent, printStack);
	  };

	  return Node;
	})();

	exports["default"] = Node;

	_lodashCollectionEach2["default"](Node, function (fn, key) {
	  Node.prototype[key] = function () {
	    // Avoid leaking arguments to prevent deoptimization
	    var args = new Array(arguments.length + 2);

	    args[0] = this.node;
	    args[1] = this.parent;

	    for (var i = 0; i < args.length; i++) {
	      args[i + 2] = arguments[i];
	    }

	    return Node[key].apply(null, args);
	  };
	});
	module.exports = exports["default"];

/***/ },
/* 1299 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Object$keys = __webpack_require__(510)["default"];

	var _interopRequireDefault = __webpack_require__(5)["default"];

	exports.__esModule = true;
	exports.get = get;

	var _helpers = __webpack_require__(2416);

	var _helpers2 = _interopRequireDefault(_helpers);

	function get(name) {
	  var fn = _helpers2["default"][name];
	  if (!fn) throw new ReferenceError("Unknown helper " + name);

	  return fn().expression;
	}

	var list = _Object$keys(_helpers2["default"]).map(function (name) {
	  return name[0] === "_" ? name.slice(1) : name;
	}).filter(function (name) {
	  return name !== "__esModule";
	});

	exports.list = list;
	exports["default"] = get;

/***/ },
/* 1300 */
[7038, 2440],
/* 1301 */
[7054, 734, 178],
/* 1302 */
[7059, 426, 98],
/* 1303 */
[7061, 734],
/* 1304 */
/***/ function(module, exports) {

	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};

/***/ },
/* 1305 */
/***/ function(module, exports) {

	module.exports = true;

/***/ },
/* 1306 */
/***/ function(module, exports, __webpack_require__) {

	var redefine = __webpack_require__(739);
	module.exports = function(target, src){
	  for(var key in src)redefine(target, key, src[key]);
	  return target;
	};

/***/ },
/* 1307 */
[7070, 423],
/* 1308 */
/***/ function(module, exports) {

	module.exports = function(it, Constructor, name){
	  if(!(it instanceof Constructor))throw TypeError(name + ": use the 'new' operator!");
	  return it;
	};

/***/ },
/* 1309 */
/***/ function(module, exports) {

	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 1310 */
[7073, 512],
/* 1311 */
[7075, 1301, 178, 425, 107],
/* 1312 */
345,
/* 1313 */
[7083, 2455, 736],
/* 1314 */
[7085, 2458, 425],
/* 1315 */
[7088, 82],
/* 1316 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	var PATH_CACHE_KEY = "_paths";exports.PATH_CACHE_KEY = PATH_CACHE_KEY;
	//Symbol();

/***/ },
/* 1317 */
[7101, 3, 16],
/* 1318 */
[7105, 82],
/* 1319 */
[7123, 732, 3, 16],
/* 1320 */
1295,
/* 1321 */
[7126, 2508],
/* 1322 */
/***/ function(module, exports) {

	/**
	 * Gets the last element of `array`.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to query.
	 * @returns {*} Returns the last element of `array`.
	 * @example
	 *
	 * _.last([1, 2, 3]);
	 * // => 3
	 */
	function last(array) {
	  var length = array ? array.length : 0;
	  return length ? array[length - 1] : undefined;
	}

	module.exports = last;


/***/ },
/* 1323 */
/***/ function(module, exports) {

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * Creates a function that invokes `func` with the `this` binding of the
	 * created function and arguments from `start` and beyond provided as an array.
	 *
	 * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/Web/JavaScript/Reference/Functions/rest_parameters).
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var say = _.restParam(function(what, names) {
	 *   return what + ' ' + _.initial(names).join(', ') +
	 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	 * });
	 *
	 * say('hello', 'fred', 'barney', 'pebbles');
	 * // => 'hello fred, barney, & pebbles'
	 */
	function restParam(func, start) {
	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        rest = Array(length);

	    while (++index < length) {
	      rest[index] = args[start + index];
	    }
	    switch (start) {
	      case 0: return func.call(this, rest);
	      case 1: return func.call(this, args[0], rest);
	      case 2: return func.call(this, args[0], args[1], rest);
	    }
	    var otherArgs = Array(start + 1);
	    index = -1;
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = rest;
	    return func.apply(this, otherArgs);
	  };
	}

	module.exports = restParam;


/***/ },
/* 1324 */
/***/ function(module, exports) {

	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function arrayCopy(source, array) {
	  var index = -1,
	      length = source.length;

	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}

	module.exports = arrayCopy;


/***/ },
/* 1325 */
[7133, 1327, 286],
/* 1326 */
[7135, 1324, 746, 1325, 1330, 2548, 2549, 2550, 105, 108],
/* 1327 */
/***/ function(module, exports) {

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property names to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @returns {Object} Returns `object`.
	 */
	function baseCopy(source, props, object) {
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];
	    object[key] = source[key];
	  }
	  return object;
	}

	module.exports = baseCopy;


/***/ },
/* 1328 */
[7136, 1330, 2537],
/* 1329 */
[7137, 2538],
/* 1330 */
[7139, 1329, 286],
/* 1331 */
[7141, 2547],
/* 1332 */
[7142, 2523, 108, 154],
/* 1333 */
/***/ function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(1328),
	    isArrayLike = __webpack_require__(347);

	/**
	 * The base implementation of `_.map` without support for callback shorthands
	 * and `this` binding.
	 *
	 * @private
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function baseMap(collection, iteratee) {
	  var index = -1,
	      result = isArrayLike(collection) ? Array(collection.length) : [];

	  baseEach(collection, function(value, key, collection) {
	    result[++index] = iteratee(value, key, collection);
	  });
	  return result;
	}

	module.exports = baseMap;


/***/ },
/* 1334 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	module.exports = baseProperty;


/***/ },
/* 1335 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.slice` without an iteratee call guard.
	 *
	 * @private
	 * @param {Array} array The array to slice.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the slice of `array`.
	 */
	function baseSlice(array, start, end) {
	  var index = -1,
	      length = array.length;

	  start = start == null ? 0 : (+start || 0);
	  if (start < 0) {
	    start = -start > length ? 0 : (length + start);
	  }
	  end = (end === undefined || end > length) ? length : (+end || 0);
	  if (end < 0) {
	    end += length;
	  }
	  length = start > end ? 0 : ((end - start) >>> 0);
	  start >>>= 0;

	  var result = Array(length);
	  while (++index < length) {
	    result[index] = array[index + start];
	  }
	  return result;
	}

	module.exports = baseSlice;


/***/ },
/* 1336 */
[7152, 427, 428, 1323],
/* 1337 */
[7167, 108],
/* 1338 */
[7172, 1326, 427],
/* 1339 */
/***/ function(module, exports, __webpack_require__) {

	var isObjectLike = __webpack_require__(154);

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a boolean primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isBoolean(false);
	 * // => true
	 *
	 * _.isBoolean(null);
	 * // => false
	 */
	function isBoolean(value) {
	  return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
	}

	module.exports = isBoolean;


/***/ },
/* 1340 */
[7175, 108],
/* 1341 */
[7177, 154],
/* 1342 */
[7178, 2522, 429, 154],
/* 1343 */
[7179, 108],
/* 1344 */
[7183, 755, 2519, 2540],
/* 1345 */
/***/ function(module, exports) {

	/**
	 * This method returns the first argument provided to it.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'user': 'fred' };
	 *
	 * _.identity(object) === object;
	 * // => true
	 */
	function identity(value) {
	  return value;
	}

	module.exports = identity;


/***/ },
/* 1346 */
/***/ function(module, exports) {

	'use strict';
	module.exports = function (str) {
		var isExtendedLengthPath = /^\\\\\?\\/.test(str);
		var hasNonAscii = /[^\x00-\x80]+/.test(str);

		if (isExtendedLengthPath || hasNonAscii) {
			return str;
		}

		return str.replace(/\\/g, '/');
	};


/***/ },
/* 1347 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	{
	  var util = __webpack_require__(430);

	  /**
	   * A data structure which is a combination of an array and a set. Adding a new
	   * member is O(1), testing for membership is O(1), and finding the index of an
	   * element is O(1). Removing elements from the set is not supported. Only
	   * strings are supported for membership.
	   */
	  function ArraySet() {
	    this._array = [];
	    this._set = {};
	  }

	  /**
	   * Static method for creating ArraySet instances from an existing array.
	   */
	  ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
	    var set = new ArraySet();
	    for (var i = 0, len = aArray.length; i < len; i++) {
	      set.add(aArray[i], aAllowDuplicates);
	    }
	    return set;
	  };

	  /**
	   * Return how many unique items are in this ArraySet. If duplicates have been
	   * added, than those do not count towards the size.
	   *
	   * @returns Number
	   */
	  ArraySet.prototype.size = function ArraySet_size() {
	    return Object.getOwnPropertyNames(this._set).length;
	  };

	  /**
	   * Add the given string to this set.
	   *
	   * @param String aStr
	   */
	  ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
	    var sStr = util.toSetString(aStr);
	    var isDuplicate = this._set.hasOwnProperty(sStr);
	    var idx = this._array.length;
	    if (!isDuplicate || aAllowDuplicates) {
	      this._array.push(aStr);
	    }
	    if (!isDuplicate) {
	      this._set[sStr] = idx;
	    }
	  };

	  /**
	   * Is the given string a member of this set?
	   *
	   * @param String aStr
	   */
	  ArraySet.prototype.has = function ArraySet_has(aStr) {
	    var sStr = util.toSetString(aStr);
	    return this._set.hasOwnProperty(sStr);
	  };

	  /**
	   * What is the index of the given string in the array?
	   *
	   * @param String aStr
	   */
	  ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
	    var sStr = util.toSetString(aStr);
	    if (this._set.hasOwnProperty(sStr)) {
	      return this._set[sStr];
	    }
	    throw new Error('"' + aStr + '" is not in the set.');
	  };

	  /**
	   * What is the element at the given index?
	   *
	   * @param Number aIdx
	   */
	  ArraySet.prototype.at = function ArraySet_at(aIdx) {
	    if (aIdx >= 0 && aIdx < this._array.length) {
	      return this._array[aIdx];
	    }
	    throw new Error('No element indexed by ' + aIdx);
	  };

	  /**
	   * Returns the array representation of this set (which has the proper indices
	   * indicated by indexOf). Note that this is a copy of the internal array used
	   * for storing the members so that no one can mess with internal state.
	   */
	  ArraySet.prototype.toArray = function ArraySet_toArray() {
	    return this._array.slice();
	  };

	  exports.ArraySet = ArraySet;
	}


/***/ },
/* 1348 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 *
	 * Based on the Base 64 VLQ implementation in Closure Compiler:
	 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
	 *
	 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 *  * Redistributions of source code must retain the above copyright
	 *    notice, this list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above
	 *    copyright notice, this list of conditions and the following
	 *    disclaimer in the documentation and/or other materials provided
	 *    with the distribution.
	 *  * Neither the name of Google Inc. nor the names of its
	 *    contributors may be used to endorse or promote products derived
	 *    from this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
	 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	{
	  var base64 = __webpack_require__(2569);

	  // A single base 64 digit can contain 6 bits of data. For the base 64 variable
	  // length quantities we use in the source map spec, the first bit is the sign,
	  // the next four bits are the actual value, and the 6th bit is the
	  // continuation bit. The continuation bit tells us whether there are more
	  // digits in this value following this digit.
	  //
	  //   Continuation
	  //   |    Sign
	  //   |    |
	  //   V    V
	  //   101011

	  var VLQ_BASE_SHIFT = 5;

	  // binary: 100000
	  var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

	  // binary: 011111
	  var VLQ_BASE_MASK = VLQ_BASE - 1;

	  // binary: 100000
	  var VLQ_CONTINUATION_BIT = VLQ_BASE;

	  /**
	   * Converts from a two-complement value to a value where the sign bit is
	   * placed in the least significant bit.  For example, as decimals:
	   *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
	   *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
	   */
	  function toVLQSigned(aValue) {
	    return aValue < 0
	      ? ((-aValue) << 1) + 1
	      : (aValue << 1) + 0;
	  }

	  /**
	   * Converts to a two-complement value from a value where the sign bit is
	   * placed in the least significant bit.  For example, as decimals:
	   *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
	   *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
	   */
	  function fromVLQSigned(aValue) {
	    var isNegative = (aValue & 1) === 1;
	    var shifted = aValue >> 1;
	    return isNegative
	      ? -shifted
	      : shifted;
	  }

	  /**
	   * Returns the base 64 VLQ encoded value.
	   */
	  exports.encode = function base64VLQ_encode(aValue) {
	    var encoded = "";
	    var digit;

	    var vlq = toVLQSigned(aValue);

	    do {
	      digit = vlq & VLQ_BASE_MASK;
	      vlq >>>= VLQ_BASE_SHIFT;
	      if (vlq > 0) {
	        // There are still more digits in this value, so we must make sure the
	        // continuation bit is marked.
	        digit |= VLQ_CONTINUATION_BIT;
	      }
	      encoded += base64.encode(digit);
	    } while (vlq > 0);

	    return encoded;
	  };

	  /**
	   * Decodes the next base 64 VLQ value from the given string and returns the
	   * value and the rest of the string via the out parameter.
	   */
	  exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
	    var strLen = aStr.length;
	    var result = 0;
	    var shift = 0;
	    var continuation, digit;

	    do {
	      if (aIndex >= strLen) {
	        throw new Error("Expected more digits in base 64 VLQ value.");
	      }

	      digit = base64.decode(aStr.charCodeAt(aIndex++));
	      if (digit === -1) {
	        throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
	      }

	      continuation = !!(digit & VLQ_CONTINUATION_BIT);
	      digit &= VLQ_BASE_MASK;
	      result = result + (digit << shift);
	      shift += VLQ_BASE_SHIFT;
	    } while (continuation);

	    aOutParam.value = fromVLQSigned(result);
	    aOutParam.rest = aIndex;
	  };
	}


/***/ },
/* 1349 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	{
	  var base64VLQ = __webpack_require__(1348);
	  var util = __webpack_require__(430);
	  var ArraySet = __webpack_require__(1347).ArraySet;
	  var MappingList = __webpack_require__(2571).MappingList;

	  /**
	   * An instance of the SourceMapGenerator represents a source map which is
	   * being built incrementally. You may pass an object with the following
	   * properties:
	   *
	   *   - file: The filename of the generated source.
	   *   - sourceRoot: A root for all relative URLs in this source map.
	   */
	  function SourceMapGenerator(aArgs) {
	    if (!aArgs) {
	      aArgs = {};
	    }
	    this._file = util.getArg(aArgs, 'file', null);
	    this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
	    this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
	    this._sources = new ArraySet();
	    this._names = new ArraySet();
	    this._mappings = new MappingList();
	    this._sourcesContents = null;
	  }

	  SourceMapGenerator.prototype._version = 3;

	  /**
	   * Creates a new SourceMapGenerator based on a SourceMapConsumer
	   *
	   * @param aSourceMapConsumer The SourceMap.
	   */
	  SourceMapGenerator.fromSourceMap =
	    function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
	      var sourceRoot = aSourceMapConsumer.sourceRoot;
	      var generator = new SourceMapGenerator({
	        file: aSourceMapConsumer.file,
	        sourceRoot: sourceRoot
	      });
	      aSourceMapConsumer.eachMapping(function (mapping) {
	        var newMapping = {
	          generated: {
	            line: mapping.generatedLine,
	            column: mapping.generatedColumn
	          }
	        };

	        if (mapping.source != null) {
	          newMapping.source = mapping.source;
	          if (sourceRoot != null) {
	            newMapping.source = util.relative(sourceRoot, newMapping.source);
	          }

	          newMapping.original = {
	            line: mapping.originalLine,
	            column: mapping.originalColumn
	          };

	          if (mapping.name != null) {
	            newMapping.name = mapping.name;
	          }
	        }

	        generator.addMapping(newMapping);
	      });
	      aSourceMapConsumer.sources.forEach(function (sourceFile) {
	        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	        if (content != null) {
	          generator.setSourceContent(sourceFile, content);
	        }
	      });
	      return generator;
	    };

	  /**
	   * Add a single mapping from original source line and column to the generated
	   * source's line and column for this source map being created. The mapping
	   * object should have the following properties:
	   *
	   *   - generated: An object with the generated line and column positions.
	   *   - original: An object with the original line and column positions.
	   *   - source: The original source file (relative to the sourceRoot).
	   *   - name: An optional original token name for this mapping.
	   */
	  SourceMapGenerator.prototype.addMapping =
	    function SourceMapGenerator_addMapping(aArgs) {
	      var generated = util.getArg(aArgs, 'generated');
	      var original = util.getArg(aArgs, 'original', null);
	      var source = util.getArg(aArgs, 'source', null);
	      var name = util.getArg(aArgs, 'name', null);

	      if (!this._skipValidation) {
	        this._validateMapping(generated, original, source, name);
	      }

	      if (source != null && !this._sources.has(source)) {
	        this._sources.add(source);
	      }

	      if (name != null && !this._names.has(name)) {
	        this._names.add(name);
	      }

	      this._mappings.add({
	        generatedLine: generated.line,
	        generatedColumn: generated.column,
	        originalLine: original != null && original.line,
	        originalColumn: original != null && original.column,
	        source: source,
	        name: name
	      });
	    };

	  /**
	   * Set the source content for a source file.
	   */
	  SourceMapGenerator.prototype.setSourceContent =
	    function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
	      var source = aSourceFile;
	      if (this._sourceRoot != null) {
	        source = util.relative(this._sourceRoot, source);
	      }

	      if (aSourceContent != null) {
	        // Add the source content to the _sourcesContents map.
	        // Create a new _sourcesContents map if the property is null.
	        if (!this._sourcesContents) {
	          this._sourcesContents = {};
	        }
	        this._sourcesContents[util.toSetString(source)] = aSourceContent;
	      } else if (this._sourcesContents) {
	        // Remove the source file from the _sourcesContents map.
	        // If the _sourcesContents map is empty, set the property to null.
	        delete this._sourcesContents[util.toSetString(source)];
	        if (Object.keys(this._sourcesContents).length === 0) {
	          this._sourcesContents = null;
	        }
	      }
	    };

	  /**
	   * Applies the mappings of a sub-source-map for a specific source file to the
	   * source map being generated. Each mapping to the supplied source file is
	   * rewritten using the supplied source map. Note: The resolution for the
	   * resulting mappings is the minimium of this map and the supplied map.
	   *
	   * @param aSourceMapConsumer The source map to be applied.
	   * @param aSourceFile Optional. The filename of the source file.
	   *        If omitted, SourceMapConsumer's file property will be used.
	   * @param aSourceMapPath Optional. The dirname of the path to the source map
	   *        to be applied. If relative, it is relative to the SourceMapConsumer.
	   *        This parameter is needed when the two source maps aren't in the same
	   *        directory, and the source map to be applied contains relative source
	   *        paths. If so, those relative source paths need to be rewritten
	   *        relative to the SourceMapGenerator.
	   */
	  SourceMapGenerator.prototype.applySourceMap =
	    function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
	      var sourceFile = aSourceFile;
	      // If aSourceFile is omitted, we will use the file property of the SourceMap
	      if (aSourceFile == null) {
	        if (aSourceMapConsumer.file == null) {
	          throw new Error(
	            'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
	            'or the source map\'s "file" property. Both were omitted.'
	          );
	        }
	        sourceFile = aSourceMapConsumer.file;
	      }
	      var sourceRoot = this._sourceRoot;
	      // Make "sourceFile" relative if an absolute Url is passed.
	      if (sourceRoot != null) {
	        sourceFile = util.relative(sourceRoot, sourceFile);
	      }
	      // Applying the SourceMap can add and remove items from the sources and
	      // the names array.
	      var newSources = new ArraySet();
	      var newNames = new ArraySet();

	      // Find mappings for the "sourceFile"
	      this._mappings.unsortedForEach(function (mapping) {
	        if (mapping.source === sourceFile && mapping.originalLine != null) {
	          // Check if it can be mapped by the source map, then update the mapping.
	          var original = aSourceMapConsumer.originalPositionFor({
	            line: mapping.originalLine,
	            column: mapping.originalColumn
	          });
	          if (original.source != null) {
	            // Copy mapping
	            mapping.source = original.source;
	            if (aSourceMapPath != null) {
	              mapping.source = util.join(aSourceMapPath, mapping.source)
	            }
	            if (sourceRoot != null) {
	              mapping.source = util.relative(sourceRoot, mapping.source);
	            }
	            mapping.originalLine = original.line;
	            mapping.originalColumn = original.column;
	            if (original.name != null) {
	              mapping.name = original.name;
	            }
	          }
	        }

	        var source = mapping.source;
	        if (source != null && !newSources.has(source)) {
	          newSources.add(source);
	        }

	        var name = mapping.name;
	        if (name != null && !newNames.has(name)) {
	          newNames.add(name);
	        }

	      }, this);
	      this._sources = newSources;
	      this._names = newNames;

	      // Copy sourcesContents of applied map.
	      aSourceMapConsumer.sources.forEach(function (sourceFile) {
	        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	        if (content != null) {
	          if (aSourceMapPath != null) {
	            sourceFile = util.join(aSourceMapPath, sourceFile);
	          }
	          if (sourceRoot != null) {
	            sourceFile = util.relative(sourceRoot, sourceFile);
	          }
	          this.setSourceContent(sourceFile, content);
	        }
	      }, this);
	    };

	  /**
	   * A mapping can have one of the three levels of data:
	   *
	   *   1. Just the generated position.
	   *   2. The Generated position, original position, and original source.
	   *   3. Generated and original position, original source, as well as a name
	   *      token.
	   *
	   * To maintain consistency, we validate that any new mapping being added falls
	   * in to one of these categories.
	   */
	  SourceMapGenerator.prototype._validateMapping =
	    function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
	                                                aName) {
	      if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	          && aGenerated.line > 0 && aGenerated.column >= 0
	          && !aOriginal && !aSource && !aName) {
	        // Case 1.
	        return;
	      }
	      else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	               && aOriginal && 'line' in aOriginal && 'column' in aOriginal
	               && aGenerated.line > 0 && aGenerated.column >= 0
	               && aOriginal.line > 0 && aOriginal.column >= 0
	               && aSource) {
	        // Cases 2 and 3.
	        return;
	      }
	      else {
	        throw new Error('Invalid mapping: ' + JSON.stringify({
	          generated: aGenerated,
	          source: aSource,
	          original: aOriginal,
	          name: aName
	        }));
	      }
	    };

	  /**
	   * Serialize the accumulated mappings in to the stream of base 64 VLQs
	   * specified by the source map format.
	   */
	  SourceMapGenerator.prototype._serializeMappings =
	    function SourceMapGenerator_serializeMappings() {
	      var previousGeneratedColumn = 0;
	      var previousGeneratedLine = 1;
	      var previousOriginalColumn = 0;
	      var previousOriginalLine = 0;
	      var previousName = 0;
	      var previousSource = 0;
	      var result = '';
	      var mapping;
	      var nameIdx;
	      var sourceIdx;

	      var mappings = this._mappings.toArray();
	      for (var i = 0, len = mappings.length; i < len; i++) {
	        mapping = mappings[i];

	        if (mapping.generatedLine !== previousGeneratedLine) {
	          previousGeneratedColumn = 0;
	          while (mapping.generatedLine !== previousGeneratedLine) {
	            result += ';';
	            previousGeneratedLine++;
	          }
	        }
	        else {
	          if (i > 0) {
	            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
	              continue;
	            }
	            result += ',';
	          }
	        }

	        result += base64VLQ.encode(mapping.generatedColumn
	                                   - previousGeneratedColumn);
	        previousGeneratedColumn = mapping.generatedColumn;

	        if (mapping.source != null) {
	          sourceIdx = this._sources.indexOf(mapping.source);
	          result += base64VLQ.encode(sourceIdx - previousSource);
	          previousSource = sourceIdx;

	          // lines are stored 0-based in SourceMap spec version 3
	          result += base64VLQ.encode(mapping.originalLine - 1
	                                     - previousOriginalLine);
	          previousOriginalLine = mapping.originalLine - 1;

	          result += base64VLQ.encode(mapping.originalColumn
	                                     - previousOriginalColumn);
	          previousOriginalColumn = mapping.originalColumn;

	          if (mapping.name != null) {
	            nameIdx = this._names.indexOf(mapping.name);
	            result += base64VLQ.encode(nameIdx - previousName);
	            previousName = nameIdx;
	          }
	        }
	      }

	      return result;
	    };

	  SourceMapGenerator.prototype._generateSourcesContent =
	    function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
	      return aSources.map(function (source) {
	        if (!this._sourcesContents) {
	          return null;
	        }
	        if (aSourceRoot != null) {
	          source = util.relative(aSourceRoot, source);
	        }
	        var key = util.toSetString(source);
	        return Object.prototype.hasOwnProperty.call(this._sourcesContents,
	                                                    key)
	          ? this._sourcesContents[key]
	          : null;
	      }, this);
	    };

	  /**
	   * Externalize the source map.
	   */
	  SourceMapGenerator.prototype.toJSON =
	    function SourceMapGenerator_toJSON() {
	      var map = {
	        version: this._version,
	        sources: this._sources.toArray(),
	        names: this._names.toArray(),
	        mappings: this._serializeMappings()
	      };
	      if (this._file != null) {
	        map.file = this._file;
	      }
	      if (this._sourceRoot != null) {
	        map.sourceRoot = this._sourceRoot;
	      }
	      if (this._sourcesContents) {
	        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
	      }

	      return map;
	    };

	  /**
	   * Render the source map being generated to a string.
	   */
	  SourceMapGenerator.prototype.toString =
	    function SourceMapGenerator_toString() {
	      return JSON.stringify(this.toJSON());
	    };

	  exports.SourceMapGenerator = SourceMapGenerator;
	}


/***/ },
/* 1350 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * Copyright 2009-2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE.txt or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	exports.SourceMapGenerator = __webpack_require__(1349).SourceMapGenerator;
	exports.SourceMapConsumer = __webpack_require__(2573).SourceMapConsumer;
	exports.SourceNode = __webpack_require__(2574).SourceNode;


/***/ },
/* 1351 */
734,
/* 1352 */
512,
/* 1353 */
513,
/* 1354 */
[7064, 2590, 2584, 2591, 760, 1353, 521, 2588, 1356, 522, 431],
/* 1355 */
738,
/* 1356 */
[7069, 522, 1353, 431],
/* 1357 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("classConstructorCall");
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1358 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("classProperties");
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1359 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("decorators");
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1360 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("doExpressions");
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1361 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("exponentiationOperator");
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1362 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("exportExtensions");
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1363 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("functionBind");
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1364 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("objectRestSpread");
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1365 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("trailingFunctionCommas");
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1366 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(53)["default"];

	exports.__esModule = true;

	var _babelHelperRemapAsyncToGenerator = __webpack_require__(2605);

	var _babelHelperRemapAsyncToGenerator2 = _interopRequireDefault(_babelHelperRemapAsyncToGenerator);

	exports["default"] = function () {
	  return {
	    inherits: __webpack_require__(523),

	    visitor: {
	      Function: function Function(path, state) {
	        if (!path.node.async || path.node.generator) return;

	        _babelHelperRemapAsyncToGenerator2["default"](path, state.addHelper("asyncToGenerator"));
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1367 */
[7086, 1401, 53, 35, 2631, 2634, 349, 2608, 40],
/* 1368 */
[7162, 2633],
/* 1369 */
[7164, 2624, 432],
/* 1370 */
[7185, 1368, 1369, 433, 2629],
/* 1371 */
[7088, 288],
/* 1372 */
1316,
/* 1373 */
[7101, 35, 40],
/* 1374 */
[7105, 288],
/* 1375 */
1295,
/* 1376 */
1323,
/* 1377 */
[7133, 2681, 527],
/* 1378 */
[7149, 2704],
/* 1379 */
[7160, 2685],
/* 1380 */
[7162, 2699],
/* 1381 */
[7173, 769, 525],
/* 1382 */
[7182, 2679, 1377, 2688],
/* 1383 */
[7026, 2705],
/* 1384 */
[7123, 1399, 35, 40],
/* 1385 */
1295,
/* 1386 */
746,
/* 1387 */
[7137, 2748],
/* 1388 */
[7139, 1387, 529],
/* 1389 */
[7140, 184],
/* 1390 */
[7142, 2736, 130, 183],
/* 1391 */
1334,
/* 1392 */
[7160, 1391],
/* 1393 */
[7165, 774, 775, 130],
/* 1394 */
[7166, 185, 184],
/* 1395 */
[7167, 130],
/* 1396 */
[7170, 2742, 185],
/* 1397 */
[7186, 776, 185, 775, 351, 130],
/* 1398 */
1345,
/* 1399 */
[7031, 2782],
/* 1400 */
[7036, 2787],
/* 1401 */
[7038, 2789],
/* 1402 */
536,
/* 1403 */
[7053, 2797],
/* 1404 */
[7056, 779],
/* 1405 */
[7059, 435, 109],
/* 1406 */
[7064, 1407, 530, 1408, 781, 780, 532, 2798, 784, 109, 352],
/* 1407 */
1305,
/* 1408 */
[7067, 781],
/* 1409 */
[7070, 531],
/* 1410 */
740,
/* 1411 */
[7086, 798, 18, 6, 2841, 2844, 438, 2818, 11],
/* 1412 */
[7162, 2843],
/* 1413 */
[7164, 2834, 436],
/* 1414 */
[7185, 1412, 1413, 437, 2839],
/* 1415 */
[7088, 99],
/* 1416 */
1316,
/* 1417 */
[7101, 6, 11],
/* 1418 */
[7105, 99],
/* 1419 */
1295,
/* 1420 */
1323,
/* 1421 */
[7133, 2891, 535],
/* 1422 */
[7149, 2914],
/* 1423 */
[7160, 2895],
/* 1424 */
[7162, 2909],
/* 1425 */
[7173, 793, 533],
/* 1426 */
[7182, 2889, 1421, 2898],
/* 1427 */
[7026, 2915],
/* 1428 */
[7035, 2930],
/* 1429 */
[7053, 2941],
/* 1430 */
[7056, 801],
/* 1431 */
[7059, 440, 110],
/* 1432 */
[7064, 1433, 537, 1434, 803, 802, 539, 2942, 806, 110, 355],
/* 1433 */
1305,
/* 1434 */
[7067, 803],
/* 1435 */
[7070, 538],
/* 1436 */
740,
/* 1437 */
[7123, 796, 6, 11],
/* 1438 */
[7088, 99],
/* 1439 */
1316,
/* 1440 */
[7101, 6, 11],
/* 1441 */
[7105, 99],
/* 1442 */
[7026, 3005],
/* 1443 */
1295,
/* 1444 */
[7024, 3007, 1443, 3008],
/* 1445 */
1323,
/* 1446 */
746,
/* 1447 */
[7133, 3021, 356],
/* 1448 */
[7137, 3038],
/* 1449 */
[7139, 1448, 356],
/* 1450 */
[7140, 190],
/* 1451 */
[7141, 3046],
/* 1452 */
[7142, 3024, 131, 189],
/* 1453 */
1334,
/* 1454 */
[7166, 162, 190],
/* 1455 */
[7167, 131],
/* 1456 */
[7170, 3030, 162],
/* 1457 */
[7171, 3020, 540, 542],
/* 1458 */
[7180, 189],
/* 1459 */
[7182, 3018, 1447, 3036],
/* 1460 */
[7186, 815, 162, 814, 291, 131],
/* 1461 */
1345,
/* 1462 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Symbol = __webpack_require__(816)["default"];

	var _getIterator = __webpack_require__(83)["default"];

	var _interopRequireDefault = __webpack_require__(69)["default"];

	exports.__esModule = true;

	var _babelTemplate = __webpack_require__(3105);

	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

	var buildWrapper = _babelTemplate2["default"]("\n  let CLASS_REF = CLASS;\n  var CALL_REF = CALL;\n  var WRAPPER_REF = function (...args) {\n    if (this instanceof WRAPPER_REF) {\n      return Reflect.construct(CLASS_REF, args);\n    } else {\n      return CALL_REF.apply(this, args);\n    }\n  };\n  WRAPPER_REF.__proto__ = CLASS_REF;\n  WRAPPER_REF;\n");

	exports["default"] = function (_ref2) {
	  var t = _ref2.types;

	  var ALREADY_VISITED = _Symbol();

	  function findConstructorCall(path) /*: ?Object*/ {
	    var methods /*: Array<Object>*/ = path.get("body.body");

	    for (var _iterator = methods, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var method = _ref;

	      if (method.node.kind === "constructorCall") {
	        return method;
	      }
	    }

	    return null;
	  }

	  function handleClassWithCall(constructorCall, classPath) {
	    var _classPath = classPath;
	    var node = _classPath.node;

	    var ref = node.id || classPath.scope.generateUidIdentifier("class");

	    if (classPath.parentPath.isExportDefaultDeclaration()) {
	      classPath = classPath.parentPath;
	      classPath.insertAfter(t.exportDefaultDeclaration(ref));
	    }

	    classPath.replaceWithMultiple(buildWrapper({
	      CLASS_REF: classPath.scope.generateUidIdentifier(ref.name),
	      CALL_REF: classPath.scope.generateUidIdentifier(ref.name + "Call"),
	      CALL: t.functionExpression(null, constructorCall.node.params, constructorCall.node.body),
	      CLASS: t.toExpression(node),
	      WRAPPER_REF: ref
	    }));

	    constructorCall.remove();
	  }

	  return {
	    inherits: __webpack_require__(1357),

	    visitor: {
	      Class: function Class(path) {
	        if (path.node[ALREADY_VISITED]) return;
	        path.node[ALREADY_VISITED] = true;

	        var constructorCall = findConstructorCall(path);

	        if (constructorCall) {
	          handleClassWithCall(constructorCall, path);
	        } else {
	          return;
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1463 */
[7031, 3073],
/* 1464 */
[7036, 3078],
/* 1465 */
536,
/* 1466 */
[7053, 3088],
/* 1467 */
[7056, 819],
/* 1468 */
[7059, 442, 111],
/* 1469 */
[7064, 1470, 543, 1471, 821, 820, 545, 3089, 824, 111, 357],
/* 1470 */
1305,
/* 1471 */
[7067, 821],
/* 1472 */
[7070, 544],
/* 1473 */
740,
/* 1474 */
[7088, 292],
/* 1475 */
1316,
/* 1476 */
[7101, 45, 59],
/* 1477 */
[7105, 292],
/* 1478 */
1295,
/* 1479 */
[7026, 3144],
/* 1480 */
[7123, 1463, 45, 59],
/* 1481 */
1295,
/* 1482 */
745,
/* 1483 */
1322,
/* 1484 */
1323,
/* 1485 */
746,
/* 1486 */
[7133, 3171, 359],
/* 1487 */
[7135, 3166, 1485, 1486, 1489, 3196, 3197, 3198, 155, 132],
/* 1488 */
[7137, 3187],
/* 1489 */
[7139, 1488, 359],
/* 1490 */
[7141, 3195],
/* 1491 */
[7142, 3174, 132, 194],
/* 1492 */
1334,
/* 1493 */
1335,
/* 1494 */
[7167, 132],
/* 1495 */
[7171, 1487, 443, 548],
/* 1496 */
[7180, 194],
/* 1497 */
[7182, 3169, 1486, 3185],
/* 1498 */
[7186, 549, 155, 547, 193, 132],
/* 1499 */
1345,
/* 1500 */
/***/ function(module, exports, __webpack_require__) {

	// todo: define instead of assign

	"use strict";

	var _getIterator = __webpack_require__(3213)["default"];

	exports.__esModule = true;

	exports["default"] = function (_ref2) {
	  var t = _ref2.types;

	  var findBareSupers = {
	    Super: function Super(path) {
	      if (path.parentPath.isCallExpression({ callee: path.node })) {
	        this.push(path.parentPath);
	      }
	    }
	  };

	  var referenceVisitor = {
	    ReferencedIdentifier: function ReferencedIdentifier(path) {
	      if (this.scope.hasOwnBinding(path.node.name)) {
	        this.collision = true;
	        path.skip();
	      }
	    }
	  };

	  return {
	    inherits: __webpack_require__(1358),

	    visitor: {
	      Class: function Class(path) {
	        var isDerived = !!path.node.superClass;
	        var constructor = undefined;
	        var props = [];
	        var body = path.get("body");

	        for (var _iterator = body.get("body"), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	          var _ref;

	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }

	          var _path = _ref;

	          if (_path.isClassProperty()) {
	            props.push(_path);
	          } else if (_path.isClassMethod({ kind: "constructor" })) {
	            constructor = _path;
	          }
	        }

	        if (!props.length) return;

	        var nodes = [];
	        var ref = undefined;

	        if (path.isClassExpression() || !path.node.id) {
	          ref = path.scope.generateUidIdentifier("class");
	        } else {
	          // path.isClassDeclaration() && path.node.id
	          ref = path.node.id;
	        }

	        var instanceBody = [];

	        for (var _i2 = 0; _i2 < props.length; _i2++) {
	          var prop = props[_i2];
	          var propNode = prop.node;
	          if (propNode.decorators && propNode.decorators.length > 0) continue;
	          if (!propNode.value) continue;

	          var isStatic = propNode["static"];

	          if (isStatic) {
	            nodes.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(ref, propNode.key), propNode.value)));
	          } else {
	            instanceBody.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(t.thisExpression(), propNode.key), propNode.value)));
	          }
	        }

	        if (instanceBody.length) {
	          if (!constructor) {
	            var newConstructor = t.classMethod("constructor", t.identifier("constructor"), [], t.blockStatement([]));
	            if (isDerived) {
	              newConstructor.params = [t.restElement(t.identifier("args"))];
	              newConstructor.body.body.push(t.returnStatement(t.callExpression(t["super"](), [t.spreadElement(t.identifier("args"))])));
	            }

	            var _body$unshiftContainer = body.unshiftContainer("body", newConstructor);

	            constructor = _body$unshiftContainer[0];
	          }

	          var collisionState = {
	            collision: false,
	            scope: constructor.scope
	          };

	          for (var _i3 = 0; _i3 < props.length; _i3++) {
	            var prop = props[_i3];
	            prop.traverse(referenceVisitor, collisionState);
	            if (collisionState.collision) break;
	          }

	          if (collisionState.collision) {
	            var initialisePropsRef = path.scope.generateUidIdentifier("initialiseProps");

	            nodes.push(t.variableDeclaration("var", [t.variableDeclarator(initialisePropsRef, t.functionExpression(null, [], t.blockStatement(instanceBody)))]));

	            instanceBody = [t.expressionStatement(t.callExpression(t.memberExpression(initialisePropsRef, t.identifier("call")), [t.thisExpression()]))];
	          }

	          //

	          if (isDerived) {
	            var bareSupers = [];
	            constructor.traverse(findBareSupers, bareSupers);
	            for (var _i4 = 0; _i4 < bareSupers.length; _i4++) {
	              var bareSuper = bareSupers[_i4];
	              bareSuper.insertAfter(instanceBody);
	            }
	          } else {
	            constructor.get("body").unshiftContainer("body", instanceBody);
	          }
	        }

	        for (var _i5 = 0; _i5 < props.length; _i5++) {
	          var prop = props[_i5];
	          prop.remove();
	        }

	        if (!nodes.length) return;

	        if (path.isClassExpression()) {
	          path.scope.push({ id: ref });
	          path.replaceWith(t.assignmentExpression("=", ref, path.node));
	        } else {
	          // path.isClassDeclaration()
	          if (!path.node.id) {
	            path.node.id = ref;
	          }

	          if (path.parentPath.isExportDeclaration()) {
	            path = path.parentPath;
	          }
	        }

	        path.insertAfter(nodes);
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1501 */
734,
/* 1502 */
512,
/* 1503 */
513,
/* 1504 */
[7064, 3227, 3221, 3228, 837, 1503, 550, 3225, 1506, 551, 444],
/* 1505 */
738,
/* 1506 */
[7069, 551, 1503, 444],
/* 1507 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(19)["default"];

	var _Object$create = __webpack_require__(552)["default"];

	var _interopRequireDefault = __webpack_require__(20)["default"];

	exports.__esModule = true;

	var _babelTemplate = __webpack_require__(3282);

	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

	var _babelHelperExplodeClass = __webpack_require__(3239);

	var _babelHelperExplodeClass2 = _interopRequireDefault(_babelHelperExplodeClass);

	var buildClassDecorator = _babelTemplate2["default"]("\n  CLASS_REF = DECORATOR(CLASS_REF) || CLASS_REF;\n");

	exports["default"] = function (_ref5) {
	  var t = _ref5.types;

	  function cleanDecorators(decorators) {
	    return decorators.reverse().map(function (dec) {
	      return dec.expression;
	    });
	  }

	  function transformClass(path, ref, state) {
	    var nodes = [];

	    state;

	    var classDecorators = path.node.decorators;
	    if (classDecorators) {
	      path.node.decorators = null;
	      classDecorators = cleanDecorators(classDecorators);

	      for (var _iterator = classDecorators, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	        var _ref;

	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }

	        var decorator = _ref;

	        nodes.push(buildClassDecorator({
	          CLASS_REF: ref,
	          DECORATOR: decorator
	        }));
	      }
	    }

	    var map = _Object$create(null);

	    for (var _iterator2 = path.get("body.body"), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var method = _ref2;

	      var decorators = method.node.decorators;
	      if (!decorators) continue;

	      var alias = t.toKeyAlias(method.node);
	      map[alias] = map[alias] || [];
	      map[alias].push(method.node);

	      method.remove();
	    }

	    for (var alias in map) {
	      var items = map[alias];

	      items;
	    }

	    return nodes;
	  }

	  function hasDecorators(path) {
	    if (path.isClass()) {
	      if (path.node.decorators) return true;

	      for (var _iterator3 = (path.node.body.body /*: Array<Object>*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	        var _ref3;

	        if (_isArray3) {
	          if (_i3 >= _iterator3.length) break;
	          _ref3 = _iterator3[_i3++];
	        } else {
	          _i3 = _iterator3.next();
	          if (_i3.done) break;
	          _ref3 = _i3.value;
	        }

	        var method = _ref3;

	        if (method.decorators) {
	          return true;
	        }
	      }
	    } else if (path.isObjectExpression()) {
	      for (var _iterator4 = (path.node.properties /*: Array<Object>*/), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	        var _ref4;

	        if (_isArray4) {
	          if (_i4 >= _iterator4.length) break;
	          _ref4 = _iterator4[_i4++];
	        } else {
	          _i4 = _iterator4.next();
	          if (_i4.done) break;
	          _ref4 = _i4.value;
	        }

	        var prop = _ref4;

	        if (prop.decorators) {
	          return true;
	        }
	      }
	    }

	    return false;
	  }

	  function doError(path) {
	    throw path.buildCodeFrameError("Decorators are not supported yet in 6.x pending proposal update.");
	  }

	  return {
	    inherits: __webpack_require__(1359),

	    visitor: {
	      ClassExpression: function ClassExpression(path) {
	        if (!hasDecorators(path)) return;
	        doError(path);

	        _babelHelperExplodeClass2["default"](path);

	        var ref = path.scope.generateDeclaredUidIdentifier("ref");
	        var nodes = [];

	        nodes.push(t.assignmentExpression("=", ref, path.node));

	        nodes = nodes.concat(transformClass(path, ref, this));

	        nodes.push(ref);

	        path.replaceWith(t.sequenceExpression(nodes));
	      },

	      ClassDeclaration: function ClassDeclaration(path) {
	        if (!hasDecorators(path)) return;
	        doError(path);
	        _babelHelperExplodeClass2["default"](path);

	        var ref = path.node.id;
	        var nodes = [];

	        nodes = nodes.concat(transformClass(path, ref, this).map(function (expr) {
	          return t.expressionStatement(expr);
	        }));
	        nodes.push(t.expressionStatement(ref));

	        path.insertAfter(nodes);
	      },

	      ObjectExpression: function ObjectExpression(path) {
	        if (!hasDecorators(path)) return;
	        doError(path);
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1508 */
[7035, 3254],
/* 1509 */
[7053, 3265],
/* 1510 */
[7056, 842],
/* 1511 */
[7059, 445, 112],
/* 1512 */
[7064, 1513, 554, 1514, 844, 843, 556, 3266, 847, 112, 360],
/* 1513 */
1305,
/* 1514 */
[7067, 844],
/* 1515 */
[7070, 555],
/* 1516 */
740,
/* 1517 */
[7088, 100],
/* 1518 */
1316,
/* 1519 */
[7101, 7, 13],
/* 1520 */
[7105, 100],
/* 1521 */
1295,
/* 1522 */
[7026, 3321],
/* 1523 */
745,
/* 1524 */
1323,
/* 1525 */
[7133, 3328, 559],
/* 1526 */
[7135, 3324, 3325, 1525, 3330, 3342, 3343, 3344, 295, 362],
/* 1527 */
[7160, 3333],
/* 1528 */
[7162, 3351],
/* 1529 */
[7182, 3327, 1525, 3338],
/* 1530 */
[7123, 552, 7, 13],
/* 1531 */
[7088, 100],
/* 1532 */
1316,
/* 1533 */
[7101, 7, 13],
/* 1534 */
[7105, 100],
/* 1535 */
[7026, 3405],
/* 1536 */
1295,
/* 1537 */
[7024, 3407, 1536, 3408],
/* 1538 */
1323,
/* 1539 */
746,
/* 1540 */
[7133, 3421, 363],
/* 1541 */
[7137, 3438],
/* 1542 */
[7139, 1541, 363],
/* 1543 */
[7140, 199],
/* 1544 */
[7141, 3446],
/* 1545 */
[7142, 3424, 133, 198],
/* 1546 */
1334,
/* 1547 */
[7166, 163, 199],
/* 1548 */
[7167, 133],
/* 1549 */
[7170, 3430, 163],
/* 1550 */
[7171, 3420, 560, 562],
/* 1551 */
[7180, 198],
/* 1552 */
[7182, 3418, 1540, 3436],
/* 1553 */
[7186, 864, 163, 863, 297, 133],
/* 1554 */
1345,
/* 1555 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    inherits: __webpack_require__(1360),

	    visitor: {
	      DoExpression: function DoExpression(path) {
	        var body = path.node.body.body;
	        if (body.length) {
	          path.replaceWithMultiple(body);
	        } else {
	          path.replaceWith(path.scope.buildUndefinedNode());
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1556 */
734,
/* 1557 */
512,
/* 1558 */
513,
/* 1559 */
[7064, 3477, 3471, 3478, 869, 1558, 563, 3475, 1561, 564, 448],
/* 1560 */
738,
/* 1561 */
[7069, 564, 1558, 448],
/* 1562 */
[7036, 3505],
/* 1563 */
536,
/* 1564 */
[7053, 3515],
/* 1565 */
[7056, 875],
/* 1566 */
[7059, 449, 113],
/* 1567 */
[7064, 1568, 565, 1569, 877, 876, 567, 3516, 880, 113, 364],
/* 1568 */
1305,
/* 1569 */
[7067, 877],
/* 1570 */
[7070, 566],
/* 1571 */
740,
/* 1572 */
[7088, 200],
/* 1573 */
1316,
/* 1574 */
[7101, 38, 46],
/* 1575 */
[7105, 200],
/* 1576 */
1295,
/* 1577 */
[7026, 3573],
/* 1578 */
[7123, 871, 38, 46],
/* 1579 */
1295,
/* 1580 */
1322,
/* 1581 */
1323,
/* 1582 */
746,
/* 1583 */
[7133, 3600, 365],
/* 1584 */
[7135, 3595, 1582, 1583, 1586, 3625, 3626, 3627, 156, 134],
/* 1585 */
[7137, 3616],
/* 1586 */
[7139, 1585, 365],
/* 1587 */
[7141, 3624],
/* 1588 */
[7142, 3603, 134, 204],
/* 1589 */
1334,
/* 1590 */
1335,
/* 1591 */
[7167, 134],
/* 1592 */
[7171, 1584, 450, 570],
/* 1593 */
[7180, 204],
/* 1594 */
[7186, 571, 156, 569, 203, 134],
/* 1595 */
[7188, 3610, 365],
/* 1596 */
1345,
/* 1597 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _classCallCheck = __webpack_require__(157)["default"];

	var _getIterator = __webpack_require__(84)["default"];

	var _interopRequireDefault = __webpack_require__(39)["default"];

	var _interopRequireWildcard = __webpack_require__(28)["default"];

	exports.__esModule = true;

	var _babelTraverse = __webpack_require__(300);

	var _babelHelperReplaceSupers = __webpack_require__(3669);

	var _babelHelperReplaceSupers2 = _interopRequireDefault(_babelHelperReplaceSupers);

	var _babelHelperOptimiseCallExpression = __webpack_require__(1601);

	var _babelHelperOptimiseCallExpression2 = _interopRequireDefault(_babelHelperOptimiseCallExpression);

	var _babelHelperDefineMap = __webpack_require__(3643);

	var defineMap = _interopRequireWildcard(_babelHelperDefineMap);

	var _babelTemplate = __webpack_require__(1613);

	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

	var _babelTypes = __webpack_require__(31);

	var t = _interopRequireWildcard(_babelTypes);

	/*:: import type { NodePath } from "babel-traverse";*/

	var buildDerivedConstructor = _babelTemplate2["default"]("\n  (function () {\n    super(...arguments);\n  })\n");

	var noMethodVisitor = {
	  "FunctionExpression|FunctionDeclaration": function FunctionExpressionFunctionDeclaration(path) {
	    if (!path.is("shadow")) {
	      path.skip();
	    }
	  },

	  Method: function Method(path) {
	    path.skip();
	  }
	};

	var verifyConstructorVisitor = _babelTraverse.visitors.merge([noMethodVisitor, {
	  Super: function Super(path) {
	    if (this.isDerived && !this.hasBareSuper && !path.parentPath.isCallExpression({ callee: path.node })) {
	      throw path.buildCodeFrameError("'super.*' is not allowed before super()");
	    }
	  },

	  CallExpression: {
	    exit: function exit(path) {
	      if (path.get("callee").isSuper()) {
	        this.hasBareSuper = true;

	        if (!this.isDerived) {
	          throw path.buildCodeFrameError("super() is only allowed in a derived constructor");
	        }
	      }
	    }
	  },

	  ThisExpression: function ThisExpression(path) {
	    if (this.isDerived && !this.hasBareSuper) {
	      if (!path.inShadow("this")) {
	        throw path.buildCodeFrameError("'this' is not allowed before super()");
	      }
	    }
	  }
	}]);

	var findThisesVisitor = _babelTraverse.visitors.merge([noMethodVisitor, {
	  ThisExpression: function ThisExpression(path) {
	    this.superThises.push(path);
	  }
	}]);

	var ClassTransformer = (function () {
	  function ClassTransformer(path /*: NodePath*/, file) {
	    _classCallCheck(this, ClassTransformer);

	    this.parent = path.parent;
	    this.scope = path.scope;
	    this.node = path.node;
	    this.path = path;
	    this.file = file;

	    this.clearDescriptors();

	    this.instancePropBody = [];
	    this.instancePropRefs = {};
	    this.staticPropBody = [];
	    this.body = [];

	    this.bareSuperAfter = [];
	    this.bareSupers = [];

	    this.pushedConstructor = false;
	    this.pushedInherits = false;
	    this.isLoose = false;

	    this.superThises = [];

	    // class id
	    this.classId = this.node.id;

	    // this is the name of the binding that will **always** reference the class we've constructed
	    this.classRef = this.node.id || this.scope.generateUidIdentifier("class");

	    this.superName = this.node.superClass || t.identifier("Function");
	    this.isDerived = !!this.node.superClass;
	  }

	  ClassTransformer.prototype.run = function run() {
	    // istanbul ignore next

	    var _this = this;

	    var superName = this.superName;
	    var file = this.file;
	    var body = this.body;

	    //

	    var constructorBody = this.constructorBody = t.blockStatement([]);
	    this.constructor = this.buildConstructor();

	    //

	    var closureParams = [];
	    var closureArgs = [];

	    //
	    if (this.isDerived) {
	      closureArgs.push(superName);

	      superName = this.scope.generateUidIdentifierBasedOnNode(superName);
	      closureParams.push(superName);

	      this.superName = superName;
	    }

	    //
	    this.buildBody();

	    // make sure this class isn't directly called
	    constructorBody.body.unshift(t.expressionStatement(t.callExpression(file.addHelper("classCallCheck"), [t.thisExpression(), this.classRef])));

	    body = body.concat(this.staticPropBody.map(function (fn) {
	      return fn(_this.classRef);
	    }));

	    if (this.classId) {
	      // named class with only a constructor
	      if (body.length === 1) return t.toExpression(body[0]);
	    }

	    //
	    body.push(t.returnStatement(this.classRef));

	    var container = t.functionExpression(null, closureParams, t.blockStatement(body));
	    container.shadow = true;
	    return t.callExpression(container, closureArgs);
	  };

	  ClassTransformer.prototype.buildConstructor = function buildConstructor() {
	    var func = t.functionDeclaration(this.classRef, [], this.constructorBody);
	    t.inherits(func, this.node);
	    return func;
	  };

	  ClassTransformer.prototype.pushToMap = function pushToMap(node, enumerable, kind, scope /*:: ?*/) {
	    if (kind === undefined) kind = "value";

	    var mutatorMap = undefined;
	    if (node["static"]) {
	      this.hasStaticDescriptors = true;
	      mutatorMap = this.staticMutatorMap;
	    } else {
	      this.hasInstanceDescriptors = true;
	      mutatorMap = this.instanceMutatorMap;
	    }

	    var map = defineMap.push(mutatorMap, node, kind, this.file, scope);

	    if (enumerable) {
	      map.enumerable = t.booleanLiteral(true);
	    }

	    return map;
	  };

	  /**
	   * [Please add a description.]
	   * https://www.youtube.com/watch?v=fWNaR-rxAic
	   */

	  ClassTransformer.prototype.constructorMeMaybe = function constructorMeMaybe() {
	    var hasConstructor = false;
	    var paths = this.path.get("body.body");
	    for (var _iterator = (paths /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var path = _ref;

	      hasConstructor = path.equals("kind", "constructor");
	      if (hasConstructor) break;
	    }
	    if (hasConstructor) return;

	    var params = undefined,
	        body = undefined;

	    if (this.isDerived) {
	      var _constructor = buildDerivedConstructor().expression;
	      params = _constructor.params;
	      body = _constructor.body;
	    } else {
	      params = [];
	      body = t.blockStatement([]);
	    }

	    this.path.get("body").unshiftContainer("body", t.classMethod("constructor", t.identifier("constructor"), params, body));
	  };

	  ClassTransformer.prototype.buildBody = function buildBody() {
	    this.constructorMeMaybe();
	    this.pushBody();
	    this.verifyConstructor();

	    if (this.userConstructor) {
	      var constructorBody = this.constructorBody;
	      constructorBody.body = constructorBody.body.concat(this.userConstructor.body.body);
	      t.inherits(this.constructor, this.userConstructor);
	      t.inherits(constructorBody, this.userConstructor.body);
	    }

	    this.pushDescriptors();
	  };

	  ClassTransformer.prototype.pushBody = function pushBody() {
	    var classBodyPaths /*: Array<Object>*/ = this.path.get("body.body");

	    for (var _iterator2 = classBodyPaths, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var path = _ref2;

	      var node = path.node;

	      if (path.isClassProperty()) {
	        throw path.buildCodeFrameError("Missing class properties transform.");
	      }

	      if (node.decorators) {
	        throw path.buildCodeFrameError("Method has decorators, put the decorator plugin before the classes one.");
	      }

	      if (t.isClassMethod(node)) {
	        var isConstructor = node.kind === "constructor";

	        if (isConstructor) {
	          path.traverse(verifyConstructorVisitor, this);

	          if (!this.hasBareSuper && this.isDerived) {
	            throw path.buildCodeFrameError("missing super() call in constructor");
	          }
	        }

	        var replaceSupers = new _babelHelperReplaceSupers2["default"]({
	          forceSuperMemoisation: isConstructor,
	          methodPath: path,
	          methodNode: node,
	          objectRef: this.classRef,
	          superRef: this.superName,
	          isStatic: node["static"],
	          isLoose: this.isLoose,
	          scope: this.scope,
	          file: this.file
	        }, true);

	        replaceSupers.replace();

	        if (isConstructor) {
	          this.pushConstructor(replaceSupers, node, path);
	        } else {
	          this.pushMethod(node, path);
	        }
	      }
	    }
	  };

	  ClassTransformer.prototype.clearDescriptors = function clearDescriptors() {
	    this.hasInstanceDescriptors = false;
	    this.hasStaticDescriptors = false;

	    this.instanceMutatorMap = {};
	    this.staticMutatorMap = {};
	  };

	  ClassTransformer.prototype.pushDescriptors = function pushDescriptors() {
	    this.pushInherits();

	    var body = this.body;

	    var instanceProps = undefined;
	    var staticProps = undefined;

	    if (this.hasInstanceDescriptors) {
	      instanceProps = defineMap.toClassObject(this.instanceMutatorMap);
	    }

	    if (this.hasStaticDescriptors) {
	      staticProps = defineMap.toClassObject(this.staticMutatorMap);
	    }

	    if (instanceProps || staticProps) {
	      if (instanceProps) instanceProps = defineMap.toComputedObjectFromClass(instanceProps);
	      if (staticProps) staticProps = defineMap.toComputedObjectFromClass(staticProps);

	      var nullNode = t.nullLiteral();

	      // (Constructor, instanceDescriptors, staticDescriptors, instanceInitializers, staticInitializers)
	      var args = [this.classRef, nullNode, nullNode, nullNode, nullNode];

	      if (instanceProps) args[1] = instanceProps;
	      if (staticProps) args[2] = staticProps;

	      if (this.instanceInitializersId) {
	        args[3] = this.instanceInitializersId;
	        body.unshift(this.buildObjectAssignment(this.instanceInitializersId));
	      }

	      if (this.staticInitializersId) {
	        args[4] = this.staticInitializersId;
	        body.unshift(this.buildObjectAssignment(this.staticInitializersId));
	      }

	      var lastNonNullIndex = 0;
	      for (var i = 0; i < args.length; i++) {
	        if (args[i] !== nullNode) lastNonNullIndex = i;
	      }
	      args = args.slice(0, lastNonNullIndex + 1);

	      body.push(t.expressionStatement(t.callExpression(this.file.addHelper("createClass"), args)));
	    }

	    this.clearDescriptors();
	  };

	  ClassTransformer.prototype.buildObjectAssignment = function buildObjectAssignment(id) {
	    return t.variableDeclaration("var", [t.variableDeclarator(id, t.objectExpression([]))]);
	  };

	  ClassTransformer.prototype.wrapSuperCall = function wrapSuperCall(bareSuper, superRef, thisRef, body) {
	    var bareSuperNode = bareSuper.node;

	    if (this.isLoose) {
	      bareSuperNode.arguments.unshift(t.thisExpression());
	      if (bareSuperNode.arguments.length === 2 && t.isSpreadElement(bareSuperNode.arguments[1]) && t.isIdentifier(bareSuperNode.arguments[1].argument, { name: "arguments" })) {
	        // special case single arguments spread
	        bareSuperNode.arguments[1] = bareSuperNode.arguments[1].argument;
	        bareSuperNode.callee = t.memberExpression(superRef, t.identifier("apply"));
	      } else {
	        bareSuperNode.callee = t.memberExpression(superRef, t.identifier("call"));
	      }
	    } else {
	      bareSuperNode = _babelHelperOptimiseCallExpression2["default"](t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("getPrototypeOf")), [this.classRef]), t.thisExpression(), bareSuperNode.arguments);
	    }

	    var call = t.callExpression(this.file.addHelper("possibleConstructorReturn"), [t.thisExpression(), bareSuperNode]);

	    var bareSuperAfter = this.bareSuperAfter.map(function (fn) {
	      return fn(thisRef);
	    });

	    if (bareSuper.parentPath.isExpressionStatement() && bareSuper.parentPath.container === body.node.body && body.node.body.length - 1 === bareSuper.parentPath.key) {
	      // this super call is the last statement in the body so we can just straight up
	      // turn it into a return

	      if (this.superThises.length || bareSuperAfter.length) {
	        bareSuper.scope.push({ id: thisRef });
	        call = t.assignmentExpression("=", thisRef, call);
	      }

	      if (bareSuperAfter.length) {
	        call = t.toSequenceExpression([call].concat(bareSuperAfter, [thisRef]));
	      }

	      bareSuper.parentPath.replaceWith(t.returnStatement(call));
	    } else {
	      bareSuper.replaceWithMultiple([t.variableDeclaration("var", [t.variableDeclarator(thisRef, call)])].concat(bareSuperAfter, [t.expressionStatement(thisRef)]));
	    }
	  };

	  ClassTransformer.prototype.verifyConstructor = function verifyConstructor() {
	    // istanbul ignore next

	    var _this2 = this;

	    if (!this.isDerived) return;

	    var path = this.userConstructorPath;
	    var body = path.get("body");

	    path.traverse(findThisesVisitor, this);

	    var guaranteedSuperBeforeFinish = !!this.bareSupers.length;

	    var superRef = this.superName || t.identifier("Function");
	    var thisRef = path.scope.generateUidIdentifier("this");

	    for (var _iterator3 = this.bareSupers, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	      var _ref3;

	      if (_isArray3) {
	        if (_i3 >= _iterator3.length) break;
	        _ref3 = _iterator3[_i3++];
	      } else {
	        _i3 = _iterator3.next();
	        if (_i3.done) break;
	        _ref3 = _i3.value;
	      }

	      var bareSuper = _ref3;

	      this.wrapSuperCall(bareSuper, superRef, thisRef, body);

	      if (guaranteedSuperBeforeFinish) {
	        bareSuper.find(function (parentPath) {
	          // hit top so short circuit
	          if (parentPath === path) {
	            return true;
	          }

	          if (parentPath.isLoop() || parentPath.isConditional()) {
	            guaranteedSuperBeforeFinish = false;
	            return true;
	          }
	        });
	      }
	    }

	    for (var _iterator4 = this.superThises, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	      var _ref4;

	      if (_isArray4) {
	        if (_i4 >= _iterator4.length) break;
	        _ref4 = _iterator4[_i4++];
	      } else {
	        _i4 = _iterator4.next();
	        if (_i4.done) break;
	        _ref4 = _i4.value;
	      }

	      var thisPath = _ref4;

	      thisPath.replaceWith(thisRef);
	    }

	    var wrapReturn = function wrapReturn(returnArg) {
	      return t.callExpression(_this2.file.addHelper("possibleConstructorReturn"), [thisRef].concat(returnArg || []));
	    };

	    // if we have a return as the last node in the body then we've already caught that
	    // return
	    var bodyPaths = body.get("body");
	    if (bodyPaths.length && !bodyPaths.pop().isReturnStatement()) {
	      body.pushContainer("body", t.returnStatement(guaranteedSuperBeforeFinish ? thisRef : wrapReturn()));
	    }

	    for (var _iterator5 = this.superReturns, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
	      var _ref5;

	      if (_isArray5) {
	        if (_i5 >= _iterator5.length) break;
	        _ref5 = _iterator5[_i5++];
	      } else {
	        _i5 = _iterator5.next();
	        if (_i5.done) break;
	        _ref5 = _i5.value;
	      }

	      var returnPath = _ref5;

	      if (returnPath.node.argument) {
	        var ref = returnPath.scope.generateDeclaredUidIdentifier("ret");
	        returnPath.get("argument").replaceWithMultiple([t.assignmentExpression("=", ref, returnPath.node.argument), wrapReturn(ref)]);
	      } else {
	        returnPath.get("argument").replaceWith(wrapReturn());
	      }
	    }
	  };

	  /**
	   * Push a method to its respective mutatorMap.
	   */

	  ClassTransformer.prototype.pushMethod = function pushMethod(node /*: { type: "ClassMethod" }*/, path /*:: ?: NodePath*/) {
	    var scope = path ? path.scope : this.scope;

	    if (node.kind === "method") {
	      if (this._processMethod(node, scope)) return;
	    }

	    this.pushToMap(node, false, null, scope);
	  };

	  ClassTransformer.prototype._processMethod = function _processMethod() {
	    return false;
	  };

	  /**
	   * Replace the constructor body of our class.
	   */

	  ClassTransformer.prototype.pushConstructor = function pushConstructor(replaceSupers, method /*: { type: "ClassMethod" }*/, path /*: NodePath*/) {
	    this.bareSupers = replaceSupers.bareSupers;
	    this.superReturns = replaceSupers.returns;

	    // https://github.com/babel/babel/issues/1077
	    if (path.scope.hasOwnBinding(this.classRef.name)) {
	      path.scope.rename(this.classRef.name);
	    }

	    var construct = this.constructor;

	    this.userConstructorPath = path;
	    this.userConstructor = method;
	    this.hasConstructor = true;

	    t.inheritsComments(construct, method);

	    construct._ignoreUserWhitespace = true;
	    construct.params = method.params;

	    t.inherits(construct.body, method.body);
	    construct.body.directives = method.body.directives;

	    // push constructor to body
	    this._pushConstructor();
	  };

	  ClassTransformer.prototype._pushConstructor = function _pushConstructor() {
	    if (this.pushedConstructor) return;
	    this.pushedConstructor = true;

	    // we haven't pushed any descriptors yet
	    if (this.hasInstanceDescriptors || this.hasStaticDescriptors) {
	      this.pushDescriptors();
	    }

	    this.body.push(this.constructor);

	    this.pushInherits();
	  };

	  /**
	   * Push inherits helper to body.
	   */

	  ClassTransformer.prototype.pushInherits = function pushInherits() {
	    if (!this.isDerived || this.pushedInherits) return;

	    // Unshift to ensure that the constructor inheritance is set up before
	    // any properties can be assigned to the prototype.
	    this.pushedInherits = true;
	    this.body.unshift(t.expressionStatement(t.callExpression(this.file.addHelper("inherits"), [this.classRef, this.superName])));
	  };

	  return ClassTransformer;
	})();

	exports["default"] = ClassTransformer;
	module.exports = exports["default"];

/***/ },
/* 1598 */
[7160, 3652],
/* 1599 */
[7162, 3663],
/* 1600 */
[7164, 1598, 366],
/* 1601 */
[7194, 28, 31],
/* 1602 */
[7036, 3687],
/* 1603 */
536,
/* 1604 */
[7055, 3691],
/* 1605 */
[7056, 901],
/* 1606 */
[7059, 452, 106],
/* 1607 */
514,
/* 1608 */
[7064, 1609, 451, 1610, 903, 902, 577, 3697, 906, 106, 368],
/* 1609 */
1305,
/* 1610 */
[7067, 903],
/* 1611 */
[7070, 576],
/* 1612 */
740,
/* 1613 */
[7086, 575, 39, 28, 3738, 3741, 300, 3715, 31],
/* 1614 */
[7162, 3740],
/* 1615 */
[7164, 3731, 453],
/* 1616 */
[7185, 1614, 1615, 454, 3736],
/* 1617 */
[7088, 157],
/* 1618 */
1316,
/* 1619 */
[7101, 28, 31],
/* 1620 */
[7105, 157],
/* 1621 */
1295,
/* 1622 */
1323,
/* 1623 */
[7133, 3788, 580],
/* 1624 */
[7149, 3811],
/* 1625 */
[7160, 3792],
/* 1626 */
[7162, 3806],
/* 1627 */
[7173, 914, 578],
/* 1628 */
[7182, 3786, 1623, 3795],
/* 1629 */
[7026, 3812],
/* 1630 */
[7123, 897, 28, 31],
/* 1631 */
1295,
/* 1632 */
746,
/* 1633 */
[7137, 3855],
/* 1634 */
[7139, 1633, 582],
/* 1635 */
[7140, 208],
/* 1636 */
[7142, 3843, 135, 207],
/* 1637 */
1334,
/* 1638 */
[7160, 1637],
/* 1639 */
[7165, 919, 920, 135],
/* 1640 */
[7166, 209, 208],
/* 1641 */
[7167, 135],
/* 1642 */
[7170, 3849, 209],
/* 1643 */
[7186, 921, 209, 920, 371, 135],
/* 1644 */
1345,
/* 1645 */
734,
/* 1646 */
512,
/* 1647 */
513,
/* 1648 */
[7064, 3893, 3887, 3894, 925, 1647, 583, 3891, 1650, 584, 456],
/* 1649 */
738,
/* 1650 */
[7069, 584, 1647, 456],
/* 1651 */
734,
/* 1652 */
512,
/* 1653 */
513,
/* 1654 */
[7064, 3920, 3914, 3921, 929, 1653, 585, 3918, 1656, 586, 457],
/* 1655 */
738,
/* 1656 */
[7069, 586, 1653, 457],
/* 1657 */
[7162, 3960],
/* 1658 */
[7164, 3951, 458],
/* 1659 */
[7185, 1657, 1658, 459, 3956],
/* 1660 */
[7088, 101],
/* 1661 */
1316,
/* 1662 */
[7101, 8, 14],
/* 1663 */
[7105, 101],
/* 1664 */
1295,
/* 1665 */
1323,
/* 1666 */
[7133, 4008, 589],
/* 1667 */
[7149, 4031],
/* 1668 */
[7160, 4012],
/* 1669 */
[7162, 4026],
/* 1670 */
[7173, 939, 587],
/* 1671 */
[7182, 4006, 1666, 4015],
/* 1672 */
[7026, 4032],
/* 1673 */
[7035, 4047],
/* 1674 */
[7053, 4058],
/* 1675 */
[7056, 947],
/* 1676 */
[7059, 462, 114],
/* 1677 */
[7064, 1678, 591, 1679, 949, 948, 593, 4059, 952, 114, 374],
/* 1678 */
1305,
/* 1679 */
[7067, 949],
/* 1680 */
[7070, 592],
/* 1681 */
740,
/* 1682 */
[7123, 942, 8, 14],
/* 1683 */
[7088, 101],
/* 1684 */
1316,
/* 1685 */
[7101, 8, 14],
/* 1686 */
[7105, 101],
/* 1687 */
[7026, 4122],
/* 1688 */
1295,
/* 1689 */
[7024, 4124, 1688, 4125],
/* 1690 */
1323,
/* 1691 */
746,
/* 1692 */
[7133, 4138, 375],
/* 1693 */
[7137, 4155],
/* 1694 */
[7139, 1693, 375],
/* 1695 */
[7140, 213],
/* 1696 */
[7141, 4163],
/* 1697 */
[7142, 4141, 136, 212],
/* 1698 */
1334,
/* 1699 */
[7166, 165, 213],
/* 1700 */
[7167, 136],
/* 1701 */
[7170, 4147, 165],
/* 1702 */
[7171, 4137, 594, 596],
/* 1703 */
[7180, 212],
/* 1704 */
[7182, 4135, 1692, 4153],
/* 1705 */
[7186, 961, 165, 960, 304, 136],
/* 1706 */
1345,
/* 1707 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Object$create = __webpack_require__(963)["default"];

	var _interopRequireDefault = __webpack_require__(71)["default"];

	exports.__esModule = true;

	var _babelTemplate = __webpack_require__(4223);

	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

	var buildDefine = _babelTemplate2["default"]("\n  define(MODULE_NAME, [SOURCES], function (PARAMS) {\n    BODY;\n  });\n");

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  function isValidRequireCall(path) {
	    if (!path.isCallExpression()) return false;
	    if (!path.get("callee").isIdentifier({ name: "require" })) return false;
	    if (path.scope.getBinding("require")) return false;

	    var args = path.get("arguments");
	    if (args.length !== 1) return false;

	    var arg = args[0];
	    if (!arg.isStringLiteral()) return false;

	    return true;
	  }

	  var amdVisitor = {
	    ReferencedIdentifier: function ReferencedIdentifier(_ref2) {
	      var node = _ref2.node;
	      var scope = _ref2.scope;

	      if (node.name === "exports" && !scope.getBinding("exports")) {
	        this.hasExports = true;
	      }

	      if (node.name === "module" && !scope.getBinding("module")) {
	        this.hasModule = true;
	      }
	    },

	    CallExpression: function CallExpression(path) {
	      if (!isValidRequireCall(path)) return;
	      this.bareSources.push(path.node.arguments[0]);
	      path.remove();
	    },

	    VariableDeclarator: function VariableDeclarator(path) {
	      var id = path.get("id");
	      if (!id.isIdentifier()) return;

	      var init = path.get("init");
	      if (!isValidRequireCall(init)) return;

	      var source = init.node.arguments[0];
	      this.sourceNames[source.value] = true;
	      this.sources.push([id.node, source]);

	      path.remove();
	    }
	  };

	  return {
	    inherits: __webpack_require__(982),

	    pre: function pre() {
	      // source strings
	      this.sources = [];
	      this.sourceNames = _Object$create(null);

	      // bare sources
	      this.bareSources = [];

	      this.hasExports = false;
	      this.hasModule = false;
	    },

	    visitor: {
	      Program: {
	        exit: function exit(path) {
	          // istanbul ignore next

	          var _this = this;

	          if (this.ran) return;
	          this.ran = true;

	          path.traverse(amdVisitor, this);

	          var params = this.sources.map(function (source) {
	            return source[0];
	          });
	          var sources = this.sources.map(function (source) {
	            return source[1];
	          });

	          sources = sources.concat(this.bareSources.filter(function (str) {
	            return !_this.sourceNames[str.value];
	          }));

	          var moduleName = this.getModuleName();
	          if (moduleName) moduleName = t.stringLiteral(moduleName);

	          if (this.hasExports) {
	            sources.unshift(t.stringLiteral("exports"));
	            params.unshift(t.identifier("exports"));
	          }

	          if (this.hasModule) {
	            sources.unshift(t.stringLiteral("module"));
	            params.unshift(t.identifier("module"));
	          }

	          path.node.body = [buildDefine({
	            MODULE_NAME: moduleName,
	            SOURCES: sources,
	            PARAMS: params,
	            BODY: path.node.body
	          })];
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1708 */
[7036, 4196],
/* 1709 */
[7038, 4198],
/* 1710 */
536,
/* 1711 */
[7053, 4206],
/* 1712 */
[7056, 966],
/* 1713 */
[7059, 464, 115],
/* 1714 */
[7064, 1715, 597, 1716, 968, 967, 599, 4207, 971, 115, 376],
/* 1715 */
1305,
/* 1716 */
[7067, 968],
/* 1717 */
[7070, 598],
/* 1718 */
740,
/* 1719 */
[7088, 305],
/* 1720 */
1316,
/* 1721 */
[7101, 47, 60],
/* 1722 */
[7105, 305],
/* 1723 */
1295,
/* 1724 */
[7026, 4262],
/* 1725 */
[7123, 963, 47, 60],
/* 1726 */
1295,
/* 1727 */
745,
/* 1728 */
1322,
/* 1729 */
1323,
/* 1730 */
746,
/* 1731 */
[7133, 4289, 378],
/* 1732 */
[7135, 4284, 1730, 1731, 1734, 4314, 4315, 4316, 158, 137],
/* 1733 */
[7137, 4305],
/* 1734 */
[7139, 1733, 378],
/* 1735 */
[7141, 4313],
/* 1736 */
[7142, 4292, 137, 217],
/* 1737 */
1334,
/* 1738 */
1335,
/* 1739 */
[7167, 137],
/* 1740 */
[7171, 1732, 465, 602],
/* 1741 */
[7180, 217],
/* 1742 */
[7182, 4287, 1731, 4303],
/* 1743 */
[7186, 603, 158, 601, 216, 137],
/* 1744 */
1345,
/* 1745 */
[7035, 4344],
/* 1746 */
[7053, 4355],
/* 1747 */
[7056, 985],
/* 1748 */
[7059, 466, 116],
/* 1749 */
[7064, 1750, 608, 1751, 987, 986, 610, 4356, 990, 116, 379],
/* 1750 */
1305,
/* 1751 */
[7067, 987],
/* 1752 */
[7070, 609],
/* 1753 */
740,
/* 1754 */
[7088, 102],
/* 1755 */
1316,
/* 1756 */
[7101, 9, 15],
/* 1757 */
[7105, 102],
/* 1758 */
1295,
/* 1759 */
[7026, 4411],
/* 1760 */
745,
/* 1761 */
1323,
/* 1762 */
[7133, 4418, 613],
/* 1763 */
[7135, 4414, 4415, 1762, 4420, 4432, 4433, 4434, 308, 381],
/* 1764 */
[7160, 4423],
/* 1765 */
[7162, 4441],
/* 1766 */
[7182, 4417, 1762, 4428],
/* 1767 */
[7123, 604, 9, 15],
/* 1768 */
[7088, 102],
/* 1769 */
1316,
/* 1770 */
[7101, 9, 15],
/* 1771 */
[7105, 102],
/* 1772 */
[7026, 4495],
/* 1773 */
1295,
/* 1774 */
[7024, 4497, 1773, 4498],
/* 1775 */
1323,
/* 1776 */
746,
/* 1777 */
[7133, 4511, 382],
/* 1778 */
[7137, 4528],
/* 1779 */
[7139, 1778, 382],
/* 1780 */
[7140, 222],
/* 1781 */
[7141, 4536],
/* 1782 */
[7142, 4514, 138, 221],
/* 1783 */
1334,
/* 1784 */
[7166, 166, 222],
/* 1785 */
[7167, 138],
/* 1786 */
[7170, 4520, 166],
/* 1787 */
[7171, 4510, 614, 616],
/* 1788 */
[7180, 221],
/* 1789 */
[7182, 4508, 1777, 4526],
/* 1790 */
[7186, 1007, 166, 1006, 310, 138],
/* 1791 */
1345,
/* 1792 */
[7123, 470, 2, 61],
/* 1793 */
[7088, 103],
/* 1794 */
1316,
/* 1795 */
[7101, 2, 61],
/* 1796 */
[7105, 103],
/* 1797 */
[7026, 4602],
/* 1798 */
1295,
/* 1799 */
[7024, 4604, 1798, 4605],
/* 1800 */
1323,
/* 1801 */
746,
/* 1802 */
[7133, 4618, 383],
/* 1803 */
[7137, 4635],
/* 1804 */
[7139, 1803, 383],
/* 1805 */
[7140, 225],
/* 1806 */
[7141, 4643],
/* 1807 */
[7142, 4621, 139, 224],
/* 1808 */
1334,
/* 1809 */
[7166, 167, 225],
/* 1810 */
[7167, 139],
/* 1811 */
[7170, 4627, 167],
/* 1812 */
[7171, 4617, 617, 619],
/* 1813 */
[7180, 224],
/* 1814 */
[7182, 4615, 1802, 4633],
/* 1815 */
[7186, 1015, 167, 1014, 312, 139],
/* 1816 */
1345,
/* 1817 */
[7030, 4664],
/* 1818 */
[7035, 4669],
/* 1819 */
[7039, 4671],
/* 1820 */
[7040, 4662, 4661, 4660],
/* 1821 */
/***/ function(module, exports) {

	"use strict";

	exports["default"] = function (obj, defaults) {
	  var newObj = defaults({}, obj);
	  delete newObj["default"];
	  return newObj;
	};

	exports.__esModule = true;

/***/ },
/* 1822 */
[7053, 4680],
/* 1823 */
[7056, 1018],
/* 1824 */
[7059, 471, 117],
/* 1825 */
[7064, 1826, 623, 1827, 1020, 1019, 625, 4681, 1023, 117, 384],
/* 1826 */
1305,
/* 1827 */
[7067, 1020],
/* 1828 */
[7070, 624],
/* 1829 */
740,
/* 1830 */
[7088, 103],
/* 1831 */
1316,
/* 1832 */
[7101, 2, 62],
/* 1833 */
[7105, 103],
/* 1834 */
1295,
/* 1835 */
[7026, 4736],
/* 1836 */
[7123, 470, 2, 62],
/* 1837 */
1295,
/* 1838 */
745,
/* 1839 */
1322,
/* 1840 */
1323,
/* 1841 */
746,
/* 1842 */
[7133, 4763, 386],
/* 1843 */
[7135, 4758, 1841, 1842, 1845, 4788, 4789, 4790, 159, 140],
/* 1844 */
[7137, 4779],
/* 1845 */
[7139, 1844, 386],
/* 1846 */
[7141, 4787],
/* 1847 */
[7142, 4766, 140, 229],
/* 1848 */
1334,
/* 1849 */
1335,
/* 1850 */
[7167, 140],
/* 1851 */
[7171, 1843, 472, 628],
/* 1852 */
[7180, 229],
/* 1853 */
[7182, 4761, 1842, 4777],
/* 1854 */
[7186, 629, 159, 627, 228, 140],
/* 1855 */
1345,
/* 1856 */
[7031, 4816],
/* 1857 */
[7036, 4821],
/* 1858 */
[7038, 4823],
/* 1859 */
536,
/* 1860 */
[7053, 4831],
/* 1861 */
[7056, 1036],
/* 1862 */
[7059, 473, 118],
/* 1863 */
[7064, 1864, 630, 1865, 1038, 1037, 632, 4832, 1041, 118, 387],
/* 1864 */
1305,
/* 1865 */
[7067, 1038],
/* 1866 */
[7070, 631],
/* 1867 */
740,
/* 1868 */
[7088, 314],
/* 1869 */
1316,
/* 1870 */
[7101, 48, 63],
/* 1871 */
[7105, 314],
/* 1872 */
1295,
/* 1873 */
[7026, 4887],
/* 1874 */
[7123, 1856, 48, 63],
/* 1875 */
1295,
/* 1876 */
745,
/* 1877 */
1322,
/* 1878 */
1323,
/* 1879 */
746,
/* 1880 */
[7133, 4914, 389],
/* 1881 */
[7135, 4909, 1879, 1880, 1883, 4939, 4940, 4941, 160, 141],
/* 1882 */
[7137, 4930],
/* 1883 */
[7139, 1882, 389],
/* 1884 */
[7141, 4938],
/* 1885 */
[7142, 4917, 141, 234],
/* 1886 */
1334,
/* 1887 */
1335,
/* 1888 */
[7167, 141],
/* 1889 */
[7171, 1881, 474, 635],
/* 1890 */
[7180, 234],
/* 1891 */
[7182, 4912, 1880, 4928],
/* 1892 */
[7186, 636, 160, 634, 233, 141],
/* 1893 */
1345,
/* 1894 */
[7088, 240],
/* 1895 */
1316,
/* 1896 */
[7101, 41, 54],
/* 1897 */
[7105, 240],
/* 1898 */
1295,
/* 1899 */
1323,
/* 1900 */
[7133, 5002, 640],
/* 1901 */
[7149, 5025],
/* 1902 */
[7160, 5006],
/* 1903 */
[7162, 5020],
/* 1904 */
[7173, 1055, 638],
/* 1905 */
[7182, 5000, 1900, 5009],
/* 1906 */
[7026, 5026],
/* 1907 */
[7123, 1922, 41, 54],
/* 1908 */
1295,
/* 1909 */
746,
/* 1910 */
[7137, 5069],
/* 1911 */
[7139, 1910, 642],
/* 1912 */
[7140, 238],
/* 1913 */
[7142, 5057, 142, 237],
/* 1914 */
1334,
/* 1915 */
[7160, 1914],
/* 1916 */
[7165, 1060, 1061, 142],
/* 1917 */
[7166, 239, 238],
/* 1918 */
[7167, 142],
/* 1919 */
[7170, 5063, 239],
/* 1920 */
[7186, 1062, 239, 1061, 391, 142],
/* 1921 */
1345,
/* 1922 */
[7031, 5103],
/* 1923 */
[7036, 5108],
/* 1924 */
536,
/* 1925 */
[7053, 5118],
/* 1926 */
[7056, 1066],
/* 1927 */
[7059, 477, 119],
/* 1928 */
[7064, 1929, 643, 1930, 1068, 1067, 645, 5119, 1071, 119, 392],
/* 1929 */
1305,
/* 1930 */
[7067, 1068],
/* 1931 */
[7070, 644],
/* 1932 */
740,
/* 1933 */
[7031, 5151],
/* 1934 */
[7036, 5156],
/* 1935 */
[7038, 5158],
/* 1936 */
536,
/* 1937 */
[7053, 5166],
/* 1938 */
[7056, 1076],
/* 1939 */
[7059, 478, 120],
/* 1940 */
[7064, 1941, 646, 1942, 1078, 1077, 648, 5167, 1081, 120, 393],
/* 1941 */
1305,
/* 1942 */
[7067, 1078],
/* 1943 */
[7070, 647],
/* 1944 */
740,
/* 1945 */
[7086, 1935, 55, 29, 5206, 5209, 318, 5183, 34],
/* 1946 */
[7162, 5208],
/* 1947 */
[7164, 5199, 479],
/* 1948 */
[7185, 1946, 1947, 480, 5204],
/* 1949 */
[7088, 317],
/* 1950 */
1316,
/* 1951 */
[7101, 29, 34],
/* 1952 */
[7105, 317],
/* 1953 */
1295,
/* 1954 */
1323,
/* 1955 */
[7133, 5256, 651],
/* 1956 */
[7149, 5279],
/* 1957 */
[7160, 5260],
/* 1958 */
[7162, 5274],
/* 1959 */
[7173, 1090, 649],
/* 1960 */
[7182, 5254, 1955, 5263],
/* 1961 */
[7026, 5280],
/* 1962 */
[7123, 1933, 29, 34],
/* 1963 */
1295,
/* 1964 */
746,
/* 1965 */
[7137, 5323],
/* 1966 */
[7139, 1965, 653],
/* 1967 */
[7140, 245],
/* 1968 */
[7142, 5311, 143, 244],
/* 1969 */
1334,
/* 1970 */
[7160, 1969],
/* 1971 */
[7165, 1095, 1096, 143],
/* 1972 */
[7166, 246, 245],
/* 1973 */
[7167, 143],
/* 1974 */
[7170, 5317, 246],
/* 1975 */
[7186, 1097, 246, 1096, 396, 143],
/* 1976 */
1345,
/* 1977 */
[7031, 5358],
/* 1978 */
[7036, 5363],
/* 1979 */
536,
/* 1980 */
[7053, 5373],
/* 1981 */
[7056, 1101],
/* 1982 */
[7059, 482, 121],
/* 1983 */
[7064, 1984, 654, 1985, 1103, 1102, 656, 5374, 1106, 121, 397],
/* 1984 */
1305,
/* 1985 */
[7067, 1103],
/* 1986 */
[7070, 655],
/* 1987 */
740,
/* 1988 */
[7123, 1977, 49, 64],
/* 1989 */
[7088, 320],
/* 1990 */
1316,
/* 1991 */
[7101, 49, 64],
/* 1992 */
[7105, 320],
/* 1993 */
[7026, 5437],
/* 1994 */
1295,
/* 1995 */
[7024, 5439, 1994, 5440],
/* 1996 */
1323,
/* 1997 */
746,
/* 1998 */
[7133, 5453, 398],
/* 1999 */
[7137, 5470],
/* 2000 */
[7139, 1999, 398],
/* 2001 */
[7140, 250],
/* 2002 */
[7141, 5478],
/* 2003 */
[7142, 5456, 144, 249],
/* 2004 */
1334,
/* 2005 */
[7166, 168, 250],
/* 2006 */
[7167, 144],
/* 2007 */
[7170, 5462, 168],
/* 2008 */
[7171, 5452, 657, 659],
/* 2009 */
[7180, 249],
/* 2010 */
[7182, 5450, 1998, 5468],
/* 2011 */
[7186, 1115, 168, 1114, 322, 144],
/* 2012 */
1345,
/* 2013 */
734,
/* 2014 */
512,
/* 2015 */
513,
/* 2016 */
[7064, 5509, 5503, 5510, 1119, 2015, 660, 5507, 2018, 661, 484],
/* 2017 */
738,
/* 2018 */
[7069, 661, 2015, 484],
/* 2019 */
[7031, 5536],
/* 2020 */
[7036, 5541],
/* 2021 */
536,
/* 2022 */
[7053, 5551],
/* 2023 */
[7056, 1123],
/* 2024 */
[7059, 485, 122],
/* 2025 */
[7064, 2026, 662, 2027, 1125, 1124, 664, 5552, 1128, 122, 399],
/* 2026 */
1305,
/* 2027 */
[7067, 1125],
/* 2028 */
[7070, 663],
/* 2029 */
740,
/* 2030 */
[7123, 2019, 42, 56],
/* 2031 */
[7088, 323],
/* 2032 */
1316,
/* 2033 */
[7101, 42, 56],
/* 2034 */
[7105, 323],
/* 2035 */
[7026, 5615],
/* 2036 */
1295,
/* 2037 */
[7024, 5617, 2036, 5618],
/* 2038 */
1323,
/* 2039 */
746,
/* 2040 */
[7133, 5631, 400],
/* 2041 */
[7137, 5648],
/* 2042 */
[7139, 2041, 400],
/* 2043 */
[7140, 254],
/* 2044 */
[7141, 5656],
/* 2045 */
[7142, 5634, 145, 253],
/* 2046 */
1334,
/* 2047 */
[7166, 169, 254],
/* 2048 */
[7167, 145],
/* 2049 */
[7170, 5640, 169],
/* 2050 */
[7171, 5630, 665, 667],
/* 2051 */
[7180, 253],
/* 2052 */
[7182, 5628, 2040, 5646],
/* 2053 */
[7186, 1137, 169, 1136, 325, 145],
/* 2054 */
1345,
/* 2055 */
734,
/* 2056 */
512,
/* 2057 */
513,
/* 2058 */
[7064, 5687, 5681, 5688, 1141, 2057, 668, 5685, 2060, 669, 487],
/* 2059 */
738,
/* 2060 */
[7069, 669, 2057, 487],
/* 2061 */
734,
/* 2062 */
107,
/* 2063 */
[7056, 2064],
/* 2064 */
422,
/* 2065 */
513,
/* 2066 */
738,
/* 2067 */
[7070, 670],
/* 2068 */
740,
/* 2069 */
[7074, 2067, 2068, 670],
/* 2070 */
[7123, 2094, 43, 65],
/* 2071 */
[7088, 328],
/* 2072 */
1316,
/* 2073 */
[7101, 43, 65],
/* 2074 */
[7105, 328],
/* 2075 */
[7026, 5766],
/* 2076 */
1295,
/* 2077 */
[7024, 5768, 2076, 5769],
/* 2078 */
1323,
/* 2079 */
746,
/* 2080 */
[7133, 5784, 402],
/* 2081 */
[7137, 5801],
/* 2082 */
[7139, 2081, 402],
/* 2083 */
[7140, 257],
/* 2084 */
[7142, 5787, 146, 256],
/* 2085 */
1334,
/* 2086 */
[7166, 170, 257],
/* 2087 */
[7167, 146],
/* 2088 */
[7170, 5793, 170],
/* 2089 */
[7171, 5783, 671, 673],
/* 2090 */
[7180, 256],
/* 2091 */
[7182, 5781, 2080, 5799],
/* 2092 */
[7186, 1153, 170, 1152, 327, 146],
/* 2093 */
1345,
/* 2094 */
[7031, 5836],
/* 2095 */
[7036, 5841],
/* 2096 */
536,
/* 2097 */
[7053, 5851],
/* 2098 */
[7056, 1156],
/* 2099 */
[7059, 489, 123],
/* 2100 */
[7064, 2101, 674, 2102, 1158, 1157, 676, 5852, 1161, 123, 403],
/* 2101 */
1305,
/* 2102 */
[7067, 1158],
/* 2103 */
[7070, 675],
/* 2104 */
740,
/* 2105 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/regenerate v1.2.0 by @mathias | MIT license */
	;(function(root) {

		// Detect free variables `exports`.
		var freeExports = typeof exports == 'object' && exports;

		// Detect free variable `module`.
		var freeModule = typeof module == 'object' && module &&
			module.exports == freeExports && module;

		// Detect free variable `global`, from Node.js or Browserified code,
		// and use it as `root`.
		var freeGlobal = typeof global == 'object' && global;
		if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
			root = freeGlobal;
		}

		/*--------------------------------------------------------------------------*/

		var ERRORS = {
			'rangeOrder': 'A range\u2019s `stop` value must be greater than or equal ' +
				'to the `start` value.',
			'codePointRange': 'Invalid code point value. Code points range from ' +
				'U+000000 to U+10FFFF.'
		};

		// https://mathiasbynens.be/notes/javascript-encoding#surrogate-pairs
		var HIGH_SURROGATE_MIN = 0xD800;
		var HIGH_SURROGATE_MAX = 0xDBFF;
		var LOW_SURROGATE_MIN = 0xDC00;
		var LOW_SURROGATE_MAX = 0xDFFF;

		// In Regenerate output, `\0` will never be preceded by `\` because we sort
		// by code point value, so let’s keep this regular expression simple.
		var regexNull = /\\x00([^0123456789]|$)/g;

		var object = {};
		var hasOwnProperty = object.hasOwnProperty;
		var extend = function(destination, source) {
			var key;
			for (key in source) {
				if (hasOwnProperty.call(source, key)) {
					destination[key] = source[key];
				}
			}
			return destination;
		};

		var forEach = function(array, callback) {
			var index = -1;
			var length = array.length;
			while (++index < length) {
				callback(array[index], index);
			}
		};

		var toString = object.toString;
		var isArray = function(value) {
			return toString.call(value) == '[object Array]';
		};
		var isNumber = function(value) {
			return typeof value == 'number' ||
				toString.call(value) == '[object Number]';
		};

		// This assumes that `number` is a positive integer that `toString()`s nicely
		// (which is the case for all code point values).
		var zeroes = '0000';
		var pad = function(number, totalCharacters) {
			var string = String(number);
			return string.length < totalCharacters
				? (zeroes + string).slice(-totalCharacters)
				: string;
		};

		var hex = function(number) {
			return Number(number).toString(16).toUpperCase();
		};

		var slice = [].slice;

		/*--------------------------------------------------------------------------*/

		var dataFromCodePoints = function(codePoints) {
			var index = -1;
			var length = codePoints.length;
			var max = length - 1;
			var result = [];
			var isStart = true;
			var tmp;
			var previous = 0;
			while (++index < length) {
				tmp = codePoints[index];
				if (isStart) {
					result.push(tmp);
					previous = tmp;
					isStart = false;
				} else {
					if (tmp == previous + 1) {
						if (index != max) {
							previous = tmp;
							continue;
						} else {
							isStart = true;
							result.push(tmp + 1);
						}
					} else {
						// End the previous range and start a new one.
						result.push(previous + 1, tmp);
						previous = tmp;
					}
				}
			}
			if (!isStart) {
				result.push(tmp + 1);
			}
			return result;
		};

		var dataRemove = function(data, codePoint) {
			// Iterate over the data per `(start, end)` pair.
			var index = 0;
			var start;
			var end;
			var length = data.length;
			while (index < length) {
				start = data[index];
				end = data[index + 1];
				if (codePoint >= start && codePoint < end) {
					// Modify this pair.
					if (codePoint == start) {
						if (end == start + 1) {
							// Just remove `start` and `end`.
							data.splice(index, 2);
							return data;
						} else {
							// Just replace `start` with a new value.
							data[index] = codePoint + 1;
							return data;
						}
					} else if (codePoint == end - 1) {
						// Just replace `end` with a new value.
						data[index + 1] = codePoint;
						return data;
					} else {
						// Replace `[start, end]` with `[startA, endA, startB, endB]`.
						data.splice(index, 2, start, codePoint, codePoint + 1, end);
						return data;
					}
				}
				index += 2;
			}
			return data;
		};

		var dataRemoveRange = function(data, rangeStart, rangeEnd) {
			if (rangeEnd < rangeStart) {
				throw Error(ERRORS.rangeOrder);
			}
			// Iterate over the data per `(start, end)` pair.
			var index = 0;
			var start;
			var end;
			while (index < data.length) {
				start = data[index];
				end = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.

				// Exit as soon as no more matching pairs can be found.
				if (start > rangeEnd) {
					return data;
				}

				// Check if this range pair is equal to, or forms a subset of, the range
				// to be removed.
				// E.g. we have `[0, 11, 40, 51]` and want to remove 0-10 → `[40, 51]`.
				// E.g. we have `[40, 51]` and want to remove 0-100 → `[]`.
				if (rangeStart <= start && rangeEnd >= end) {
					// Remove this pair.
					data.splice(index, 2);
					continue;
				}

				// Check if both `rangeStart` and `rangeEnd` are within the bounds of
				// this pair.
				// E.g. we have `[0, 11]` and want to remove 4-6 → `[0, 4, 7, 11]`.
				if (rangeStart >= start && rangeEnd < end) {
					if (rangeStart == start) {
						// Replace `[start, end]` with `[startB, endB]`.
						data[index] = rangeEnd + 1;
						data[index + 1] = end + 1;
						return data;
					}
					// Replace `[start, end]` with `[startA, endA, startB, endB]`.
					data.splice(index, 2, start, rangeStart, rangeEnd + 1, end + 1);
					return data;
				}

				// Check if only `rangeStart` is within the bounds of this pair.
				// E.g. we have `[0, 11]` and want to remove 4-20 → `[0, 4]`.
				if (rangeStart >= start && rangeStart <= end) {
					// Replace `end` with `rangeStart`.
					data[index + 1] = rangeStart;
					// Note: we cannot `return` just yet, in case any following pairs still
					// contain matching code points.
					// E.g. we have `[0, 11, 14, 31]` and want to remove 4-20
					// → `[0, 4, 21, 31]`.
				}

				// Check if only `rangeEnd` is within the bounds of this pair.
				// E.g. we have `[14, 31]` and want to remove 4-20 → `[21, 31]`.
				else if (rangeEnd >= start && rangeEnd <= end) {
					// Just replace `start`.
					data[index] = rangeEnd + 1;
					return data;
				}

				index += 2;
			}
			return data;
		};

		 var dataAdd = function(data, codePoint) {
			// Iterate over the data per `(start, end)` pair.
			var index = 0;
			var start;
			var end;
			var lastIndex = null;
			var length = data.length;
			if (codePoint < 0x0 || codePoint > 0x10FFFF) {
				throw RangeError(ERRORS.codePointRange);
			}
			while (index < length) {
				start = data[index];
				end = data[index + 1];

				// Check if the code point is already in the set.
				if (codePoint >= start && codePoint < end) {
					return data;
				}

				if (codePoint == start - 1) {
					// Just replace `start` with a new value.
					data[index] = codePoint;
					return data;
				}

				// At this point, if `start` is `greater` than `codePoint`, insert a new
				// `[start, end]` pair before the current pair, or after the current pair
				// if there is a known `lastIndex`.
				if (start > codePoint) {
					data.splice(
						lastIndex != null ? lastIndex + 2 : 0,
						0,
						codePoint,
						codePoint + 1
					);
					return data;
				}

				if (codePoint == end) {
					// Check if adding this code point causes two separate ranges to become
					// a single range, e.g. `dataAdd([0, 4, 5, 10], 4)` → `[0, 10]`.
					if (codePoint + 1 == data[index + 2]) {
						data.splice(index, 4, start, data[index + 3]);
						return data;
					}
					// Else, just replace `end` with a new value.
					data[index + 1] = codePoint + 1;
					return data;
				}
				lastIndex = index;
				index += 2;
			}
			// The loop has finished; add the new pair to the end of the data set.
			data.push(codePoint, codePoint + 1);
			return data;
		};

		var dataAddData = function(dataA, dataB) {
			// Iterate over the data per `(start, end)` pair.
			var index = 0;
			var start;
			var end;
			var data = dataA.slice();
			var length = dataB.length;
			while (index < length) {
				start = dataB[index];
				end = dataB[index + 1] - 1;
				if (start == end) {
					data = dataAdd(data, start);
				} else {
					data = dataAddRange(data, start, end);
				}
				index += 2;
			}
			return data;
		};

		var dataRemoveData = function(dataA, dataB) {
			// Iterate over the data per `(start, end)` pair.
			var index = 0;
			var start;
			var end;
			var data = dataA.slice();
			var length = dataB.length;
			while (index < length) {
				start = dataB[index];
				end = dataB[index + 1] - 1;
				if (start == end) {
					data = dataRemove(data, start);
				} else {
					data = dataRemoveRange(data, start, end);
				}
				index += 2;
			}
			return data;
		};

		var dataAddRange = function(data, rangeStart, rangeEnd) {
			if (rangeEnd < rangeStart) {
				throw Error(ERRORS.rangeOrder);
			}
			if (
				rangeStart < 0x0 || rangeStart > 0x10FFFF ||
				rangeEnd < 0x0 || rangeEnd > 0x10FFFF
			) {
				throw RangeError(ERRORS.codePointRange);
			}
			// Iterate over the data per `(start, end)` pair.
			var index = 0;
			var start;
			var end;
			var added = false;
			var length = data.length;
			while (index < length) {
				start = data[index];
				end = data[index + 1];

				if (added) {
					// The range has already been added to the set; at this point, we just
					// need to get rid of the following ranges in case they overlap.

					// Check if this range can be combined with the previous range.
					if (start == rangeEnd + 1) {
						data.splice(index - 1, 2);
						return data;
					}

					// Exit as soon as no more possibly overlapping pairs can be found.
					if (start > rangeEnd) {
						return data;
					}

					// E.g. `[0, 11, 12, 16]` and we’ve added 5-15, so we now have
					// `[0, 16, 12, 16]`. Remove the `12,16` part, as it lies within the
					// `0,16` range that was previously added.
					if (start >= rangeStart && start <= rangeEnd) {
						// `start` lies within the range that was previously added.

						if (end > rangeStart && end - 1 <= rangeEnd) {
							// `end` lies within the range that was previously added as well,
							// so remove this pair.
							data.splice(index, 2);
							index -= 2;
							// Note: we cannot `return` just yet, as there may still be other
							// overlapping pairs.
						} else {
							// `start` lies within the range that was previously added, but
							// `end` doesn’t. E.g. `[0, 11, 12, 31]` and we’ve added 5-15, so
							// now we have `[0, 16, 12, 31]`. This must be written as `[0, 31]`.
							// Remove the previously added `end` and the current `start`.
							data.splice(index - 1, 2);
							index -= 2;
						}

						// Note: we cannot return yet.
					}

				}

				else if (start == rangeEnd + 1) {
					data[index] = rangeStart;
					return data;
				}

				// Check if a new pair must be inserted *before* the current one.
				else if (start > rangeEnd) {
					data.splice(index, 0, rangeStart, rangeEnd + 1);
					return data;
				}

				else if (rangeStart >= start && rangeStart < end && rangeEnd + 1 <= end) {
					// The new range lies entirely within an existing range pair. No action
					// needed.
					return data;
				}

				else if (
					// E.g. `[0, 11]` and you add 5-15 → `[0, 16]`.
					(rangeStart >= start && rangeStart < end) ||
					// E.g. `[0, 3]` and you add 3-6 → `[0, 7]`.
					end == rangeStart
				) {
					// Replace `end` with the new value.
					data[index + 1] = rangeEnd + 1;
					// Make sure the next range pair doesn’t overlap, e.g. `[0, 11, 12, 14]`
					// and you add 5-15 → `[0, 16]`, i.e. remove the `12,14` part.
					added = true;
					// Note: we cannot `return` just yet.
				}

				else if (rangeStart <= start && rangeEnd + 1 >= end) {
					// The new range is a superset of the old range.
					data[index] = rangeStart;
					data[index + 1] = rangeEnd + 1;
					added = true;
				}

				index += 2;
			}
			// The loop has finished without doing anything; add the new pair to the end
			// of the data set.
			if (!added) {
				data.push(rangeStart, rangeEnd + 1);
			}
			return data;
		};

		var dataContains = function(data, codePoint) {
			var index = 0;
			var length = data.length;
			// Exit early if `codePoint` is not within `data`’s overall range.
			var start = data[index];
			var end = data[length - 1];
			if (length >= 2) {
				if (codePoint < start || codePoint > end) {
					return false;
				}
			}
			// Iterate over the data per `(start, end)` pair.
			while (index < length) {
				start = data[index];
				end = data[index + 1];
				if (codePoint >= start && codePoint < end) {
					return true;
				}
				index += 2;
			}
			return false;
		};

		var dataIntersection = function(data, codePoints) {
			var index = 0;
			var length = codePoints.length;
			var codePoint;
			var result = [];
			while (index < length) {
				codePoint = codePoints[index];
				if (dataContains(data, codePoint)) {
					result.push(codePoint);
				}
				++index;
			}
			return dataFromCodePoints(result);
		};

		var dataIsEmpty = function(data) {
			return !data.length;
		};

		var dataIsSingleton = function(data) {
			// Check if the set only represents a single code point.
			return data.length == 2 && data[0] + 1 == data[1];
		};

		var dataToArray = function(data) {
			// Iterate over the data per `(start, end)` pair.
			var index = 0;
			var start;
			var end;
			var result = [];
			var length = data.length;
			while (index < length) {
				start = data[index];
				end = data[index + 1];
				while (start < end) {
					result.push(start);
					++start;
				}
				index += 2;
			}
			return result;
		};

		/*--------------------------------------------------------------------------*/

		// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
		var floor = Math.floor;
		var highSurrogate = function(codePoint) {
			return parseInt(
				floor((codePoint - 0x10000) / 0x400) + HIGH_SURROGATE_MIN,
				10
			);
		};

		var lowSurrogate = function(codePoint) {
			return parseInt(
				(codePoint - 0x10000) % 0x400 + LOW_SURROGATE_MIN,
				10
			);
		};

		var stringFromCharCode = String.fromCharCode;
		var codePointToString = function(codePoint) {
			var string;
			// https://mathiasbynens.be/notes/javascript-escapes#single
			// Note: the `\b` escape sequence for U+0008 BACKSPACE in strings has a
			// different meaning in regular expressions (word boundary), so it cannot
			// be used here.
			if (codePoint == 0x09) {
				string = '\\t';
			}
			// Note: IE < 9 treats `'\v'` as `'v'`, so avoid using it.
			// else if (codePoint == 0x0B) {
			// 	string = '\\v';
			// }
			else if (codePoint == 0x0A) {
				string = '\\n';
			}
			else if (codePoint == 0x0C) {
				string = '\\f';
			}
			else if (codePoint == 0x0D) {
				string = '\\r';
			}
			else if (codePoint == 0x5C) {
				string = '\\\\';
			}
			else if (
				codePoint == 0x24 ||
				(codePoint >= 0x28 && codePoint <= 0x2B) ||
				codePoint == 0x2D || codePoint == 0x2E || codePoint == 0x3F ||
				(codePoint >= 0x5B && codePoint <= 0x5E) ||
				(codePoint >= 0x7B && codePoint <= 0x7D)
			) {
				// The code point maps to an unsafe printable ASCII character;
				// backslash-escape it. Here’s the list of those symbols:
				//
				//     $()*+-.?[\]^{|}
				//
				// See #7 for more info.
				string = '\\' + stringFromCharCode(codePoint);
			}
			else if (codePoint >= 0x20 && codePoint <= 0x7E) {
				// The code point maps to one of these printable ASCII symbols
				// (including the space character):
				//
				//      !"#%&',/0123456789:;<=>@ABCDEFGHIJKLMNO
				//     PQRSTUVWXYZ_`abcdefghijklmnopqrstuvwxyz~
				//
				// These can safely be used directly.
				string = stringFromCharCode(codePoint);
			}
			else if (codePoint <= 0xFF) {
				// https://mathiasbynens.be/notes/javascript-escapes#hexadecimal
				string = '\\x' + pad(hex(codePoint), 2);
			}
			else { // `codePoint <= 0xFFFF` holds true.
				// https://mathiasbynens.be/notes/javascript-escapes#unicode
				string = '\\u' + pad(hex(codePoint), 4);
			}

			// There’s no need to account for astral symbols / surrogate pairs here,
			// since `codePointToString` is private and only used for BMP code points.
			// But if that’s what you need, just add an `else` block with this code:
			//
			//     string = '\\u' + pad(hex(highSurrogate(codePoint)), 4)
			//     	+ '\\u' + pad(hex(lowSurrogate(codePoint)), 4);

			return string;
		};

		var symbolToCodePoint = function(symbol) {
			var length = symbol.length;
			var first = symbol.charCodeAt(0);
			var second;
			if (
				first >= HIGH_SURROGATE_MIN && first <= HIGH_SURROGATE_MAX &&
				length > 1 // There is a next code unit.
			) {
				// `first` is a high surrogate, and there is a next character. Assume
				// it’s a low surrogate (else it’s invalid usage of Regenerate anyway).
				second = symbol.charCodeAt(1);
				// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
				return (first - HIGH_SURROGATE_MIN) * 0x400 +
					second - LOW_SURROGATE_MIN + 0x10000;
			}
			return first;
		};

		var createBMPCharacterClasses = function(data) {
			// Iterate over the data per `(start, end)` pair.
			var result = '';
			var index = 0;
			var start;
			var end;
			var length = data.length;
			if (dataIsSingleton(data)) {
				return codePointToString(data[0]);
			}
			while (index < length) {
				start = data[index];
				end = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.
				if (start == end) {
					result += codePointToString(start);
				} else if (start + 1 == end) {
					result += codePointToString(start) + codePointToString(end);
				} else {
					result += codePointToString(start) + '-' + codePointToString(end);
				}
				index += 2;
			}
			return '[' + result + ']';
		};

		var splitAtBMP = function(data) {
			// Iterate over the data per `(start, end)` pair.
			var loneHighSurrogates = [];
			var loneLowSurrogates = [];
			var bmp = [];
			var astral = [];
			var index = 0;
			var start;
			var end;
			var length = data.length;
			while (index < length) {
				start = data[index];
				end = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.

				if (start < HIGH_SURROGATE_MIN) {

					// The range starts and ends before the high surrogate range.
					// E.g. (0, 0x10).
					if (end < HIGH_SURROGATE_MIN) {
						bmp.push(start, end + 1);
					}

					// The range starts before the high surrogate range and ends within it.
					// E.g. (0, 0xD855).
					if (end >= HIGH_SURROGATE_MIN && end <= HIGH_SURROGATE_MAX) {
						bmp.push(start, HIGH_SURROGATE_MIN);
						loneHighSurrogates.push(HIGH_SURROGATE_MIN, end + 1);
					}

					// The range starts before the high surrogate range and ends in the low
					// surrogate range. E.g. (0, 0xDCFF).
					if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
						bmp.push(start, HIGH_SURROGATE_MIN);
						loneHighSurrogates.push(HIGH_SURROGATE_MIN, HIGH_SURROGATE_MAX + 1);
						loneLowSurrogates.push(LOW_SURROGATE_MIN, end + 1);
					}

					// The range starts before the high surrogate range and ends after the
					// low surrogate range. E.g. (0, 0x10FFFF).
					if (end > LOW_SURROGATE_MAX) {
						bmp.push(start, HIGH_SURROGATE_MIN);
						loneHighSurrogates.push(HIGH_SURROGATE_MIN, HIGH_SURROGATE_MAX + 1);
						loneLowSurrogates.push(LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1);
						if (end <= 0xFFFF) {
							bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
						} else {
							bmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);
							astral.push(0xFFFF + 1, end + 1);
						}
					}

				} else if (start >= HIGH_SURROGATE_MIN && start <= HIGH_SURROGATE_MAX) {

					// The range starts and ends in the high surrogate range.
					// E.g. (0xD855, 0xD866).
					if (end >= HIGH_SURROGATE_MIN && end <= HIGH_SURROGATE_MAX) {
						loneHighSurrogates.push(start, end + 1);
					}

					// The range starts in the high surrogate range and ends in the low
					// surrogate range. E.g. (0xD855, 0xDCFF).
					if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
						loneHighSurrogates.push(start, HIGH_SURROGATE_MAX + 1);
						loneLowSurrogates.push(LOW_SURROGATE_MIN, end + 1);
					}

					// The range starts in the high surrogate range and ends after the low
					// surrogate range. E.g. (0xD855, 0x10FFFF).
					if (end > LOW_SURROGATE_MAX) {
						loneHighSurrogates.push(start, HIGH_SURROGATE_MAX + 1);
						loneLowSurrogates.push(LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1);
						if (end <= 0xFFFF) {
							bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
						} else {
							bmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);
							astral.push(0xFFFF + 1, end + 1);
						}
					}

				} else if (start >= LOW_SURROGATE_MIN && start <= LOW_SURROGATE_MAX) {

					// The range starts and ends in the low surrogate range.
					// E.g. (0xDCFF, 0xDDFF).
					if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
						loneLowSurrogates.push(start, end + 1);
					}

					// The range starts in the low surrogate range and ends after the low
					// surrogate range. E.g. (0xDCFF, 0x10FFFF).
					if (end > LOW_SURROGATE_MAX) {
						loneLowSurrogates.push(start, LOW_SURROGATE_MAX + 1);
						if (end <= 0xFFFF) {
							bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
						} else {
							bmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);
							astral.push(0xFFFF + 1, end + 1);
						}
					}

				} else if (start > LOW_SURROGATE_MAX && start <= 0xFFFF) {

					// The range starts and ends after the low surrogate range.
					// E.g. (0xFFAA, 0x10FFFF).
					if (end <= 0xFFFF) {
						bmp.push(start, end + 1);
					} else {
						bmp.push(start, 0xFFFF + 1);
						astral.push(0xFFFF + 1, end + 1);
					}

				} else {

					// The range starts and ends in the astral range.
					astral.push(start, end + 1);

				}

				index += 2;
			}
			return {
				'loneHighSurrogates': loneHighSurrogates,
				'loneLowSurrogates': loneLowSurrogates,
				'bmp': bmp,
				'astral': astral
			};
		};

		var optimizeSurrogateMappings = function(surrogateMappings) {
			var result = [];
			var tmpLow = [];
			var addLow = false;
			var mapping;
			var nextMapping;
			var highSurrogates;
			var lowSurrogates;
			var nextHighSurrogates;
			var nextLowSurrogates;
			var index = -1;
			var length = surrogateMappings.length;
			while (++index < length) {
				mapping = surrogateMappings[index];
				nextMapping = surrogateMappings[index + 1];
				if (!nextMapping) {
					result.push(mapping);
					continue;
				}
				highSurrogates = mapping[0];
				lowSurrogates = mapping[1];
				nextHighSurrogates = nextMapping[0];
				nextLowSurrogates = nextMapping[1];

				// Check for identical high surrogate ranges.
				tmpLow = lowSurrogates;
				while (
					nextHighSurrogates &&
					highSurrogates[0] == nextHighSurrogates[0] &&
					highSurrogates[1] == nextHighSurrogates[1]
				) {
					// Merge with the next item.
					if (dataIsSingleton(nextLowSurrogates)) {
						tmpLow = dataAdd(tmpLow, nextLowSurrogates[0]);
					} else {
						tmpLow = dataAddRange(
							tmpLow,
							nextLowSurrogates[0],
							nextLowSurrogates[1] - 1
						);
					}
					++index;
					mapping = surrogateMappings[index];
					highSurrogates = mapping[0];
					lowSurrogates = mapping[1];
					nextMapping = surrogateMappings[index + 1];
					nextHighSurrogates = nextMapping && nextMapping[0];
					nextLowSurrogates = nextMapping && nextMapping[1];
					addLow = true;
				}
				result.push([
					highSurrogates,
					addLow ? tmpLow : lowSurrogates
				]);
				addLow = false;
			}
			return optimizeByLowSurrogates(result);
		};

		var optimizeByLowSurrogates = function(surrogateMappings) {
			if (surrogateMappings.length == 1) {
				return surrogateMappings;
			}
			var index = -1;
			var innerIndex = -1;
			while (++index < surrogateMappings.length) {
				var mapping = surrogateMappings[index];
				var lowSurrogates = mapping[1];
				var lowSurrogateStart = lowSurrogates[0];
				var lowSurrogateEnd = lowSurrogates[1];
				innerIndex = index; // Note: the loop starts at the next index.
				while (++innerIndex < surrogateMappings.length) {
					var otherMapping = surrogateMappings[innerIndex];
					var otherLowSurrogates = otherMapping[1];
					var otherLowSurrogateStart = otherLowSurrogates[0];
					var otherLowSurrogateEnd = otherLowSurrogates[1];
					if (
						lowSurrogateStart == otherLowSurrogateStart &&
						lowSurrogateEnd == otherLowSurrogateEnd
					) {
						// Add the code points in the other item to this one.
						if (dataIsSingleton(otherMapping[0])) {
							mapping[0] = dataAdd(mapping[0], otherMapping[0][0]);
						} else {
							mapping[0] = dataAddRange(
								mapping[0],
								otherMapping[0][0],
								otherMapping[0][1] - 1
							);
						}
						// Remove the other, now redundant, item.
						surrogateMappings.splice(innerIndex, 1);
						--innerIndex;
					}
				}
			}
			return surrogateMappings;
		};

		var surrogateSet = function(data) {
			// Exit early if `data` is an empty set.
			if (!data.length) {
				return [];
			}

			// Iterate over the data per `(start, end)` pair.
			var index = 0;
			var start;
			var end;
			var startHigh;
			var startLow;
			var prevStartHigh = 0;
			var prevEndHigh = 0;
			var tmpLow = [];
			var endHigh;
			var endLow;
			var surrogateMappings = [];
			var length = data.length;
			var dataHigh = [];
			while (index < length) {
				start = data[index];
				end = data[index + 1] - 1;

				startHigh = highSurrogate(start);
				startLow = lowSurrogate(start);
				endHigh = highSurrogate(end);
				endLow = lowSurrogate(end);

				var startsWithLowestLowSurrogate = startLow == LOW_SURROGATE_MIN;
				var endsWithHighestLowSurrogate = endLow == LOW_SURROGATE_MAX;
				var complete = false;

				// Append the previous high-surrogate-to-low-surrogate mappings.
				// Step 1: `(startHigh, startLow)` to `(startHigh, LOW_SURROGATE_MAX)`.
				if (
					startHigh == endHigh ||
					startsWithLowestLowSurrogate && endsWithHighestLowSurrogate
				) {
					surrogateMappings.push([
						[startHigh, endHigh + 1],
						[startLow, endLow + 1]
					]);
					complete = true;
				} else {
					surrogateMappings.push([
						[startHigh, startHigh + 1],
						[startLow, LOW_SURROGATE_MAX + 1]
					]);
				}

				// Step 2: `(startHigh + 1, LOW_SURROGATE_MIN)` to
				// `(endHigh - 1, LOW_SURROGATE_MAX)`.
				if (!complete && startHigh + 1 < endHigh) {
					if (endsWithHighestLowSurrogate) {
						// Combine step 2 and step 3.
						surrogateMappings.push([
							[startHigh + 1, endHigh + 1],
							[LOW_SURROGATE_MIN, endLow + 1]
						]);
						complete = true;
					} else {
						surrogateMappings.push([
							[startHigh + 1, endHigh],
							[LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1]
						]);
					}
				}

				// Step 3. `(endHigh, LOW_SURROGATE_MIN)` to `(endHigh, endLow)`.
				if (!complete) {
					surrogateMappings.push([
						[endHigh, endHigh + 1],
						[LOW_SURROGATE_MIN, endLow + 1]
					]);
				}

				prevStartHigh = startHigh;
				prevEndHigh = endHigh;

				index += 2;
			}

			// The format of `surrogateMappings` is as follows:
			//
			//     [ surrogateMapping1, surrogateMapping2 ]
			//
			// i.e.:
			//
			//     [
			//       [ highSurrogates1, lowSurrogates1 ],
			//       [ highSurrogates2, lowSurrogates2 ]
			//     ]
			return optimizeSurrogateMappings(surrogateMappings);
		};

		var createSurrogateCharacterClasses = function(surrogateMappings) {
			var result = [];
			forEach(surrogateMappings, function(surrogateMapping) {
				var highSurrogates = surrogateMapping[0];
				var lowSurrogates = surrogateMapping[1];
				result.push(
					createBMPCharacterClasses(highSurrogates) +
					createBMPCharacterClasses(lowSurrogates)
				);
			});
			return result.join('|');
		};

		var createCharacterClassesFromData = function(data, bmpOnly) {
			var result = [];

			var parts = splitAtBMP(data);
			var loneHighSurrogates = parts.loneHighSurrogates;
			var loneLowSurrogates = parts.loneLowSurrogates;
			var bmp = parts.bmp;
			var astral = parts.astral;
			var hasAstral = !dataIsEmpty(parts.astral);
			var hasLoneHighSurrogates = !dataIsEmpty(loneHighSurrogates);
			var hasLoneLowSurrogates = !dataIsEmpty(loneLowSurrogates);

			var surrogateMappings = surrogateSet(astral);

			if (bmpOnly) {
				bmp = dataAddData(bmp, loneHighSurrogates);
				hasLoneHighSurrogates = false;
				bmp = dataAddData(bmp, loneLowSurrogates);
				hasLoneLowSurrogates = false;
			}

			if (!dataIsEmpty(bmp)) {
				// The data set contains BMP code points that are not high surrogates
				// needed for astral code points in the set.
				result.push(createBMPCharacterClasses(bmp));
			}
			if (surrogateMappings.length) {
				// The data set contains astral code points; append character classes
				// based on their surrogate pairs.
				result.push(createSurrogateCharacterClasses(surrogateMappings));
			}
			// https://gist.github.com/mathiasbynens/bbe7f870208abcfec860
			if (hasLoneHighSurrogates) {
				result.push(
					createBMPCharacterClasses(loneHighSurrogates) +
					// Make sure the high surrogates aren’t part of a surrogate pair.
					'(?![\\uDC00-\\uDFFF])'
				);
			}
			if (hasLoneLowSurrogates) {
				result.push(
					// Make sure the low surrogates aren’t part of a surrogate pair.
					'(?:[^\\uD800-\\uDBFF]|^)' +
					createBMPCharacterClasses(loneLowSurrogates)
				);
			}
			return result.join('|');
		};

		/*--------------------------------------------------------------------------*/

		// `regenerate` can be used as a constructor (and new methods can be added to
		// its prototype) but also as a regular function, the latter of which is the
		// documented and most common usage. For that reason, it’s not capitalized.
		var regenerate = function(value) {
			if (arguments.length > 1) {
				value = slice.call(arguments);
			}
			if (this instanceof regenerate) {
				this.data = [];
				return value ? this.add(value) : this;
			}
			return (new regenerate).add(value);
		};

		regenerate.version = '1.2.0';

		var proto = regenerate.prototype;
		extend(proto, {
			'add': function(value) {
				var $this = this;
				if (value == null) {
					return $this;
				}
				if (value instanceof regenerate) {
					// Allow passing other Regenerate instances.
					$this.data = dataAddData($this.data, value.data);
					return $this;
				}
				if (arguments.length > 1) {
					value = slice.call(arguments);
				}
				if (isArray(value)) {
					forEach(value, function(item) {
						$this.add(item);
					});
					return $this;
				}
				$this.data = dataAdd(
					$this.data,
					isNumber(value) ? value : symbolToCodePoint(value)
				);
				return $this;
			},
			'remove': function(value) {
				var $this = this;
				if (value == null) {
					return $this;
				}
				if (value instanceof regenerate) {
					// Allow passing other Regenerate instances.
					$this.data = dataRemoveData($this.data, value.data);
					return $this;
				}
				if (arguments.length > 1) {
					value = slice.call(arguments);
				}
				if (isArray(value)) {
					forEach(value, function(item) {
						$this.remove(item);
					});
					return $this;
				}
				$this.data = dataRemove(
					$this.data,
					isNumber(value) ? value : symbolToCodePoint(value)
				);
				return $this;
			},
			'addRange': function(start, end) {
				var $this = this;
				$this.data = dataAddRange($this.data,
					isNumber(start) ? start : symbolToCodePoint(start),
					isNumber(end) ? end : symbolToCodePoint(end)
				);
				return $this;
			},
			'removeRange': function(start, end) {
				var $this = this;
				var startCodePoint = isNumber(start) ? start : symbolToCodePoint(start);
				var endCodePoint = isNumber(end) ? end : symbolToCodePoint(end);
				$this.data = dataRemoveRange(
					$this.data,
					startCodePoint,
					endCodePoint
				);
				return $this;
			},
			'intersection': function(argument) {
				var $this = this;
				// Allow passing other Regenerate instances.
				// TODO: Optimize this by writing and using `dataIntersectionData()`.
				var array = argument instanceof regenerate ?
					dataToArray(argument.data) :
					argument;
				$this.data = dataIntersection($this.data, array);
				return $this;
			},
			'contains': function(codePoint) {
				return dataContains(
					this.data,
					isNumber(codePoint) ? codePoint : symbolToCodePoint(codePoint)
				);
			},
			'clone': function() {
				var set = new regenerate;
				set.data = this.data.slice(0);
				return set;
			},
			'toString': function(options) {
				var result = createCharacterClassesFromData(
					this.data,
					options ? options.bmpOnly : false
				);
				// Use `\0` instead of `\x00` where possible.
				return result.replace(regexNull, '\\0$1');
			},
			'toRegExp': function(flags) {
				return RegExp(this.toString(), flags || '');
			},
			'valueOf': function() { // Note: `valueOf` is aliased as `toArray`.
				return dataToArray(this.data);
			}
		});

		proto.toArray = proto.valueOf;

		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return regenerate;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		}	else if (freeExports && !freeExports.nodeType) {
			if (freeModule) { // in Node.js, io.js, or RingoJS v0.8.0+
				freeModule.exports = regenerate;
			} else { // in Narwhal or RingoJS v0.7.0-
				freeExports.regenerate = regenerate;
			}
		} else { // in Rhino or a web browser
			root.regenerate = regenerate;
		}

	}(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(33)(module), (function() { return this; }())))

/***/ },
/* 2106 */
[7088, 104],
/* 2107 */
1316,
/* 2108 */
[7101, 4, 12],
/* 2109 */
[7105, 104],
/* 2110 */
1295,
/* 2111 */
[7026, 5919],
/* 2112 */
[7123, 1175, 4, 12],
/* 2113 */
[7088, 104],
/* 2114 */
1316,
/* 2115 */
[7101, 4, 12],
/* 2116 */
[7105, 104],
/* 2117 */
[7026, 5968],
/* 2118 */
1295,
/* 2119 */
[7024, 5970, 2118, 5971],
/* 2120 */
1322,
/* 2121 */
[7128, 5975],
/* 2122 */
1323,
/* 2123 */
746,
/* 2124 */
[7133, 5982, 405],
/* 2125 */
[7135, 5977, 2123, 2124, 2127, 6007, 6008, 6009, 161, 147],
/* 2126 */
[7137, 5998],
/* 2127 */
[7139, 2126, 405],
/* 2128 */
[7141, 6006],
/* 2129 */
[7142, 5985, 147, 261],
/* 2130 */
1334,
/* 2131 */
1335,
/* 2132 */
[7167, 147],
/* 2133 */
[7180, 261],
/* 2134 */
[7183, 1174, 5979, 6000],
/* 2135 */
[7184, 1168, 2131, 680, 161, 678, 1171, 260, 2120, 1172],
/* 2136 */
[7186, 680, 161, 678, 260, 147],
/* 2137 */
1345,
/* 2138 */
[7035, 6035],
/* 2139 */
[7053, 6046],
/* 2140 */
[7056, 1180],
/* 2141 */
[7059, 493, 124],
/* 2142 */
[7064, 2143, 682, 2144, 1182, 1181, 684, 6047, 1185, 124, 406],
/* 2143 */
1305,
/* 2144 */
[7067, 1182],
/* 2145 */
[7070, 683],
/* 2146 */
740,
/* 2147 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(76)["default"];

	exports.__esModule = true;

	var _babelHelperBuilderBinaryAssignmentOperatorVisitor = __webpack_require__(6064);

	var _babelHelperBuilderBinaryAssignmentOperatorVisitor2 = _interopRequireDefault(_babelHelperBuilderBinaryAssignmentOperatorVisitor);

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  return {
	    inherits: __webpack_require__(1361),

	    visitor: _babelHelperBuilderBinaryAssignmentOperatorVisitor2["default"]({
	      operator: "**",

	      build: function build(left, right) {
	        return t.callExpression(t.memberExpression(t.identifier("Math"), t.identifier("pow")), [left, right]);
	      }
	    })
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 2148 */
[7123, 2173, 44, 57],
/* 2149 */
[7088, 333],
/* 2150 */
1316,
/* 2151 */
[7101, 44, 57],
/* 2152 */
[7105, 333],
/* 2153 */
[7026, 6113],
/* 2154 */
1295,
/* 2155 */
[7024, 6115, 2154, 6116],
/* 2156 */
1323,
/* 2157 */
746,
/* 2158 */
[7133, 6129, 407],
/* 2159 */
[7137, 6146],
/* 2160 */
[7139, 2159, 407],
/* 2161 */
[7140, 266],
/* 2162 */
[7141, 6154],
/* 2163 */
[7142, 6132, 148, 265],
/* 2164 */
1334,
/* 2165 */
[7166, 171, 266],
/* 2166 */
[7167, 148],
/* 2167 */
[7170, 6138, 171],
/* 2168 */
[7171, 6128, 685, 687],
/* 2169 */
[7180, 265],
/* 2170 */
[7182, 6126, 2158, 6144],
/* 2171 */
[7186, 1194, 171, 1193, 332, 148],
/* 2172 */
1345,
/* 2173 */
[7031, 6182],
/* 2174 */
[7036, 6187],
/* 2175 */
536,
/* 2176 */
[7053, 6197],
/* 2177 */
[7056, 1197],
/* 2178 */
[7059, 495, 125],
/* 2179 */
[7064, 2180, 688, 2181, 1199, 1198, 690, 6198, 1202, 125, 408],
/* 2180 */
1305,
/* 2181 */
[7067, 1199],
/* 2182 */
[7070, 689],
/* 2183 */
740,
/* 2184 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  function build(node, nodes, scope) {
	    var first = node.specifiers[0];
	    if (!t.isExportNamespaceSpecifier(first) && !t.isExportDefaultSpecifier(first)) return;

	    var specifier = node.specifiers.shift();
	    var uid = scope.generateUidIdentifier(specifier.exported.name);

	    var newSpecifier = undefined;
	    if (t.isExportNamespaceSpecifier(specifier)) {
	      newSpecifier = t.importNamespaceSpecifier(uid);
	    } else {
	      newSpecifier = t.importDefaultSpecifier(uid);
	    }

	    nodes.push(t.importDeclaration([newSpecifier], node.source));
	    nodes.push(t.exportNamedDeclaration(null, [t.exportSpecifier(uid, specifier.exported)]));

	    build(node, nodes, scope);
	  }

	  return {
	    inherits: __webpack_require__(1362),

	    visitor: {
	      ExportNamedDeclaration: function ExportNamedDeclaration(path) {
	        var node = path.node;
	        var scope = path.scope;

	        var nodes = [];
	        build(node, nodes, scope);
	        if (!nodes.length) return;

	        if (node.specifiers.length >= 1) {
	          nodes.push(node);
	        }
	        path.replaceWithMultiple(nodes);
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 2185 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(6214)["default"];

	exports.__esModule = true;

	exports["default"] = function (_ref2) {
	  var t = _ref2.types;

	  var FLOW_DIRECTIVE = "@flow";

	  return {
	    inherits: __webpack_require__(761),

	    visitor: {
	      Program: function Program(path, _ref3) {
	        var comments = _ref3.file.ast.comments;

	        for (var _iterator = (comments /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	          var _ref;

	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }

	          var comment = _ref;

	          if (comment.value.indexOf(FLOW_DIRECTIVE) >= 0) {
	            // remove flow directive
	            comment.value = comment.value.replace(FLOW_DIRECTIVE, "");

	            // remove the comment completely if it only consists of whitespace and/or stars
	            if (!comment.value.replace(/\*/g, "").trim()) comment.ignore = true;
	          }
	        }
	      },

	      Flow: function Flow(path) {
	        path.remove();
	      },

	      ClassProperty: function ClassProperty(path) {
	        path.node.typeAnnotation = null;
	        if (!path.node.value) path.remove();
	      },

	      Class: function Class(_ref4) {
	        var node = _ref4.node;

	        node["implements"] = null;
	      },

	      Function: function Function(_ref5) {
	        var node = _ref5.node;

	        for (var i = 0; i < node.params.length; i++) {
	          var param = node.params[i];
	          param.optional = false;
	        }
	      },

	      TypeCastExpression: function TypeCastExpression(path) {
	        var node = path.node;

	        do {
	          node = node.expression;
	        } while (t.isTypeCastExpression(node));
	        path.replaceWith(node);
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 2186 */
734,
/* 2187 */
512,
/* 2188 */
513,
/* 2189 */
[7064, 6228, 6222, 6229, 1206, 2188, 691, 6226, 2191, 692, 496],
/* 2190 */
738,
/* 2191 */
[7069, 692, 2188, 496],
/* 2192 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  function getTempId(scope) {
	    var id = scope.path.getData("functionBind");
	    if (id) return id;

	    id = scope.generateDeclaredUidIdentifier("context");
	    return scope.path.setData("functionBind", id);
	  }

	  function getStaticContext(bind, scope) {
	    var object = bind.object || bind.callee.object;
	    return scope.isStatic(object) && object;
	  }

	  function inferBindContext(bind, scope) {
	    var staticContext = getStaticContext(bind, scope);
	    if (staticContext) return staticContext;

	    var tempId = getTempId(scope);
	    if (bind.object) {
	      bind.callee = t.sequenceExpression([t.assignmentExpression("=", tempId, bind.object), bind.callee]);
	    } else {
	      bind.callee.object = t.assignmentExpression("=", tempId, bind.callee.object);
	    }
	    return tempId;
	  }

	  return {
	    inherits: __webpack_require__(1363),

	    visitor: {
	      CallExpression: function CallExpression(_ref2) {
	        var node = _ref2.node;
	        var scope = _ref2.scope;

	        var bind = node.callee;
	        if (!t.isBindExpression(bind)) return;

	        var context = inferBindContext(bind, scope);
	        node.callee = t.memberExpression(bind.callee, t.identifier("call"));
	        node.arguments.unshift(context);
	      },

	      BindExpression: function BindExpression(path) {
	        var node = path.node;
	        var scope = path.scope;

	        var context = inferBindContext(node, scope);
	        path.replaceWith(t.callExpression(t.memberExpression(node.callee, t.identifier("bind")), [context]));
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 2193 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(6247)["default"];

	exports.__esModule = true;

	exports["default"] = function (_ref3) {
	  var t = _ref3.types;

	  function hasSpread(node) {
	    for (var _iterator = (node.properties /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var prop = _ref;

	      if (t.isSpreadProperty(prop)) {
	        return true;
	      }
	    }
	    return false;
	  }

	  return {
	    inherits: __webpack_require__(1364),

	    visitor: {
	      ObjectExpression: function ObjectExpression(path, file) {
	        if (!hasSpread(path.node)) return;

	        var args = [];
	        var props = [];

	        function push() {
	          if (!props.length) return;
	          args.push(t.objectExpression(props));
	          props = [];
	        }

	        for (var _iterator2 = (path.node.properties /*: Array*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	          var _ref2;

	          if (_isArray2) {
	            if (_i2 >= _iterator2.length) break;
	            _ref2 = _iterator2[_i2++];
	          } else {
	            _i2 = _iterator2.next();
	            if (_i2.done) break;
	            _ref2 = _i2.value;
	          }

	          var prop = _ref2;

	          if (t.isSpreadProperty(prop)) {
	            push();
	            args.push(prop.argument);
	          } else {
	            props.push(prop);
	          }
	        }

	        push();

	        if (!t.isObjectExpression(args[0])) {
	          args.unshift(t.objectExpression([]));
	        }

	        path.replaceWith(t.callExpression(file.addHelper("extends"), args));
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 2194 */
734,
/* 2195 */
512,
/* 2196 */
513,
/* 2197 */
[7064, 6261, 6255, 6262, 1209, 2196, 693, 6259, 2199, 694, 497],
/* 2198 */
738,
/* 2199 */
[7069, 694, 2196, 497],
/* 2200 */
734,
/* 2201 */
512,
/* 2202 */
513,
/* 2203 */
[7064, 6291, 6285, 6292, 1212, 2202, 695, 6289, 2205, 696, 498],
/* 2204 */
738,
/* 2205 */
[7069, 696, 2202, 498],
/* 2206 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(6307)["default"];

	exports.__esModule = true;

	var _path = __webpack_require__(175);

	var _path2 = _interopRequireDefault(_path);

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  function addDisplayName(id, call) {
	    var props = call.arguments[0].properties;
	    var safe = true;

	    for (var i = 0; i < props.length; i++) {
	      var prop = props[i];
	      var key = t.toComputedKey(prop);
	      if (t.isLiteral(key, { value: "displayName" })) {
	        safe = false;
	        break;
	      }
	    }

	    if (safe) {
	      props.unshift(t.objectProperty(t.identifier("displayName"), t.stringLiteral(id)));
	    }
	  }

	  var isCreateClassCallExpression = t.buildMatchMemberExpression("React.createClass");

	  function isCreateClass(node) {
	    if (!node || !t.isCallExpression(node)) return false;

	    // not React.createClass call member object
	    if (!isCreateClassCallExpression(node.callee)) return false;

	    // no call arguments
	    var args = node.arguments;
	    if (args.length !== 1) return false;

	    // first node arg is not an object
	    var first = args[0];
	    if (!t.isObjectExpression(first)) return false;

	    return true;
	  }

	  return {
	    visitor: {
	      ExportDefaultDeclaration: function ExportDefaultDeclaration(_ref2, state) {
	        var node = _ref2.node;

	        if (isCreateClass(node.declaration)) {
	          var displayName = state.file.opts.basename;

	          // ./{module name}/index.js
	          if (displayName === "index") {
	            displayName = _path2["default"].basename(_path2["default"].dirname(state.file.opts.filename));
	          }

	          addDisplayName(displayName, node.declaration);
	        }
	      },

	      CallExpression: function CallExpression(path) {
	        var node = path.node;

	        if (!isCreateClass(node)) return;

	        var id = undefined;

	        // crawl up the ancestry looking for possible candidates for displayName inference
	        path.find(function (path) {
	          if (path.isAssignmentExpression()) {
	            id = path.node.left;
	          } else if (path.isObjectProperty()) {
	            id = path.node.key;
	          } else if (path.isVariableDeclarator()) {
	            id = path.node.id;
	          } else if (path.isStatement()) {
	            // we've hit a statement, we should stop crawling up
	            return true;
	          }

	          // we've got an id! no need to continue
	          if (id) return true;
	        });

	        // ensure that we have an identifier we can inherit from
	        if (!id) return;

	        // foo.bar -> bar
	        if (t.isMemberExpression(id)) {
	          id = id.property;
	        }

	        // identifiers are the only thing we can reliably get a name from
	        if (t.isIdentifier(id)) {
	          addDisplayName(id.name, node);
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 2207 */
734,
/* 2208 */
512,
/* 2209 */
513,
/* 2210 */
[7064, 6323, 6317, 6324, 1215, 2209, 697, 6321, 2212, 698, 499],
/* 2211 */
738,
/* 2212 */
[7069, 698, 2209, 499],
/* 2213 */
[7123, 2237, 50, 66],
/* 2214 */
[7088, 336],
/* 2215 */
1316,
/* 2216 */
[7101, 50, 66],
/* 2217 */
[7105, 336],
/* 2218 */
[7026, 6384],
/* 2219 */
1295,
/* 2220 */
1323,
/* 2221 */
746,
/* 2222 */
[7133, 6401, 409],
/* 2223 */
[7137, 6418],
/* 2224 */
[7139, 2223, 409],
/* 2225 */
[7140, 270],
/* 2226 */
[7141, 6426],
/* 2227 */
[7142, 6404, 149, 269],
/* 2228 */
1334,
/* 2229 */
[7166, 172, 270],
/* 2230 */
[7167, 149],
/* 2231 */
[7170, 6410, 172],
/* 2232 */
[7171, 6400, 699, 701],
/* 2233 */
[7180, 269],
/* 2234 */
[7182, 6398, 2222, 6416],
/* 2235 */
[7186, 1224, 172, 1223, 335, 149],
/* 2236 */
1345,
/* 2237 */
[7031, 6453],
/* 2238 */
[7036, 6458],
/* 2239 */
536,
/* 2240 */
[7053, 6468],
/* 2241 */
[7056, 1227],
/* 2242 */
[7059, 501, 126],
/* 2243 */
[7064, 2244, 702, 2245, 1229, 1228, 704, 6469, 1232, 126, 410],
/* 2244 */
1305,
/* 2245 */
[7067, 1229],
/* 2246 */
[7070, 703],
/* 2247 */
740,
/* 2248 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(86)["default"];

	exports.__esModule = true;

	exports["default"] = function (_ref2) {
	  var t = _ref2.types;

	  var JSX_ANNOTATION_REGEX = /\*?\s*@jsx\s+([^\s]+)/;

	  var visitor = __webpack_require__(6487)({
	    pre: function pre(state) {
	      var tagName = state.tagName;
	      var args = state.args;
	      if (t.react.isCompatTag(tagName)) {
	        args.push(t.stringLiteral(tagName));
	      } else {
	        args.push(state.tagExpr);
	      }
	    },

	    post: function post(state, pass) {
	      state.callee = pass.get("jsxIdentifier");
	    }
	  });

	  visitor.Program = function (path, state) {
	    var file = state.file;

	    var id = state.opts.pragma || "React.createElement";

	    for (var _iterator = (file.ast.comments /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var comment = _ref;

	      var matches = JSX_ANNOTATION_REGEX.exec(comment.value);
	      if (matches) {
	        id = matches[1];
	        if (id === "React.DOM") {
	          throw file.buildCodeFrameError(comment, "The @jsx React.DOM pragma has been deprecated as of React 0.12");
	        } else {
	          break;
	        }
	      }
	    }

	    state.set("jsxIdentifier", id.split(".").map(function (name) {
	      return t.identifier(name);
	    }).reduce(function (object, property) {
	      return t.memberExpression(object, property);
	    }));
	  };

	  return {
	    inherits: __webpack_require__(524),
	    visitor: visitor
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 2249 */
[7123, 2273, 51, 67],
/* 2250 */
[7088, 339],
/* 2251 */
1316,
/* 2252 */
[7101, 51, 67],
/* 2253 */
[7105, 339],
/* 2254 */
[7026, 6535],
/* 2255 */
1295,
/* 2256 */
1323,
/* 2257 */
746,
/* 2258 */
[7133, 6552, 411],
/* 2259 */
[7137, 6569],
/* 2260 */
[7139, 2259, 411],
/* 2261 */
[7140, 274],
/* 2262 */
[7141, 6577],
/* 2263 */
[7142, 6555, 150, 273],
/* 2264 */
1334,
/* 2265 */
[7166, 173, 274],
/* 2266 */
[7167, 150],
/* 2267 */
[7170, 6561, 173],
/* 2268 */
[7171, 6551, 705, 707],
/* 2269 */
[7180, 273],
/* 2270 */
[7182, 6549, 2258, 6567],
/* 2271 */
[7186, 1242, 173, 1241, 338, 150],
/* 2272 */
1345,
/* 2273 */
[7031, 6604],
/* 2274 */
[7036, 6609],
/* 2275 */
536,
/* 2276 */
[7053, 6619],
/* 2277 */
[7056, 1245],
/* 2278 */
[7059, 503, 127],
/* 2279 */
[7064, 2280, 708, 2281, 1247, 1246, 710, 6620, 1250, 127, 412],
/* 2280 */
1305,
/* 2281 */
[7067, 1247],
/* 2282 */
[7070, 709],
/* 2283 */
740,
/* 2284 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */

	"use strict";

	var _interopRequireDefault = __webpack_require__(58)["default"];

	var _interopRequireWildcard = __webpack_require__(32)["default"];

	var _assert = __webpack_require__(725);

	var _assert2 = _interopRequireDefault(_assert);

	var _babelTypes = __webpack_require__(36);

	var t = _interopRequireWildcard(_babelTypes);

	var _leap = __webpack_require__(6637);

	var leap = _interopRequireWildcard(_leap);

	var _meta = __webpack_require__(6638);

	var meta = _interopRequireWildcard(_meta);

	var _util = __webpack_require__(2285);

	var util = _interopRequireWildcard(_util);

	var hasOwn = Object.prototype.hasOwnProperty;

	function Emitter(contextId) {
	  _assert2["default"].ok(this instanceof Emitter);
	  t.assertIdentifier(contextId);

	  // Used to generate unique temporary names.
	  this.nextTempId = 0;

	  // In order to make sure the context object does not collide with
	  // anything in the local scope, we might have to rename it, so we
	  // refer to it symbolically instead of just assuming that it will be
	  // called "context".
	  this.contextId = contextId;

	  // An append-only list of Statements that grows each time this.emit is
	  // called.
	  this.listing = [];

	  // A sparse array whose keys correspond to locations in this.listing
	  // that have been marked as branch/jump targets.
	  this.marked = [true];

	  // The last location will be marked when this.getDispatchLoop is
	  // called.
	  this.finalLoc = loc();

	  // A list of all leap.TryEntry statements emitted.
	  this.tryEntries = [];

	  // Each time we evaluate the body of a loop, we tell this.leapManager
	  // to enter a nested loop context that determines the meaning of break
	  // and continue statements therein.
	  this.leapManager = new leap.LeapManager(this);
	}

	var Ep = Emitter.prototype;
	exports.Emitter = Emitter;

	// Offsets into this.listing that could be used as targets for branches or
	// jumps are represented as numeric Literal nodes. This representation has
	// the amazingly convenient benefit of allowing the exact value of the
	// location to be determined at any time, even after generating code that
	// refers to the location.
	function loc() {
	  return t.numericLiteral(-1);
	}

	// Sets the exact value of the given location to the offset of the next
	// Statement emitted.
	Ep.mark = function (loc) {
	  t.assertLiteral(loc);
	  var index = this.listing.length;
	  if (loc.value === -1) {
	    loc.value = index;
	  } else {
	    // Locations can be marked redundantly, but their values cannot change
	    // once set the first time.
	    _assert2["default"].strictEqual(loc.value, index);
	  }
	  this.marked[index] = true;
	  return loc;
	};

	Ep.emit = function (node) {
	  if (t.isExpression(node)) {
	    node = t.expressionStatement(node);
	  }

	  t.assertStatement(node);
	  this.listing.push(node);
	};

	// Shorthand for emitting assignment statements. This will come in handy
	// for assignments to temporary variables.
	Ep.emitAssign = function (lhs, rhs) {
	  this.emit(this.assign(lhs, rhs));
	  return lhs;
	};

	// Shorthand for an assignment statement.
	Ep.assign = function (lhs, rhs) {
	  return t.expressionStatement(t.assignmentExpression("=", lhs, rhs));
	};

	// Convenience function for generating expressions like context.next,
	// context.sent, and context.rval.
	Ep.contextProperty = function (name, computed) {
	  return t.memberExpression(this.contextId, computed ? t.stringLiteral(name) : t.identifier(name), !!computed);
	};

	// Shorthand for setting context.rval and jumping to `context.stop()`.
	Ep.stop = function (rval) {
	  if (rval) {
	    this.setReturnValue(rval);
	  }

	  this.jump(this.finalLoc);
	};

	Ep.setReturnValue = function (valuePath) {
	  t.assertExpression(valuePath.value);

	  this.emitAssign(this.contextProperty("rval"), this.explodeExpression(valuePath));
	};

	Ep.clearPendingException = function (tryLoc, assignee) {
	  t.assertLiteral(tryLoc);

	  var catchCall = t.callExpression(this.contextProperty("catch", true), [tryLoc]);

	  if (assignee) {
	    this.emitAssign(assignee, catchCall);
	  } else {
	    this.emit(catchCall);
	  }
	};

	// Emits code for an unconditional jump to the given location, even if the
	// exact value of the location is not yet known.
	Ep.jump = function (toLoc) {
	  this.emitAssign(this.contextProperty("next"), toLoc);
	  this.emit(t.breakStatement());
	};

	// Conditional jump.
	Ep.jumpIf = function (test, toLoc) {
	  t.assertExpression(test);
	  t.assertLiteral(toLoc);

	  this.emit(t.ifStatement(test, t.blockStatement([this.assign(this.contextProperty("next"), toLoc), t.breakStatement()])));
	};

	// Conditional jump, with the condition negated.
	Ep.jumpIfNot = function (test, toLoc) {
	  t.assertExpression(test);
	  t.assertLiteral(toLoc);

	  var negatedTest = undefined;
	  if (t.isUnaryExpression(test) && test.operator === "!") {
	    // Avoid double negation.
	    negatedTest = test.argument;
	  } else {
	    negatedTest = t.unaryExpression("!", test);
	  }

	  this.emit(t.ifStatement(negatedTest, t.blockStatement([this.assign(this.contextProperty("next"), toLoc), t.breakStatement()])));
	};

	// Returns a unique MemberExpression that can be used to store and
	// retrieve temporary values. Since the object of the member expression is
	// the context object, which is presumed to coexist peacefully with all
	// other local variables, and since we just increment `nextTempId`
	// monotonically, uniqueness is assured.
	Ep.makeTempVar = function () {
	  return this.contextProperty("t" + this.nextTempId++);
	};

	Ep.getContextFunction = function (id) {
	  return t.functionExpression(id || null, /*Anonymous*/
	  [this.contextId], t.blockStatement([this.getDispatchLoop()]), false, // Not a generator anymore!
	  false // Nor an expression.
	  );
	};

	// Turns this.listing into a loop of the form
	//
	//   while (1) switch (context.next) {
	//   case 0:
	//   ...
	//   case n:
	//     return context.stop();
	//   }
	//
	// Each marked location in this.listing will correspond to one generated
	// case statement.
	Ep.getDispatchLoop = function () {
	  var self = this;
	  var cases = [];
	  var current = undefined;

	  // If we encounter a break, continue, or return statement in a switch
	  // case, we can skip the rest of the statements until the next case.
	  var alreadyEnded = false;

	  self.listing.forEach(function (stmt, i) {
	    if (self.marked.hasOwnProperty(i)) {
	      cases.push(t.switchCase(t.numericLiteral(i), current = []));
	      alreadyEnded = false;
	    }

	    if (!alreadyEnded) {
	      current.push(stmt);
	      if (t.isCompletionStatement(stmt)) alreadyEnded = true;
	    }
	  });

	  // Now that we know how many statements there will be in this.listing,
	  // we can finally resolve this.finalLoc.value.
	  this.finalLoc.value = this.listing.length;

	  cases.push(t.switchCase(this.finalLoc, [
	    // Intentionally fall through to the "end" case...
	  ]),

	  // So that the runtime can jump to the final location without having
	  // to know its offset, we provide the "end" case as a synonym.
	  t.switchCase(t.stringLiteral("end"), [
	  // This will check/clear both context.thrown and context.rval.
	  t.returnStatement(t.callExpression(this.contextProperty("stop"), []))]));

	  return t.whileStatement(t.numericLiteral(1), t.switchStatement(t.assignmentExpression("=", this.contextProperty("prev"), this.contextProperty("next")), cases));
	};

	Ep.getTryLocsList = function () {
	  if (this.tryEntries.length === 0) {
	    // To avoid adding a needless [] to the majority of runtime.wrap
	    // argument lists, force the caller to handle this case specially.
	    return null;
	  }

	  var lastLocValue = 0;

	  return t.arrayExpression(this.tryEntries.map(function (tryEntry) {
	    var thisLocValue = tryEntry.firstLoc.value;
	    _assert2["default"].ok(thisLocValue >= lastLocValue, "try entries out of order");
	    lastLocValue = thisLocValue;

	    var ce = tryEntry.catchEntry;
	    var fe = tryEntry.finallyEntry;

	    var locs = [tryEntry.firstLoc,
	    // The null here makes a hole in the array.
	    ce ? ce.firstLoc : null];

	    if (fe) {
	      locs[2] = fe.firstLoc;
	      locs[3] = fe.afterLoc;
	    }

	    return t.arrayExpression(locs);
	  }));
	};

	// All side effects must be realized in order.

	// If any subexpression harbors a leap, all subexpressions must be
	// neutered of side effects.

	// No destructive modification of AST nodes.

	Ep.explode = function (path, ignoreResult) {
	  var node = path.node;
	  var self = this;

	  t.assertNode(node);

	  if (t.isDeclaration(node)) throw getDeclError(node);

	  if (t.isStatement(node)) return self.explodeStatement(path);

	  if (t.isExpression(node)) return self.explodeExpression(path, ignoreResult);

	  switch (node.type) {
	    case "Program":
	      return path.get("body").map(self.explodeStatement, self);

	    case "VariableDeclarator":
	      throw getDeclError(node);

	    // These node types should be handled by their parent nodes
	    // (ObjectExpression, SwitchStatement, and TryStatement, respectively).
	    case "Property":
	    case "SwitchCase":
	    case "CatchClause":
	      throw new Error(node.type + " nodes should be handled by their parents");

	    default:
	      throw new Error("unknown Node of type " + JSON.stringify(node.type));
	  }
	};

	function getDeclError(node) {
	  return new Error("all declarations should have been transformed into " + "assignments before the Exploder began its work: " + JSON.stringify(node));
	}

	Ep.explodeStatement = function (path, labelId) {
	  var stmt = path.node;
	  var self = this;
	  var before = undefined,
	      after = undefined,
	      head = undefined;

	  t.assertStatement(stmt);

	  if (labelId) {
	    t.assertIdentifier(labelId);
	  } else {
	    labelId = null;
	  }

	  // Explode BlockStatement nodes even if they do not contain a yield,
	  // because we don't want or need the curly braces.
	  if (t.isBlockStatement(stmt)) {
	    path.get("body").forEach(function (path) {
	      self.explodeStatement(path);
	    });
	    return;
	  }

	  if (!meta.containsLeap(stmt)) {
	    // Technically we should be able to avoid emitting the statement
	    // altogether if !meta.hasSideEffects(stmt), but that leads to
	    // confusing generated code (for instance, `while (true) {}` just
	    // disappears) and is probably a more appropriate job for a dedicated
	    // dead code elimination pass.
	    self.emit(stmt);
	    return;
	  }

	  switch (stmt.type) {
	    case "ExpressionStatement":
	      self.explodeExpression(path.get("expression"), true);
	      break;

	    case "LabeledStatement":
	      after = loc();

	      // Did you know you can break from any labeled block statement or
	      // control structure? Well, you can! Note: when a labeled loop is
	      // encountered, the leap.LabeledEntry created here will immediately
	      // enclose a leap.LoopEntry on the leap manager's stack, and both
	      // entries will have the same label. Though this works just fine, it
	      // may seem a bit redundant. In theory, we could check here to
	      // determine if stmt knows how to handle its own label; for example,
	      // stmt happens to be a WhileStatement and so we know it's going to
	      // establish its own LoopEntry when we explode it (below). Then this
	      // LabeledEntry would be unnecessary. Alternatively, we might be
	      // tempted not to pass stmt.label down into self.explodeStatement,
	      // because we've handled the label here, but that's a mistake because
	      // labeled loops may contain labeled continue statements, which is not
	      // something we can handle in this generic case. All in all, I think a
	      // little redundancy greatly simplifies the logic of this case, since
	      // it's clear that we handle all possible LabeledStatements correctly
	      // here, regardless of whether they interact with the leap manager
	      // themselves. Also remember that labels and break/continue-to-label
	      // statements are rare, and all of this logic happens at transform
	      // time, so it has no additional runtime cost.
	      self.leapManager.withEntry(new leap.LabeledEntry(after, stmt.label), function () {
	        self.explodeStatement(path.get("body"), stmt.label);
	      });

	      self.mark(after);

	      break;

	    case "WhileStatement":
	      before = loc();
	      after = loc();

	      self.mark(before);
	      self.jumpIfNot(self.explodeExpression(path.get("test")), after);
	      self.leapManager.withEntry(new leap.LoopEntry(after, before, labelId), function () {
	        self.explodeStatement(path.get("body"));
	      });
	      self.jump(before);
	      self.mark(after);

	      break;

	    case "DoWhileStatement":
	      var first = loc();
	      var test = loc();
	      after = loc();

	      self.mark(first);
	      self.leapManager.withEntry(new leap.LoopEntry(after, test, labelId), function () {
	        self.explode(path.get("body"));
	      });
	      self.mark(test);
	      self.jumpIf(self.explodeExpression(path.get("test")), first);
	      self.mark(after);

	      break;

	    case "ForStatement":
	      head = loc();
	      var update = loc();
	      after = loc();

	      if (stmt.init) {
	        // We pass true here to indicate that if stmt.init is an expression
	        // then we do not care about its result.
	        self.explode(path.get("init"), true);
	      }

	      self.mark(head);

	      if (stmt.test) {
	        self.jumpIfNot(self.explodeExpression(path.get("test")), after);
	      } else {
	        // No test means continue unconditionally.
	      }

	      self.leapManager.withEntry(new leap.LoopEntry(after, update, labelId), function () {
	        self.explodeStatement(path.get("body"));
	      });

	      self.mark(update);

	      if (stmt.update) {
	        // We pass true here to indicate that if stmt.update is an
	        // expression then we do not care about its result.
	        self.explode(path.get("update"), true);
	      }

	      self.jump(head);

	      self.mark(after);

	      break;

	    case "TypeCastExpression":
	      return self.explodeExpression(path.get("expression"));

	    case "ForInStatement":
	      head = loc();
	      after = loc();

	      var keyIterNextFn = self.makeTempVar();
	      self.emitAssign(keyIterNextFn, t.callExpression(util.runtimeProperty("keys"), [self.explodeExpression(path.get("right"))]));

	      self.mark(head);

	      var keyInfoTmpVar = self.makeTempVar();
	      self.jumpIf(t.memberExpression(t.assignmentExpression("=", keyInfoTmpVar, t.callExpression(keyIterNextFn, [])), t.identifier("done"), false), after);

	      self.emitAssign(stmt.left, t.memberExpression(keyInfoTmpVar, t.identifier("value"), false));

	      self.leapManager.withEntry(new leap.LoopEntry(after, head, labelId), function () {
	        self.explodeStatement(path.get("body"));
	      });

	      self.jump(head);

	      self.mark(after);

	      break;

	    case "BreakStatement":
	      self.emitAbruptCompletion({
	        type: "break",
	        target: self.leapManager.getBreakLoc(stmt.label)
	      });

	      break;

	    case "ContinueStatement":
	      self.emitAbruptCompletion({
	        type: "continue",
	        target: self.leapManager.getContinueLoc(stmt.label)
	      });

	      break;

	    case "SwitchStatement":
	      // Always save the discriminant into a temporary variable in case the
	      // test expressions overwrite values like context.sent.
	      var disc = self.emitAssign(self.makeTempVar(), self.explodeExpression(path.get("discriminant")));

	      after = loc();
	      var defaultLoc = loc();
	      var condition = defaultLoc;
	      var caseLocs = [];

	      // If there are no cases, .cases might be undefined.
	      var cases = stmt.cases || [];

	      for (var i = cases.length - 1; i >= 0; --i) {
	        var c = cases[i];
	        t.assertSwitchCase(c);

	        if (c.test) {
	          condition = t.conditionalExpression(t.binaryExpression("===", disc, c.test), caseLocs[i] = loc(), condition);
	        } else {
	          caseLocs[i] = defaultLoc;
	        }
	      }

	      var discriminant = path.get("discriminant");
	      discriminant.replaceWith(condition);
	      self.jump(self.explodeExpression(discriminant));

	      self.leapManager.withEntry(new leap.SwitchEntry(after), function () {
	        path.get("cases").forEach(function (casePath) {
	          var i = casePath.key;
	          self.mark(caseLocs[i]);

	          casePath.get("consequent").forEach(function (path) {
	            self.explodeStatement(path);
	          });
	        });
	      });

	      self.mark(after);
	      if (defaultLoc.value === -1) {
	        self.mark(defaultLoc);
	        _assert2["default"].strictEqual(after.value, defaultLoc.value);
	      }

	      break;

	    case "IfStatement":
	      var elseLoc = stmt.alternate && loc();
	      after = loc();

	      self.jumpIfNot(self.explodeExpression(path.get("test")), elseLoc || after);

	      self.explodeStatement(path.get("consequent"));

	      if (elseLoc) {
	        self.jump(after);
	        self.mark(elseLoc);
	        self.explodeStatement(path.get("alternate"));
	      }

	      self.mark(after);

	      break;

	    case "ReturnStatement":
	      self.emitAbruptCompletion({
	        type: "return",
	        value: self.explodeExpression(path.get("argument"))
	      });

	      break;

	    case "WithStatement":
	      throw new Error("WithStatement not supported in generator functions.");

	    case "TryStatement":
	      after = loc();

	      var handler = stmt.handler;

	      var catchLoc = handler && loc();
	      var catchEntry = catchLoc && new leap.CatchEntry(catchLoc, handler.param);

	      var finallyLoc = stmt.finalizer && loc();
	      var finallyEntry = finallyLoc && new leap.FinallyEntry(finallyLoc, after);

	      var tryEntry = new leap.TryEntry(self.getUnmarkedCurrentLoc(), catchEntry, finallyEntry);

	      self.tryEntries.push(tryEntry);
	      self.updateContextPrevLoc(tryEntry.firstLoc);

	      self.leapManager.withEntry(tryEntry, function () {
	        self.explodeStatement(path.get("block"));

	        if (catchLoc) {
	          (function () {
	            if (finallyLoc) {
	              // If we have both a catch block and a finally block, then
	              // because we emit the catch block first, we need to jump over
	              // it to the finally block.
	              self.jump(finallyLoc);
	            } else {
	              // If there is no finally block, then we need to jump over the
	              // catch block to the fall-through location.
	              self.jump(after);
	            }

	            self.updateContextPrevLoc(self.mark(catchLoc));

	            var bodyPath = path.get("handler.body");
	            var safeParam = self.makeTempVar();
	            self.clearPendingException(tryEntry.firstLoc, safeParam);

	            bodyPath.traverse(catchParamVisitor, {
	              safeParam: safeParam,
	              catchParamName: handler.param.name
	            });

	            self.leapManager.withEntry(catchEntry, function () {
	              self.explodeStatement(bodyPath);
	            });
	          })();
	        }

	        if (finallyLoc) {
	          self.updateContextPrevLoc(self.mark(finallyLoc));

	          self.leapManager.withEntry(finallyEntry, function () {
	            self.explodeStatement(path.get("finalizer"));
	          });

	          self.emit(t.returnStatement(t.callExpression(self.contextProperty("finish"), [finallyEntry.firstLoc])));
	        }
	      });

	      self.mark(after);

	      break;

	    case "ThrowStatement":
	      self.emit(t.throwStatement(self.explodeExpression(path.get("argument"))));

	      break;

	    default:
	      throw new Error("unknown Statement of type " + JSON.stringify(stmt.type));
	  }
	};

	var catchParamVisitor = {
	  Identifier: function Identifier(path, state) {
	    if (path.node.name === state.catchParamName && util.isReference(path)) {
	      path.replaceWith(state.safeParam);
	    }
	  },

	  Scope: function Scope(path, state) {
	    if (path.scope.hasOwnBinding(state.catchParamName)) {
	      // Don't descend into nested scopes that shadow the catch
	      // parameter with their own declarations.
	      path.skip();
	    }
	  }
	};

	Ep.emitAbruptCompletion = function (record) {
	  if (!isValidCompletion(record)) {
	    _assert2["default"].ok(false, "invalid completion record: " + JSON.stringify(record));
	  }

	  _assert2["default"].notStrictEqual(record.type, "normal", "normal completions are not abrupt");

	  var abruptArgs = [t.stringLiteral(record.type)];

	  if (record.type === "break" || record.type === "continue") {
	    t.assertLiteral(record.target);
	    abruptArgs[1] = record.target;
	  } else if (record.type === "return" || record.type === "throw") {
	    if (record.value) {
	      t.assertExpression(record.value);
	      abruptArgs[1] = record.value;
	    }
	  }

	  this.emit(t.returnStatement(t.callExpression(this.contextProperty("abrupt"), abruptArgs)));
	};

	function isValidCompletion(record) {
	  var type = record.type;

	  if (type === "normal") {
	    return !hasOwn.call(record, "target");
	  }

	  if (type === "break" || type === "continue") {
	    return !hasOwn.call(record, "value") && t.isLiteral(record.target);
	  }

	  if (type === "return" || type === "throw") {
	    return hasOwn.call(record, "value") && !hasOwn.call(record, "target");
	  }

	  return false;
	}

	// Not all offsets into emitter.listing are potential jump targets. For
	// example, execution typically falls into the beginning of a try block
	// without jumping directly there. This method returns the current offset
	// without marking it, so that a switch case will not necessarily be
	// generated for this offset (I say "not necessarily" because the same
	// location might end up being marked in the process of emitting other
	// statements). There's no logical harm in marking such locations as jump
	// targets, but minimizing the number of switch cases keeps the generated
	// code shorter.
	Ep.getUnmarkedCurrentLoc = function () {
	  return t.numericLiteral(this.listing.length);
	};

	// The context.prev property takes the value of context.next whenever we
	// evaluate the switch statement discriminant, which is generally good
	// enough for tracking the last location we jumped to, but sometimes
	// context.prev needs to be more precise, such as when we fall
	// successfully out of a try block and into a finally block without
	// jumping. This method exists to update context.prev to the freshest
	// available location. If we were implementing a full interpreter, we
	// would know the location of the current instruction with complete
	// precision at all times, but we don't have that luxury here, as it would
	// be costly and verbose to set context.prev before every statement.
	Ep.updateContextPrevLoc = function (loc) {
	  if (loc) {
	    t.assertLiteral(loc);

	    if (loc.value === -1) {
	      // If an uninitialized location literal was passed in, set its value
	      // to the current this.listing.length.
	      loc.value = this.listing.length;
	    } else {
	      // Otherwise assert that the location matches the current offset.
	      _assert2["default"].strictEqual(loc.value, this.listing.length);
	    }
	  } else {
	    loc = this.getUnmarkedCurrentLoc();
	  }

	  // Make sure context.prev is up to date in case we fell into this try
	  // statement without jumping to it. TODO Consider avoiding this
	  // assignment when we know control must have jumped here.
	  this.emitAssign(this.contextProperty("prev"), loc);
	};

	Ep.explodeExpression = function (path, ignoreResult) {
	  var expr = path.node;
	  if (expr) {
	    t.assertExpression(expr);
	  } else {
	    return expr;
	  }

	  var self = this;
	  var result = undefined; // Used optionally by several cases below.
	  var after = undefined;

	  function finish(expr) {
	    t.assertExpression(expr);
	    if (ignoreResult) {
	      self.emit(expr);
	    } else {
	      return expr;
	    }
	  }

	  // If the expression does not contain a leap, then we either emit the
	  // expression as a standalone statement or return it whole.
	  if (!meta.containsLeap(expr)) {
	    return finish(expr);
	  }

	  // If any child contains a leap (such as a yield or labeled continue or
	  // break statement), then any sibling subexpressions will almost
	  // certainly have to be exploded in order to maintain the order of their
	  // side effects relative to the leaping child(ren).
	  var hasLeapingChildren = meta.containsLeap.onlyChildren(expr);

	  // In order to save the rest of explodeExpression from a combinatorial
	  // trainwreck of special cases, explodeViaTempVar is responsible for
	  // deciding when a subexpression needs to be "exploded," which is my
	  // very technical term for emitting the subexpression as an assignment
	  // to a temporary variable and the substituting the temporary variable
	  // for the original subexpression. Think of exploded view diagrams, not
	  // Michael Bay movies. The point of exploding subexpressions is to
	  // control the precise order in which the generated code realizes the
	  // side effects of those subexpressions.
	  function explodeViaTempVar(tempVar, childPath, ignoreChildResult) {
	    _assert2["default"].ok(!ignoreChildResult || !tempVar, "Ignoring the result of a child expression but forcing it to " + "be assigned to a temporary variable?");

	    var result = self.explodeExpression(childPath, ignoreChildResult);

	    if (ignoreChildResult) {
	      // Side effects already emitted above.

	    } else if (tempVar || hasLeapingChildren && !t.isLiteral(result)) {
	        // If tempVar was provided, then the result will always be assigned
	        // to it, even if the result does not otherwise need to be assigned
	        // to a temporary variable.  When no tempVar is provided, we have
	        // the flexibility to decide whether a temporary variable is really
	        // necessary.  Unfortunately, in general, a temporary variable is
	        // required whenever any child contains a yield expression, since it
	        // is difficult to prove (at all, let alone efficiently) whether
	        // this result would evaluate to the same value before and after the
	        // yield (see #206).  One narrow case where we can prove it doesn't
	        // matter (and thus we do not need a temporary variable) is when the
	        // result in question is a Literal value.
	        result = self.emitAssign(tempVar || self.makeTempVar(), result);
	      }
	    return result;
	  }

	  // If ignoreResult is true, then we must take full responsibility for
	  // emitting the expression with all its side effects, and we should not
	  // return a result.

	  switch (expr.type) {
	    case "MemberExpression":
	      return finish(t.memberExpression(self.explodeExpression(path.get("object")), expr.computed ? explodeViaTempVar(null, path.get("property")) : expr.property, expr.computed));

	    case "CallExpression":
	      var calleePath = path.get("callee");
	      var argsPath = path.get("arguments");

	      var newCallee = undefined;
	      var newArgs = [];

	      var hasLeapingArgs = false;
	      argsPath.forEach(function (argPath) {
	        hasLeapingArgs = hasLeapingArgs || meta.containsLeap(argPath.node);
	      });

	      if (t.isMemberExpression(calleePath.node)) {
	        if (hasLeapingArgs) {
	          // If the arguments of the CallExpression contained any yield
	          // expressions, then we need to be sure to evaluate the callee
	          // before evaluating the arguments, but if the callee was a member
	          // expression, then we must be careful that the object of the
	          // member expression still gets bound to `this` for the call.

	          var newObject = explodeViaTempVar(
	          // Assign the exploded callee.object expression to a temporary
	          // variable so that we can use it twice without reevaluating it.
	          self.makeTempVar(), calleePath.get("object"));

	          var newProperty = calleePath.node.computed ? explodeViaTempVar(null, calleePath.get("property")) : calleePath.node.property;

	          newArgs.unshift(newObject);

	          newCallee = t.memberExpression(t.memberExpression(newObject, newProperty, calleePath.node.computed), t.identifier("call"), false);
	        } else {
	          newCallee = self.explodeExpression(calleePath);
	        }
	      } else {
	        newCallee = self.explodeExpression(calleePath);

	        if (t.isMemberExpression(newCallee)) {
	          // If the callee was not previously a MemberExpression, then the
	          // CallExpression was "unqualified," meaning its `this` object
	          // should be the global object. If the exploded expression has
	          // become a MemberExpression (e.g. a context property, probably a
	          // temporary variable), then we need to force it to be unqualified
	          // by using the (0, object.property)(...) trick; otherwise, it
	          // will receive the object of the MemberExpression as its `this`
	          // object.
	          newCallee = t.sequenceExpression([t.numericLiteral(0), newCallee]);
	        }
	      }

	      argsPath.forEach(function (argPath) {
	        newArgs.push(explodeViaTempVar(null, argPath));
	      });

	      return finish(t.callExpression(newCallee, newArgs));

	    case "NewExpression":
	      return finish(t.newExpression(explodeViaTempVar(null, path.get("callee")), path.get("arguments").map(function (argPath) {
	        return explodeViaTempVar(null, argPath);
	      })));

	    case "ObjectExpression":
	      return finish(t.objectExpression(path.get("properties").map(function (propPath) {
	        if (propPath.isObjectProperty()) {
	          return t.objectProperty(propPath.node.key, explodeViaTempVar(null, propPath.get("value")), propPath.node.computed);
	        } else {
	          return propPath.node;
	        }
	      })));

	    case "ArrayExpression":
	      return finish(t.arrayExpression(path.get("elements").map(function (elemPath) {
	        return explodeViaTempVar(null, elemPath);
	      })));

	    case "SequenceExpression":
	      var lastIndex = expr.expressions.length - 1;

	      path.get("expressions").forEach(function (exprPath) {
	        if (exprPath.key === lastIndex) {
	          result = self.explodeExpression(exprPath, ignoreResult);
	        } else {
	          self.explodeExpression(exprPath, true);
	        }
	      });

	      return result;

	    case "LogicalExpression":
	      after = loc();

	      if (!ignoreResult) {
	        result = self.makeTempVar();
	      }

	      var left = explodeViaTempVar(result, path.get("left"));

	      if (expr.operator === "&&") {
	        self.jumpIfNot(left, after);
	      } else {
	        _assert2["default"].strictEqual(expr.operator, "||");
	        self.jumpIf(left, after);
	      }

	      explodeViaTempVar(result, path.get("right"), ignoreResult);

	      self.mark(after);

	      return result;

	    case "ConditionalExpression":
	      var elseLoc = loc();
	      after = loc();
	      var test = self.explodeExpression(path.get("test"));

	      self.jumpIfNot(test, elseLoc);

	      if (!ignoreResult) {
	        result = self.makeTempVar();
	      }

	      explodeViaTempVar(result, path.get("consequent"), ignoreResult);
	      self.jump(after);

	      self.mark(elseLoc);
	      explodeViaTempVar(result, path.get("alternate"), ignoreResult);

	      self.mark(after);

	      return result;

	    case "UnaryExpression":
	      return finish(t.unaryExpression(expr.operator,
	      // Can't (and don't need to) break up the syntax of the argument.
	      // Think about delete a[b].
	      self.explodeExpression(path.get("argument")), !!expr.prefix));

	    case "BinaryExpression":
	      return finish(t.binaryExpression(expr.operator, explodeViaTempVar(null, path.get("left")), explodeViaTempVar(null, path.get("right"))));

	    case "AssignmentExpression":
	      return finish(t.assignmentExpression(expr.operator, self.explodeExpression(path.get("left")), self.explodeExpression(path.get("right"))));

	    case "UpdateExpression":
	      return finish(t.updateExpression(expr.operator, self.explodeExpression(path.get("argument")), expr.prefix));

	    case "YieldExpression":
	      after = loc();
	      var arg = expr.argument && self.explodeExpression(path.get("argument"));

	      if (arg && expr.delegate) {
	        var _result = self.makeTempVar();

	        self.emit(t.returnStatement(t.callExpression(self.contextProperty("delegateYield"), [arg, t.stringLiteral(_result.property.name), after])));

	        self.mark(after);

	        return _result;
	      }

	      self.emitAssign(self.contextProperty("next"), after);
	      self.emit(t.returnStatement(arg || null));
	      self.mark(after);

	      return self.contextProperty("sent");

	    default:
	      throw new Error("unknown Expression of type " + JSON.stringify(expr.type));
	  }
	};

/***/ },
/* 2285 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */

	"use strict";

	var _interopRequireWildcard = __webpack_require__(32)["default"];

	exports.__esModule = true;
	exports.runtimeProperty = runtimeProperty;
	exports.isReference = isReference;

	var _babelTypes = __webpack_require__(36);

	var t = _interopRequireWildcard(_babelTypes);

	function runtimeProperty(name) {
	  return t.memberExpression(t.identifier("regeneratorRuntime"), t.identifier(name), false);
	}

	function isReference(path) {
	  return path.isReferenced() || path.parentPath.isAssignmentExpression({ left: path.node });
	}

/***/ },
/* 2286 */
[7031, 6651],
/* 2287 */
536,
/* 2288 */
[7053, 6666],
/* 2289 */
[7056, 1256],
/* 2290 */
[7059, 504, 128],
/* 2291 */
[7064, 2292, 711, 2293, 1258, 1257, 713, 6667, 1261, 128, 413],
/* 2292 */
1305,
/* 2293 */
[7067, 1258],
/* 2294 */
[7070, 712],
/* 2295 */
740,
/* 2296 */
[7088, 340],
/* 2297 */
1316,
/* 2298 */
[7101, 32, 36],
/* 2299 */
[7105, 340],
/* 2300 */
1295,
/* 2301 */
1323,
/* 2302 */
[7133, 6726, 716],
/* 2303 */
[7149, 6749],
/* 2304 */
[7160, 6730],
/* 2305 */
[7162, 6744],
/* 2306 */
[7173, 1266, 714],
/* 2307 */
[7182, 6724, 2302, 6733],
/* 2308 */
[7026, 6750],
/* 2309 */
[7123, 2286, 32, 36],
/* 2310 */
1295,
/* 2311 */
746,
/* 2312 */
[7137, 6793],
/* 2313 */
[7139, 2312, 718],
/* 2314 */
[7140, 279],
/* 2315 */
[7142, 6781, 151, 278],
/* 2316 */
1334,
/* 2317 */
[7160, 2316],
/* 2318 */
[7165, 1271, 1272, 151],
/* 2319 */
[7166, 280, 279],
/* 2320 */
[7167, 151],
/* 2321 */
[7170, 6787, 280],
/* 2322 */
[7186, 1273, 280, 1272, 415, 151],
/* 2323 */
1345,
/* 2324 */
/***/ function(module, exports) {

	"use strict";

	var originalObject = Object;
	var originalDefProp = Object.defineProperty;
	var originalCreate = Object.create;

	function defProp(obj, name, value) {
	  if (originalDefProp) try {
	    originalDefProp.call(originalObject, obj, name, { value: value });
	  } catch (definePropertyIsBrokenInIE8) {
	    obj[name] = value;
	  } else {
	    obj[name] = value;
	  }
	}

	// For functions that will be invoked using .call or .apply, we need to
	// define those methods on the function objects themselves, rather than
	// inheriting them from Function.prototype, so that a malicious or clumsy
	// third party cannot interfere with the functionality of this module by
	// redefining Function.prototype.call or .apply.
	function makeSafeToCall(fun) {
	  if (fun) {
	    defProp(fun, "call", fun.call);
	    defProp(fun, "apply", fun.apply);
	  }
	  return fun;
	}

	makeSafeToCall(originalDefProp);
	makeSafeToCall(originalCreate);

	var hasOwn = makeSafeToCall(Object.prototype.hasOwnProperty);
	var numToStr = makeSafeToCall(Number.prototype.toString);
	var strSlice = makeSafeToCall(String.prototype.slice);

	var cloner = function(){};
	function create(prototype) {
	  if (originalCreate) {
	    return originalCreate.call(originalObject, prototype);
	  }
	  cloner.prototype = prototype || null;
	  return new cloner;
	}

	var rand = Math.random;
	var uniqueKeys = create(null);

	function makeUniqueKey() {
	  // Collisions are highly unlikely, but this module is in the business of
	  // making guarantees rather than safe bets.
	  do var uniqueKey = internString(strSlice.call(numToStr.call(rand(), 36), 2));
	  while (hasOwn.call(uniqueKeys, uniqueKey));
	  return uniqueKeys[uniqueKey] = uniqueKey;
	}

	function internString(str) {
	  var obj = {};
	  obj[str] = true;
	  return Object.keys(obj)[0];
	}

	// External users might find this function useful, but it is not necessary
	// for the typical use of this module.
	defProp(exports, "makeUniqueKey", makeUniqueKey);

	// Object.getOwnPropertyNames is the only way to enumerate non-enumerable
	// properties, so if we wrap it to ignore our secret keys, there should be
	// no way (except guessing) to access those properties.
	var originalGetOPNs = Object.getOwnPropertyNames;
	Object.getOwnPropertyNames = function getOwnPropertyNames(object) {
	  for (var names = originalGetOPNs(object),
	           src = 0,
	           dst = 0,
	           len = names.length;
	       src < len;
	       ++src) {
	    if (!hasOwn.call(uniqueKeys, names[src])) {
	      if (src > dst) {
	        names[dst] = names[src];
	      }
	      ++dst;
	    }
	  }
	  names.length = dst;
	  return names;
	};

	function defaultCreatorFn(object) {
	  return create(null);
	}

	function makeAccessor(secretCreatorFn) {
	  var brand = makeUniqueKey();
	  var passkey = create(null);

	  secretCreatorFn = secretCreatorFn || defaultCreatorFn;

	  function register(object) {
	    var secret; // Created lazily.

	    function vault(key, forget) {
	      // Only code that has access to the passkey can retrieve (or forget)
	      // the secret object.
	      if (key === passkey) {
	        return forget
	          ? secret = null
	          : secret || (secret = secretCreatorFn(object));
	      }
	    }

	    defProp(object, brand, vault);
	  }

	  function accessor(object) {
	    if (!hasOwn.call(object, brand))
	      register(object);
	    return object[brand](passkey);
	  }

	  accessor.forget = function(object) {
	    if (hasOwn.call(object, brand))
	      object[brand](passkey, true);
	  };

	  return accessor;
	}

	defProp(exports, "makeAccessor", makeAccessor);


/***/ },
/* 2325 */
[7031, 6835],
/* 2326 */
[7036, 6840],
/* 2327 */
536,
/* 2328 */
[7053, 6850],
/* 2329 */
[7056, 1277],
/* 2330 */
[7059, 507, 129],
/* 2331 */
[7064, 2332, 719, 2333, 1279, 1278, 721, 6851, 1282, 129, 416],
/* 2332 */
1305,
/* 2333 */
[7067, 1279],
/* 2334 */
[7070, 720],
/* 2335 */
740,
/* 2336 */
[7123, 2325, 52, 68],
/* 2337 */
[7088, 342],
/* 2338 */
1316,
/* 2339 */
[7101, 52, 68],
/* 2340 */
[7105, 342],
/* 2341 */
[7026, 6914],
/* 2342 */
1295,
/* 2343 */
[7024, 6916, 2342, 6917],
/* 2344 */
1323,
/* 2345 */
746,
/* 2346 */
[7133, 6930, 417],
/* 2347 */
[7137, 6947],
/* 2348 */
[7139, 2347, 417],
/* 2349 */
[7140, 284],
/* 2350 */
[7141, 6955],
/* 2351 */
[7142, 6933, 152, 283],
/* 2352 */
1334,
/* 2353 */
[7166, 174, 284],
/* 2354 */
[7167, 152],
/* 2355 */
[7170, 6939, 174],
/* 2356 */
[7171, 6929, 722, 724],
/* 2357 */
[7180, 283],
/* 2358 */
[7182, 6927, 2346, 6945],
/* 2359 */
[7186, 1291, 174, 1290, 344, 152],
/* 2360 */
1345,
/* 2361 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  presets: [
	    __webpack_require__(2362)
	  ],
	  plugins: [
	    __webpack_require__(1462),
	    __webpack_require__(1500),
	    __webpack_require__(1507),
	    __webpack_require__(2184)
	  ]
	};


/***/ },
/* 2362 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  presets: [
	    __webpack_require__(2363)
	  ],
	  plugins: [
	    __webpack_require__(1365),
	    __webpack_require__(2193)
	  ]
	};


/***/ },
/* 2363 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  plugins: [
	    __webpack_require__(1366),
	    __webpack_require__(2147)
	  ]
	};


/***/ },
/* 2364 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	'use strict'

	var base64 = __webpack_require__(7013)
	var ieee754 = __webpack_require__(7014)
	var isArray = __webpack_require__(7015)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	Buffer.poolSize = 8192 // not used by this implementation

	var rootParent = {}

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property
	 *     on objects.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	function typedArraySupport () {
	  function Bar () {}
	  try {
	    var arr = new Uint8Array(1)
	    arr.foo = function () { return 42 }
	    arr.constructor = Bar
	    return arr.foo() === 42 && // typed array instances can be augmented
	        arr.constructor === Bar && // constructor can be set
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	/**
	 * Class: Buffer
	 * =============
	 *
	 * The Buffer constructor returns instances of `Uint8Array` that are augmented
	 * with function properties for all the node `Buffer` API functions. We use
	 * `Uint8Array` so that square bracket notation works as expected -- it returns
	 * a single octet.
	 *
	 * By augmenting the instances, we can avoid modifying the `Uint8Array`
	 * prototype.
	 */
	function Buffer (arg) {
	  if (!(this instanceof Buffer)) {
	    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
	    if (arguments.length > 1) return new Buffer(arg, arguments[1])
	    return new Buffer(arg)
	  }

	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    this.length = 0
	    this.parent = undefined
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    return fromNumber(this, arg)
	  }

	  // Slightly less common case.
	  if (typeof arg === 'string') {
	    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
	  }

	  // Unusual.
	  return fromObject(this, arg)
	}

	function fromNumber (that, length) {
	  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < length; i++) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

	  // Assumption: byteLength() return value is always < kMaxLength.
	  var length = byteLength(string, encoding) | 0
	  that = allocate(that, length)

	  that.write(string, encoding)
	  return that
	}

	function fromObject (that, object) {
	  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

	  if (isArray(object)) return fromArray(that, object)

	  if (object == null) {
	    throw new TypeError('must start with number, buffer, array or string')
	  }

	  if (typeof ArrayBuffer !== 'undefined') {
	    if (object.buffer instanceof ArrayBuffer) {
	      return fromTypedArray(that, object)
	    }
	    if (object instanceof ArrayBuffer) {
	      return fromArrayBuffer(that, object)
	    }
	  }

	  if (object.length) return fromArrayLike(that, object)

	  return fromJsonObject(that, object)
	}

	function fromBuffer (that, buffer) {
	  var length = checked(buffer.length) | 0
	  that = allocate(that, length)
	  buffer.copy(that, 0, 0, length)
	  return that
	}

	function fromArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Duplicate of fromArray() to keep fromArray() monomorphic.
	function fromTypedArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  // Truncating the elements is probably not what people expect from typed
	  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
	  // of the old Buffer constructor.
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    array.byteLength
	    that = Buffer._augment(new Uint8Array(array))
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromTypedArray(that, new Uint8Array(array))
	  }
	  return that
	}

	function fromArrayLike (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
	// Returns a zero-length buffer for inputs that don't conform to the spec.
	function fromJsonObject (that, object) {
	  var array
	  var length = 0

	  if (object.type === 'Buffer' && isArray(object.data)) {
	    array = object.data
	    length = checked(array.length) | 0
	  }
	  that = allocate(that, length)

	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	} else {
	  // pre-set for values that may exist in the future
	  Buffer.prototype.length = undefined
	  Buffer.prototype.parent = undefined
	}

	function allocate (that, length) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = Buffer._augment(new Uint8Array(length))
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that.length = length
	    that._isBuffer = true
	  }

	  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
	  if (fromPool) that.parent = rootParent

	  return that
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (subject, encoding) {
	  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

	  var buf = new Buffer(subject, encoding)
	  delete buf.parent
	  return buf
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  var i = 0
	  var len = Math.min(x, y)
	  while (i < len) {
	    if (a[i] !== b[i]) break

	    ++i
	  }

	  if (i !== len) {
	    x = a[i]
	    y = b[i]
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'raw':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

	  if (list.length === 0) {
	    return new Buffer(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; i++) {
	      length += list[i].length
	    }
	  }

	  var buf = new Buffer(length)
	  var pos = 0
	  for (i = 0; i < list.length; i++) {
	    var item = list[i]
	    item.copy(buf, pos)
	    pos += item.length
	  }
	  return buf
	}

	function byteLength (string, encoding) {
	  if (typeof string !== 'string') string = '' + string

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'binary':
	      // Deprecated
	      case 'raw':
	      case 'raws':
	        return len
	      case 'utf8':
	      case 'utf-8':
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  start = start | 0
	  end = end === undefined || end === Infinity ? this.length : end | 0

	  if (!encoding) encoding = 'utf8'
	  if (start < 0) start = 0
	  if (end > this.length) end = this.length
	  if (end <= start) return ''

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'binary':
	        return binarySlice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return 0
	  return Buffer.compare(this, b)
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
	  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
	  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
	  byteOffset >>= 0

	  if (this.length === 0) return -1
	  if (byteOffset >= this.length) return -1

	  // Negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

	  if (typeof val === 'string') {
	    if (val.length === 0) return -1 // special case: looking for empty string always fails
	    return String.prototype.indexOf.call(this, val, byteOffset)
	  }
	  if (Buffer.isBuffer(val)) {
	    return arrayIndexOf(this, val, byteOffset)
	  }
	  if (typeof val === 'number') {
	    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
	      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
	    }
	    return arrayIndexOf(this, [ val ], byteOffset)
	  }

	  function arrayIndexOf (arr, val, byteOffset) {
	    var foundIndex = -1
	    for (var i = 0; byteOffset + i < arr.length; i++) {
	      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
	      } else {
	        foundIndex = -1
	      }
	    }
	    return -1
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	// `get` is deprecated
	Buffer.prototype.get = function get (offset) {
	  console.log('.get() is deprecated. Access using array indexes instead.')
	  return this.readUInt8(offset)
	}

	// `set` is deprecated
	Buffer.prototype.set = function set (v, offset) {
	  console.log('.set() is deprecated. Access using array indexes instead.')
	  return this.writeUInt8(v, offset)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; i++) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) throw new Error('Invalid hex string')
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function binaryWrite (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    var swap = encoding
	    encoding = offset
	    offset = length | 0
	    length = swap
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'binary':
	        return binaryWrite(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function binarySlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; i++) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = Buffer._augment(this.subarray(start, end))
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; i++) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  if (newBuf.length) newBuf.parent = this.parent || this

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	  if (offset < 0) throw new RangeError('index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; i--) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; i++) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    target._set(this.subarray(start, start + len), targetStart)
	  }

	  return len
	}

	// fill(value, start=0, end=buffer.length)
	Buffer.prototype.fill = function fill (value, start, end) {
	  if (!value) value = 0
	  if (!start) start = 0
	  if (!end) end = this.length

	  if (end < start) throw new RangeError('end < start')

	  // Fill 0 bytes; we're done
	  if (end === start) return
	  if (this.length === 0) return

	  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
	  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

	  var i
	  if (typeof value === 'number') {
	    for (i = start; i < end; i++) {
	      this[i] = value
	    }
	  } else {
	    var bytes = utf8ToBytes(value.toString())
	    var len = bytes.length
	    for (i = start; i < end; i++) {
	      this[i] = bytes[i % len]
	    }
	  }

	  return this
	}

	/**
	 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
	 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
	 */
	Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
	  if (typeof Uint8Array !== 'undefined') {
	    if (Buffer.TYPED_ARRAY_SUPPORT) {
	      return (new Buffer(this)).buffer
	    } else {
	      var buf = new Uint8Array(this.length)
	      for (var i = 0, len = buf.length; i < len; i += 1) {
	        buf[i] = this[i]
	      }
	      return buf.buffer
	    }
	  } else {
	    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
	  }
	}

	// HELPER FUNCTIONS
	// ================

	var BP = Buffer.prototype

	/**
	 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
	 */
	Buffer._augment = function _augment (arr) {
	  arr.constructor = Buffer
	  arr._isBuffer = true

	  // save reference to original Uint8Array set method before overwriting
	  arr._set = arr.set

	  // deprecated
	  arr.get = BP.get
	  arr.set = BP.set

	  arr.write = BP.write
	  arr.toString = BP.toString
	  arr.toLocaleString = BP.toString
	  arr.toJSON = BP.toJSON
	  arr.equals = BP.equals
	  arr.compare = BP.compare
	  arr.indexOf = BP.indexOf
	  arr.copy = BP.copy
	  arr.slice = BP.slice
	  arr.readUIntLE = BP.readUIntLE
	  arr.readUIntBE = BP.readUIntBE
	  arr.readUInt8 = BP.readUInt8
	  arr.readUInt16LE = BP.readUInt16LE
	  arr.readUInt16BE = BP.readUInt16BE
	  arr.readUInt32LE = BP.readUInt32LE
	  arr.readUInt32BE = BP.readUInt32BE
	  arr.readIntLE = BP.readIntLE
	  arr.readIntBE = BP.readIntBE
	  arr.readInt8 = BP.readInt8
	  arr.readInt16LE = BP.readInt16LE
	  arr.readInt16BE = BP.readInt16BE
	  arr.readInt32LE = BP.readInt32LE
	  arr.readInt32BE = BP.readInt32BE
	  arr.readFloatLE = BP.readFloatLE
	  arr.readFloatBE = BP.readFloatBE
	  arr.readDoubleLE = BP.readDoubleLE
	  arr.readDoubleBE = BP.readDoubleBE
	  arr.writeUInt8 = BP.writeUInt8
	  arr.writeUIntLE = BP.writeUIntLE
	  arr.writeUIntBE = BP.writeUIntBE
	  arr.writeUInt16LE = BP.writeUInt16LE
	  arr.writeUInt16BE = BP.writeUInt16BE
	  arr.writeUInt32LE = BP.writeUInt32LE
	  arr.writeUInt32BE = BP.writeUInt32BE
	  arr.writeIntLE = BP.writeIntLE
	  arr.writeIntBE = BP.writeIntBE
	  arr.writeInt8 = BP.writeInt8
	  arr.writeInt16LE = BP.writeInt16LE
	  arr.writeInt16BE = BP.writeInt16BE
	  arr.writeInt32LE = BP.writeInt32LE
	  arr.writeInt32BE = BP.writeInt32BE
	  arr.writeFloatLE = BP.writeFloatLE
	  arr.writeFloatBE = BP.writeFloatBE
	  arr.writeDoubleLE = BP.writeDoubleLE
	  arr.writeDoubleBE = BP.writeDoubleBE
	  arr.fill = BP.fill
	  arr.inspect = BP.inspect
	  arr.toArrayBuffer = BP.toArrayBuffer

	  return arr
	}

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; i++) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; i++) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2364).Buffer, (function() { return this; }())))

/***/ },
/* 2365 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1292);


/***/ },
/* 2366 */
/***/ function(module, exports, __webpack_require__) {

	/* @flow */

	"use strict";

	var _getIterator = __webpack_require__(37)["default"];

	var _interopRequireDefault = __webpack_require__(5)["default"];

	exports.__esModule = true;

	var _lodashObjectMerge = __webpack_require__(2556);

	var _lodashObjectMerge2 = _interopRequireDefault(_lodashObjectMerge);

	exports["default"] = function (dest /*:: ?: Object*/, src /*:: ?: Object*/) /*: ?Object*/ {
	  if (!dest || !src) return;

	  return _lodashObjectMerge2["default"](dest, src, function (a, b) {
	    if (b && Array.isArray(a)) {
	      var newArray = b.slice(0);

	      for (var _iterator = a, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	        var _ref;

	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }

	        var item = _ref;

	        if (newArray.indexOf(item) < 0) {
	          newArray.push(item);
	        }
	      }

	      return newArray;
	    }
	  });
	};

	module.exports = exports["default"];

/***/ },
/* 2367 */
/***/ function(module, exports, __webpack_require__) {

	/* @noflow */

	"use strict";

	var _interopRequireWildcard = __webpack_require__(3)["default"];

	exports.__esModule = true;

	var _babelTypes = __webpack_require__(16);

	var t = _interopRequireWildcard(_babelTypes);

	/**
	 * Normalize an AST.
	 *
	 * - Wrap `Program` node with a `File` node.
	 */

	exports["default"] = function (ast /*: Object*/, comments /*:: ?: Array<Object>*/, tokens /*:: ?: Array<Object>*/) {
	  if (ast) {
	    if (ast.type === "Program") {
	      return t.file(ast, comments || [], tokens || []);
	    } else if (ast.type === "File") {
	      return ast;
	    }
	  }

	  throw new Error("Not a valid ast?");
	};

	module.exports = exports["default"];

/***/ },
/* 2368 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(5)["default"];

	exports.__esModule = true;

	var _module2 = __webpack_require__(345);

	var _module3 = _interopRequireDefault(_module2);

	var relativeModules = {};

	exports["default"] = function (loc /*: string*/) /*: ?string*/ {
	  var relative /*: string*/ = arguments.length <= 1 || arguments[1] === undefined ? process.cwd() : arguments[1];

	  // we're in the browser, probably
	  if (typeof _module3["default"] === "object") return null;

	  var relativeMod = relativeModules[relative];

	  if (!relativeMod) {
	    relativeMod = new _module3["default"]();
	    relativeMod.paths = _module3["default"]._nodeModulePaths(relative);
	    relativeModules[relative] = relativeMod;
	  }

	  try {
	    return _module3["default"]._resolveFilename(loc, relativeMod);
	  } catch (err) {
	    return null;
	  }
	};

	module.exports = exports["default"];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 2369 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireWildcard = __webpack_require__(3)["default"];

	var _interopRequireDefault = __webpack_require__(5)["default"];

	exports.__esModule = true;

	var _babelHelpers = __webpack_require__(1299);

	var helpers = _interopRequireWildcard(_babelHelpers);

	var _babelGenerator = __webpack_require__(1297);

	var _babelGenerator2 = _interopRequireDefault(_babelGenerator);

	var _babelMessages = __webpack_require__(176);

	var messages = _interopRequireWildcard(_babelMessages);

	var _babelTemplate = __webpack_require__(742);

	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

	var _lodashCollectionEach = __webpack_require__(516);

	var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);

	var _babelTypes = __webpack_require__(16);

	var t = _interopRequireWildcard(_babelTypes);

	var buildUmdWrapper = _babelTemplate2["default"]("\n  (function (root, factory) {\n    if (typeof define === \"function\" && define.amd) {\n      define(AMD_ARGUMENTS, factory);\n    } else if (typeof exports === \"object\") {\n      factory(COMMON_ARGUMENTS);\n    } else {\n      factory(BROWSER_ARGUMENTS);\n    }\n  })(UMD_ROOT, function (FACTORY_PARAMETERS) {\n    FACTORY_BODY\n  });\n");

	function buildGlobal(namespace, builder) {
	  var body = [];
	  var container = t.functionExpression(null, [t.identifier("global")], t.blockStatement(body));
	  var tree = t.program([t.expressionStatement(t.callExpression(container, [helpers.get("selfGlobal")]))]);

	  body.push(t.variableDeclaration("var", [t.variableDeclarator(namespace, t.assignmentExpression("=", t.memberExpression(t.identifier("global"), namespace), t.objectExpression([])))]));

	  builder(body);

	  return tree;
	}

	function buildUmd(namespace, builder) {
	  var body = [];
	  body.push(t.variableDeclaration("var", [t.variableDeclarator(namespace, t.identifier("global"))]));

	  builder(body);

	  return t.program([buildUmdWrapper({
	    FACTORY_PARAMETERS: t.identifier("global"),
	    BROWSER_ARGUMENTS: t.assignmentExpression("=", t.memberExpression(t.identifier("root"), namespace), t.objectExpression([])),
	    COMMON_ARGUMENTS: t.identifier("exports"),
	    AMD_ARGUMENTS: t.arrayExpression([t.stringLiteral("exports")]),
	    FACTORY_BODY: body,
	    UMD_ROOT: t.identifier("this")
	  })]);
	}

	function buildVar(namespace, builder) {
	  var body = [];
	  body.push(t.variableDeclaration("var", [t.variableDeclarator(namespace, t.objectExpression([]))]));
	  builder(body);
	  body.push(t.expressionStatement(namespace));
	  return t.program(body);
	}

	function buildHelpers(body, namespace, whitelist) {
	  _lodashCollectionEach2["default"](helpers.list, function (name) {
	    if (whitelist && whitelist.indexOf(name) < 0) return;

	    var key = t.identifier(name);
	    body.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(namespace, key), helpers.get(name))));
	  });
	}

	exports["default"] = function (whitelist /*:: ?: Array<string>*/) {
	  var outputType /*: "global" | "umd" | "var"*/ = arguments.length <= 1 || arguments[1] === undefined ? "global" : arguments[1];

	  var namespace = t.identifier("babelHelpers");

	  var builder = function builder(body) {
	    return buildHelpers(body, namespace, whitelist);
	  };

	  var tree = undefined;

	  var build = ({
	    global: buildGlobal,
	    umd: buildUmd,
	    "var": buildVar
	  })[outputType];

	  if (build) {
	    tree = build(namespace, builder);
	  } else {
	    throw new Error(messages.get("unsupportedOutputType", outputType));
	  }

	  return _babelGenerator2["default"](tree).code;
	};

	module.exports = exports["default"];

/***/ },
/* 2370 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _classCallCheck = __webpack_require__(82)["default"];

	var _interopRequireDefault = __webpack_require__(5)["default"];

	exports.__esModule = true;

	var _debugNode = __webpack_require__(2507);

	var _debugNode2 = _interopRequireDefault(_debugNode);

	/*:: import type File from "./index";*/

	var verboseDebug = _debugNode2["default"]("babel:verbose");
	var generalDebug = _debugNode2["default"]("babel");

	var seenDeprecatedMessages = [];

	var Logger = (function () {
	  function Logger(file /*: File*/, filename /*: string*/) {
	    _classCallCheck(this, Logger);

	    this.filename = filename;
	    this.file = file;
	  }

	  Logger.prototype._buildMessage = function _buildMessage(msg /*: string*/) /*: string*/ {
	    var parts = "[BABEL] " + this.filename;
	    if (msg) parts += ": " + msg;
	    return parts;
	  };

	  Logger.prototype.warn = function warn(msg /*: string*/) {
	    console.warn(this._buildMessage(msg));
	  };

	  Logger.prototype.error = function error(msg /*: string*/) /*: Error*/ {
	    var Constructor /*: typeof Error*/ = arguments.length <= 1 || arguments[1] === undefined ? Error : arguments[1];

	    throw new Constructor(this._buildMessage(msg));
	  };

	  Logger.prototype.deprecate = function deprecate(msg /*: string*/) {
	    if (this.file.opts && this.file.opts.suppressDeprecationMessages) return;

	    msg = this._buildMessage(msg);

	    // already seen this message
	    if (seenDeprecatedMessages.indexOf(msg) >= 0) return;

	    // make sure we don't see it again
	    seenDeprecatedMessages.push(msg);

	    console.error(msg);
	  };

	  Logger.prototype.verbose = function verbose(msg /*: string*/) {
	    if (verboseDebug.enabled) verboseDebug(this._buildMessage(msg));
	  };

	  Logger.prototype.debug = function debug(msg /*: string*/) {
	    if (generalDebug.enabled) generalDebug(this._buildMessage(msg));
	  };

	  Logger.prototype.deopt = function deopt(node /*: Object*/, msg /*: string*/) {
	    this.debug(msg);
	  };

	  return Logger;
	})();

	exports["default"] = Logger;
	module.exports = exports["default"];

/***/ },
/* 2371 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(37)["default"];

	var _interopRequireWildcard = __webpack_require__(3)["default"];

	exports.__esModule = true;
	exports.ExportDeclaration = ExportDeclaration;
	exports.Scope = Scope;

	var _babelTypes = __webpack_require__(16);

	var t = _interopRequireWildcard(_babelTypes);

	var ModuleDeclaration = {
	  enter: function enter(path, file) {
	    var node = path.node;

	    if (node.source) {
	      node.source.value = file.resolveModuleSource(node.source.value);
	    }
	  }
	};

	exports.ModuleDeclaration = ModuleDeclaration;
	var ImportDeclaration = {
	  exit: function exit(path, file) {
	    var node = path.node;

	    var specifiers = [];
	    var imported = [];
	    file.metadata.modules.imports.push({
	      source: node.source.value,
	      imported: imported,
	      specifiers: specifiers
	    });

	    for (var _iterator = (path.get("specifiers") /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var specifier = _ref;

	      var local = specifier.node.local.name;

	      if (specifier.isImportDefaultSpecifier()) {
	        imported.push("default");
	        specifiers.push({
	          kind: "named",
	          imported: "default",
	          local: local
	        });
	      }

	      if (specifier.isImportSpecifier()) {
	        var importedName = specifier.node.imported.name;
	        imported.push(importedName);
	        specifiers.push({
	          kind: "named",
	          imported: importedName,
	          local: local
	        });
	      }

	      if (specifier.isImportNamespaceSpecifier()) {
	        imported.push("*");
	        specifiers.push({
	          kind: "namespace",
	          local: local
	        });
	      }
	    }
	  }
	};

	exports.ImportDeclaration = ImportDeclaration;

	function ExportDeclaration(path, file) {
	  var node = path.node;

	  var source = node.source ? node.source.value : null;
	  var exports = file.metadata.modules.exports;

	  // export function foo() {}
	  // export let foo = "bar";
	  var declar = path.get("declaration");
	  if (declar.isStatement()) {
	    var bindings = declar.getBindingIdentifiers();

	    for (var _name in bindings) {
	      exports.exported.push(_name);
	      exports.specifiers.push({
	        kind: "local",
	        local: _name,
	        exported: path.isExportDefaultDeclaration() ? "default" : _name
	      });
	    }
	  }

	  if (path.isExportNamedDeclaration() && node.specifiers) {
	    for (var _iterator2 = (node.specifiers /*: Array<Object>*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var specifier = _ref2;

	      var exported = specifier.exported.name;
	      exports.exported.push(exported);

	      // export foo from "bar";
	      if (t.isExportDefaultSpecifier(specifier)) {
	        exports.specifiers.push({
	          kind: "external",
	          local: exported,
	          exported: exported,
	          source: source
	        });
	      }

	      // export * as foo from "bar";
	      if (t.isExportNamespaceSpecifier(specifier)) {
	        exports.specifiers.push({
	          kind: "external-namespace",
	          exported: exported,
	          source: source
	        });
	      }

	      var local = specifier.local;
	      if (!local) continue;

	      // export { foo } from "bar";
	      // export { foo as bar } from "bar";
	      if (source) {
	        exports.specifiers.push({
	          kind: "external",
	          local: local.name,
	          exported: exported,
	          source: source
	        });
	      }

	      // export { foo };
	      // export { foo as bar };
	      if (!source) {
	        exports.specifiers.push({
	          kind: "local",
	          local: local.name,
	          exported: exported
	        });
	      }
	    }
	  }

	  // export * from "bar";
	  if (path.isExportAllDeclaration()) {
	    exports.specifiers.push({
	      kind: "external-all",
	      source: source
	    });
	  }
	}

	function Scope(path) {
	  path.skip();
	}

/***/ },
/* 2372 */
/***/ function(module, exports, __webpack_require__) {

	/* @flow */

	"use strict";

	var _interopRequireDefault = __webpack_require__(5)["default"];

	exports.__esModule = true;

	var _plugin = __webpack_require__(730);

	var _plugin2 = _interopRequireDefault(_plugin);

	var _lodashCollectionSortBy = __webpack_require__(2515);

	var _lodashCollectionSortBy2 = _interopRequireDefault(_lodashCollectionSortBy);

	exports["default"] = new _plugin2["default"]({
	  /**
	   * [Please add a description.]
	   *
	   * Priority:
	   *
	   *  - 0 We want this to be at the **very** bottom
	   *  - 1 Default node position
	   *  - 2 Priority over normal nodes
	   *  - 3 We want this to be at the **very** top
	   */

	  visitor: {
	    Block: {
	      exit: function exit(_ref) {
	        var node = _ref.node;

	        var hasChange = false;
	        for (var i = 0; i < node.body.length; i++) {
	          var bodyNode = node.body[i];
	          if (bodyNode && bodyNode._blockHoist != null) {
	            hasChange = true;
	            break;
	          }
	        }
	        if (!hasChange) return;

	        node.body = _lodashCollectionSortBy2["default"](node.body, function (bodyNode) {
	          var priority = bodyNode && bodyNode._blockHoist;
	          if (priority == null) priority = 1;
	          if (priority === true) priority = 2;

	          // Higher priorities should move toward the top.
	          return -1 * priority;
	        });
	      }
	    }
	  }
	});
	module.exports = exports["default"];

/***/ },
/* 2373 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(5)["default"];

	var _interopRequireWildcard = __webpack_require__(3)["default"];

	exports.__esModule = true;

	var _plugin = __webpack_require__(730);

	var _plugin2 = _interopRequireDefault(_plugin);

	var _babelTypes = __webpack_require__(16);

	var t = _interopRequireWildcard(_babelTypes);

	exports["default"] = new _plugin2["default"]({
	  visitor: {
	    ThisExpression: function ThisExpression(path) {
	      remap(path, "this", function () {
	        return t.thisExpression();
	      });
	    },

	    ReferencedIdentifier: function ReferencedIdentifier(path) {
	      if (path.node.name === "arguments") {
	        remap(path, "arguments", function () {
	          return t.identifier("arguments");
	        });
	      }
	    }
	  }
	});

	function shouldShadow(path, shadowPath) {
	  if (path.is("_forceShadow")) {
	    return true;
	  } else {
	    return shadowPath && !shadowPath.isArrowFunctionExpression();
	  }
	}

	function remap(path, key, create) {
	  // ensure that we're shadowed
	  var shadowPath = path.inShadow(key);
	  if (!shouldShadow(path, shadowPath)) return;

	  var shadowFunction = path.node._shadowedFunctionLiteral;
	  var currentFunction = undefined;

	  var fnPath = path.findParent(function (path) {
	    if (path.isProgram() || path.isFunction()) {
	      // catch current function in case this is the shadowed one and we can ignore it
	      currentFunction = currentFunction || path;
	    }

	    if (path.isProgram()) {
	      return true;
	    } else if (path.isFunction()) {
	      if (shadowFunction) {
	        return path === shadowFunction || path.node === shadowFunction.node;
	      } else {
	        return !path.is("shadow");
	      }
	    }

	    return false;
	  });

	  // no point in realiasing if we're in this function
	  if (fnPath === currentFunction) return;

	  var cached = fnPath.getData(key);
	  if (cached) return path.replaceWith(cached);

	  var init = create();
	  var id = path.scope.generateUidIdentifier(key);

	  fnPath.setData(key, id);
	  fnPath.scope.push({ id: id, init: init });

	  return path.replaceWith(id);
	}
	module.exports = exports["default"];

/***/ },
/* 2374 */
/***/ function(module, exports, __webpack_require__) {

	/* @noflow */

	"use strict";

	var _classCallCheck = __webpack_require__(82)["default"];

	var _interopRequireDefault = __webpack_require__(5)["default"];

	exports.__esModule = true;

	var _helpersNormalizeAst = __webpack_require__(2367);

	var _helpersNormalizeAst2 = _interopRequireDefault(_helpersNormalizeAst);

	var _file = __webpack_require__(727);

	var _file2 = _interopRequireDefault(_file);

	var Pipeline = (function () {
	  function Pipeline() {
	    _classCallCheck(this, Pipeline);
	  }

	  Pipeline.prototype.lint = function lint(code /*: string*/) {
	    var opts /*:: ?: Object*/ = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    opts.code = false;
	    opts.mode = "lint";
	    return this.transform(code, opts);
	  };

	  Pipeline.prototype.pretransform = function pretransform(code /*: string*/, opts /*:: ?: Object*/) {
	    var file = new _file2["default"](opts, this);
	    return file.wrap(code, function () {
	      file.addCode(code);
	      file.parseCode(code);
	      return file;
	    });
	  };

	  Pipeline.prototype.transform = function transform(code /*: string*/, opts /*:: ?: Object*/) {
	    var file = new _file2["default"](opts, this);
	    return file.wrap(code, function () {
	      file.addCode(code);
	      file.parseCode(code);
	      return file.transform();
	    });
	  };

	  Pipeline.prototype.transformFromAst = function transformFromAst(ast, code /*: string*/, opts /*: Object*/) {
	    ast = _helpersNormalizeAst2["default"](ast);

	    var file = new _file2["default"](opts, this);
	    return file.wrap(code, function () {
	      file.addCode(code);
	      file.addAst(ast);
	      return file.transform();
	    });
	  };

	  return Pipeline;
	})();

	exports["default"] = Pipeline;
	module.exports = exports["default"];

/***/ },
/* 2375 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _inherits = __webpack_require__(346)["default"];

	var _classCallCheck = __webpack_require__(82)["default"];

	var _interopRequireDefault = __webpack_require__(5)["default"];

	exports.__esModule = true;

	var _store = __webpack_require__(726);

	var _store2 = _interopRequireDefault(_store);

	var _babelTraverse = __webpack_require__(153);

	var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

	var _file5 = __webpack_require__(727);

	var _file6 = _interopRequireDefault(_file5);

	/*:: import type Plugin from "./plugin";*/
	var PluginPass = (function (_Store) {
	  _inherits(PluginPass, _Store);

	  function PluginPass(file /*: File*/, plugin /*: Plugin*/) {
	    var options /*: Object*/ = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	    _classCallCheck(this, PluginPass);

	    _Store.call(this);
	    this.plugin = plugin;
	    this.file = file;
	    this.opts = options;
	  }

	  PluginPass.prototype.transform = function transform() {
	    var file = this.file;
	    file.log.debug("Start transformer " + this.key);
	    _babelTraverse2["default"](file.ast, this.plugin.visitor, file.scope, file);
	    file.log.debug("Finish transformer " + this.key);
	  };

	  PluginPass.prototype.addHelper = function addHelper() {
	    // istanbul ignore next

	    var _file;

	    return (_file = this.file).addHelper.apply(_file, arguments);
	  };

	  PluginPass.prototype.addImport = function addImport() {
	    // istanbul ignore next

	    var _file2;

	    return (_file2 = this.file).addImport.apply(_file2, arguments);
	  };

	  PluginPass.prototype.getModuleName = function getModuleName() {
	    // istanbul ignore next

	    var _file3;

	    return (_file3 = this.file).getModuleName.apply(_file3, arguments);
	  };

	  PluginPass.prototype.buildCodeFrameError = function buildCodeFrameError() {
	    // istanbul ignore next

	    var _file4;

	    return (_file4 = this.file).buildCodeFrameError.apply(_file4, arguments);
	  };

	  return PluginPass;
	})(_store2["default"]);

	exports["default"] = PluginPass;
	module.exports = exports["default"];

/***/ },
/* 2376 */
[7020, 2378, 2377, 2381, 2379, 2383],
/* 2377 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {'use strict';

	function assembleStyles () {
		var styles = {
			modifiers: {
				reset: [0, 0],
				bold: [1, 22], // 21 isn't widely supported and 22 does the same thing
				dim: [2, 22],
				italic: [3, 23],
				underline: [4, 24],
				inverse: [7, 27],
				hidden: [8, 28],
				strikethrough: [9, 29]
			},
			colors: {
				black: [30, 39],
				red: [31, 39],
				green: [32, 39],
				yellow: [33, 39],
				blue: [34, 39],
				magenta: [35, 39],
				cyan: [36, 39],
				white: [37, 39],
				gray: [90, 39]
			},
			bgColors: {
				bgBlack: [40, 49],
				bgRed: [41, 49],
				bgGreen: [42, 49],
				bgYellow: [43, 49],
				bgBlue: [44, 49],
				bgMagenta: [45, 49],
				bgCyan: [46, 49],
				bgWhite: [47, 49]
			}
		};

		// fix humans
		styles.colors.grey = styles.colors.gray;

		Object.keys(styles).forEach(function (groupName) {
			var group = styles[groupName];

			Object.keys(group).forEach(function (styleName) {
				var style = group[styleName];

				styles[styleName] = group[styleName] = {
					open: '\u001b[' + style[0] + 'm',
					close: '\u001b[' + style[1] + 'm'
				};
			});

			Object.defineProperty(styles, groupName, {
				value: group,
				enumerable: false
			});
		});

		return styles;
	}

	Object.defineProperty(module, 'exports', {
		enumerable: true,
		get: assembleStyles
	});

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(33)(module)))

/***/ },
/* 2378 */
/***/ function(module, exports) {

	'use strict';

	var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;

	module.exports = function (str) {
		if (typeof str !== 'string') {
			throw new TypeError('Expected a string');
		}

		return str.replace(matchOperatorsRe, '\\$&');
	};


/***/ },
/* 2379 */
[7021, 2380],
/* 2380 */
/***/ function(module, exports) {

	'use strict';
	module.exports = function () {
		return /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g;
	};


/***/ },
/* 2381 */
[7022, 2382],
/* 2382 */
2380,
/* 2383 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	var argv = process.argv;

	var terminator = argv.indexOf('--');
	var hasFlag = function (flag) {
		flag = '--' + flag;
		var pos = argv.indexOf(flag);
		return pos !== -1 && (terminator !== -1 ? pos < terminator : true);
	};

	module.exports = (function () {
		if ('FORCE_COLOR' in process.env) {
			return true;
		}

		if (hasFlag('no-color') ||
			hasFlag('no-colors') ||
			hasFlag('color=false')) {
			return false;
		}

		if (hasFlag('color') ||
			hasFlag('colors') ||
			hasFlag('color=true') ||
			hasFlag('color=always')) {
			return true;
		}

		if (process.stdout && !process.stdout.isTTY) {
			return false;
		}

		if (process.platform === 'win32') {
			return true;
		}

		if ('COLORTERM' in process.env) {
			return true;
		}

		if (process.env.TERM === 'dumb') {
			return false;
		}

		if (/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM)) {
			return true;
		}

		return false;
	})();

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 2384 */
/***/ function(module, exports) {

	/*
	  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:

	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.

	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	(function () {
	    'use strict';

	    function isExpression(node) {
	        if (node == null) { return false; }
	        switch (node.type) {
	            case 'ArrayExpression':
	            case 'AssignmentExpression':
	            case 'BinaryExpression':
	            case 'CallExpression':
	            case 'ConditionalExpression':
	            case 'FunctionExpression':
	            case 'Identifier':
	            case 'Literal':
	            case 'LogicalExpression':
	            case 'MemberExpression':
	            case 'NewExpression':
	            case 'ObjectExpression':
	            case 'SequenceExpression':
	            case 'ThisExpression':
	            case 'UnaryExpression':
	            case 'UpdateExpression':
	                return true;
	        }
	        return false;
	    }

	    function isIterationStatement(node) {
	        if (node == null) { return false; }
	        switch (node.type) {
	            case 'DoWhileStatement':
	            case 'ForInStatement':
	            case 'ForStatement':
	            case 'WhileStatement':
	                return true;
	        }
	        return false;
	    }

	    function isStatement(node) {
	        if (node == null) { return false; }
	        switch (node.type) {
	            case 'BlockStatement':
	            case 'BreakStatement':
	            case 'ContinueStatement':
	            case 'DebuggerStatement':
	            case 'DoWhileStatement':
	            case 'EmptyStatement':
	            case 'ExpressionStatement':
	            case 'ForInStatement':
	            case 'ForStatement':
	            case 'IfStatement':
	            case 'LabeledStatement':
	            case 'ReturnStatement':
	            case 'SwitchStatement':
	            case 'ThrowStatement':
	            case 'TryStatement':
	            case 'VariableDeclaration':
	            case 'WhileStatement':
	            case 'WithStatement':
	                return true;
	        }
	        return false;
	    }

	    function isSourceElement(node) {
	      return isStatement(node) || node != null && node.type === 'FunctionDeclaration';
	    }

	    function trailingStatement(node) {
	        switch (node.type) {
	        case 'IfStatement':
	            if (node.alternate != null) {
	                return node.alternate;
	            }
	            return node.consequent;

	        case 'LabeledStatement':
	        case 'ForStatement':
	        case 'ForInStatement':
	        case 'WhileStatement':
	        case 'WithStatement':
	            return node.body;
	        }
	        return null;
	    }

	    function isProblematicIfStatement(node) {
	        var current;

	        if (node.type !== 'IfStatement') {
	            return false;
	        }
	        if (node.alternate == null) {
	            return false;
	        }
	        current = node.consequent;
	        do {
	            if (current.type === 'IfStatement') {
	                if (current.alternate == null)  {
	                    return true;
	                }
	            }
	            current = trailingStatement(current);
	        } while (current);

	        return false;
	    }

	    module.exports = {
	        isExpression: isExpression,
	        isStatement: isStatement,
	        isIterationStatement: isIterationStatement,
	        isSourceElement: isSourceElement,
	        isProblematicIfStatement: isProblematicIfStatement,

	        trailingStatement: trailingStatement
	    };
	}());
	/* vim: set sw=4 ts=4 et tw=80 : */


/***/ },
/* 2385 */
[7023, 1295],
/* 2386 */
[7024, 2384, 1295, 2385],
/* 2387 */
/***/ function(module, exports) {

	// Copyright 2014, 2015 Simon Lydell
	// X11 (“MIT”) Licensed. (See LICENSE.)

	// This regex comes from regex.coffee, and is inserted here by generate-index.js
	// (run `npm run build`).
	module.exports = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyu]{1,5}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|((?:0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?))|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]{1,6}\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-*\/%&|^]|<{1,2}|>{1,3}|!=?|={1,2})=?|[?:~]|[;,.[\](){}])|(\s+)|(^$|[\s\S])/g

	module.exports.matchToToken = function(match) {
	  var token = {type: "invalid", value: match[0]}
	       if (match[ 1]) token.type = "string" , token.closed = !!(match[3] || match[4])
	  else if (match[ 5]) token.type = "comment"
	  else if (match[ 6]) token.type = "comment", token.closed = !!match[7]
	  else if (match[ 8]) token.type = "regex"
	  else if (match[ 9]) token.type = "number"
	  else if (match[10]) token.type = "name"
	  else if (match[11]) token.type = "punctuator"
	  else if (match[12]) token.type = "whitespace"
	  return token
	}


/***/ },
/* 2388 */
[7025, 2389],
/* 2389 */
/***/ function(module, exports) {

	module.exports = leftpad;

	function leftpad (str, len, ch) {
	  str = String(str);

	  var i = -1;

	  ch || (ch = ' ');
	  len = len - str.length;


	  while (++i < len) {
	    str = ch + str;
	  }

	  return str;
	}


/***/ },
/* 2390 */
[7026, 2391],
/* 2391 */
[7027, 2392],
/* 2392 */
/***/ function(module, exports) {

	'use strict';
	module.exports = Number.isNaN || function (x) {
		return x !== x;
	};


/***/ },
/* 2393 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _classCallCheck = __webpack_require__(82)["default"];

	var _interopRequireDefault = __webpack_require__(5)["default"];

	exports.__esModule = true;

	var _repeating = __webpack_require__(509);

	var _repeating2 = _interopRequireDefault(_repeating);

	var _trimRight = __webpack_require__(2415);

	var _trimRight2 = _interopRequireDefault(_trimRight);

	/**
	 * Buffer for collecting generated output.
	 */

	/*:: import type Position from "./position";*/
	var Buffer = (function () {
	  function Buffer(position /*: Position*/, format /*: Object*/) {
	    _classCallCheck(this, Buffer);

	    this.printedCommentStarts = {};
	    this.parenPushNewlineState = null;
	    this.position = position;
	    this._indent = format.indent.base;
	    this.format = format;
	    this.buf = "";
	  }

	  /**
	   * Description
	   */

	  Buffer.prototype.catchUp = function catchUp(node) {
	    // catch up to this nodes newline if we're behind
	    if (node.loc && this.format.retainLines && this.buf) {
	      while (this.position.line < node.loc.start.line) {
	        this._push("\n");
	      }
	    }
	  };

	  /**
	   * Get the current trimmed buffer.
	   */

	  Buffer.prototype.get = function get() {
	    return _trimRight2["default"](this.buf);
	  };

	  /**
	   * Get the current indent.
	   */

	  Buffer.prototype.getIndent = function getIndent() {
	    if (this.format.compact || this.format.concise) {
	      return "";
	    } else {
	      return _repeating2["default"](this.format.indent.style, this._indent);
	    }
	  };

	  /**
	   * Get the current indent size.
	   */

	  Buffer.prototype.indentSize = function indentSize() {
	    return this.getIndent().length;
	  };

	  /**
	   * Increment indent size.
	   */

	  Buffer.prototype.indent = function indent() {
	    this._indent++;
	  };

	  /**
	   * Decrement indent size.
	   */

	  Buffer.prototype.dedent = function dedent() {
	    this._indent--;
	  };

	  /**
	   * Add a semicolon to the buffer.
	   */

	  Buffer.prototype.semicolon = function semicolon() {
	    this.push(";");
	  };

	  /**
	   * Ensure last character is a semicolon.
	   */

	  Buffer.prototype.ensureSemicolon = function ensureSemicolon() {
	    if (!this.isLast(";")) this.semicolon();
	  };

	  /**
	   * Add a right brace to the buffer.
	   */

	  Buffer.prototype.rightBrace = function rightBrace() {
	    this.newline(true);
	    if (this.format.minified && !this._lastPrintedIsEmptyStatement) {
	      this._removeLast(";");
	    }
	    this.push("}");
	  };

	  /**
	   * Add a keyword to the buffer.
	   */

	  Buffer.prototype.keyword = function keyword(name /*: string*/) {
	    this.push(name);
	    this.space();
	  };

	  /**
	   * Add a space to the buffer unless it is compact (override with force).
	   */

	  Buffer.prototype.space = function space(force /*:: ?: boolean*/) {
	    if (!force && this.format.compact) return;

	    if (force || this.buf && !this.isLast(" ") && !this.isLast("\n")) {
	      this.push(" ");
	    }
	  };

	  /**
	   * Remove the last character.
	   */

	  Buffer.prototype.removeLast = function removeLast(cha /*: string*/) {
	    if (this.format.compact) return;
	    return this._removeLast(cha);
	  };

	  Buffer.prototype._removeLast = function _removeLast(cha /*: string*/) {
	    if (!this._isLast(cha)) return;
	    this.buf = this.buf.substr(0, this.buf.length - 1);
	    this.position.unshift(cha);
	  };

	  /**
	   * Set some state that will be modified if a newline has been inserted before any
	   * non-space characters.
	   *
	   * This is to prevent breaking semantics for terminatorless separator nodes. eg:
	   *
	   *    return foo;
	   *
	   * returns `foo`. But if we do:
	   *
	   *   return
	   *   foo;
	   *
	   *  `undefined` will be returned and not `foo` due to the terminator.
	   */

	  Buffer.prototype.startTerminatorless = function startTerminatorless() /*: Object*/ {
	    return this.parenPushNewlineState = {
	      printed: false
	    };
	  };

	  /**
	   * Print an ending parentheses if a starting one has been printed.
	   */

	  Buffer.prototype.endTerminatorless = function endTerminatorless(state /*: Object*/) {
	    if (state.printed) {
	      this.dedent();
	      this.newline();
	      this.push(")");
	    }
	  };

	  /**
	   * Add a newline (or many newlines), maintaining formatting.
	   * Strips multiple newlines if removeLast is true.
	   */

	  Buffer.prototype.newline = function newline(i /*:: ?: boolean | number*/, removeLast /*:: ?: boolean*/) {
	    if (this.format.retainLines || this.format.compact) return;

	    if (this.format.concise) {
	      this.space();
	      return;
	    }

	    removeLast = removeLast || false;

	    if (typeof i === "number") {
	      i = Math.min(2, i);

	      if (this.endsWith("{\n") || this.endsWith(":\n")) i--;
	      if (i <= 0) return;

	      while (i > 0) {
	        this._newline(removeLast);
	        i--;
	      }
	      return;
	    }

	    if (typeof i === "boolean") {
	      removeLast = i;
	    }

	    this._newline(removeLast);
	  };

	  /**
	   * Adds a newline unless there is already two previous newlines.
	   */

	  Buffer.prototype._newline = function _newline(removeLast /*:: ?: boolean*/) {
	    // never allow more than two lines
	    if (this.endsWith("\n\n")) return;

	    // remove the last newline
	    if (removeLast && this.isLast("\n")) this.removeLast("\n");

	    this.removeLast(" ");
	    this._removeSpacesAfterLastNewline();
	    this._push("\n");
	  };

	  /**
	   * If buffer ends with a newline and some spaces after it, trim those spaces.
	   */

	  Buffer.prototype._removeSpacesAfterLastNewline = function _removeSpacesAfterLastNewline() {
	    var lastNewlineIndex = this.buf.lastIndexOf("\n");
	    if (lastNewlineIndex === -1) {
	      return;
	    }

	    var index = this.buf.length - 1;
	    while (index > lastNewlineIndex) {
	      if (this.buf[index] !== " ") {
	        break;
	      }

	      index--;
	    }

	    if (index === lastNewlineIndex) {
	      this.buf = this.buf.substring(0, index + 1);
	    }
	  };

	  /**
	   * Push a string to the buffer, maintaining indentation and newlines.
	   */

	  Buffer.prototype.push = function push(str /*: string*/, noIndent /*:: ?: boolean*/) {
	    if (!this.format.compact && this._indent && !noIndent && str !== "\n") {
	      // we have an indent level and we aren't pushing a newline
	      var indent = this.getIndent();

	      // replace all newlines with newlines with the indentation
	      str = str.replace(/\n/g, "\n" + indent);

	      // we've got a newline before us so prepend on the indentation
	      if (this.isLast("\n")) this._push(indent);
	    }

	    this._push(str);
	  };

	  /**
	   * Push a string to the buffer.
	   */

	  Buffer.prototype._push = function _push(str) {
	    // see startTerminatorless() instance method
	    var parenPushNewlineState = this.parenPushNewlineState;
	    if (parenPushNewlineState) {
	      for (var i = 0; i < str.length; i++) {
	        var cha = str[i];

	        // we can ignore spaces since they wont interupt a terminatorless separator
	        if (cha === " ") continue;

	        this.parenPushNewlineState = null;

	        if (cha === "\n" || cha === "/") {
	          // we're going to break this terminator expression so we need to add a parentheses
	          this._push("(");
	          this.indent();
	          parenPushNewlineState.printed = true;
	        }

	        break;
	      }
	    }

	    //
	    this.position.push(str);
	    this.buf += str;
	  };

	  /**
	   * Test if the buffer ends with a string.
	   */

	  Buffer.prototype.endsWith = function endsWith(str /*: string*/) /*: boolean*/ {
	    var buf /*: string*/ = arguments.length <= 1 || arguments[1] === undefined ? this.buf : arguments[1];

	    if (str.length === 1) {
	      return buf[buf.length - 1] === str;
	    } else {
	      return buf.slice(-str.length) === str;
	    }
	  };

	  /**
	   * Test if a character is last in the buffer.
	   */

	  Buffer.prototype.isLast = function isLast(cha /*: string*/) {
	    if (this.format.compact) return false;
	    return this._isLast(cha);
	  };

	  Buffer.prototype._isLast = function _isLast(cha /*: string*/) {
	    var buf = this.buf;
	    var last = buf[buf.length - 1];

	    if (Array.isArray(cha)) {
	      return cha.indexOf(last) >= 0;
	    } else {
	      return cha === last;
	    }
	  };

	  return Buffer;
	})();

	exports["default"] = Buffer;
	module.exports = exports["default"];

/***/ },
/* 2394 */
/***/ function(module, exports) {

	/* @flow */

	"use strict";

	exports.__esModule = true;
	exports.File = File;
	exports.Program = Program;
	exports.BlockStatement = BlockStatement;
	exports.Noop = Noop;
	exports.Directive = Directive;
	exports.DirectiveLiteral = DirectiveLiteral;

	function File(node /*: Object*/) {
	  this.print(node.program, node);
	}

	function Program(node /*: Object*/) {
	  this.printInnerComments(node, false);

	  this.printSequence(node.directives, node);
	  if (node.directives && node.directives.length) this.newline();

	  this.printSequence(node.body, node);
	}

	function BlockStatement(node /*: Object*/) {
	  this.push("{");
	  this.printInnerComments(node);
	  if (node.body.length) {
	    this.newline();

	    this.printSequence(node.directives, node, { indent: true });
	    if (node.directives && node.directives.length) this.newline();

	    this.printSequence(node.body, node, { indent: true });
	    if (!this.format.retainLines) this.removeLast("\n");
	    this.rightBrace();
	  } else {
	    this.push("}");
	  }
	}

	function Noop() {}

	function Directive(node /*: Object*/) {
	  this.print(node.value, node);
	  this.semicolon();
	}

	function DirectiveLiteral(node /*: Object*/) {
	  this.push(this._stringLiteral(node.value));
	}

/***/ },
/* 2395 */
/***/ function(module, exports) {

	/* @flow */

	"use strict";

	exports.__esModule = true;
	exports.ClassDeclaration = ClassDeclaration;
	exports.ClassBody = ClassBody;
	exports.ClassProperty = ClassProperty;
	exports.ClassMethod = ClassMethod;

	function ClassDeclaration(node /*: Object*/) {
	  this.printJoin(node.decorators, node, { separator: "" });
	  this.push("class");

	  if (node.id) {
	    this.push(" ");
	    this.print(node.id, node);
	  }

	  this.print(node.typeParameters, node);

	  if (node.superClass) {
	    this.push(" extends ");
	    this.print(node.superClass, node);
	    this.print(node.superTypeParameters, node);
	  }

	  if (node["implements"]) {
	    this.push(" implements ");
	    this.printJoin(node["implements"], node, { separator: ", " });
	  }

	  this.space();
	  this.print(node.body, node);
	}

	exports.ClassExpression = ClassDeclaration;

	function ClassBody(node /*: Object*/) {
	  this.push("{");
	  this.printInnerComments(node);
	  if (node.body.length === 0) {
	    this.push("}");
	  } else {
	    this.newline();

	    this.indent();
	    this.printSequence(node.body, node);
	    this.dedent();

	    this.rightBrace();
	  }
	}

	function ClassProperty(node /*: Object*/) {
	  this.printJoin(node.decorators, node, { separator: "" });

	  if (node["static"]) this.push("static ");
	  this.print(node.key, node);
	  this.print(node.typeAnnotation, node);
	  if (node.value) {
	    this.space();
	    this.push("=");
	    this.space();
	    this.print(node.value, node);
	  }
	  this.semicolon();
	}

	function ClassMethod(node /*: Object*/) {
	  this.printJoin(node.decorators, node, { separator: "" });

	  if (node["static"]) {
	    this.push("static ");
	  }

	  if (node.kind === "constructorCall") {
	    this.push("call ");
	  }

	  this._method(node);
	}

/***/ },
/* 2396 */
/***/ function(module, exports, __webpack_require__) {

	/* @flow */

	"use strict";

	var _interopRequireDefault = __webpack_require__(5)["default"];

	var _interopRequireWildcard = __webpack_require__(3)["default"];

	exports.__esModule = true;
	exports.UnaryExpression = UnaryExpression;
	exports.DoExpression = DoExpression;
	exports.ParenthesizedExpression = ParenthesizedExpression;
	exports.UpdateExpression = UpdateExpression;
	exports.ConditionalExpression = ConditionalExpression;
	exports.NewExpression = NewExpression;
	exports.SequenceExpression = SequenceExpression;
	exports.ThisExpression = ThisExpression;
	exports.Super = Super;
	exports.Decorator = Decorator;
	exports.CallExpression = CallExpression;
	exports.EmptyStatement = EmptyStatement;
	exports.ExpressionStatement = ExpressionStatement;
	exports.AssignmentPattern = AssignmentPattern;
	exports.AssignmentExpression = AssignmentExpression;
	exports.BindExpression = BindExpression;
	exports.MemberExpression = MemberExpression;
	exports.MetaProperty = MetaProperty;

	var _isInteger = __webpack_require__(2410);

	var _isInteger2 = _interopRequireDefault(_isInteger);

	var _lodashLangIsNumber = __webpack_require__(1341);

	var _lodashLangIsNumber2 = _interopRequireDefault(_lodashLangIsNumber);

	var _babelTypes = __webpack_require__(16);

	var t = _interopRequireWildcard(_babelTypes);

	var _node = __webpack_require__(1298);

	var _node2 = _interopRequireDefault(_node);

	var SCIENTIFIC_NOTATION = /e/i;
	var ZERO_DECIMAL_INTEGER = /\.0+$/;

	function UnaryExpression(node /*: Object*/) {
	  var needsSpace = /[a-z]$/.test(node.operator);
	  var arg = node.argument;

	  if (t.isUpdateExpression(arg) || t.isUnaryExpression(arg)) {
	    needsSpace = true;
	  }

	  if (t.isUnaryExpression(arg) && arg.operator === "!") {
	    needsSpace = false;
	  }

	  this.push(node.operator);
	  if (needsSpace) this.push(" ");
	  this.print(node.argument, node);
	}

	function DoExpression(node /*: Object*/) {
	  this.push("do");
	  this.space();
	  this.print(node.body, node);
	}

	function ParenthesizedExpression(node /*: Object*/) {
	  this.push("(");
	  this.print(node.expression, node);
	  this.push(")");
	}

	function UpdateExpression(node /*: Object*/) {
	  if (node.prefix) {
	    this.push(node.operator);
	    this.print(node.argument, node);
	  } else {
	    this.print(node.argument, node);
	    this.push(node.operator);
	  }
	}

	function ConditionalExpression(node /*: Object*/) {
	  this.print(node.test, node);
	  this.space();
	  this.push("?");
	  this.space();
	  this.print(node.consequent, node);
	  this.space();
	  this.push(":");
	  this.space();
	  this.print(node.alternate, node);
	}

	function NewExpression(node /*: Object*/, parent /*: Object*/) {
	  this.push("new ");
	  this.print(node.callee, node);
	  if (node.arguments.length === 0 && this.format.minified && !t.isCallExpression(parent, { callee: node }) && !t.isMemberExpression(parent) && !t.isNewExpression(parent)) return;

	  this.push("(");
	  this.printList(node.arguments, node);
	  this.push(")");
	}

	function SequenceExpression(node /*: Object*/) {
	  this.printList(node.expressions, node);
	}

	function ThisExpression() {
	  this.push("this");
	}

	function Super() {
	  this.push("super");
	}

	function Decorator(node /*: Object*/) {
	  this.push("@");
	  this.print(node.expression, node);
	  this.newline();
	}

	function CallExpression(node /*: Object*/) {
	  this.print(node.callee, node);

	  this.push("(");

	  var isPrettyCall = node._prettyCall && !this.format.retainLines && !this.format.compact;

	  var separator = undefined;
	  if (isPrettyCall) {
	    separator = ",\n";
	    this.newline();
	    this.indent();
	  }

	  this.printList(node.arguments, node, { separator: separator });

	  if (isPrettyCall) {
	    this.newline();
	    this.dedent();
	  }

	  this.push(")");
	}

	function buildYieldAwait(keyword /*: string*/) {
	  return function (node /*: Object*/) {
	    this.push(keyword);

	    if (node.delegate) {
	      this.push("*");
	    }

	    if (node.argument) {
	      this.push(" ");
	      var terminatorState = this.startTerminatorless();
	      this.print(node.argument, node);
	      this.endTerminatorless(terminatorState);
	    }
	  };
	}

	var YieldExpression = buildYieldAwait("yield");
	exports.YieldExpression = YieldExpression;
	var AwaitExpression = buildYieldAwait("await");

	exports.AwaitExpression = AwaitExpression;

	function EmptyStatement() {
	  this._lastPrintedIsEmptyStatement = true;
	  this.semicolon();
	}

	function ExpressionStatement(node /*: Object*/) {
	  this.print(node.expression, node);
	  this.semicolon();
	}

	function AssignmentPattern(node /*: Object*/) {
	  this.print(node.left, node);
	  this.space();
	  this.push("=");
	  this.space();
	  this.print(node.right, node);
	}

	function AssignmentExpression(node /*: Object*/, parent /*: Object*/) {
	  // Somewhere inside a for statement `init` node but doesn't usually
	  // needs a paren except for `in` expressions: `for (a in b ? a : b;;)`
	  // and for `ObjectPattern`: `({ f } = { f: 2 };`
	  var parens = this._inForStatementInit && node.operator === "in" && !_node2["default"].needsParens(node, parent) || t.isObjectPattern(node.left);

	  if (parens) {
	    this.push("(");
	  }

	  this.print(node.left, node);

	  var spaces = !this.format.compact || node.operator === "in" || node.operator === "instanceof";
	  if (spaces) this.push(" ");

	  this.push(node.operator);

	  if (!spaces) {
	    // space is mandatory to avoid outputting <!--
	    // http://javascript.spec.whatwg.org/#comment-syntax
	    spaces = node.operator === "<" && t.isUnaryExpression(node.right, { prefix: true, operator: "!" }) && t.isUnaryExpression(node.right.argument, { prefix: true, operator: "--" });

	    // Need spaces for operators of the same kind to avoid: `a+++b`
	    if (!spaces) {
	      var right = getLeftMost(node.right);
	      spaces = t.isUnaryExpression(right, { prefix: true, operator: node.operator }) || t.isUpdateExpression(right, { prefix: true, operator: node.operator + node.operator });
	    }
	  }

	  if (spaces) this.push(" ");

	  this.print(node.right, node);

	  if (parens) {
	    this.push(")");
	  }
	}

	function BindExpression(node /*: Object*/) {
	  this.print(node.object, node);
	  this.push("::");
	  this.print(node.callee, node);
	}

	exports.BinaryExpression = AssignmentExpression;
	exports.LogicalExpression = AssignmentExpression;

	function MemberExpression(node /*: Object*/) {
	  this.print(node.object, node);

	  if (!node.computed && t.isMemberExpression(node.property)) {
	    throw new TypeError("Got a MemberExpression for MemberExpression property");
	  }

	  var computed = node.computed;
	  if (t.isLiteral(node.property) && _lodashLangIsNumber2["default"](node.property.value)) {
	    computed = true;
	  }

	  if (computed) {
	    this.push("[");
	    this.print(node.property, node);
	    this.push("]");
	  } else {
	    if (t.isNumericLiteral(node.object)) {
	      var val = this.getPossibleRaw(node.object) || node.object.value;
	      if (_isInteger2["default"](+val) && !SCIENTIFIC_NOTATION.test(val) && !ZERO_DECIMAL_INTEGER.test(val) && !this.endsWith(".")) {
	        this.push(".");
	      }
	    }

	    this.push(".");
	    this.print(node.property, node);
	  }
	}

	function MetaProperty(node /*: Object*/) {
	  this.print(node.meta, node);
	  this.push(".");
	  this.print(node.property, node);
	}

	function getLeftMost(binaryExpr) {
	  if (!t.isBinaryExpression(binaryExpr)) {
	    return binaryExpr;
	  }
	  return getLeftMost(binaryExpr.left);
	}

/***/ },
/* 2397 */
/***/ function(module, exports, __webpack_require__) {

	/* @flow */

	"use strict";

	var _interopRequireWildcard = __webpack_require__(3)["default"];

	exports.__esModule = true;
	exports.AnyTypeAnnotation = AnyTypeAnnotation;
	exports.ArrayTypeAnnotation = ArrayTypeAnnotation;
	exports.BooleanTypeAnnotation = BooleanTypeAnnotation;
	exports.BooleanLiteralTypeAnnotation = BooleanLiteralTypeAnnotation;
	exports.NullLiteralTypeAnnotation = NullLiteralTypeAnnotation;
	exports.DeclareClass = DeclareClass;
	exports.DeclareFunction = DeclareFunction;
	exports.DeclareInterface = DeclareInterface;
	exports.DeclareModule = DeclareModule;
	exports.DeclareTypeAlias = DeclareTypeAlias;
	exports.DeclareVariable = DeclareVariable;
	exports.ExistentialTypeParam = ExistentialTypeParam;
	exports.FunctionTypeAnnotation = FunctionTypeAnnotation;
	exports.FunctionTypeParam = FunctionTypeParam;
	exports.InterfaceExtends = InterfaceExtends;
	exports._interfaceish = _interfaceish;
	exports.InterfaceDeclaration = InterfaceDeclaration;
	exports.IntersectionTypeAnnotation = IntersectionTypeAnnotation;
	exports.MixedTypeAnnotation = MixedTypeAnnotation;
	exports.NullableTypeAnnotation = NullableTypeAnnotation;
	exports.NumberTypeAnnotation = NumberTypeAnnotation;
	exports.StringLiteralTypeAnnotation = StringLiteralTypeAnnotation;
	exports.StringTypeAnnotation = StringTypeAnnotation;
	exports.ThisTypeAnnotation = ThisTypeAnnotation;
	exports.TupleTypeAnnotation = TupleTypeAnnotation;
	exports.TypeofTypeAnnotation = TypeofTypeAnnotation;
	exports.TypeAlias = TypeAlias;
	exports.TypeAnnotation = TypeAnnotation;
	exports.TypeParameterInstantiation = TypeParameterInstantiation;
	exports.ObjectTypeAnnotation = ObjectTypeAnnotation;
	exports.ObjectTypeCallProperty = ObjectTypeCallProperty;
	exports.ObjectTypeIndexer = ObjectTypeIndexer;
	exports.ObjectTypeProperty = ObjectTypeProperty;
	exports.QualifiedTypeIdentifier = QualifiedTypeIdentifier;
	exports.UnionTypeAnnotation = UnionTypeAnnotation;
	exports.TypeCastExpression = TypeCastExpression;
	exports.VoidTypeAnnotation = VoidTypeAnnotation;

	var _babelTypes = __webpack_require__(16);

	var t = _interopRequireWildcard(_babelTypes);

	function AnyTypeAnnotation() {
	  this.push("any");
	}

	function ArrayTypeAnnotation(node /*: Object*/) {
	  this.print(node.elementType, node);
	  this.push("[");
	  this.push("]");
	}

	function BooleanTypeAnnotation() {
	  this.push("bool");
	}

	function BooleanLiteralTypeAnnotation(node /*: Object*/) {
	  this.push(node.value ? "true" : "false");
	}

	function NullLiteralTypeAnnotation() {
	  this.push("null");
	}

	function DeclareClass(node /*: Object*/) {
	  this.push("declare class ");
	  this._interfaceish(node);
	}

	function DeclareFunction(node /*: Object*/) {
	  this.push("declare function ");
	  this.print(node.id, node);
	  this.print(node.id.typeAnnotation.typeAnnotation, node);
	  this.semicolon();
	}

	function DeclareInterface(node /*: Object*/) {
	  this.push("declare ");
	  this.InterfaceDeclaration(node);
	}

	function DeclareModule(node /*: Object*/) {
	  this.push("declare module ");
	  this.print(node.id, node);
	  this.space();
	  this.print(node.body, node);
	}

	function DeclareTypeAlias(node /*: Object*/) {
	  this.push("declare ");
	  this.TypeAlias(node);
	}

	function DeclareVariable(node /*: Object*/) {
	  this.push("declare var ");
	  this.print(node.id, node);
	  this.print(node.id.typeAnnotation, node);
	  this.semicolon();
	}

	function ExistentialTypeParam() {
	  this.push("*");
	}

	function FunctionTypeAnnotation(node /*: Object*/, parent /*: Object*/) {
	  this.print(node.typeParameters, node);
	  this.push("(");
	  this.printList(node.params, node);

	  if (node.rest) {
	    if (node.params.length) {
	      this.push(",");
	      this.space();
	    }
	    this.push("...");
	    this.print(node.rest, node);
	  }

	  this.push(")");

	  // this node type is overloaded, not sure why but it makes it EXTREMELY annoying
	  if (parent.type === "ObjectTypeProperty" || parent.type === "ObjectTypeCallProperty" || parent.type === "DeclareFunction") {
	    this.push(":");
	  } else {
	    this.space();
	    this.push("=>");
	  }

	  this.space();
	  this.print(node.returnType, node);
	}

	function FunctionTypeParam(node /*: Object*/) {
	  this.print(node.name, node);
	  if (node.optional) this.push("?");
	  this.push(":");
	  this.space();
	  this.print(node.typeAnnotation, node);
	}

	function InterfaceExtends(node /*: Object*/) {
	  this.print(node.id, node);
	  this.print(node.typeParameters, node);
	}

	exports.ClassImplements = InterfaceExtends;
	exports.GenericTypeAnnotation = InterfaceExtends;

	function _interfaceish(node /*: Object*/) {
	  this.print(node.id, node);
	  this.print(node.typeParameters, node);
	  if (node["extends"].length) {
	    this.push(" extends ");
	    this.printJoin(node["extends"], node, { separator: ", " });
	  }
	  if (node.mixins && node.mixins.length) {
	    this.push(" mixins ");
	    this.printJoin(node.mixins, node, { separator: ", " });
	  }
	  this.space();
	  this.print(node.body, node);
	}

	function InterfaceDeclaration(node /*: Object*/) {
	  this.push("interface ");
	  this._interfaceish(node);
	}

	function IntersectionTypeAnnotation(node /*: Object*/) {
	  this.printJoin(node.types, node, { separator: " & " });
	}

	function MixedTypeAnnotation() {
	  this.push("mixed");
	}

	function NullableTypeAnnotation(node /*: Object*/) {
	  this.push("?");
	  this.print(node.typeAnnotation, node);
	}

	var _types = __webpack_require__(1296);

	exports.NumericLiteralTypeAnnotation = _types.NumericLiteral;

	function NumberTypeAnnotation() {
	  this.push("number");
	}

	function StringLiteralTypeAnnotation(node /*: Object*/) {
	  this.push(this._stringLiteral(node.value));
	}

	function StringTypeAnnotation() {
	  this.push("string");
	}

	function ThisTypeAnnotation() {
	  this.push("this");
	}

	function TupleTypeAnnotation(node /*: Object*/) {
	  this.push("[");
	  this.printJoin(node.types, node, { separator: ", " });
	  this.push("]");
	}

	function TypeofTypeAnnotation(node /*: Object*/) {
	  this.push("typeof ");
	  this.print(node.argument, node);
	}

	function TypeAlias(node /*: Object*/) {
	  this.push("type ");
	  this.print(node.id, node);
	  this.print(node.typeParameters, node);
	  this.space();
	  this.push("=");
	  this.space();
	  this.print(node.right, node);
	  this.semicolon();
	}

	function TypeAnnotation(node /*: Object*/) {
	  this.push(":");
	  this.space();
	  if (node.optional) this.push("?");
	  this.print(node.typeAnnotation, node);
	}

	function TypeParameterInstantiation(node /*: Object*/) {
	  // istanbul ignore next

	  var _this = this;

	  this.push("<");
	  this.printJoin(node.params, node, {
	    separator: ", ",
	    iterator: function iterator(node /*: Object*/) {
	      _this.print(node.typeAnnotation, node);
	    }
	  });
	  this.push(">");
	}

	exports.TypeParameterDeclaration = TypeParameterInstantiation;

	function ObjectTypeAnnotation(node /*: Object*/) {
	  // istanbul ignore next

	  var _this2 = this;

	  this.push("{");
	  var props = node.properties.concat(node.callProperties, node.indexers);

	  if (props.length) {
	    this.space();

	    this.printJoin(props, node, {
	      separator: false,
	      indent: true,
	      iterator: function iterator() {
	        if (props.length !== 1) {
	          _this2.semicolon();
	          _this2.space();
	        }
	      }
	    });

	    this.space();
	  }

	  this.push("}");
	}

	function ObjectTypeCallProperty(node /*: Object*/) {
	  if (node["static"]) this.push("static ");
	  this.print(node.value, node);
	}

	function ObjectTypeIndexer(node /*: Object*/) {
	  if (node["static"]) this.push("static ");
	  this.push("[");
	  this.print(node.id, node);
	  this.push(":");
	  this.space();
	  this.print(node.key, node);
	  this.push("]");
	  this.push(":");
	  this.space();
	  this.print(node.value, node);
	}

	function ObjectTypeProperty(node /*: Object*/) {
	  if (node["static"]) this.push("static ");
	  this.print(node.key, node);
	  if (node.optional) this.push("?");
	  if (!t.isFunctionTypeAnnotation(node.value)) {
	    this.push(":");
	    this.space();
	  }
	  this.print(node.value, node);
	}

	function QualifiedTypeIdentifier(node /*: Object*/) {
	  this.print(node.qualification, node);
	  this.push(".");
	  this.print(node.id, node);
	}

	function UnionTypeAnnotation(node /*: Object*/) {
	  this.printJoin(node.types, node, { separator: " | " });
	}

	function TypeCastExpression(node /*: Object*/) {
	  this.push("(");
	  this.print(node.expression, node);
	  this.print(node.typeAnnotation, node);
	  this.push(")");
	}

	function VoidTypeAnnotation() {
	  this.push("void");
	}

/***/ },
/* 2398 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(37)["default"];

	exports.__esModule = true;
	exports.JSXAttribute = JSXAttribute;
	exports.JSXIdentifier = JSXIdentifier;
	exports.JSXNamespacedName = JSXNamespacedName;
	exports.JSXMemberExpression = JSXMemberExpression;
	exports.JSXSpreadAttribute = JSXSpreadAttribute;
	exports.JSXExpressionContainer = JSXExpressionContainer;
	exports.JSXText = JSXText;
	exports.JSXElement = JSXElement;
	exports.JSXOpeningElement = JSXOpeningElement;
	exports.JSXClosingElement = JSXClosingElement;
	exports.JSXEmptyExpression = JSXEmptyExpression;

	function JSXAttribute(node /*: Object*/) {
	  this.print(node.name, node);
	  if (node.value) {
	    this.push("=");
	    this.print(node.value, node);
	  }
	}

	function JSXIdentifier(node /*: Object*/) {
	  this.push(node.name);
	}

	function JSXNamespacedName(node /*: Object*/) {
	  this.print(node.namespace, node);
	  this.push(":");
	  this.print(node.name, node);
	}

	function JSXMemberExpression(node /*: Object*/) {
	  this.print(node.object, node);
	  this.push(".");
	  this.print(node.property, node);
	}

	function JSXSpreadAttribute(node /*: Object*/) {
	  this.push("{...");
	  this.print(node.argument, node);
	  this.push("}");
	}

	function JSXExpressionContainer(node /*: Object*/) {
	  this.push("{");
	  this.print(node.expression, node);
	  this.push("}");
	}

	function JSXText(node /*: Object*/) {
	  this.push(node.value, true);
	}

	function JSXElement(node /*: Object*/) {
	  var open = node.openingElement;
	  this.print(open, node);
	  if (open.selfClosing) return;

	  this.indent();
	  for (var _iterator = (node.children /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var child = _ref;

	    this.print(child, node);
	  }
	  this.dedent();

	  this.print(node.closingElement, node);
	}

	function JSXOpeningElement(node /*: Object*/) {
	  this.push("<");
	  this.print(node.name, node);
	  if (node.attributes.length > 0) {
	    this.push(" ");
	    this.printJoin(node.attributes, node, { separator: " " });
	  }
	  this.push(node.selfClosing ? " />" : ">");
	}

	function JSXClosingElement(node /*: Object*/) {
	  this.push("</");
	  this.print(node.name, node);
	  this.push(">");
	}

	function JSXEmptyExpression() {}

/***/ },
/* 2399 */
/***/ function(module, exports, __webpack_require__) {

	/* @flow */

	"use strict";

	var _interopRequireWildcard = __webpack_require__(3)["default"];

	exports.__esModule = true;
	exports._params = _params;
	exports._method = _method;
	exports.FunctionExpression = FunctionExpression;
	exports.ArrowFunctionExpression = ArrowFunctionExpression;

	var _babelTypes = __webpack_require__(16);

	var t = _interopRequireWildcard(_babelTypes);

	function _params(node /*: Object*/) {
	  // istanbul ignore next

	  var _this = this;

	  this.print(node.typeParameters, node);
	  this.push("(");
	  this.printList(node.params, node, {
	    iterator: function iterator(node) {
	      if (node.optional) _this.push("?");
	      _this.print(node.typeAnnotation, node);
	    }
	  });
	  this.push(")");

	  if (node.returnType) {
	    this.print(node.returnType, node);
	  }
	}

	function _method(node /*: Object*/) {
	  var kind = node.kind;
	  var key = node.key;

	  if (kind === "method" || kind === "init") {
	    if (node.generator) {
	      this.push("*");
	    }
	  }

	  if (kind === "get" || kind === "set") {
	    this.push(kind + " ");
	  }

	  if (node.async) this.push("async ");

	  if (node.computed) {
	    this.push("[");
	    this.print(key, node);
	    this.push("]");
	  } else {
	    this.print(key, node);
	  }

	  this._params(node);
	  this.space();
	  this.print(node.body, node);
	}

	function FunctionExpression(node /*: Object*/) {
	  if (node.async) this.push("async ");
	  this.push("function");
	  if (node.generator) this.push("*");

	  if (node.id) {
	    this.push(" ");
	    this.print(node.id, node);
	  } else {
	    this.space();
	  }

	  this._params(node);
	  this.space();
	  this.print(node.body, node);
	}

	exports.FunctionDeclaration = FunctionExpression;

	function ArrowFunctionExpression(node /*: Object*/) {
	  if (node.async) this.push("async ");

	  if (node.params.length === 1 && t.isIdentifier(node.params[0])) {
	    this.print(node.params[0], node);
	  } else {
	    this._params(node);
	  }

	  this.push(" => ");

	  var bodyNeedsParens = t.isObjectExpression(node.body);

	  if (bodyNeedsParens) {
	    this.push("(");
	  }

	  this.print(node.body, node);

	  if (bodyNeedsParens) {
	    this.push(")");
	  }
	}

/***/ },
/* 2400 */
/***/ function(module, exports, __webpack_require__) {

	/* @flow */

	"use strict";

	var _interopRequireWildcard = __webpack_require__(3)["default"];

	exports.__esModule = true;
	exports.ImportSpecifier = ImportSpecifier;
	exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
	exports.ExportDefaultSpecifier = ExportDefaultSpecifier;
	exports.ExportSpecifier = ExportSpecifier;
	exports.ExportNamespaceSpecifier = ExportNamespaceSpecifier;
	exports.ExportAllDeclaration = ExportAllDeclaration;
	exports.ExportNamedDeclaration = ExportNamedDeclaration;
	exports.ExportDefaultDeclaration = ExportDefaultDeclaration;
	exports.ImportDeclaration = ImportDeclaration;
	exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;

	var _babelTypes = __webpack_require__(16);

	var t = _interopRequireWildcard(_babelTypes);

	function ImportSpecifier(node /*: Object*/) {
	  this.print(node.imported, node);
	  if (node.local && node.local.name !== node.imported.name) {
	    this.push(" as ");
	    this.print(node.local, node);
	  }
	}

	function ImportDefaultSpecifier(node /*: Object*/) {
	  this.print(node.local, node);
	}

	function ExportDefaultSpecifier(node /*: Object*/) {
	  this.print(node.exported, node);
	}

	function ExportSpecifier(node /*: Object*/) {
	  this.print(node.local, node);
	  if (node.exported && node.local.name !== node.exported.name) {
	    this.push(" as ");
	    this.print(node.exported, node);
	  }
	}

	function ExportNamespaceSpecifier(node /*: Object*/) {
	  this.push("* as ");
	  this.print(node.exported, node);
	}

	function ExportAllDeclaration(node /*: Object*/) {
	  this.push("export *");
	  if (node.exported) {
	    this.push(" as ");
	    this.print(node.exported, node);
	  }
	  this.push(" from ");
	  this.print(node.source, node);
	  this.semicolon();
	}

	function ExportNamedDeclaration() {
	  this.push("export ");
	  ExportDeclaration.apply(this, arguments);
	}

	function ExportDefaultDeclaration() {
	  this.push("export default ");
	  ExportDeclaration.apply(this, arguments);
	}

	function ExportDeclaration(node /*: Object*/) {
	  if (node.declaration) {
	    var declar = node.declaration;
	    this.print(declar, node);
	    if (t.isStatement(declar) || t.isFunction(declar) || t.isClass(declar)) return;
	  } else {
	    if (node.exportKind === "type") {
	      this.push("type ");
	    }

	    var specifiers = node.specifiers.slice(0);

	    // print "special" specifiers first
	    var hasSpecial = false;
	    while (true) {
	      var first = specifiers[0];
	      if (t.isExportDefaultSpecifier(first) || t.isExportNamespaceSpecifier(first)) {
	        hasSpecial = true;
	        this.print(specifiers.shift(), node);
	        if (specifiers.length) {
	          this.push(", ");
	        }
	      } else {
	        break;
	      }
	    }

	    if (specifiers.length || !specifiers.length && !hasSpecial) {
	      this.push("{");
	      if (specifiers.length) {
	        this.space();
	        this.printJoin(specifiers, node, { separator: ", " });
	        this.space();
	      }
	      this.push("}");
	    }

	    if (node.source) {
	      this.push(" from ");
	      this.print(node.source, node);
	    }
	  }

	  this.ensureSemicolon();
	}

	function ImportDeclaration(node /*: Object*/) {
	  this.push("import ");

	  if (node.importKind === "type" || node.importKind === "typeof") {
	    this.push(node.importKind + " ");
	  }

	  var specifiers = node.specifiers.slice(0);
	  if (specifiers && specifiers.length) {
	    // print "special" specifiers first
	    while (true) {
	      var first = specifiers[0];
	      if (t.isImportDefaultSpecifier(first) || t.isImportNamespaceSpecifier(first)) {
	        this.print(specifiers.shift(), node);
	        if (specifiers.length) {
	          this.push(", ");
	        }
	      } else {
	        break;
	      }
	    }

	    if (specifiers.length) {
	      this.push("{");
	      this.space();
	      this.printJoin(specifiers, node, { separator: ", " });
	      this.space();
	      this.push("}");
	    }

	    this.push(" from ");
	  }

	  this.print(node.source, node);
	  this.semicolon();
	}

	function ImportNamespaceSpecifier(node /*: Object*/) {
	  this.push("* as ");
	  this.print(node.local, node);
	}

/***/ },
/* 2401 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(37)["default"];

	var _interopRequireDefault = __webpack_require__(5)["default"];

	var _interopRequireWildcard = __webpack_require__(3)["default"];

	exports.__esModule = true;
	exports.WithStatement = WithStatement;
	exports.IfStatement = IfStatement;
	exports.ForStatement = ForStatement;
	exports.WhileStatement = WhileStatement;
	exports.DoWhileStatement = DoWhileStatement;
	exports.LabeledStatement = LabeledStatement;
	exports.TryStatement = TryStatement;
	exports.CatchClause = CatchClause;
	exports.SwitchStatement = SwitchStatement;
	exports.SwitchCase = SwitchCase;
	exports.DebuggerStatement = DebuggerStatement;
	exports.VariableDeclaration = VariableDeclaration;
	exports.VariableDeclarator = VariableDeclarator;

	var _repeating = __webpack_require__(509);

	var _repeating2 = _interopRequireDefault(_repeating);

	var _babelTypes = __webpack_require__(16);

	var t = _interopRequireWildcard(_babelTypes);

	function WithStatement(node /*: Object*/) {
	  this.keyword("with");
	  this.push("(");
	  this.print(node.object, node);
	  this.push(")");
	  this.printBlock(node);
	}

	function IfStatement(node /*: Object*/) {
	  this.keyword("if");
	  this.push("(");
	  this.print(node.test, node);
	  this.push(")");
	  this.space();

	  var needsBlock = node.alternate && t.isIfStatement(getLastStatement(node.consequent));
	  if (needsBlock) {
	    this.push("{");
	    this.newline();
	    this.indent();
	  }

	  this.printAndIndentOnComments(node.consequent, node);

	  if (needsBlock) {
	    this.dedent();
	    this.newline();
	    this.push("}");
	  }

	  if (node.alternate) {
	    if (this.isLast("}")) this.space();
	    this.push("else ");
	    this.printAndIndentOnComments(node.alternate, node);
	  }
	}

	// Recursively get the last statement.
	function getLastStatement(statement) {
	  if (!t.isStatement(statement.body)) return statement;
	  return getLastStatement(statement.body);
	}

	function ForStatement(node /*: Object*/) {
	  this.keyword("for");
	  this.push("(");

	  this._inForStatementInit = true;
	  this.print(node.init, node);
	  this._inForStatementInit = false;
	  this.push(";");

	  if (node.test) {
	    this.space();
	    this.print(node.test, node);
	  }
	  this.push(";");

	  if (node.update) {
	    this.space();
	    this.print(node.update, node);
	  }

	  this.push(")");
	  this.printBlock(node);
	}

	function WhileStatement(node /*: Object*/) {
	  this.keyword("while");
	  this.push("(");
	  this.print(node.test, node);
	  this.push(")");
	  this.printBlock(node);
	}

	var buildForXStatement = function buildForXStatement(op) {
	  return function (node /*: Object*/) {
	    this.keyword("for");
	    this.push("(");
	    this.print(node.left, node);
	    this.push(" " + op + " ");
	    this.print(node.right, node);
	    this.push(")");
	    this.printBlock(node);
	  };
	};

	var ForInStatement = buildForXStatement("in");
	exports.ForInStatement = ForInStatement;
	var ForOfStatement = buildForXStatement("of");

	exports.ForOfStatement = ForOfStatement;

	function DoWhileStatement(node /*: Object*/) {
	  this.push("do ");
	  this.print(node.body, node);
	  this.space();
	  this.keyword("while");
	  this.push("(");
	  this.print(node.test, node);
	  this.push(");");
	}

	function buildLabelStatement(prefix) {
	  var key = arguments.length <= 1 || arguments[1] === undefined ? "label" : arguments[1];

	  return function (node /*: Object*/) {
	    this.push(prefix);

	    var label = node[key];
	    if (label) {
	      if (!(this.format.minified && (t.isUnaryExpression(label, { prefix: true }) || t.isUpdateExpression(label, { prefix: true })))) {
	        this.push(" ");
	      }

	      var terminatorState = this.startTerminatorless();
	      this.print(label, node);
	      this.endTerminatorless(terminatorState);
	    }

	    this.semicolon();
	  };
	}

	var ContinueStatement = buildLabelStatement("continue");
	exports.ContinueStatement = ContinueStatement;
	var ReturnStatement = buildLabelStatement("return", "argument");
	exports.ReturnStatement = ReturnStatement;
	var BreakStatement = buildLabelStatement("break");
	exports.BreakStatement = BreakStatement;
	var ThrowStatement = buildLabelStatement("throw", "argument");

	exports.ThrowStatement = ThrowStatement;

	function LabeledStatement(node /*: Object*/) {
	  this.print(node.label, node);
	  this.push(": ");
	  this.print(node.body, node);
	}

	function TryStatement(node /*: Object*/) {
	  this.keyword("try");
	  this.print(node.block, node);
	  this.space();

	  // Esprima bug puts the catch clause in a `handlers` array.
	  // see https://code.google.com/p/esprima/issues/detail?id=433
	  // We run into this from regenerator generated ast.
	  if (node.handlers) {
	    this.print(node.handlers[0], node);
	  } else {
	    this.print(node.handler, node);
	  }

	  if (node.finalizer) {
	    this.space();
	    this.push("finally ");
	    this.print(node.finalizer, node);
	  }
	}

	function CatchClause(node /*: Object*/) {
	  this.keyword("catch");
	  this.push("(");
	  this.print(node.param, node);
	  this.push(")");
	  this.space();
	  this.print(node.body, node);
	}

	function SwitchStatement(node /*: Object*/) {
	  this.keyword("switch");
	  this.push("(");
	  this.print(node.discriminant, node);
	  this.push(")");
	  this.space();
	  this.push("{");

	  this.printSequence(node.cases, node, {
	    indent: true,
	    addNewlines: function addNewlines(leading, cas) {
	      if (!leading && node.cases[node.cases.length - 1] === cas) return -1;
	    }
	  });

	  this.push("}");
	}

	function SwitchCase(node /*: Object*/) {
	  if (node.test) {
	    this.push("case ");
	    this.print(node.test, node);
	    this.push(":");
	  } else {
	    this.push("default:");
	  }

	  if (node.consequent.length) {
	    this.newline();
	    this.printSequence(node.consequent, node, { indent: true });
	  }
	}

	function DebuggerStatement() {
	  this.push("debugger;");
	}

	function VariableDeclaration(node /*: Object*/, parent /*: Object*/) {
	  this.push(node.kind + " ");

	  var hasInits = false;
	  // don't add whitespace to loop heads
	  if (!t.isFor(parent)) {
	    for (var _iterator = (node.declarations /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var declar = _ref;

	      if (declar.init) {
	        // has an init so let's split it up over multiple lines
	        hasInits = true;
	      }
	    }
	  }

	  //
	  // use a pretty separator when we aren't in compact mode, have initializers and don't have retainLines on
	  // this will format declarations like:
	  //
	  //   let foo = "bar", bar = "foo";
	  //
	  // into
	  //
	  //   let foo = "bar",
	  //       bar = "foo";
	  //

	  var sep = undefined;
	  if (!this.format.compact && !this.format.concise && hasInits && !this.format.retainLines) {
	    sep = ",\n" + _repeating2["default"](" ", node.kind.length + 1);
	  }

	  //

	  this.printList(node.declarations, node, { separator: sep });

	  if (t.isFor(parent)) {
	    // don't give semicolons to these nodes since they'll be inserted in the parent generator
	    if (parent.left === node || parent.init === node) return;
	  }

	  this.semicolon();
	}

	function VariableDeclarator(node /*: Object*/) {
	  this.print(node.id, node);
	  this.print(node.id.typeAnnotation, node);
	  if (node.init) {
	    this.space();
	    this.push("=");
	    this.space();
	    this.print(node.init, node);
	  }
	}

/***/ },
/* 2402 */
/***/ function(module, exports) {

	/* @flow */

	"use strict";

	exports.__esModule = true;
	exports.TaggedTemplateExpression = TaggedTemplateExpression;
	exports.TemplateElement = TemplateElement;
	exports.TemplateLiteral = TemplateLiteral;

	function TaggedTemplateExpression(node /*: Object*/) {
	  this.print(node.tag, node);
	  this.print(node.quasi, node);
	}

	function TemplateElement(node /*: Object*/) {
	  this._push(node.value.raw);
	}

	function TemplateLiteral(node /*: Object*/) {
	  this.push("`");

	  var quasis = node.quasis;

	  for (var i = 0; i < quasis.length; i++) {
	    this.print(quasis[i], node);

	    if (i + 1 < quasis.length) {
	      this._push("${ ");
	      this.print(node.expressions[i], node);
	      this.push(" }");
	    }
	  }

	  this._push("`");
	}

/***/ },
/* 2403 */
/***/ function(module, exports, __webpack_require__) {

	/* @flow */

	"use strict";

	var _interopRequireWildcard = __webpack_require__(3)["default"];

	exports.__esModule = true;
	exports.NullableTypeAnnotation = NullableTypeAnnotation;
	exports.UpdateExpression = UpdateExpression;
	exports.ObjectExpression = ObjectExpression;
	exports.Binary = Binary;
	exports.BinaryExpression = BinaryExpression;
	exports.SequenceExpression = SequenceExpression;
	exports.AwaitExpression = AwaitExpression;
	exports.YieldExpression = YieldExpression;
	exports.ClassExpression = ClassExpression;
	exports.UnaryLike = UnaryLike;
	exports.FunctionExpression = FunctionExpression;
	exports.ArrowFunctionExpression = ArrowFunctionExpression;
	exports.ConditionalExpression = ConditionalExpression;
	exports.AssignmentExpression = AssignmentExpression;

	var _babelTypes = __webpack_require__(16);

	var t = _interopRequireWildcard(_babelTypes);

	var PRECEDENCE = {
	  "||": 0,
	  "&&": 1,
	  "|": 2,
	  "^": 3,
	  "&": 4,
	  "==": 5,
	  "===": 5,
	  "!=": 5,
	  "!==": 5,
	  "<": 6,
	  ">": 6,
	  "<=": 6,
	  ">=": 6,
	  "in": 6,
	  "instanceof": 6,
	  ">>": 7,
	  "<<": 7,
	  ">>>": 7,
	  "+": 8,
	  "-": 8,
	  "*": 9,
	  "/": 9,
	  "%": 9,
	  "**": 10
	};

	function NullableTypeAnnotation(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  return t.isArrayTypeAnnotation(parent);
	}

	exports.FunctionTypeAnnotation = NullableTypeAnnotation;

	function UpdateExpression(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  if (t.isMemberExpression(parent) && parent.object === node) {
	    // (foo++).test()
	    return true;
	  }

	  return false;
	}

	function ObjectExpression(node /*: Object*/, parent /*: Object*/, printStack /*: Array<Object>*/) /*: boolean*/ {
	  if (t.isExpressionStatement(parent)) {
	    // ({ foo: "bar" });
	    return true;
	  }

	  return isFirstInStatement(printStack);
	}

	function Binary(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  if ((t.isCallExpression(parent) || t.isNewExpression(parent)) && parent.callee === node) {
	    return true;
	  }

	  if (t.isUnaryLike(parent)) {
	    return true;
	  }

	  if (t.isMemberExpression(parent) && parent.object === node) {
	    return true;
	  }

	  if (t.isBinary(parent) && !t.isAssignmentExpression(parent)) {
	    var parentOp = parent.operator;
	    var parentPos = PRECEDENCE[parentOp];

	    var nodeOp = node.operator;
	    var nodePos = PRECEDENCE[nodeOp];

	    if (parentPos > nodePos) {
	      return true;
	    }

	    // Logical expressions with the same precedence don't need parens.
	    if (parentPos === nodePos && parent.right === node && !t.isLogicalExpression(parent)) {
	      return true;
	    }
	  }

	  return false;
	}

	function BinaryExpression(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  if (node.operator === "in") {
	    // let i = (1 in []);
	    if (t.isVariableDeclarator(parent)) {
	      return true;
	    }

	    // for ((1 in []);;);
	    if (t.isFor(parent)) {
	      return true;
	    }
	  }

	  return false;
	}

	function SequenceExpression(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  if (t.isForStatement(parent)) {
	    // Although parentheses wouldn"t hurt around sequence
	    // expressions in the head of for loops, traditional style
	    // dictates that e.g. i++, j++ should not be wrapped with
	    // parentheses.
	    return false;
	  }

	  if (t.isExpressionStatement(parent) && parent.expression === node) {
	    return false;
	  }

	  if (t.isReturnStatement(parent)) {
	    return false;
	  }

	  if (t.isThrowStatement(parent)) {
	    return false;
	  }

	  if (t.isSwitchStatement(parent) && parent.discriminant === node) {
	    return false;
	  }

	  if (t.isWhileStatement(parent) && parent.test === node) {
	    return false;
	  }

	  if (t.isIfStatement(parent) && parent.test === node) {
	    return false;
	  }

	  if (t.isForInStatement(parent) && parent.right === node) {
	    return false;
	  }

	  // Otherwise err on the side of overparenthesization, adding
	  // explicit exceptions above if this proves overzealous.
	  return true;
	}

	function AwaitExpression(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  return t.isUnaryLike(parent) || t.isCallExpression(parent) || t.isMemberExpression(parent) || t.isNewExpression(parent);
	}

	function YieldExpression(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  return t.isUnaryLike(parent) || t.isCallExpression(parent) || t.isMemberExpression(parent) || t.isNewExpression(parent);
	}

	function ClassExpression(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  // (class {});
	  if (t.isExpressionStatement(parent)) {
	    return true;
	  }

	  // export default (class () {});
	  if (t.isExportDeclaration(parent)) {
	    return true;
	  }

	  return false;
	}

	function UnaryLike(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  if (t.isMemberExpression(parent, { object: node })) {
	    return true;
	  }

	  if (t.isCallExpression(parent, { callee: node }) || t.isNewExpression(parent, { callee: node })) {
	    return true;
	  }

	  return false;
	}

	function FunctionExpression(node /*: Object*/, parent /*: Object*/, printStack /*: Array<Object>*/) /*: boolean*/ {
	  // (function () {});
	  if (t.isExpressionStatement(parent)) {
	    return true;
	  }

	  // export default (function () {});
	  if (t.isExportDeclaration(parent)) {
	    return true;
	  }

	  return isFirstInStatement(printStack);
	}

	function ArrowFunctionExpression(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  // export default (function () {});
	  if (t.isExportDeclaration(parent)) {
	    return true;
	  }

	  if (t.isBinaryExpression(parent) || t.isLogicalExpression(parent)) {
	    return true;
	  }

	  return UnaryLike(node, parent);
	}

	function ConditionalExpression(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  if (t.isUnaryLike(parent)) {
	    return true;
	  }

	  if (t.isBinary(parent) && !t.isAssignmentExpression(parent)) {
	    return true;
	  }

	  if (t.isConditionalExpression(parent, { test: node })) {
	    return true;
	  }

	  return UnaryLike(node, parent);
	}

	function AssignmentExpression(node /*: Object*/) /*: boolean*/ {
	  if (t.isObjectPattern(node.left)) {
	    return true;
	  } else {
	    return ConditionalExpression.apply(undefined, arguments);
	  }
	}

	// Walk up the print stack to deterimine if our node can come first
	// in statement.
	function isFirstInStatement(printStack /*: Array<Object>*/) /*: boolean*/ {
	  var i = printStack.length - 1;
	  var node = printStack[i];
	  i--;
	  var parent = printStack[i];
	  while (i > 0) {
	    if (t.isExpressionStatement(parent, { expression: node })) {
	      return true;
	    }

	    if (t.isCallExpression(parent, { callee: node }) || t.isSequenceExpression(parent) && parent.expressions[0] === node || t.isMemberExpression(parent, { object: node }) || t.isConditional(parent, { test: node }) || t.isBinary(parent, { left: node }) || t.isAssignmentExpression(parent, { left: node })) {
	      node = parent;
	      i--;
	      parent = printStack[i];
	    } else {
	      return false;
	    }
	  }

	  return false;
	}

/***/ },
/* 2404 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(5)["default"];

	var _interopRequireWildcard = __webpack_require__(3)["default"];

	var _lodashLangIsBoolean = __webpack_require__(1339);

	var _lodashLangIsBoolean2 = _interopRequireDefault(_lodashLangIsBoolean);

	var _lodashCollectionEach = __webpack_require__(516);

	var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);

	var _lodashCollectionMap = __webpack_require__(2514);

	var _lodashCollectionMap2 = _interopRequireDefault(_lodashCollectionMap);

	var _babelTypes = __webpack_require__(16);

	var t = _interopRequireWildcard(_babelTypes);

	/**
	 * Crawl a node to test if it contains a CallExpression, a Function, or a Helper.
	 *
	 * @example
	 * crawl(node)
	 * // { hasCall: false, hasFunction: true, hasHelper: false }
	 */

	function crawl(node) {
	  var state = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  if (t.isMemberExpression(node)) {
	    crawl(node.object, state);
	    if (node.computed) crawl(node.property, state);
	  } else if (t.isBinary(node) || t.isAssignmentExpression(node)) {
	    crawl(node.left, state);
	    crawl(node.right, state);
	  } else if (t.isCallExpression(node)) {
	    state.hasCall = true;
	    crawl(node.callee, state);
	  } else if (t.isFunction(node)) {
	    state.hasFunction = true;
	  } else if (t.isIdentifier(node)) {
	    state.hasHelper = state.hasHelper || isHelper(node.callee);
	  }

	  return state;
	}

	/**
	 * Test if a node is or has a helper.
	 */

	function isHelper(node) {
	  if (t.isMemberExpression(node)) {
	    return isHelper(node.object) || isHelper(node.property);
	  } else if (t.isIdentifier(node)) {
	    return node.name === "require" || node.name[0] === "_";
	  } else if (t.isCallExpression(node)) {
	    return isHelper(node.callee);
	  } else if (t.isBinary(node) || t.isAssignmentExpression(node)) {
	    return t.isIdentifier(node.left) && isHelper(node.left) || isHelper(node.right);
	  } else {
	    return false;
	  }
	}

	function isType(node) {
	  return t.isLiteral(node) || t.isObjectExpression(node) || t.isArrayExpression(node) || t.isIdentifier(node) || t.isMemberExpression(node);
	}

	/**
	 * Tests for node types that need whitespace.
	 */

	exports.nodes = {

	  /**
	   * Test if AssignmentExpression needs whitespace.
	   */

	  AssignmentExpression: function AssignmentExpression(node) {
	    var state = crawl(node.right);
	    if (state.hasCall && state.hasHelper || state.hasFunction) {
	      return {
	        before: state.hasFunction,
	        after: true
	      };
	    }
	  },

	  /**
	   * Test if SwitchCase needs whitespace.
	   */

	  SwitchCase: function SwitchCase(node, parent) {
	    return {
	      before: node.consequent.length || parent.cases[0] === node
	    };
	  },

	  /**
	   * Test if LogicalExpression needs whitespace.
	   */

	  LogicalExpression: function LogicalExpression(node) {
	    if (t.isFunction(node.left) || t.isFunction(node.right)) {
	      return {
	        after: true
	      };
	    }
	  },

	  /**
	   * Test if Literal needs whitespace.
	   */

	  Literal: function Literal(node) {
	    if (node.value === "use strict") {
	      return {
	        after: true
	      };
	    }
	  },

	  /**
	   * Test if CallExpression needs whitespace.
	   */

	  CallExpression: function CallExpression(node) {
	    if (t.isFunction(node.callee) || isHelper(node)) {
	      return {
	        before: true,
	        after: true
	      };
	    }
	  },

	  /**
	   * Test if VariableDeclaration needs whitespace.
	   */

	  VariableDeclaration: function VariableDeclaration(node) {
	    for (var i = 0; i < node.declarations.length; i++) {
	      var declar = node.declarations[i];

	      var enabled = isHelper(declar.id) && !isType(declar.init);
	      if (!enabled) {
	        var state = crawl(declar.init);
	        enabled = isHelper(declar.init) && state.hasCall || state.hasFunction;
	      }

	      if (enabled) {
	        return {
	          before: true,
	          after: true
	        };
	      }
	    }
	  },

	  /**
	   * Test if IfStatement needs whitespace.
	   */

	  IfStatement: function IfStatement(node) {
	    if (t.isBlockStatement(node.consequent)) {
	      return {
	        before: true,
	        after: true
	      };
	    }
	  }
	};

	/**
	 * Test if Property or SpreadProperty needs whitespace.
	 */

	exports.nodes.ObjectProperty = exports.nodes.ObjectMethod = exports.nodes.SpreadProperty = function (node, parent) {
	  if (parent.properties[0] === node) {
	    return {
	      before: true
	    };
	  }
	};

	/**
	 * Returns lists from node types that need whitespace.
	 */

	exports.list = {

	  /**
	   * Return VariableDeclaration declarations init properties.
	   */

	  VariableDeclaration: function VariableDeclaration(node) {
	    return _lodashCollectionMap2["default"](node.declarations, "init");
	  },

	  /**
	   * Return VariableDeclaration elements.
	   */

	  ArrayExpression: function ArrayExpression(node) {
	    return node.elements;
	  },

	  /**
	   * Return VariableDeclaration properties.
	   */

	  ObjectExpression: function ObjectExpression(node) {
	    return node.properties;
	  }
	};

	/**
	 * Add whitespace tests for nodes and their aliases.
	 */

	_lodashCollectionEach2["default"]({
	  Function: true,
	  Class: true,
	  Loop: true,
	  LabeledStatement: true,
	  SwitchStatement: true,
	  TryStatement: true
	}, function (amounts, type) {
	  if (_lodashLangIsBoolean2["default"](amounts)) {
	    amounts = { after: amounts, before: amounts };
	  }

	  _lodashCollectionEach2["default"]([type].concat(t.FLIPPED_ALIAS_KEYS[type] || []), function (type) {
	    exports.nodes[type] = function () {
	      return amounts;
	    };
	  });
	});

/***/ },
/* 2405 */
/***/ function(module, exports, __webpack_require__) {

	/* @flow */

	/**
	 * Track current position in code generation.
	 */

	"use strict";

	var _classCallCheck = __webpack_require__(82)["default"];

	exports.__esModule = true;

	var Position = (function () {
	  function Position() {
	    _classCallCheck(this, Position);

	    this.line = 1;
	    this.column = 0;
	  }

	  /**
	   * Push a string to the current position, mantaining the current line and column.
	   */

	  Position.prototype.push = function push(str /*: string*/) /*: void*/ {
	    for (var i = 0; i < str.length; i++) {
	      if (str[i] === "\n") {
	        this.line++;
	        this.column = 0;
	      } else {
	        this.column++;
	      }
	    }
	  };

	  /**
	   * Unshift a string from the current position, mantaining the current line and column.
	   */

	  Position.prototype.unshift = function unshift(str /*: string*/) /*: void*/ {
	    for (var i = 0; i < str.length; i++) {
	      if (str[i] === "\n") {
	        this.line--;
	      } else {
	        this.column--;
	      }
	    }
	  };

	  return Position;
	})();

	exports["default"] = Position;
	module.exports = exports["default"];

/***/ },
/* 2406 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _inherits = __webpack_require__(346)["default"];

	var _classCallCheck = __webpack_require__(82)["default"];

	var _getIterator = __webpack_require__(37)["default"];

	var _Object$assign = __webpack_require__(2419)["default"];

	var _interopRequireDefault = __webpack_require__(5)["default"];

	var _interopRequireWildcard = __webpack_require__(3)["default"];

	exports.__esModule = true;

	var _repeating = __webpack_require__(509);

	var _repeating2 = _interopRequireDefault(_repeating);

	var _buffer = __webpack_require__(2393);

	var _buffer2 = _interopRequireDefault(_buffer);

	var _node = __webpack_require__(1298);

	var _node2 = _interopRequireDefault(_node);

	var _babelTypes = __webpack_require__(16);

	var t = _interopRequireWildcard(_babelTypes);

	var Printer = (function (_Buffer) {
	  _inherits(Printer, _Buffer);

	  function Printer() {
	    _classCallCheck(this, Printer);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _Buffer.call.apply(_Buffer, [this].concat(args));
	    this.insideAux = false;
	    this.printAuxAfterOnNextUserNode = false;
	    this._printStack = [];
	  }

	  Printer.prototype.print = function print(node, parent) {
	    var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	    if (!node) return;

	    this._lastPrintedIsEmptyStatement = false;

	    if (parent && parent._compact) {
	      node._compact = true;
	    }

	    var oldInAux = this.insideAux;
	    this.insideAux = !node.loc;

	    var oldConcise = this.format.concise;
	    if (node._compact) {
	      this.format.concise = true;
	    }

	    var printMethod = this[node.type];
	    if (!printMethod) {
	      throw new ReferenceError("unknown node of type " + JSON.stringify(node.type) + " with constructor " + JSON.stringify(node && node.constructor.name));
	    }

	    this._printStack.push(node);

	    if (node.loc) this.printAuxAfterComment();
	    this.printAuxBeforeComment(oldInAux);

	    var needsParens = _node2["default"].needsParens(node, parent, this._printStack);
	    if (needsParens) this.push("(");

	    this.printLeadingComments(node, parent);

	    this.catchUp(node);

	    this._printNewline(true, node, parent, opts);

	    if (opts.before) opts.before();

	    this.map.mark(node, "start");

	    this._print(node, parent);

	    // Check again if any of our children may have left an aux comment on the stack
	    if (node.loc) this.printAuxAfterComment();

	    this.printTrailingComments(node, parent);

	    if (needsParens) this.push(")");

	    // end
	    this._printStack.pop();
	    this.map.mark(node, "end");
	    if (opts.after) opts.after();

	    this.format.concise = oldConcise;
	    this.insideAux = oldInAux;

	    this._printNewline(false, node, parent, opts);
	  };

	  Printer.prototype.printAuxBeforeComment = function printAuxBeforeComment(wasInAux) {
	    var comment = this.format.auxiliaryCommentBefore;
	    if (!wasInAux && this.insideAux && !this.printAuxAfterOnNextUserNode) {
	      this.printAuxAfterOnNextUserNode = true;
	      if (comment) this.printComment({
	        type: "CommentBlock",
	        value: comment
	      });
	    }
	  };

	  Printer.prototype.printAuxAfterComment = function printAuxAfterComment() {
	    if (this.printAuxAfterOnNextUserNode) {
	      this.printAuxAfterOnNextUserNode = false;
	      var comment = this.format.auxiliaryCommentAfter;
	      if (comment) this.printComment({
	        type: "CommentBlock",
	        value: comment
	      });
	    }
	  };

	  Printer.prototype.getPossibleRaw = function getPossibleRaw(node) {
	    var extra = node.extra;
	    if (extra && extra.raw != null && extra.rawValue != null && node.value === extra.rawValue) {
	      return extra.raw;
	    }
	  };

	  Printer.prototype._print = function _print(node, parent) {
	    // In minified mode we need to produce as little bytes as needed
	    // and need to make sure that string quoting is consistent.
	    // That means we have to always reprint as opposed to getting
	    // the raw value.
	    if (!this.format.minified) {
	      var extra = this.getPossibleRaw(node);
	      if (extra) {
	        this.push("");
	        this._push(extra);
	        return;
	      }
	    }

	    var printMethod = this[node.type];
	    printMethod.call(this, node, parent);
	  };

	  Printer.prototype.printJoin = function printJoin(nodes /*: ?Array*/, parent /*: Object*/) {
	    // istanbul ignore next

	    var _this = this;

	    var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	    if (!nodes || !nodes.length) return;

	    var len = nodes.length;
	    var node = undefined,
	        i = undefined;

	    if (opts.indent) this.indent();

	    var printOpts = {
	      statement: opts.statement,
	      addNewlines: opts.addNewlines,
	      after: function after() {
	        if (opts.iterator) {
	          opts.iterator(node, i);
	        }

	        if (opts.separator && i < len - 1) {
	          _this.push(opts.separator);
	        }
	      }
	    };

	    for (i = 0; i < nodes.length; i++) {
	      node = nodes[i];
	      this.print(node, parent, printOpts);
	    }

	    if (opts.indent) this.dedent();
	  };

	  Printer.prototype.printAndIndentOnComments = function printAndIndentOnComments(node, parent) {
	    var indent = !!node.leadingComments;
	    if (indent) this.indent();
	    this.print(node, parent);
	    if (indent) this.dedent();
	  };

	  Printer.prototype.printBlock = function printBlock(parent) {
	    var node = parent.body;

	    if (!t.isEmptyStatement(node)) {
	      this.space();
	    }

	    this.print(node, parent);
	  };

	  Printer.prototype.generateComment = function generateComment(comment) {
	    var val = comment.value;
	    if (comment.type === "CommentLine") {
	      val = "//" + val;
	    } else {
	      val = "/*" + val + "*/";
	    }
	    return val;
	  };

	  Printer.prototype.printTrailingComments = function printTrailingComments(node, parent) {
	    this.printComments(this.getComments("trailingComments", node, parent));
	  };

	  Printer.prototype.printLeadingComments = function printLeadingComments(node, parent) {
	    this.printComments(this.getComments("leadingComments", node, parent));
	  };

	  Printer.prototype.printInnerComments = function printInnerComments(node) {
	    var indent = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

	    if (!node.innerComments) return;
	    if (indent) this.indent();
	    this.printComments(node.innerComments);
	    if (indent) this.dedent();
	  };

	  Printer.prototype.printSequence = function printSequence(nodes, parent) {
	    var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	    opts.statement = true;
	    return this.printJoin(nodes, parent, opts);
	  };

	  Printer.prototype.printList = function printList(items, parent) {
	    var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	    if (opts.separator == null) {
	      opts.separator = ",";
	      if (!this.format.compact) opts.separator += " ";
	    }

	    return this.printJoin(items, parent, opts);
	  };

	  Printer.prototype._printNewline = function _printNewline(leading, node, parent, opts) {
	    if (!opts.statement && !_node2["default"].isUserWhitespacable(node, parent)) {
	      return;
	    }

	    var lines = 0;

	    if (node.start != null && !node._ignoreUserWhitespace && this.tokens.length) {
	      // user node
	      if (leading) {
	        lines = this.whitespace.getNewlinesBefore(node);
	      } else {
	        lines = this.whitespace.getNewlinesAfter(node);
	      }
	    } else {
	      // generated node
	      if (!leading) lines++; // always include at least a single line after
	      if (opts.addNewlines) lines += opts.addNewlines(leading, node) || 0;

	      var needs = _node2["default"].needsWhitespaceAfter;
	      if (leading) needs = _node2["default"].needsWhitespaceBefore;
	      if (needs(node, parent)) lines++;

	      // generated nodes can't add starting file whitespace
	      if (!this.buf) lines = 0;
	    }

	    this.newline(lines);
	  };

	  Printer.prototype.getComments = function getComments(key, node) {
	    return node && node[key] || [];
	  };

	  Printer.prototype.shouldPrintComment = function shouldPrintComment(comment) {
	    if (this.format.shouldPrintComment) {
	      return this.format.shouldPrintComment(comment.value);
	    } else {
	      if (!this.format.minified && (comment.value.indexOf("@license") >= 0 || comment.value.indexOf("@preserve") >= 0)) {
	        return true;
	      } else {
	        return this.format.comments;
	      }
	    }
	  };

	  Printer.prototype.printComment = function printComment(comment) {
	    if (!this.shouldPrintComment(comment)) return;

	    if (comment.ignore) return;
	    comment.ignore = true;

	    if (comment.start != null) {
	      if (this.printedCommentStarts[comment.start]) return;
	      this.printedCommentStarts[comment.start] = true;
	    }

	    this.catchUp(comment);

	    // whitespace before
	    this.newline(this.whitespace.getNewlinesBefore(comment));

	    var column = this.position.column;
	    var val = this.generateComment(comment);

	    if (column && !this.isLast(["\n", " ", "[", "{"])) {
	      this._push(" ");
	      column++;
	    }

	    //
	    if (comment.type === "CommentBlock" && this.format.indent.adjustMultilineComment) {
	      var offset = comment.loc && comment.loc.start.column;
	      if (offset) {
	        var newlineRegex = new RegExp("\\n\\s{1," + offset + "}", "g");
	        val = val.replace(newlineRegex, "\n");
	      }

	      var indent = Math.max(this.indentSize(), column);
	      val = val.replace(/\n/g, "\n" + _repeating2["default"](" ", indent));
	    }

	    if (column === 0) {
	      val = this.getIndent() + val;
	    }

	    // force a newline for line comments when retainLines is set in case the next printed node
	    // doesn't catch up
	    if ((this.format.compact || this.format.retainLines) && comment.type === "CommentLine") {
	      val += "\n";
	    }

	    //
	    this._push(val);

	    // whitespace after
	    this.newline(this.whitespace.getNewlinesAfter(comment));
	  };

	  Printer.prototype.printComments = function printComments(comments /*:: ?: Array<Object>*/) {
	    if (!comments || !comments.length) return;

	    for (var _iterator = comments, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var comment = _ref;

	      this.printComment(comment);
	    }
	  };

	  return Printer;
	})(_buffer2["default"]);

	exports["default"] = Printer;
	var _arr = [__webpack_require__(2402), __webpack_require__(2396), __webpack_require__(2401), __webpack_require__(2395), __webpack_require__(2399), __webpack_require__(2400), __webpack_require__(1296), __webpack_require__(2397), __webpack_require__(2394), __webpack_require__(2398)];

	for (var _i2 = 0; _i2 < _arr.length; _i2++) {
	  var generator = _arr[_i2];
	  _Object$assign(Printer.prototype, generator);
	}
	module.exports = exports["default"];

/***/ },
/* 2407 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _classCallCheck = __webpack_require__(82)["default"];

	var _interopRequireDefault = __webpack_require__(5)["default"];

	var _interopRequireWildcard = __webpack_require__(3)["default"];

	exports.__esModule = true;

	var _sourceMap = __webpack_require__(1350);

	var _sourceMap2 = _interopRequireDefault(_sourceMap);

	var _babelTypes = __webpack_require__(16);

	var t = _interopRequireWildcard(_babelTypes);

	/**
	 * Build a sourcemap.
	 */

	var SourceMap = (function () {
	  function SourceMap(position, opts, code) {
	    _classCallCheck(this, SourceMap);

	    this.position = position;
	    this.opts = opts;

	    if (opts.sourceMaps) {
	      this.map = new _sourceMap2["default"].SourceMapGenerator({
	        file: opts.sourceMapTarget,
	        sourceRoot: opts.sourceRoot
	      });

	      this.map.setSourceContent(opts.sourceFileName, code);
	    } else {
	      this.map = null;
	    }
	  }

	  /**
	   * Get the sourcemap.
	   */

	  SourceMap.prototype.get = function get() {
	    var map = this.map;
	    if (map) {
	      return map.toJSON();
	    } else {
	      return map;
	    }
	  };

	  /**
	   * Mark a node's generated position, and add it to the sourcemap.
	   */

	  SourceMap.prototype.mark = function mark(node, type) {
	    var loc = node.loc;
	    if (!loc) return; // no location info

	    var map = this.map;
	    if (!map) return; // no source map

	    if (t.isProgram(node) || t.isFile(node)) return; // illegal mapping nodes

	    var position = this.position;

	    var generated = {
	      line: position.line,
	      column: position.column
	    };

	    var original = loc[type];

	    map.addMapping({
	      source: this.opts.sourceFileName,
	      generated: generated,
	      original: original
	    });
	  };

	  return SourceMap;
	})();

	exports["default"] = SourceMap;
	module.exports = exports["default"];

/***/ },
/* 2408 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Returns `i`th number from `base`, continuing from 0 when `max` is reached.
	 * Useful for shifting `for` loop by a fixed number but going over all items.
	 */

	"use strict";

	var _classCallCheck = __webpack_require__(82)["default"];

	exports.__esModule = true;
	function getLookupIndex(i /*: number*/, base /*: number*/, max /*: number*/) /*: number*/ {
	  i += base;

	  if (i >= max) {
	    i -= max;
	  }

	  return i;
	}

	/**
	 * Get whitespace around tokens.
	 */

	var Whitespace = (function () {
	  function Whitespace(tokens) {
	    _classCallCheck(this, Whitespace);

	    this.tokens = tokens;
	    this.used = {};

	    // Profiling this code shows that while generator passes over it, indexes
	    // returned by `getNewlinesBefore` and `getNewlinesAfter` are always increasing.

	    // We use this implementation detail for an optimization: instead of always
	    // starting to look from `this.tokens[0]`, we will start `for` loops from the
	    // previous successful match. We will enumerate all tokens—but the common
	    // case will be much faster.

	    this._lastFoundIndex = 0;
	  }

	  /**
	   * Count all the newlines before a node.
	   */

	  Whitespace.prototype.getNewlinesBefore = function getNewlinesBefore(node) {
	    var startToken = undefined;
	    var endToken = undefined;
	    var tokens = this.tokens;

	    for (var j = 0; j < tokens.length; j++) {
	      // optimize for forward traversal by shifting for loop index
	      var i = getLookupIndex(j, this._lastFoundIndex, this.tokens.length);
	      var token = tokens[i];

	      // this is the token this node starts with
	      if (node.start === token.start) {
	        startToken = tokens[i - 1];
	        endToken = token;

	        this._lastFoundIndex = i;
	        break;
	      }
	    }

	    return this.getNewlinesBetween(startToken, endToken);
	  };

	  /**
	   * Count all the newlines after a node.
	   */

	  Whitespace.prototype.getNewlinesAfter = function getNewlinesAfter(node) {
	    var startToken = undefined;
	    var endToken = undefined;
	    var tokens = this.tokens;

	    for (var j = 0; j < tokens.length; j++) {
	      // optimize for forward traversal by shifting for loop index
	      var i = getLookupIndex(j, this._lastFoundIndex, this.tokens.length);
	      var token = tokens[i];

	      // this is the token this node ends with
	      if (node.end === token.end) {
	        startToken = token;
	        endToken = tokens[i + 1];
	        if (endToken.type.label === ",") endToken = tokens[i + 2];

	        this._lastFoundIndex = i;
	        break;
	      }
	    }

	    if (endToken && endToken.type.label === "eof") {
	      return 1;
	    } else {
	      var lines = this.getNewlinesBetween(startToken, endToken);
	      if (node.type === "CommentLine" && !lines) {
	        // line comment
	        return 1;
	      } else {
	        return lines;
	      }
	    }
	  };

	  /**
	   * Count all the newlines between two tokens.
	   */

	  Whitespace.prototype.getNewlinesBetween = function getNewlinesBetween(startToken, endToken) {
	    if (!endToken || !endToken.loc) return 0;

	    var start = startToken ? startToken.loc.end.line : 1;
	    var end = endToken.loc.start.line;
	    var lines = 0;

	    for (var line = start; line < end; line++) {
	      if (typeof this.used[line] === "undefined") {
	        this.used[line] = true;
	        lines++;
	      }
	    }

	    return lines;
	  };

	  return Whitespace;
	})();

	exports["default"] = Whitespace;
	module.exports = exports["default"];

/***/ },
/* 2409 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var repeating = __webpack_require__(509);

	// detect either spaces or tabs but not both to properly handle tabs
	// for indentation and spaces for alignment
	var INDENT_RE = /^(?:( )+|\t+)/;

	function getMostUsed(indents) {
		var result = 0;
		var maxUsed = 0;
		var maxWeight = 0;

		for (var n in indents) {
			var indent = indents[n];
			var u = indent[0];
			var w = indent[1];

			if (u > maxUsed || u === maxUsed && w > maxWeight) {
				maxUsed = u;
				maxWeight = w;
				result = +n;
			}
		}

		return result;
	}

	module.exports = function (str) {
		if (typeof str !== 'string') {
			throw new TypeError('Expected a string');
		}

		// used to see if tabs or spaces are the most used
		var tabs = 0;
		var spaces = 0;

		// remember the size of previous line's indentation
		var prev = 0;

		// remember how many indents/unindents as occurred for a given size
		// and how much lines follow a given indentation
		//
		// indents = {
		//    3: [1, 0],
		//    4: [1, 5],
		//    5: [1, 0],
		//   12: [1, 0],
		// }
		var indents = {};

		// pointer to the array of last used indent
		var current;

		// whether the last action was an indent (opposed to an unindent)
		var isIndent;

		str.split(/\n/g).forEach(function (line) {
			if (!line) {
				// ignore empty lines
				return;
			}

			var indent;
			var matches = line.match(INDENT_RE);

			if (!matches) {
				indent = 0;
			} else {
				indent = matches[0].length;

				if (matches[1]) {
					spaces++;
				} else {
					tabs++;
				}
			}

			var diff = indent - prev;
			prev = indent;

			if (diff) {
				// an indent or unindent has been detected

				isIndent = diff > 0;

				current = indents[isIndent ? diff : -diff];

				if (current) {
					current[0]++;
				} else {
					current = indents[diff] = [1, 0];
				}
			} else if (current) {
				// if the last action was an indent, increment the weight
				current[1] += +isIndent;
			}
		});

		var amount = getMostUsed(indents);

		var type;
		var actual;
		if (!amount) {
			type = null;
			actual = '';
		} else if (spaces >= tabs) {
			type = 'space';
			actual = repeating(' ', amount);
		} else {
			type = 'tab';
			actual = repeating('\t', amount);
		}

		return {
			amount: amount,
			type: type,
			indent: actual
		};
	};


/***/ },
/* 2410 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/paulmillr/es6-shim
	// http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.isinteger
	var isFinite = __webpack_require__(2411);
	module.exports = Number.isInteger || function(val) {
	  return typeof val === "number" &&
	    isFinite(val) &&
	    Math.floor(val) === val;
	};


/***/ },
/* 2411 */
[7027, 2412],
/* 2412 */
2392,
/* 2413 */
[7027, 2414],
/* 2414 */
2392,
/* 2415 */
/***/ function(module, exports) {

	'use strict';
	module.exports = function (str) {
		var tail = str.length;

		while (/[\s\uFEFF\u00A0]/.test(str[tail - 1])) {
			tail--;
		}

		return str.slice(0, tail);
	};


/***/ },
/* 2416 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(5)["default"];

	exports.__esModule = true;

	var _babelTemplate = __webpack_require__(742);

	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

	var helpers = {};
	exports["default"] = helpers;

	helpers["typeof"] = _babelTemplate2["default"]("\n  (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\")\n    ? function (obj) { return typeof obj; }\n    : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n");

	helpers.jsx = _babelTemplate2["default"]("\n  (function () {\n    var REACT_ELEMENT_TYPE = (typeof Symbol === \"function\" && Symbol.for && Symbol.for(\"react.element\")) || 0xeac7;\n\n    return function createRawReactElement (type, props, key, children) {\n      var defaultProps = type && type.defaultProps;\n      var childrenLength = arguments.length - 3;\n\n      if (!props && childrenLength !== 0) {\n        // If we're going to assign props.children, we create a new object now\n        // to avoid mutating defaultProps.\n        props = {};\n      }\n      if (props && defaultProps) {\n        for (var propName in defaultProps) {\n          if (props[propName] === void 0) {\n            props[propName] = defaultProps[propName];\n          }\n        }\n      } else if (!props) {\n        props = defaultProps || {};\n      }\n\n      if (childrenLength === 1) {\n        props.children = children;\n      } else if (childrenLength > 1) {\n        var childArray = Array(childrenLength);\n        for (var i = 0; i < childrenLength; i++) {\n          childArray[i] = arguments[i + 3];\n        }\n        props.children = childArray;\n      }\n\n      return {\n        $$typeof: REACT_ELEMENT_TYPE,\n        type: type,\n        key: key === undefined ? null : '' + key,\n        ref: null,\n        props: props,\n        _owner: null,\n      };\n    };\n\n  })()\n");

	helpers.asyncToGenerator = _babelTemplate2["default"]("\n  (function (fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        step(\"next\");\n      });\n    };\n  })\n");

	helpers.classCallCheck = _babelTemplate2["default"]("\n  (function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  });\n");

	helpers.createClass = _babelTemplate2["default"]("\n  (function() {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i ++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  })()\n");

	helpers.defineEnumerableProperties = _babelTemplate2["default"]("\n  (function (obj, descs) {\n    for (var key in descs) {\n      var desc = descs[key];\n      desc.configurable = desc.enumerable = true;\n      if (\"value\" in desc) desc.writable = true;\n      Object.defineProperty(obj, key, desc);\n    }\n    return obj;\n  })\n");

	helpers.defaults = _babelTemplate2["default"]("\n  (function (obj, defaults) {\n    var keys = Object.getOwnPropertyNames(defaults);\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var value = Object.getOwnPropertyDescriptor(defaults, key);\n      if (value && value.configurable && obj[key] === undefined) {\n        Object.defineProperty(obj, key, value);\n      }\n    }\n    return obj;\n  })\n");

	helpers.defineProperty = _babelTemplate2["default"]("\n  (function (obj, key, value) {\n    // Shortcircuit the slow defineProperty path when possible.\n    // We are trying to avoid issues where setters defined on the\n    // prototype cause side effects under the fast path of simple\n    // assignment. By checking for existence of the property with\n    // the in operator, we can optimize most of this overhead away.\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  });\n");

	helpers["extends"] = _babelTemplate2["default"]("\n  Object.assign || (function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  })\n");

	helpers.get = _babelTemplate2["default"]("\n  (function get(object, property, receiver) {\n    if (object === null) object = Function.prototype;\n\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = Object.getPrototypeOf(object);\n\n      if (parent === null) {\n        return undefined;\n      } else {\n        return get(parent, property, receiver);\n      }\n    } else if (\"value\" in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n\n      if (getter === undefined) {\n        return undefined;\n      }\n\n      return getter.call(receiver);\n    }\n  });\n");

	helpers.inherits = _babelTemplate2["default"]("\n  (function (subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  })\n");

	helpers["instanceof"] = _babelTemplate2["default"]("\n  (function (left, right) {\n    if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n      return right[Symbol.hasInstance](left);\n    } else {\n      return left instanceof right;\n    }\n  });\n");

	helpers.interopRequireDefault = _babelTemplate2["default"]("\n  (function (obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n  })\n");

	helpers.interopRequireWildcard = _babelTemplate2["default"]("\n  (function (obj) {\n    if (obj && obj.__esModule) {\n      return obj;\n    } else {\n      var newObj = {};\n      if (obj != null) {\n        for (var key in obj) {\n          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n        }\n      }\n      newObj.default = obj;\n      return newObj;\n    }\n  })\n");

	helpers.newArrowCheck = _babelTemplate2["default"]("\n  (function (innerThis, boundThis) {\n    if (innerThis !== boundThis) {\n      throw new TypeError(\"Cannot instantiate an arrow function\");\n    }\n  });\n");

	helpers.objectDestructuringEmpty = _babelTemplate2["default"]("\n  (function (obj) {\n    if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n  });\n");

	helpers.objectWithoutProperties = _babelTemplate2["default"]("\n  (function (obj, keys) {\n    var target = {};\n    for (var i in obj) {\n      if (keys.indexOf(i) >= 0) continue;\n      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n      target[i] = obj[i];\n    }\n    return target;\n  })\n");

	helpers.possibleConstructorReturn = _babelTemplate2["default"]("\n  (function (self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  });\n");

	helpers.selfGlobal = _babelTemplate2["default"]("\n  typeof global === \"undefined\" ? self : global\n");

	helpers.set = _babelTemplate2["default"]("\n  (function set(object, property, value, receiver) {\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = Object.getPrototypeOf(object);\n\n      if (parent !== null) {\n        set(parent, property, value, receiver);\n      }\n    } else if (\"value\" in desc && desc.writable) {\n      desc.value = value;\n    } else {\n      var setter = desc.set;\n\n      if (setter !== undefined) {\n        setter.call(receiver, value);\n      }\n    }\n\n    return value;\n  });\n");

	helpers.slicedToArray = _babelTemplate2["default"]("\n  (function () {\n    // Broken out into a separate function to avoid deoptimizations due to the try/catch for the\n    // array iterator case.\n    function sliceIterator(arr, i) {\n      // this is an expanded form of `for...of` that properly supports abrupt completions of\n      // iterators etc. variable names have been minimised to reduce the size of this massive\n      // helper. sometimes spec compliancy is annoying :(\n      //\n      // _n = _iteratorNormalCompletion\n      // _d = _didIteratorError\n      // _e = _iteratorError\n      // _i = _iterator\n      // _s = _step\n\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n      try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i[\"return\"]) _i[\"return\"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n      return _arr;\n    }\n\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }\n    };\n  })();\n");

	helpers.slicedToArrayLoose = _babelTemplate2["default"]("\n  (function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      var _arr = [];\n      for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {\n        _arr.push(_step.value);\n        if (i && _arr.length === i) break;\n      }\n      return _arr;\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  });\n");

	helpers.taggedTemplateLiteral = _babelTemplate2["default"]("\n  (function (strings, raw) {\n    return Object.freeze(Object.defineProperties(strings, {\n        raw: { value: Object.freeze(raw) }\n    }));\n  });\n");

	helpers.taggedTemplateLiteralLoose = _babelTemplate2["default"]("\n  (function (strings, raw) {\n    strings.raw = raw;\n    return strings;\n  });\n");

	helpers.temporalRef = _babelTemplate2["default"]("\n  (function (val, name, undef) {\n    if (val === undef) {\n      throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n    } else {\n      return val;\n    }\n  })\n");

	helpers.temporalUndefined = _babelTemplate2["default"]("\n  ({})\n");

	helpers.toArray = _babelTemplate2["default"]("\n  (function (arr) {\n    return Array.isArray(arr) ? arr : Array.from(arr);\n  });\n");

	helpers.toConsumableArray = _babelTemplate2["default"]("\n  (function (arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  });\n");
	module.exports = exports["default"];

/***/ },
/* 2417 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(2429), __esModule: true };

/***/ },
/* 2418 */
[7030, 2430],
/* 2419 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(2431), __esModule: true };

/***/ },
/* 2420 */
[7032, 2433],
/* 2421 */
[7033, 2434],
/* 2422 */
[7034, 2435],
/* 2423 */
[7035, 2436],
/* 2424 */
[7037, 2438],
/* 2425 */
[7039, 2439],
/* 2426 */
[7040, 2422, 2421, 2420],
/* 2427 */
1821,
/* 2428 */
[7042, 1314, 1313, 2457],
/* 2429 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1312);
	__webpack_require__(1313);
	__webpack_require__(1314);
	__webpack_require__(2459);
	__webpack_require__(2466);
	module.exports = __webpack_require__(107).Map;

/***/ },
/* 2430 */
[7043, 2460],
/* 2431 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(2461);
	module.exports = __webpack_require__(107).Object.assign;

/***/ },
/* 2432 */
[7044, 98],
/* 2433 */
[7045, 98],
/* 2434 */
[7046, 98, 2462],
/* 2435 */
[7047, 98, 2463],
/* 2436 */
[7048, 741, 107],
/* 2437 */
[7049, 2464, 107],
/* 2438 */
[7050, 2465, 107],
/* 2439 */
[7051, 741, 107],
/* 2440 */
[7052, 741, 1312, 107],
/* 2441 */
/***/ function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 2442 */
/***/ function(module, exports) {

	module.exports = function(){ /* empty */ };

/***/ },
/* 2443 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $            = __webpack_require__(98)
	  , hide         = __webpack_require__(424)
	  , redefineAll  = __webpack_require__(1306)
	  , ctx          = __webpack_require__(511)
	  , strictNew    = __webpack_require__(1308)
	  , defined      = __webpack_require__(512)
	  , forOf        = __webpack_require__(735)
	  , $iterDefine  = __webpack_require__(736)
	  , step         = __webpack_require__(1304)
	  , ID           = __webpack_require__(740)('id')
	  , $has         = __webpack_require__(513)
	  , isObject     = __webpack_require__(514)
	  , setSpecies   = __webpack_require__(2454)
	  , DESCRIPTORS  = __webpack_require__(421)
	  , isExtensible = Object.isExtensible || isObject
	  , SIZE         = DESCRIPTORS ? '_s' : 'size'
	  , id           = 0;

	var fastKey = function(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!$has(it, ID)){
	    // can't set id to frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add id
	    if(!create)return 'E';
	    // add missing object id
	    hide(it, ID, ++id);
	  // return object id with prefix
	  } return 'O' + it[ID];
	};

	var getEntry = function(that, key){
	  // fast case
	  var index = fastKey(key), entry;
	  if(index !== 'F')return that._i[index];
	  // frozen object case
	  for(entry = that._f; entry; entry = entry.n){
	    if(entry.k == key)return entry;
	  }
	};

	module.exports = {
	  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
	    var C = wrapper(function(that, iterable){
	      strictNew(that, C, NAME);
	      that._i = $.create(null); // index
	      that._f = undefined;      // first entry
	      that._l = undefined;      // last entry
	      that[SIZE] = 0;           // size
	      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear(){
	        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
	          entry.r = true;
	          if(entry.p)entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that._f = that._l = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function(key){
	        var that  = this
	          , entry = getEntry(that, key);
	        if(entry){
	          var next = entry.n
	            , prev = entry.p;
	          delete that._i[entry.i];
	          entry.r = true;
	          if(prev)prev.n = next;
	          if(next)next.p = prev;
	          if(that._f == entry)that._f = next;
	          if(that._l == entry)that._l = prev;
	          that[SIZE]--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /*, that = undefined */){
	        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
	          , entry;
	        while(entry = entry ? entry.n : this._f){
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while(entry && entry.r)entry = entry.p;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key){
	        return !!getEntry(this, key);
	      }
	    });
	    if(DESCRIPTORS)$.setDesc(C.prototype, 'size', {
	      get: function(){
	        return defined(this[SIZE]);
	      }
	    });
	    return C;
	  },
	  def: function(that, key, value){
	    var entry = getEntry(that, key)
	      , prev, index;
	    // change existing entry
	    if(entry){
	      entry.v = value;
	    // create new entry
	    } else {
	      that._l = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key,                        // <- key
	        v: value,                      // <- value
	        p: prev = that._l,             // <- previous entry
	        n: undefined,                  // <- next entry
	        r: false                       // <- removed
	      };
	      if(!that._f)that._f = entry;
	      if(prev)prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if(index !== 'F')that._i[index] = entry;
	    } return that;
	  },
	  getEntry: getEntry,
	  setStrong: function(C, NAME, IS_MAP){
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    $iterDefine(C, NAME, function(iterated, kind){
	      this._t = iterated;  // target
	      this._k = kind;      // kind
	      this._l = undefined; // previous
	    }, function(){
	      var that  = this
	        , kind  = that._k
	        , entry = that._l;
	      // revert to the last existing entry
	      while(entry && entry.r)entry = entry.p;
	      // get next entry
	      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
	        // or finish the iteration
	        that._t = undefined;
	        return step(1);
	      }
	      // return step by kind
	      if(kind == 'keys'  )return step(0, entry.k);
	      if(kind == 'values')return step(0, entry.v);
	      return step(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);

	    // add [@@species], 23.1.2.2, 23.2.2.2
	    setSpecies(NAME);
	  }
	};

/***/ },
/* 2444 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var forOf   = __webpack_require__(735)
	  , classof = __webpack_require__(1301);
	module.exports = function(NAME){
	  return function toJSON(){
	    if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
	    var arr = [];
	    forOf(this, false, arr.push, arr);
	    return arr;
	  };
	};

/***/ },
/* 2445 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $              = __webpack_require__(98)
	  , global         = __webpack_require__(423)
	  , $export        = __webpack_require__(177)
	  , fails          = __webpack_require__(422)
	  , hide           = __webpack_require__(424)
	  , redefineAll    = __webpack_require__(1306)
	  , forOf          = __webpack_require__(735)
	  , strictNew      = __webpack_require__(1308)
	  , isObject       = __webpack_require__(514)
	  , setToStringTag = __webpack_require__(515)
	  , DESCRIPTORS    = __webpack_require__(421);

	module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
	  var Base  = global[NAME]
	    , C     = Base
	    , ADDER = IS_MAP ? 'set' : 'add'
	    , proto = C && C.prototype
	    , O     = {};
	  if(!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
	    new C().entries().next();
	  }))){
	    // create collection constructor
	    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
	    redefineAll(C.prototype, methods);
	  } else {
	    C = wrapper(function(target, iterable){
	      strictNew(target, C, NAME);
	      target._c = new Base;
	      if(iterable != undefined)forOf(iterable, IS_MAP, target[ADDER], target);
	    });
	    $.each.call('add,clear,delete,forEach,get,has,set,keys,values,entries'.split(','),function(KEY){
	      var IS_ADDER = KEY == 'add' || KEY == 'set';
	      if(KEY in proto && !(IS_WEAK && KEY == 'clear'))hide(C.prototype, KEY, function(a, b){
	        if(!IS_ADDER && IS_WEAK && !isObject(a))return KEY == 'get' ? undefined : false;
	        var result = this._c[KEY](a === 0 ? 0 : a, b);
	        return IS_ADDER ? this : result;
	      });
	    });
	    if('size' in proto)$.setDesc(C.prototype, 'size', {
	      get: function(){
	        return this._c.size;
	      }
	    });
	  }

	  setToStringTag(C, NAME);

	  O[NAME] = C;
	  $export($export.G + $export.W + $export.F, O);

	  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);

	  return C;
	};

/***/ },
/* 2446 */
[7057, 98],
/* 2447 */
/***/ function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators  = __webpack_require__(425)
	  , ITERATOR   = __webpack_require__(178)('iterator')
	  , ArrayProto = Array.prototype;

	module.exports = function(it){
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};

/***/ },
/* 2448 */
[7062, 734],
/* 2449 */
/***/ function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(420);
	module.exports = function(iterator, fn, value, entries){
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch(e){
	    var ret = iterator['return'];
	    if(ret !== undefined)anObject(ret.call(iterator));
	    throw e;
	  }
	};

/***/ },
/* 2450 */
[7063, 98, 738, 515, 424, 178],
/* 2451 */
[7065, 98, 426],
/* 2452 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.1 Object.assign(target, source, ...)
	var $        = __webpack_require__(98)
	  , toObject = __webpack_require__(1310)
	  , IObject  = __webpack_require__(1303);

	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = __webpack_require__(422)(function(){
	  var a = Object.assign
	    , A = {}
	    , B = {}
	    , S = Symbol()
	    , K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function(k){ B[k] = k; });
	  return a({}, A)[S] != 7 || Object.keys(a({}, B)).join('') != K;
	}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
	  var T     = toObject(target)
	    , $$    = arguments
	    , $$len = $$.length
	    , index = 1
	    , getKeys    = $.getKeys
	    , getSymbols = $.getSymbols
	    , isEnum     = $.isEnum;
	  while($$len > index){
	    var S      = IObject($$[index++])
	      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
	      , length = keys.length
	      , j      = 0
	      , key;
	    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
	  }
	  return T;
	} : Object.assign;

/***/ },
/* 2453 */
[7068, 98, 514, 420, 511],
/* 2454 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var core        = __webpack_require__(107)
	  , $           = __webpack_require__(98)
	  , DESCRIPTORS = __webpack_require__(421)
	  , SPECIES     = __webpack_require__(178)('species');

	module.exports = function(KEY){
	  var C = core[KEY];
	  if(DESCRIPTORS && C && !C[SPECIES])$.setDesc(C, SPECIES, {
	    configurable: true,
	    get: function(){ return this; }
	  });
	};

/***/ },
/* 2455 */
[7071, 1309, 512],
/* 2456 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(1309)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 2457 */
[7076, 420, 1311, 107],
/* 2458 */
[7077, 2442, 1304, 425, 426, 736],
/* 2459 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(2443);

	// 23.1 Map Objects
	__webpack_require__(2445)('Map', function(get){
	  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.1.3.6 Map.prototype.get(key)
	  get: function get(key){
	    var entry = strong.getEntry(this, key);
	    return entry && entry.v;
	  },
	  // 23.1.3.9 Map.prototype.set(key, value)
	  set: function set(key, value){
	    return strong.def(this, key === 0 ? 0 : key, value);
	  }
	}, strong, true);

/***/ },
/* 2460 */
[7078, 177],
/* 2461 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(177);

	$export($export.S + $export.F, 'Object', {assign: __webpack_require__(2452)});

/***/ },
/* 2462 */
[7079, 426, 737],
/* 2463 */
[7080, 737, 1302],
/* 2464 */
[7081, 1310, 737],
/* 2465 */
[7082, 177, 2453],
/* 2466 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export  = __webpack_require__(177);

	$export($export.P, 'Map', {toJSON: __webpack_require__(2444)('Map')});

/***/ },
/* 2467 */
[7087, 82, 37, 5, 3, 285, 16],
/* 2468 */
[7090, 37, 3, 5, 16, 285],
/* 2469 */
/***/ function(module, exports) {

	// This file contains methods responsible for dealing with comments.

	/**
	 * Share comments amongst siblings.
	 */

	"use strict";

	exports.__esModule = true;
	exports.shareCommentsWithSiblings = shareCommentsWithSiblings;
	exports.addComment = addComment;
	exports.addComments = addComments;

	function shareCommentsWithSiblings() {
	  var node = this.node;
	  if (!node) return;

	  var trailing = node.trailingComments;
	  var leading = node.leadingComments;
	  if (!trailing && !leading) return;

	  var prev = this.getSibling(this.key - 1);
	  var next = this.getSibling(this.key + 1);

	  if (!prev.node) prev = next;
	  if (!next.node) next = prev;

	  prev.addComments("trailing", leading);
	  next.addComments("leading", trailing);
	}

	function addComment(type, content, line /*:: ?*/) {
	  this.addComments(type, [{
	    type: line ? "CommentLine" : "CommentBlock",
	    value: content
	  }]);
	}

	/**
	 * Give node `comments` of the specified `type`.
	 */

	function addComments(type /*: string*/, comments /*: Array*/) {
	  if (!comments) return;

	  var node = this.node;
	  if (!node) return;

	  var key = type + "Comments";

	  if (node[key]) {
	    node[key] = node[key].concat(comments);
	  } else {
	    node[key] = comments;
	  }
	}

/***/ },
/* 2470 */
[7091, 37, 5, 153],
/* 2471 */
[7092, 3, 16],
/* 2472 */
[7093, 37],
/* 2473 */
[7094, 37, 5, 3, 285, 16],
/* 2474 */
[7096, 37, 3, 2476, 16],
/* 2475 */
[7097, 37, 3, 16],
/* 2476 */
[7098, 3, 733, 16, 2475],
/* 2477 */
[7099, 37, 5, 3, 517, 16],
/* 2478 */
[7100, 82, 37, 3, 16],
/* 2479 */
/***/ function(module, exports) {

	// this file contains hooks that handle ancestry cleanup of parent nodes when removing children

	/**
	 * Pre hooks should be used for either rejecting removal or delegating removal
	 */

	"use strict";

	exports.__esModule = true;
	var hooks = [function (self, parent) {
	  if (self.key === "body" && parent.isArrowFunctionExpression()) {
	    self.replaceWith(self.scope.buildUndefinedNode());
	    return true;
	  }
	}, function (self, parent) {
	  var removeParent = false;

	  // while (NODE);
	  // removing the test of a while/switch, we can either just remove it entirely *or* turn the `test` into `true`
	  // unlikely that the latter will ever be what's wanted so we just remove the loop to avoid infinite recursion
	  removeParent = removeParent || self.key === "test" && (parent.isWhile() || parent.isSwitchCase());

	  // export NODE;
	  // just remove a declaration for an export as this is no longer valid
	  removeParent = removeParent || self.key === "declaration" && parent.isExportDeclaration();

	  // label: NODE
	  // stray labeled statement with no body
	  removeParent = removeParent || self.key === "body" && parent.isLabeledStatement();

	  // let NODE;
	  // remove an entire declaration if there are no declarators left
	  removeParent = removeParent || self.listKey === "declarations" && parent.isVariableDeclaration() && parent.node.declarations.length === 1;

	  // NODE;
	  // remove the entire expression statement if there's no expression
	  removeParent = removeParent || self.key === "expression" && parent.isExpressionStatement();

	  if (removeParent) {
	    parent.remove();
	    return true;
	  }
	}, function (self, parent) {
	  if (parent.isSequenceExpression() && parent.node.expressions.length === 1) {
	    // (node, NODE);
	    // we've just removed the second element of a sequence expression so let's turn that sequence
	    // expression into a regular expression
	    parent.replaceWith(parent.node.expressions[0]);
	    return true;
	  }
	}, function (self, parent) {
	  if (parent.isBinary()) {
	    // left + NODE;
	    // NODE + right;
	    // we're in a binary expression, better remove it and replace it with the last expression
	    if (self.key === "left") {
	      parent.replaceWith(parent.node.right);
	    } else {
	      // key === "right"
	      parent.replaceWith(parent.node.left);
	    }
	    return true;
	  }
	}];
	exports.hooks = hooks;

/***/ },
/* 2480 */
[7102, 37, 5, 3, 1316, 2478, 285, 16],
/* 2481 */
[7103, 37, 2479],
/* 2482 */
[7104, 37, 5, 3, 1294, 153, 285, 745, 16],
/* 2483 */
[7107, 82, 5, 3, 1318, 16],
/* 2484 */
[7108, 37, 510, 3, 5, 1317, 176, 16, 520],
/* 2485 */
[7109, 6979],
/* 2486 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (false) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;


/***/ },
/* 2487 */
[7026, 2488],
/* 2488 */
[7027, 2489],
/* 2489 */
2392,
/* 2490 */
[7111, 37, 2418, 5, 3, 1342, 1341, 1343, 753, 153, 16],
/* 2491 */
[7112, 3, 5, 16, 744, 179],
/* 2492 */
[7113, 5, 179],
/* 2493 */
[7114, 5, 179],
/* 2494 */
[7115, 5, 179],
/* 2495 */
[7117, 179, 2491, 2492, 2494, 2496, 2497, 2493],
/* 2496 */
[7118, 5, 179],
/* 2497 */
[7119, 5, 179],
/* 2498 */
[7120, 3, 16],
/* 2499 */
[7122, 3, 16],
/* 2500 */
[7124, 37, 5, 3, 1319, 2503, 16, 744],
/* 2501 */
2384,
/* 2502 */
[7023, 1320],
/* 2503 */
[7024, 2501, 1320, 2502],
/* 2504 */
/***/ function(module, exports) {

	'use strict';
	module.exports = function toFastProperties(obj) {
		/*jshint -W027*/
		function f() {}
		f.prototype = obj;
		new f();
		return;
		eval(obj);
	};


/***/ },
/* 2505 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	var fs = __webpack_require__(345);
	var path = __webpack_require__(175);

	var commentRx = /^\s*\/(?:\/|\*)[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+;)?base64,(.*)$/mg;
	var mapFileCommentRx =
	  //Example (Extra space between slashes added to solve Safari bug. Exclude space in production):
	  //     / /# sourceMappingURL=foo.js.map           /*# sourceMappingURL=foo.js.map */
	  /(?:\/\/[@#][ \t]+sourceMappingURL=([^\s'"]+?)[ \t]*$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^\*]+?)[ \t]*(?:\*\/){1}[ \t]*$)/mg

	function decodeBase64(base64) {
	  return new Buffer(base64, 'base64').toString();
	}

	function stripComment(sm) {
	  return sm.split(',').pop();
	}

	function readFromFileMap(sm, dir) {
	  // NOTE: this will only work on the server since it attempts to read the map file

	  var r = mapFileCommentRx.exec(sm);
	  mapFileCommentRx.lastIndex = 0;

	  // for some odd reason //# .. captures in 1 and /* .. */ in 2
	  var filename = r[1] || r[2];
	  var filepath = path.join(dir, filename);

	  try {
	    return fs.readFileSync(filepath, 'utf8');
	  } catch (e) {
	    throw new Error('An error occurred while trying to read the map file at ' + filepath + '\n' + e);
	  }
	}

	function Converter (sm, opts) {
	  opts = opts || {};

	  if (opts.isFileComment) sm = readFromFileMap(sm, opts.commentFileDir);
	  if (opts.hasComment) sm = stripComment(sm);
	  if (opts.isEncoded) sm = decodeBase64(sm);
	  if (opts.isJSON || opts.isEncoded) sm = JSON.parse(sm);

	  this.sourcemap = sm;
	}

	function convertFromLargeSource(content){
	  var lines = content.split('\n');
	  var line;
	  // find first line which contains a source map starting at end of content
	  for (var i = lines.length - 1; i > 0; i--) {
	    line = lines[i]
	    if (~line.indexOf('sourceMappingURL=data:')) return exports.fromComment(line);
	  }
	}

	Converter.prototype.toJSON = function (space) {
	  return JSON.stringify(this.sourcemap, null, space);
	};

	Converter.prototype.toBase64 = function () {
	  var json = this.toJSON();
	  return new Buffer(json).toString('base64');
	};

	Converter.prototype.toComment = function (options) {
	  var base64 = this.toBase64();
	  var data = 'sourceMappingURL=data:application/json;base64,' + base64;
	  return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;
	};

	// returns copy instead of original
	Converter.prototype.toObject = function () {
	  return JSON.parse(this.toJSON());
	};

	Converter.prototype.addProperty = function (key, value) {
	  if (this.sourcemap.hasOwnProperty(key)) throw new Error('property %s already exists on the sourcemap, use set property instead');
	  return this.setProperty(key, value);
	};

	Converter.prototype.setProperty = function (key, value) {
	  this.sourcemap[key] = value;
	  return this;
	};

	Converter.prototype.getProperty = function (key) {
	  return this.sourcemap[key];
	};

	exports.fromObject = function (obj) {
	  return new Converter(obj);
	};

	exports.fromJSON = function (json) {
	  return new Converter(json, { isJSON: true });
	};

	exports.fromBase64 = function (base64) {
	  return new Converter(base64, { isEncoded: true });
	};

	exports.fromComment = function (comment) {
	  comment = comment
	    .replace(/^\/\*/g, '//')
	    .replace(/\*\/$/g, '');

	  return new Converter(comment, { isEncoded: true, hasComment: true });
	};

	exports.fromMapFileComment = function (comment, dir) {
	  return new Converter(comment, { commentFileDir: dir, isFileComment: true, isJSON: true });
	};

	// Finds last sourcemap comment in file or returns null if none was found
	exports.fromSource = function (content, largeSource) {
	  if (largeSource) {
	    var res = convertFromLargeSource(content);
	    return res ? res : null;
	  }

	  var m = content.match(commentRx);
	  commentRx.lastIndex = 0;
	  return m ? exports.fromComment(m.pop()) : null;
	};

	// Finds last sourcemap comment in file or returns null if none was found
	exports.fromMapFileSource = function (content, dir) {
	  var m = content.match(mapFileCommentRx);
	  mapFileCommentRx.lastIndex = 0;
	  return m ? exports.fromMapFileComment(m.pop(), dir) : null;
	};

	exports.removeComments = function (src) {
	  commentRx.lastIndex = 0;
	  return src.replace(commentRx, '');
	};

	exports.removeMapFileComments = function (src) {
	  mapFileCommentRx.lastIndex = 0;
	  return src.replace(mapFileCommentRx, '');
	};

	Object.defineProperty(exports, 'commentRegex', {
	  get: function getCommentRegex () {
	    commentRx.lastIndex = 0;
	    return commentRx;
	  }
	});

	Object.defineProperty(exports, 'mapFileCommentRegex', {
	  get: function getMapFileCommentRegex () {
	    mapFileCommentRx.lastIndex = 0;
	    return mapFileCommentRx;
	  }
	});

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2364).Buffer))

/***/ },
/* 2506 */
[7125, 1321],
/* 2507 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {
	/**
	 * Module dependencies.
	 */

	var tty = __webpack_require__(7016);
	var util = __webpack_require__(30);

	/**
	 * This is the Node.js implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = __webpack_require__(1321);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;

	/**
	 * Colors.
	 */

	exports.colors = [6, 2, 3, 4, 5, 1];

	/**
	 * The file descriptor to write the `debug()` calls to.
	 * Set the `DEBUG_FD` env variable to override with another value. i.e.:
	 *
	 *   $ DEBUG_FD=3 node script.js 3>debug.log
	 */

	var fd = parseInt(process.env.DEBUG_FD, 10) || 2;
	var stream = 1 === fd ? process.stdout :
	             2 === fd ? process.stderr :
	             createWritableStdioStream(fd);

	/**
	 * Is stdout a TTY? Colored output is enabled when `true`.
	 */

	function useColors() {
	  var debugColors = (process.env.DEBUG_COLORS || '').trim().toLowerCase();
	  if (0 === debugColors.length) {
	    return tty.isatty(fd);
	  } else {
	    return '0' !== debugColors
	        && 'no' !== debugColors
	        && 'false' !== debugColors
	        && 'disabled' !== debugColors;
	  }
	}

	/**
	 * Map %o to `util.inspect()`, since Node doesn't do that out of the box.
	 */

	var inspect = (4 === util.inspect.length ?
	  // node <= 0.8.x
	  function (v, colors) {
	    return util.inspect(v, void 0, void 0, colors);
	  } :
	  // node > 0.8.x
	  function (v, colors) {
	    return util.inspect(v, { colors: colors });
	  }
	);

	exports.formatters.o = function(v) {
	  return inspect(v, this.useColors)
	    .replace(/\s*\n\s*/g, ' ');
	};

	/**
	 * Adds ANSI color escape codes if enabled.
	 *
	 * @api public
	 */

	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;
	  var name = this.namespace;

	  if (useColors) {
	    var c = this.color;

	    args[0] = '  \u001b[3' + c + ';1m' + name + ' '
	      + '\u001b[0m'
	      + args[0] + '\u001b[3' + c + 'm'
	      + ' +' + exports.humanize(this.diff) + '\u001b[0m';
	  } else {
	    args[0] = new Date().toUTCString()
	      + ' ' + name + ' ' + args[0];
	  }
	  return args;
	}

	/**
	 * Invokes `console.error()` with the specified arguments.
	 */

	function log() {
	  return stream.write(util.format.apply(this, arguments) + '\n');
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */

	function save(namespaces) {
	  if (null == namespaces) {
	    // If you set a process.env field to null or undefined, it gets cast to the
	    // string 'null' or 'undefined'. Just delete instead.
	    delete process.env.DEBUG;
	  } else {
	    process.env.DEBUG = namespaces;
	  }
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */

	function load() {
	  return process.env.DEBUG;
	}

	/**
	 * Copied from `node/src/node.js`.
	 *
	 * XXX: It's lame that node doesn't expose this API out-of-the-box. It also
	 * relies on the undocumented `tty_wrap.guessHandleType()` which is also lame.
	 */

	function createWritableStdioStream (fd) {
	  var stream;
	  var tty_wrap = process.binding('tty_wrap');

	  // Note stream._type is used for test-module-load-list.js

	  switch (tty_wrap.guessHandleType(fd)) {
	    case 'TTY':
	      stream = new tty.WriteStream(fd);
	      stream._type = 'tty';

	      // Hack to have stream not keep the event loop alive.
	      // See https://github.com/joyent/node/issues/1726
	      if (stream._handle && stream._handle.unref) {
	        stream._handle.unref();
	      }
	      break;

	    case 'FILE':
	      var fs = __webpack_require__(345);
	      stream = new fs.SyncWriteStream(fd, { autoClose: false });
	      stream._type = 'fs';
	      break;

	    case 'PIPE':
	    case 'TCP':
	      var net = __webpack_require__(345);
	      stream = new net.Socket({
	        fd: fd,
	        readable: false,
	        writable: true
	      });

	      // FIXME Should probably have an option in net.Socket to create a
	      // stream from an existing fd which is writable only. But for now
	      // we'll just add this hack and set the `readable` member to false.
	      // Test: ./node test/fixtures/echo.js < /etc/passwd
	      stream.readable = false;
	      stream.read = null;
	      stream._type = 'pipe';

	      // FIXME Hack to have stream not keep the event loop alive.
	      // See https://github.com/joyent/node/issues/1726
	      if (stream._handle && stream._handle.unref) {
	        stream._handle.unref();
	      }
	      break;

	    default:
	      // Probably an error on in uv_guess_handle()
	      throw new Error('Implement me. Unknown stream file type!');
	  }

	  // For supporting legacy API we put the FD here.
	  stream.fd = fd;

	  stream._isStdio = true;

	  return stream;
	}

	/**
	 * Enable namespaces listed in `process.env.DEBUG` initially.
	 */

	exports.enable(load());

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 2508 */
/***/ function(module, exports) {

	/**
	 * Helpers.
	 */

	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @return {String|Number}
	 * @api public
	 */

	module.exports = function(val, options){
	  options = options || {};
	  if ('string' == typeof val) return parse(val);
	  return options.long
	    ? long(val)
	    : short(val);
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  str = '' + str;
	  if (str.length > 10000) return;
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
	  if (!match) return;
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function short(ms) {
	  if (ms >= d) return Math.round(ms / d) + 'd';
	  if (ms >= h) return Math.round(ms / h) + 'h';
	  if (ms >= m) return Math.round(ms / m) + 'm';
	  if (ms >= s) return Math.round(ms / s) + 's';
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function long(ms) {
	  return plural(ms, d, 'day')
	    || plural(ms, h, 'hour')
	    || plural(ms, m, 'minute')
	    || plural(ms, s, 'second')
	    || ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, n, name) {
	  if (ms < n) return;
	  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}


/***/ },
/* 2509 */
/***/ function(module, exports, __webpack_require__) {

	// json5.js
	// Modern JSON. See README.md for details.
	//
	// This file is based directly off of Douglas Crockford's json_parse.js:
	// https://github.com/douglascrockford/JSON-js/blob/master/json_parse.js

	var JSON5 = ( true ? exports : {});

	JSON5.parse = (function () {
	    "use strict";

	// This is a function that can parse a JSON5 text, producing a JavaScript
	// data structure. It is a simple, recursive descent parser. It does not use
	// eval or regular expressions, so it can be used as a model for implementing
	// a JSON5 parser in other languages.

	// We are defining the function inside of another function to avoid creating
	// global variables.

	    var at,     // The index of the current character
	        ch,     // The current character
	        escapee = {
	            "'":  "'",
	            '"':  '"',
	            '\\': '\\',
	            '/':  '/',
	            '\n': '',       // Replace escaped newlines in strings w/ empty string
	            b:    '\b',
	            f:    '\f',
	            n:    '\n',
	            r:    '\r',
	            t:    '\t'
	        },
	        ws = [
	            ' ',
	            '\t',
	            '\r',
	            '\n',
	            '\v',
	            '\f',
	            '\xA0',
	            '\uFEFF'
	        ],
	        text,

	        error = function (m) {

	// Call error when something is wrong.

	            var error = new SyntaxError();
	            error.message = m;
	            error.at = at;
	            error.text = text;
	            throw error;
	        },

	        next = function (c) {

	// If a c parameter is provided, verify that it matches the current character.

	            if (c && c !== ch) {
	                error("Expected '" + c + "' instead of '" + ch + "'");
	            }

	// Get the next character. When there are no more characters,
	// return the empty string.

	            ch = text.charAt(at);
	            at += 1;
	            return ch;
	        },

	        peek = function () {

	// Get the next character without consuming it or
	// assigning it to the ch varaible.

	            return text.charAt(at);
	        },

	        identifier = function () {

	// Parse an identifier. Normally, reserved words are disallowed here, but we
	// only use this for unquoted object keys, where reserved words are allowed,
	// so we don't check for those here. References:
	// - http://es5.github.com/#x7.6
	// - https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Core_Language_Features#Variables
	// - http://docstore.mik.ua/orelly/webprog/jscript/ch02_07.htm
	// TODO Identifiers can have Unicode "letters" in them; add support for those.

	            var key = ch;

	            // Identifiers must start with a letter, _ or $.
	            if ((ch !== '_' && ch !== '$') &&
	                    (ch < 'a' || ch > 'z') &&
	                    (ch < 'A' || ch > 'Z')) {
	                error("Bad identifier");
	            }

	            // Subsequent characters can contain digits.
	            while (next() && (
	                    ch === '_' || ch === '$' ||
	                    (ch >= 'a' && ch <= 'z') ||
	                    (ch >= 'A' && ch <= 'Z') ||
	                    (ch >= '0' && ch <= '9'))) {
	                key += ch;
	            }

	            return key;
	        },

	        number = function () {

	// Parse a number value.

	            var number,
	                sign = '',
	                string = '',
	                base = 10;

	            if (ch === '-' || ch === '+') {
	                sign = ch;
	                next(ch);
	            }

	            // support for Infinity (could tweak to allow other words):
	            if (ch === 'I') {
	                number = word();
	                if (typeof number !== 'number' || isNaN(number)) {
	                    error('Unexpected word for number');
	                }
	                return (sign === '-') ? -number : number;
	            }

	            // support for NaN
	            if (ch === 'N' ) {
	              number = word();
	              if (!isNaN(number)) {
	                error('expected word to be NaN');
	              }
	              // ignore sign as -NaN also is NaN
	              return number;
	            }

	            if (ch === '0') {
	                string += ch;
	                next();
	                if (ch === 'x' || ch === 'X') {
	                    string += ch;
	                    next();
	                    base = 16;
	                } else if (ch >= '0' && ch <= '9') {
	                    error('Octal literal');
	                }
	            }

	            switch (base) {
	            case 10:
	                while (ch >= '0' && ch <= '9' ) {
	                    string += ch;
	                    next();
	                }
	                if (ch === '.') {
	                    string += '.';
	                    while (next() && ch >= '0' && ch <= '9') {
	                        string += ch;
	                    }
	                }
	                if (ch === 'e' || ch === 'E') {
	                    string += ch;
	                    next();
	                    if (ch === '-' || ch === '+') {
	                        string += ch;
	                        next();
	                    }
	                    while (ch >= '0' && ch <= '9') {
	                        string += ch;
	                        next();
	                    }
	                }
	                break;
	            case 16:
	                while (ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'F' || ch >= 'a' && ch <= 'f') {
	                    string += ch;
	                    next();
	                }
	                break;
	            }

	            if(sign === '-') {
	                number = -string;
	            } else {
	                number = +string;
	            }
	            
	            if (!isFinite(number)) {
	                error("Bad number");
	            } else {
	                return number;
	            }
	        },

	        string = function () {

	// Parse a string value.

	            var hex,
	                i,
	                string = '',
	                delim,      // double quote or single quote
	                uffff;

	// When parsing for string values, we must look for ' or " and \ characters.

	            if (ch === '"' || ch === "'") {
	                delim = ch;
	                while (next()) {
	                    if (ch === delim) {
	                        next();
	                        return string;
	                    } else if (ch === '\\') {
	                        next();
	                        if (ch === 'u') {
	                            uffff = 0;
	                            for (i = 0; i < 4; i += 1) {
	                                hex = parseInt(next(), 16);
	                                if (!isFinite(hex)) {
	                                    break;
	                                }
	                                uffff = uffff * 16 + hex;
	                            }
	                            string += String.fromCharCode(uffff);
	                        } else if (ch === '\r') {
	                            if (peek() === '\n') {
	                                next();
	                            }
	                        } else if (typeof escapee[ch] === 'string') {
	                            string += escapee[ch];
	                        } else {
	                            break;
	                        }
	                    } else if (ch === '\n') {
	                        // unescaped newlines are invalid; see:
	                        // https://github.com/aseemk/json5/issues/24
	                        // TODO this feels special-cased; are there other
	                        // invalid unescaped chars?
	                        break;
	                    } else {
	                        string += ch;
	                    }
	                }
	            }
	            error("Bad string");
	        },

	        inlineComment = function () {

	// Skip an inline comment, assuming this is one. The current character should
	// be the second / character in the // pair that begins this inline comment.
	// To finish the inline comment, we look for a newline or the end of the text.

	            if (ch !== '/') {
	                error("Not an inline comment");
	            }

	            do {
	                next();
	                if (ch === '\n' || ch === '\r') {
	                    next();
	                    return;
	                }
	            } while (ch);
	        },

	        blockComment = function () {

	// Skip a block comment, assuming this is one. The current character should be
	// the * character in the /* pair that begins this block comment.
	// To finish the block comment, we look for an ending */ pair of characters,
	// but we also watch for the end of text before the comment is terminated.

	            if (ch !== '*') {
	                error("Not a block comment");
	            }

	            do {
	                next();
	                while (ch === '*') {
	                    next('*');
	                    if (ch === '/') {
	                        next('/');
	                        return;
	                    }
	                }
	            } while (ch);

	            error("Unterminated block comment");
	        },

	        comment = function () {

	// Skip a comment, whether inline or block-level, assuming this is one.
	// Comments always begin with a / character.

	            if (ch !== '/') {
	                error("Not a comment");
	            }

	            next('/');

	            if (ch === '/') {
	                inlineComment();
	            } else if (ch === '*') {
	                blockComment();
	            } else {
	                error("Unrecognized comment");
	            }
	        },

	        white = function () {

	// Skip whitespace and comments.
	// Note that we're detecting comments by only a single / character.
	// This works since regular expressions are not valid JSON(5), but this will
	// break if there are other valid values that begin with a / character!

	            while (ch) {
	                if (ch === '/') {
	                    comment();
	                } else if (ws.indexOf(ch) >= 0) {
	                    next();
	                } else {
	                    return;
	                }
	            }
	        },

	        word = function () {

	// true, false, or null.

	            switch (ch) {
	            case 't':
	                next('t');
	                next('r');
	                next('u');
	                next('e');
	                return true;
	            case 'f':
	                next('f');
	                next('a');
	                next('l');
	                next('s');
	                next('e');
	                return false;
	            case 'n':
	                next('n');
	                next('u');
	                next('l');
	                next('l');
	                return null;
	            case 'I':
	                next('I');
	                next('n');
	                next('f');
	                next('i');
	                next('n');
	                next('i');
	                next('t');
	                next('y');
	                return Infinity;
	            case 'N':
	              next( 'N' );
	              next( 'a' );
	              next( 'N' );
	              return NaN;
	            }
	            error("Unexpected '" + ch + "'");
	        },

	        value,  // Place holder for the value function.

	        array = function () {

	// Parse an array value.

	            var array = [];

	            if (ch === '[') {
	                next('[');
	                white();
	                while (ch) {
	                    if (ch === ']') {
	                        next(']');
	                        return array;   // Potentially empty array
	                    }
	                    // ES5 allows omitting elements in arrays, e.g. [,] and
	                    // [,null]. We don't allow this in JSON5.
	                    if (ch === ',') {
	                        error("Missing array element");
	                    } else {
	                        array.push(value());
	                    }
	                    white();
	                    // If there's no comma after this value, this needs to
	                    // be the end of the array.
	                    if (ch !== ',') {
	                        next(']');
	                        return array;
	                    }
	                    next(',');
	                    white();
	                }
	            }
	            error("Bad array");
	        },

	        object = function () {

	// Parse an object value.

	            var key,
	                object = {};

	            if (ch === '{') {
	                next('{');
	                white();
	                while (ch) {
	                    if (ch === '}') {
	                        next('}');
	                        return object;   // Potentially empty object
	                    }

	                    // Keys can be unquoted. If they are, they need to be
	                    // valid JS identifiers.
	                    if (ch === '"' || ch === "'") {
	                        key = string();
	                    } else {
	                        key = identifier();
	                    }

	                    white();
	                    next(':');
	                    object[key] = value();
	                    white();
	                    // If there's no comma after this pair, this needs to be
	                    // the end of the object.
	                    if (ch !== ',') {
	                        next('}');
	                        return object;
	                    }
	                    next(',');
	                    white();
	                }
	            }
	            error("Bad object");
	        };

	    value = function () {

	// Parse a JSON value. It could be an object, an array, a string, a number,
	// or a word.

	        white();
	        switch (ch) {
	        case '{':
	            return object();
	        case '[':
	            return array();
	        case '"':
	        case "'":
	            return string();
	        case '-':
	        case '+':
	        case '.':
	            return number();
	        default:
	            return ch >= '0' && ch <= '9' ? number() : word();
	        }
	    };

	// Return the json_parse function. It will have access to all of the above
	// functions and variables.

	    return function (source, reviver) {
	        var result;

	        text = String(source);
	        at = 0;
	        ch = ' ';
	        result = value();
	        white();
	        if (ch) {
	            error("Syntax error");
	        }

	// If there is a reviver function, we recursively walk the new structure,
	// passing each name/value pair to the reviver function for possible
	// transformation, starting with a temporary root object that holds the result
	// in an empty key. If there is not a reviver function, we simply return the
	// result.

	        return typeof reviver === 'function' ? (function walk(holder, key) {
	            var k, v, value = holder[key];
	            if (value && typeof value === 'object') {
	                for (k in value) {
	                    if (Object.prototype.hasOwnProperty.call(value, k)) {
	                        v = walk(value, k);
	                        if (v !== undefined) {
	                            value[k] = v;
	                        } else {
	                            delete value[k];
	                        }
	                    }
	                }
	            }
	            return reviver.call(holder, key, value);
	        }({'': result}, '')) : result;
	    };
	}());

	// JSON5 stringify will not quote keys where appropriate
	JSON5.stringify = function (obj, replacer, space) {
	    if (replacer && (typeof(replacer) !== "function" && !isArray(replacer))) {
	        throw new Error('Replacer must be a function or an array');
	    }
	    var getReplacedValueOrUndefined = function(holder, key, isTopLevel) {
	        var value = holder[key];

	        // Replace the value with its toJSON value first, if possible
	        if (value && value.toJSON && typeof value.toJSON === "function") {
	            value = value.toJSON();
	        }

	        // If the user-supplied replacer if a function, call it. If it's an array, check objects' string keys for
	        // presence in the array (removing the key/value pair from the resulting JSON if the key is missing).
	        if (typeof(replacer) === "function") {
	            return replacer.call(holder, key, value);
	        } else if(replacer) {
	            if (isTopLevel || isArray(holder) || replacer.indexOf(key) >= 0) {
	                return value;
	            } else {
	                return undefined;
	            }
	        } else {
	            return value;
	        }
	    };

	    function isWordChar(char) {
	        return (char >= 'a' && char <= 'z') ||
	            (char >= 'A' && char <= 'Z') ||
	            (char >= '0' && char <= '9') ||
	            char === '_' || char === '$';
	    }

	    function isWordStart(char) {
	        return (char >= 'a' && char <= 'z') ||
	            (char >= 'A' && char <= 'Z') ||
	            char === '_' || char === '$';
	    }

	    function isWord(key) {
	        if (typeof key !== 'string') {
	            return false;
	        }
	        if (!isWordStart(key[0])) {
	            return false;
	        }
	        var i = 1, length = key.length;
	        while (i < length) {
	            if (!isWordChar(key[i])) {
	                return false;
	            }
	            i++;
	        }
	        return true;
	    }

	    // export for use in tests
	    JSON5.isWord = isWord;

	    // polyfills
	    function isArray(obj) {
	        if (Array.isArray) {
	            return Array.isArray(obj);
	        } else {
	            return Object.prototype.toString.call(obj) === '[object Array]';
	        }
	    }

	    function isDate(obj) {
	        return Object.prototype.toString.call(obj) === '[object Date]';
	    }

	    isNaN = isNaN || function(val) {
	        return typeof val === 'number' && val !== val;
	    };

	    var objStack = [];
	    function checkForCircular(obj) {
	        for (var i = 0; i < objStack.length; i++) {
	            if (objStack[i] === obj) {
	                throw new TypeError("Converting circular structure to JSON");
	            }
	        }
	    }

	    function makeIndent(str, num, noNewLine) {
	        if (!str) {
	            return "";
	        }
	        // indentation no more than 10 chars
	        if (str.length > 10) {
	            str = str.substring(0, 10);
	        }

	        var indent = noNewLine ? "" : "\n";
	        for (var i = 0; i < num; i++) {
	            indent += str;
	        }

	        return indent;
	    }

	    var indentStr;
	    if (space) {
	        if (typeof space === "string") {
	            indentStr = space;
	        } else if (typeof space === "number" && space >= 0) {
	            indentStr = makeIndent(" ", space, true);
	        } else {
	            // ignore space parameter
	        }
	    }

	    // Copied from Crokford's implementation of JSON
	    // See https://github.com/douglascrockford/JSON-js/blob/e39db4b7e6249f04a195e7dd0840e610cc9e941e/json2.js#L195
	    // Begin
	    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	        meta = { // table of character substitutions
	        '\b': '\\b',
	        '\t': '\\t',
	        '\n': '\\n',
	        '\f': '\\f',
	        '\r': '\\r',
	        '"' : '\\"',
	        '\\': '\\\\'
	    };
	    function escapeString(string) {

	// If the string contains no control characters, no quote characters, and no
	// backslash characters, then we can safely slap some quotes around it.
	// Otherwise we must also replace the offending characters with safe escape
	// sequences.
	        escapable.lastIndex = 0;
	        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
	            var c = meta[a];
	            return typeof c === 'string' ?
	                c :
	                '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
	        }) + '"' : '"' + string + '"';
	    }
	    // End

	    function internalStringify(holder, key, isTopLevel) {
	        var buffer, res;

	        // Replace the value, if necessary
	        var obj_part = getReplacedValueOrUndefined(holder, key, isTopLevel);

	        if (obj_part && !isDate(obj_part)) {
	            // unbox objects
	            // don't unbox dates, since will turn it into number
	            obj_part = obj_part.valueOf();
	        }
	        switch(typeof obj_part) {
	            case "boolean":
	                return obj_part.toString();

	            case "number":
	                if (isNaN(obj_part) || !isFinite(obj_part)) {
	                    return "null";
	                }
	                return obj_part.toString();

	            case "string":
	                return escapeString(obj_part.toString());

	            case "object":
	                if (obj_part === null) {
	                    return "null";
	                } else if (isArray(obj_part)) {
	                    checkForCircular(obj_part);
	                    buffer = "[";
	                    objStack.push(obj_part);

	                    for (var i = 0; i < obj_part.length; i++) {
	                        res = internalStringify(obj_part, i, false);
	                        buffer += makeIndent(indentStr, objStack.length);
	                        if (res === null || typeof res === "undefined") {
	                            buffer += "null";
	                        } else {
	                            buffer += res;
	                        }
	                        if (i < obj_part.length-1) {
	                            buffer += ",";
	                        } else if (indentStr) {
	                            buffer += "\n";
	                        }
	                    }
	                    objStack.pop();
	                    buffer += makeIndent(indentStr, objStack.length, true) + "]";
	                } else {
	                    checkForCircular(obj_part);
	                    buffer = "{";
	                    var nonEmpty = false;
	                    objStack.push(obj_part);
	                    for (var prop in obj_part) {
	                        if (obj_part.hasOwnProperty(prop)) {
	                            var value = internalStringify(obj_part, prop, false);
	                            isTopLevel = false;
	                            if (typeof value !== "undefined" && value !== null) {
	                                buffer += makeIndent(indentStr, objStack.length);
	                                nonEmpty = true;
	                                var key = isWord(prop) ? prop : escapeString(prop);
	                                buffer += key + ":" + (indentStr ? ' ' : '') + value + ",";
	                            }
	                        }
	                    }
	                    objStack.pop();
	                    if (nonEmpty) {
	                        buffer = buffer.substring(0, buffer.length-1) + makeIndent(indentStr, objStack.length) + "}";
	                    } else {
	                        buffer = '{}';
	                    }
	                }
	                return buffer;
	            default:
	                // functions and undefined should be ignored
	                return undefined;
	        }
	    }

	    // special case...when undefined is used inside of
	    // a compound object/array, return null.
	    // but when top-level, return undefined
	    var topLevelHolder = {"":obj};
	    if (obj === undefined) {
	        return getReplacedValueOrUndefined(topLevelHolder, '', true);
	    }
	    return internalStringify(topLevelHolder, '', true);
	};


/***/ },
/* 2510 */
/***/ function(module, exports) {

	/**
	 * Creates an array with all falsey values removed. The values `false`, `null`,
	 * `0`, `""`, `undefined`, and `NaN` are falsey.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to compact.
	 * @returns {Array} Returns the new array of filtered values.
	 * @example
	 *
	 * _.compact([0, 1, false, 2, '', 3]);
	 * // => [1, 2, 3]
	 */
	function compact(array) {
	  var index = -1,
	      length = array ? array.length : 0,
	      resIndex = -1,
	      result = [];

	  while (++index < length) {
	    var value = array[index];
	    if (value) {
	      result[++resIndex] = value;
	    }
	  }
	  return result;
	}

	module.exports = compact;


/***/ },
/* 2511 */
[7127, 747, 2531, 428, 2552],
/* 2512 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(517);


/***/ },
/* 2513 */
[7129, 746, 1328, 2541],
/* 2514 */
/***/ function(module, exports, __webpack_require__) {

	var arrayMap = __webpack_require__(2517),
	    baseCallback = __webpack_require__(747),
	    baseMap = __webpack_require__(1333),
	    isArray = __webpack_require__(105);

	/**
	 * Creates an array of values by running each element in `collection` through
	 * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
	 * arguments: (value, index|key, collection).
	 *
	 * If a property name is provided for `iteratee` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `iteratee` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * Many lodash methods are guarded to work as iteratees for methods like
	 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	 *
	 * The guarded methods are:
	 * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
	 * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
	 * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
	 * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
	 * `sum`, `uniq`, and `words`
	 *
	 * @static
	 * @memberOf _
	 * @alias collect
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {Array} Returns the new mapped array.
	 * @example
	 *
	 * function timesThree(n) {
	 *   return n * 3;
	 * }
	 *
	 * _.map([1, 2], timesThree);
	 * // => [3, 6]
	 *
	 * _.map({ 'a': 1, 'b': 2 }, timesThree);
	 * // => [3, 6] (iteration order is not guaranteed)
	 *
	 * var users = [
	 *   { 'user': 'barney' },
	 *   { 'user': 'fred' }
	 * ];
	 *
	 * // using the `_.property` callback shorthand
	 * _.map(users, 'user');
	 * // => ['barney', 'fred']
	 */
	function map(collection, iteratee, thisArg) {
	  var func = isArray(collection) ? arrayMap : baseMap;
	  iteratee = baseCallback(iteratee, thisArg, 3);
	  return func(collection, iteratee);
	}

	module.exports = map;


/***/ },
/* 2515 */
/***/ function(module, exports, __webpack_require__) {

	var baseCallback = __webpack_require__(747),
	    baseMap = __webpack_require__(1333),
	    baseSortBy = __webpack_require__(2530),
	    compareAscending = __webpack_require__(2536),
	    isIterateeCall = __webpack_require__(428);

	/**
	 * Creates an array of elements, sorted in ascending order by the results of
	 * running each element in a collection through `iteratee`. This method performs
	 * a stable sort, that is, it preserves the original sort order of equal elements.
	 * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	 * (value, index|key, collection).
	 *
	 * If a property name is provided for `iteratee` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `iteratee` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {Array} Returns the new sorted array.
	 * @example
	 *
	 * _.sortBy([1, 2, 3], function(n) {
	 *   return Math.sin(n);
	 * });
	 * // => [3, 1, 2]
	 *
	 * _.sortBy([1, 2, 3], function(n) {
	 *   return this.sin(n);
	 * }, Math);
	 * // => [3, 1, 2]
	 *
	 * var users = [
	 *   { 'user': 'fred' },
	 *   { 'user': 'pebbles' },
	 *   { 'user': 'barney' }
	 * ];
	 *
	 * // using the `_.property` callback shorthand
	 * _.pluck(_.sortBy(users, 'user'), 'user');
	 * // => ['barney', 'fred', 'pebbles']
	 */
	function sortBy(collection, iteratee, thisArg) {
	  if (collection == null) {
	    return [];
	  }
	  if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	    iteratee = undefined;
	  }
	  var index = -1;
	  iteratee = baseCallback(iteratee, thisArg, 3);

	  var result = baseMap(collection, function(value, key, collection) {
	    return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
	  });
	  return baseSortBy(result, compareAscending);
	}

	module.exports = sortBy;


/***/ },
/* 2516 */
[7131, 2535, 518],
/* 2517 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.map` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}

	module.exports = arrayMap;


/***/ },
/* 2518 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.some` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function arraySome(array, predicate) {
	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}

	module.exports = arraySome;


/***/ },
/* 2519 */
/***/ function(module, exports) {

	/**
	 * Used by `_.defaults` to customize its `_.assign` use.
	 *
	 * @private
	 * @param {*} objectValue The destination object property value.
	 * @param {*} sourceValue The source object property value.
	 * @returns {*} Returns the value to assign to the destination object.
	 */
	function assignDefaults(objectValue, sourceValue) {
	  return objectValue === undefined ? sourceValue : objectValue;
	}

	module.exports = assignDefaults;


/***/ },
/* 2520 */
[7132, 286],
/* 2521 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `compareAscending` which compares values and
	 * sorts them in ascending order without guaranteeing a stable sort.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {number} Returns the sort order indicator for `value`.
	 */
	function baseCompareAscending(value, other) {
	  if (value !== other) {
	    var valIsNull = value === null,
	        valIsUndef = value === undefined,
	        valIsReflexive = value === value;

	    var othIsNull = other === null,
	        othIsUndef = other === undefined,
	        othIsReflexive = other === other;

	    if ((value > other && !othIsNull) || !valIsReflexive ||
	        (valIsNull && !othIsUndef && othIsReflexive) ||
	        (valIsUndef && othIsReflexive)) {
	      return 1;
	    }
	    if ((value < other && !valIsNull) || !othIsReflexive ||
	        (othIsNull && !valIsUndef && valIsReflexive) ||
	        (othIsUndef && valIsReflexive)) {
	      return -1;
	    }
	  }
	  return 0;
	}

	module.exports = baseCompareAscending;


/***/ },
/* 2522 */
[7138, 1329, 756],
/* 2523 */
[7143, 2542, 2543, 2544, 105, 754],
/* 2524 */
[7144, 1332, 181],
/* 2525 */
[7145, 2524, 2546, 181],
/* 2526 */
[7146, 748, 1332, 1335, 105, 751, 1337, 1322, 181, 752],
/* 2527 */
/***/ function(module, exports, __webpack_require__) {

	var arrayEach = __webpack_require__(746),
	    baseMergeDeep = __webpack_require__(2528),
	    isArray = __webpack_require__(105),
	    isArrayLike = __webpack_require__(347),
	    isObject = __webpack_require__(108),
	    isObjectLike = __webpack_require__(154),
	    isTypedArray = __webpack_require__(754),
	    keys = __webpack_require__(286);

	/**
	 * The base implementation of `_.merge` without support for argument juggling,
	 * multiple sources, and `this` binding `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {Function} [customizer] The function to customize merged values.
	 * @param {Array} [stackA=[]] Tracks traversed source objects.
	 * @param {Array} [stackB=[]] Associates values with source counterparts.
	 * @returns {Object} Returns `object`.
	 */
	function baseMerge(object, source, customizer, stackA, stackB) {
	  if (!isObject(object)) {
	    return object;
	  }
	  var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
	      props = isSrcArr ? undefined : keys(source);

	  arrayEach(props || source, function(srcValue, key) {
	    if (props) {
	      key = srcValue;
	      srcValue = source[key];
	    }
	    if (isObjectLike(srcValue)) {
	      stackA || (stackA = []);
	      stackB || (stackB = []);
	      baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
	    }
	    else {
	      var value = object[key],
	          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	          isCommon = result === undefined;

	      if (isCommon) {
	        result = srcValue;
	      }
	      if ((result !== undefined || (isSrcArr && !(key in object))) &&
	          (isCommon || (result === result ? (result !== value) : (value === value)))) {
	        object[key] = result;
	      }
	    }
	  });
	  return object;
	}

	module.exports = baseMerge;


/***/ },
/* 2528 */
/***/ function(module, exports, __webpack_require__) {

	var arrayCopy = __webpack_require__(1324),
	    isArguments = __webpack_require__(429),
	    isArray = __webpack_require__(105),
	    isArrayLike = __webpack_require__(347),
	    isPlainObject = __webpack_require__(1342),
	    isTypedArray = __webpack_require__(754),
	    toPlainObject = __webpack_require__(2554);

	/**
	 * A specialized version of `baseMerge` for arrays and objects which performs
	 * deep merges and tracks traversed objects enabling objects with circular
	 * references to be merged.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {string} key The key of the value to merge.
	 * @param {Function} mergeFunc The function to merge values.
	 * @param {Function} [customizer] The function to customize merged values.
	 * @param {Array} [stackA=[]] Tracks traversed source objects.
	 * @param {Array} [stackB=[]] Associates values with source counterparts.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
	  var length = stackA.length,
	      srcValue = source[key];

	  while (length--) {
	    if (stackA[length] == srcValue) {
	      object[key] = stackB[length];
	      return;
	    }
	  }
	  var value = object[key],
	      result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	      isCommon = result === undefined;

	  if (isCommon) {
	    result = srcValue;
	    if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
	      result = isArray(value)
	        ? value
	        : (isArrayLike(value) ? arrayCopy(value) : []);
	    }
	    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	      result = isArguments(value)
	        ? toPlainObject(value)
	        : (isPlainObject(value) ? value : {});
	    }
	    else {
	      isCommon = false;
	    }
	  }
	  // Add the source value to the stack of traversed objects and associate
	  // it with its merged value.
	  stackA.push(srcValue);
	  stackB.push(result);

	  if (isCommon) {
	    // Recursively merge objects and arrays (susceptible to call stack limits).
	    object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
	  } else if (result === result ? (result !== value) : (value === value)) {
	    object[key] = result;
	  }
	}

	module.exports = baseMergeDeep;


/***/ },
/* 2529 */
[7147, 748, 752],
/* 2530 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.sortBy` which uses `comparer` to define
	 * the sort order of `array` and replaces criteria objects with their
	 * corresponding values.
	 *
	 * @private
	 * @param {Array} array The array to sort.
	 * @param {Function} comparer The function to define sort order.
	 * @returns {Array} Returns `array`.
	 */
	function baseSortBy(array, comparer) {
	  var length = array.length;

	  array.sort(comparer);
	  while (length--) {
	    array[length] = array[length].value;
	  }
	  return array;
	}

	module.exports = baseSortBy;


/***/ },
/* 2531 */
[7148, 1331, 2534, 2539],
/* 2532 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.values` and `_.valuesIn` which creates an
	 * array of `object` property values corresponding to the property names
	 * of `props`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} props The property names to get values for.
	 * @returns {Object} Returns the array of property values.
	 */
	function baseValues(object, props) {
	  var index = -1,
	      length = props.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = object[props[index]];
	  }
	  return result;
	}

	module.exports = baseValues;


/***/ },
/* 2533 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/** Native method references. */
	var ArrayBuffer = global.ArrayBuffer,
	    Uint8Array = global.Uint8Array;

	/**
	 * Creates a clone of the given array buffer.
	 *
	 * @private
	 * @param {ArrayBuffer} buffer The array buffer to clone.
	 * @returns {ArrayBuffer} Returns the cloned array buffer.
	 */
	function bufferClone(buffer) {
	  var result = new ArrayBuffer(buffer.byteLength),
	      view = new Uint8Array(result);

	  view.set(new Uint8Array(buffer));
	  return result;
	}

	module.exports = bufferClone;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 2534 */
[7150, 108],
/* 2535 */
[7151, 108],
/* 2536 */
/***/ function(module, exports, __webpack_require__) {

	var baseCompareAscending = __webpack_require__(2521);

	/**
	 * Used by `_.sortBy` to compare transformed elements of a collection and stable
	 * sort them in ascending order.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @returns {number} Returns the sort order indicator for `object`.
	 */
	function compareAscending(object, other) {
	  return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
	}

	module.exports = compareAscending;


/***/ },
/* 2537 */
[7153, 750, 180, 181],
/* 2538 */
[7154, 181],
/* 2539 */
[7155, 2516, 518],
/* 2540 */
[7156, 1323],
/* 2541 */
[7157, 427, 105],
/* 2542 */
[7158, 2518],
/* 2543 */
/***/ function(module, exports) {

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    stringTag = '[object String]';

	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag(object, other, tag) {
	  switch (tag) {
	    case boolTag:
	    case dateTag:
	      // Coerce dates and booleans to numbers, dates to milliseconds and booleans
	      // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
	      return +object == +other;

	    case errorTag:
	      return object.name == other.name && object.message == other.message;

	    case numberTag:
	      // Treat `NaN` vs. `NaN` as equal.
	      return (object != +object)
	        ? other != +other
	        : object == +other;

	    case regexpTag:
	    case stringTag:
	      // Coerce regexes to strings and treat strings primitives and string
	      // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
	      return object == (other + '');
	  }
	  return false;
	}

	module.exports = equalByTag;


/***/ },
/* 2544 */
[7159, 286],
/* 2545 */
/***/ function(module, exports) {

	/** Used to escape characters for inclusion in compiled regexes. */
	var regexpEscapes = {
	  '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',
	  '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',
	  'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',
	  'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',
	  'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'
	};

	/** Used to escape characters for inclusion in compiled string literals. */
	var stringEscapes = {
	  '\\': '\\',
	  "'": "'",
	  '\n': 'n',
	  '\r': 'r',
	  '\u2028': 'u2028',
	  '\u2029': 'u2029'
	};

	/**
	 * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.
	 *
	 * @private
	 * @param {string} chr The matched character to escape.
	 * @param {string} leadingChar The capture group for a leading character.
	 * @param {string} whitespaceChar The capture group for a whitespace character.
	 * @returns {string} Returns the escaped character.
	 */
	function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
	  if (leadingChar) {
	    chr = regexpEscapes[chr];
	  } else if (whitespaceChar) {
	    chr = stringEscapes[chr];
	  }
	  return '\\' + chr;
	}

	module.exports = escapeRegExpChar;


/***/ },
/* 2546 */
[7161, 1337, 2557],
/* 2547 */
/***/ function(module, exports) {

	/**
	 * Gets the index at which the first occurrence of `NaN` is found in `array`.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {number} fromIndex The index to search from.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	 */
	function indexOfNaN(array, fromIndex, fromRight) {
	  var length = array.length,
	      index = fromIndex + (fromRight ? 0 : -1);

	  while ((fromRight ? index-- : ++index < length)) {
	    var other = array[index];
	    if (other !== other) {
	      return index;
	    }
	  }
	  return -1;
	}

	module.exports = indexOfNaN;


/***/ },
/* 2548 */
/***/ function(module, exports) {

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Initializes an array clone.
	 *
	 * @private
	 * @param {Array} array The array to clone.
	 * @returns {Array} Returns the initialized clone.
	 */
	function initCloneArray(array) {
	  var length = array.length,
	      result = new array.constructor(length);

	  // Add array properties assigned by `RegExp#exec`.
	  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	    result.index = array.index;
	    result.input = array.input;
	  }
	  return result;
	}

	module.exports = initCloneArray;


/***/ },
/* 2549 */
[7163, 2533],
/* 2550 */
/***/ function(module, exports) {

	/**
	 * Initializes an object clone.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneObject(object) {
	  var Ctor = object.constructor;
	  if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
	    Ctor = Object;
	  }
	  return new Ctor;
	}

	module.exports = initCloneObject;


/***/ },
/* 2551 */
[7168, 429, 105, 519, 180, 756],
/* 2552 */
/***/ function(module, exports) {

	/**
	 * An implementation of `_.uniq` optimized for sorted arrays without support
	 * for callback shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} [iteratee] The function invoked per iteration.
	 * @returns {Array} Returns the new duplicate free array.
	 */
	function sortedUniq(array, iteratee) {
	  var seen,
	      index = -1,
	      length = array.length,
	      resIndex = -1,
	      result = [];

	  while (++index < length) {
	    var value = array[index],
	        computed = iteratee ? iteratee(value, index, array) : value;

	    if (!index || seen !== computed) {
	      seen = computed;
	      result[++resIndex] = value;
	    }
	  }
	  return result;
	}

	module.exports = sortedUniq;


/***/ },
/* 2553 */
[7176, 1340, 154],
/* 2554 */
/***/ function(module, exports, __webpack_require__) {

	var baseCopy = __webpack_require__(1327),
	    keysIn = __webpack_require__(756);

	/**
	 * Converts `value` to a plain object flattening inherited enumerable
	 * properties of `value` to own properties of the plain object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {Object} Returns the converted plain object.
	 * @example
	 *
	 * function Foo() {
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.assign({ 'a': 1 }, new Foo);
	 * // => { 'a': 1, 'b': 2 }
	 *
	 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	 * // => { 'a': 1, 'b': 2, 'c': 3 }
	 */
	function toPlainObject(value) {
	  return baseCopy(value, keysIn(value));
	}

	module.exports = toPlainObject;


/***/ },
/* 2555 */
[7184, 748, 1335, 429, 105, 519, 751, 180, 1322, 752],
/* 2556 */
/***/ function(module, exports, __webpack_require__) {

	var baseMerge = __webpack_require__(2527),
	    createAssigner = __webpack_require__(1336);

	/**
	 * Recursively merges own enumerable properties of the source object(s), that
	 * don't resolve to `undefined` into the destination object. Subsequent sources
	 * overwrite property assignments of previous sources. If `customizer` is
	 * provided it's invoked to produce the merged values of the destination and
	 * source properties. If `customizer` returns `undefined` merging is handled
	 * by the method instead. The `customizer` is bound to `thisArg` and invoked
	 * with five arguments: (objectValue, sourceValue, key, object, source).
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @param {*} [thisArg] The `this` binding of `customizer`.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var users = {
	 *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
	 * };
	 *
	 * var ages = {
	 *   'data': [{ 'age': 36 }, { 'age': 40 }]
	 * };
	 *
	 * _.merge(users, ages);
	 * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
	 *
	 * // using a customizer callback
	 * var object = {
	 *   'fruits': ['apple'],
	 *   'vegetables': ['beet']
	 * };
	 *
	 * var other = {
	 *   'fruits': ['banana'],
	 *   'vegetables': ['carrot']
	 * };
	 *
	 * _.merge(object, other, function(a, b) {
	 *   if (_.isArray(a)) {
	 *     return a.concat(b);
	 *   }
	 * });
	 * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
	 */
	var merge = createAssigner(baseMerge);

	module.exports = merge;


/***/ },
/* 2557 */
[7187, 286, 181],
/* 2558 */
[7188, 2532, 286],
/* 2559 */
/***/ function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(749),
	    escapeRegExpChar = __webpack_require__(2545);

	/**
	 * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)
	 * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
	 */
	var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
	    reHasRegExpChars = RegExp(reRegExpChars.source);

	/**
	 * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
	 * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to escape.
	 * @returns {string} Returns the escaped string.
	 * @example
	 *
	 * _.escapeRegExp('[lodash](https://lodash.com/)');
	 * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
	 */
	function escapeRegExp(string) {
	  string = baseToString(string);
	  return (string && reHasRegExpChars.test(string))
	    ? string.replace(reRegExpChars, escapeRegExpChar)
	    : (string || '(?:)');
	}

	module.exports = escapeRegExp;


/***/ },
/* 2560 */
/***/ function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(749);

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMin = Math.min;

	/**
	 * Checks if `string` starts with the given target string.
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to search.
	 * @param {string} [target] The string to search for.
	 * @param {number} [position=0] The position to search from.
	 * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
	 * @example
	 *
	 * _.startsWith('abc', 'a');
	 * // => true
	 *
	 * _.startsWith('abc', 'b');
	 * // => false
	 *
	 * _.startsWith('abc', 'b', 1);
	 * // => true
	 */
	function startsWith(string, target, position) {
	  string = baseToString(string);
	  position = position == null
	    ? 0
	    : nativeMin(position < 0 ? 0 : (+position || 0), string.length);

	  return string.lastIndexOf(target, position) == position;
	}

	module.exports = startsWith;


/***/ },
/* 2561 */
[7189, 1334, 2529, 751],
/* 2562 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = minimatch
	minimatch.Minimatch = Minimatch

	var path = { sep: '/' }
	try {
	  path = __webpack_require__(175)
	} catch (er) {}

	var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}
	var expand = __webpack_require__(2563)

	// any single thing other than /
	// don't need to escape / when using new RegExp()
	var qmark = '[^/]'

	// * => any number of characters
	var star = qmark + '*?'

	// ** when dots are allowed.  Anything goes, except .. and .
	// not (^ or / followed by one or two dots followed by $ or /),
	// followed by anything, any number of times.
	var twoStarDot = '(?:(?!(?:\\\/|^)(?:\\.{1,2})($|\\\/)).)*?'

	// not a ^ or / followed by a dot,
	// followed by anything, any number of times.
	var twoStarNoDot = '(?:(?!(?:\\\/|^)\\.).)*?'

	// characters that need to be escaped in RegExp.
	var reSpecials = charSet('().*{}+?[]^$\\!')

	// "abc" -> { a:true, b:true, c:true }
	function charSet (s) {
	  return s.split('').reduce(function (set, c) {
	    set[c] = true
	    return set
	  }, {})
	}

	// normalizes slashes.
	var slashSplit = /\/+/

	minimatch.filter = filter
	function filter (pattern, options) {
	  options = options || {}
	  return function (p, i, list) {
	    return minimatch(p, pattern, options)
	  }
	}

	function ext (a, b) {
	  a = a || {}
	  b = b || {}
	  var t = {}
	  Object.keys(b).forEach(function (k) {
	    t[k] = b[k]
	  })
	  Object.keys(a).forEach(function (k) {
	    t[k] = a[k]
	  })
	  return t
	}

	minimatch.defaults = function (def) {
	  if (!def || !Object.keys(def).length) return minimatch

	  var orig = minimatch

	  var m = function minimatch (p, pattern, options) {
	    return orig.minimatch(p, pattern, ext(def, options))
	  }

	  m.Minimatch = function Minimatch (pattern, options) {
	    return new orig.Minimatch(pattern, ext(def, options))
	  }

	  return m
	}

	Minimatch.defaults = function (def) {
	  if (!def || !Object.keys(def).length) return Minimatch
	  return minimatch.defaults(def).Minimatch
	}

	function minimatch (p, pattern, options) {
	  if (typeof pattern !== 'string') {
	    throw new TypeError('glob pattern string required')
	  }

	  if (!options) options = {}

	  // shortcut: comments match nothing.
	  if (!options.nocomment && pattern.charAt(0) === '#') {
	    return false
	  }

	  // "" only matches ""
	  if (pattern.trim() === '') return p === ''

	  return new Minimatch(pattern, options).match(p)
	}

	function Minimatch (pattern, options) {
	  if (!(this instanceof Minimatch)) {
	    return new Minimatch(pattern, options)
	  }

	  if (typeof pattern !== 'string') {
	    throw new TypeError('glob pattern string required')
	  }

	  if (!options) options = {}
	  pattern = pattern.trim()

	  // windows support: need to use /, not \
	  if (path.sep !== '/') {
	    pattern = pattern.split(path.sep).join('/')
	  }

	  this.options = options
	  this.set = []
	  this.pattern = pattern
	  this.regexp = null
	  this.negate = false
	  this.comment = false
	  this.empty = false

	  // make the set of regexps etc.
	  this.make()
	}

	Minimatch.prototype.debug = function () {}

	Minimatch.prototype.make = make
	function make () {
	  // don't do it more than once.
	  if (this._made) return

	  var pattern = this.pattern
	  var options = this.options

	  // empty patterns and comments match nothing.
	  if (!options.nocomment && pattern.charAt(0) === '#') {
	    this.comment = true
	    return
	  }
	  if (!pattern) {
	    this.empty = true
	    return
	  }

	  // step 1: figure out negation, etc.
	  this.parseNegate()

	  // step 2: expand braces
	  var set = this.globSet = this.braceExpand()

	  if (options.debug) this.debug = console.error

	  this.debug(this.pattern, set)

	  // step 3: now we have a set, so turn each one into a series of path-portion
	  // matching patterns.
	  // These will be regexps, except in the case of "**", which is
	  // set to the GLOBSTAR object for globstar behavior,
	  // and will not contain any / characters
	  set = this.globParts = set.map(function (s) {
	    return s.split(slashSplit)
	  })

	  this.debug(this.pattern, set)

	  // glob --> regexps
	  set = set.map(function (s, si, set) {
	    return s.map(this.parse, this)
	  }, this)

	  this.debug(this.pattern, set)

	  // filter out everything that didn't compile properly.
	  set = set.filter(function (s) {
	    return s.indexOf(false) === -1
	  })

	  this.debug(this.pattern, set)

	  this.set = set
	}

	Minimatch.prototype.parseNegate = parseNegate
	function parseNegate () {
	  var pattern = this.pattern
	  var negate = false
	  var options = this.options
	  var negateOffset = 0

	  if (options.nonegate) return

	  for (var i = 0, l = pattern.length
	    ; i < l && pattern.charAt(i) === '!'
	    ; i++) {
	    negate = !negate
	    negateOffset++
	  }

	  if (negateOffset) this.pattern = pattern.substr(negateOffset)
	  this.negate = negate
	}

	// Brace expansion:
	// a{b,c}d -> abd acd
	// a{b,}c -> abc ac
	// a{0..3}d -> a0d a1d a2d a3d
	// a{b,c{d,e}f}g -> abg acdfg acefg
	// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg
	//
	// Invalid sets are not expanded.
	// a{2..}b -> a{2..}b
	// a{b}c -> a{b}c
	minimatch.braceExpand = function (pattern, options) {
	  return braceExpand(pattern, options)
	}

	Minimatch.prototype.braceExpand = braceExpand

	function braceExpand (pattern, options) {
	  if (!options) {
	    if (this instanceof Minimatch) {
	      options = this.options
	    } else {
	      options = {}
	    }
	  }

	  pattern = typeof pattern === 'undefined'
	    ? this.pattern : pattern

	  if (typeof pattern === 'undefined') {
	    throw new Error('undefined pattern')
	  }

	  if (options.nobrace ||
	    !pattern.match(/\{.*\}/)) {
	    // shortcut. no need to expand.
	    return [pattern]
	  }

	  return expand(pattern)
	}

	// parse a component of the expanded set.
	// At this point, no pattern may contain "/" in it
	// so we're going to return a 2d array, where each entry is the full
	// pattern, split on '/', and then turned into a regular expression.
	// A regexp is made at the end which joins each array with an
	// escaped /, and another full one which joins each regexp with |.
	//
	// Following the lead of Bash 4.1, note that "**" only has special meaning
	// when it is the *only* thing in a path portion.  Otherwise, any series
	// of * is equivalent to a single *.  Globstar behavior is enabled by
	// default, and can be disabled by setting options.noglobstar.
	Minimatch.prototype.parse = parse
	var SUBPARSE = {}
	function parse (pattern, isSub) {
	  var options = this.options

	  // shortcuts
	  if (!options.noglobstar && pattern === '**') return GLOBSTAR
	  if (pattern === '') return ''

	  var re = ''
	  var hasMagic = !!options.nocase
	  var escaping = false
	  // ? => one single character
	  var patternListStack = []
	  var negativeLists = []
	  var plType
	  var stateChar
	  var inClass = false
	  var reClassStart = -1
	  var classStart = -1
	  // . and .. never match anything that doesn't start with .,
	  // even when options.dot is set.
	  var patternStart = pattern.charAt(0) === '.' ? '' // anything
	  // not (start or / followed by . or .. followed by / or end)
	  : options.dot ? '(?!(?:^|\\\/)\\.{1,2}(?:$|\\\/))'
	  : '(?!\\.)'
	  var self = this

	  function clearStateChar () {
	    if (stateChar) {
	      // we had some state-tracking character
	      // that wasn't consumed by this pass.
	      switch (stateChar) {
	        case '*':
	          re += star
	          hasMagic = true
	        break
	        case '?':
	          re += qmark
	          hasMagic = true
	        break
	        default:
	          re += '\\' + stateChar
	        break
	      }
	      self.debug('clearStateChar %j %j', stateChar, re)
	      stateChar = false
	    }
	  }

	  for (var i = 0, len = pattern.length, c
	    ; (i < len) && (c = pattern.charAt(i))
	    ; i++) {
	    this.debug('%s\t%s %s %j', pattern, i, re, c)

	    // skip over any that are escaped.
	    if (escaping && reSpecials[c]) {
	      re += '\\' + c
	      escaping = false
	      continue
	    }

	    switch (c) {
	      case '/':
	        // completely not allowed, even escaped.
	        // Should already be path-split by now.
	        return false

	      case '\\':
	        clearStateChar()
	        escaping = true
	      continue

	      // the various stateChar values
	      // for the "extglob" stuff.
	      case '?':
	      case '*':
	      case '+':
	      case '@':
	      case '!':
	        this.debug('%s\t%s %s %j <-- stateChar', pattern, i, re, c)

	        // all of those are literals inside a class, except that
	        // the glob [!a] means [^a] in regexp
	        if (inClass) {
	          this.debug('  in class')
	          if (c === '!' && i === classStart + 1) c = '^'
	          re += c
	          continue
	        }

	        // if we already have a stateChar, then it means
	        // that there was something like ** or +? in there.
	        // Handle the stateChar, then proceed with this one.
	        self.debug('call clearStateChar %j', stateChar)
	        clearStateChar()
	        stateChar = c
	        // if extglob is disabled, then +(asdf|foo) isn't a thing.
	        // just clear the statechar *now*, rather than even diving into
	        // the patternList stuff.
	        if (options.noext) clearStateChar()
	      continue

	      case '(':
	        if (inClass) {
	          re += '('
	          continue
	        }

	        if (!stateChar) {
	          re += '\\('
	          continue
	        }

	        plType = stateChar
	        patternListStack.push({
	          type: plType,
	          start: i - 1,
	          reStart: re.length
	        })
	        // negation is (?:(?!js)[^/]*)
	        re += stateChar === '!' ? '(?:(?!(?:' : '(?:'
	        this.debug('plType %j %j', stateChar, re)
	        stateChar = false
	      continue

	      case ')':
	        if (inClass || !patternListStack.length) {
	          re += '\\)'
	          continue
	        }

	        clearStateChar()
	        hasMagic = true
	        re += ')'
	        var pl = patternListStack.pop()
	        plType = pl.type
	        // negation is (?:(?!js)[^/]*)
	        // The others are (?:<pattern>)<type>
	        switch (plType) {
	          case '!':
	            negativeLists.push(pl)
	            re += ')[^/]*?)'
	            pl.reEnd = re.length
	            break
	          case '?':
	          case '+':
	          case '*':
	            re += plType
	            break
	          case '@': break // the default anyway
	        }
	      continue

	      case '|':
	        if (inClass || !patternListStack.length || escaping) {
	          re += '\\|'
	          escaping = false
	          continue
	        }

	        clearStateChar()
	        re += '|'
	      continue

	      // these are mostly the same in regexp and glob
	      case '[':
	        // swallow any state-tracking char before the [
	        clearStateChar()

	        if (inClass) {
	          re += '\\' + c
	          continue
	        }

	        inClass = true
	        classStart = i
	        reClassStart = re.length
	        re += c
	      continue

	      case ']':
	        //  a right bracket shall lose its special
	        //  meaning and represent itself in
	        //  a bracket expression if it occurs
	        //  first in the list.  -- POSIX.2 2.8.3.2
	        if (i === classStart + 1 || !inClass) {
	          re += '\\' + c
	          escaping = false
	          continue
	        }

	        // handle the case where we left a class open.
	        // "[z-a]" is valid, equivalent to "\[z-a\]"
	        if (inClass) {
	          // split where the last [ was, make sure we don't have
	          // an invalid re. if so, re-walk the contents of the
	          // would-be class to re-translate any characters that
	          // were passed through as-is
	          // TODO: It would probably be faster to determine this
	          // without a try/catch and a new RegExp, but it's tricky
	          // to do safely.  For now, this is safe and works.
	          var cs = pattern.substring(classStart + 1, i)
	          try {
	            RegExp('[' + cs + ']')
	          } catch (er) {
	            // not a valid class!
	            var sp = this.parse(cs, SUBPARSE)
	            re = re.substr(0, reClassStart) + '\\[' + sp[0] + '\\]'
	            hasMagic = hasMagic || sp[1]
	            inClass = false
	            continue
	          }
	        }

	        // finish up the class.
	        hasMagic = true
	        inClass = false
	        re += c
	      continue

	      default:
	        // swallow any state char that wasn't consumed
	        clearStateChar()

	        if (escaping) {
	          // no need
	          escaping = false
	        } else if (reSpecials[c]
	          && !(c === '^' && inClass)) {
	          re += '\\'
	        }

	        re += c

	    } // switch
	  } // for

	  // handle the case where we left a class open.
	  // "[abc" is valid, equivalent to "\[abc"
	  if (inClass) {
	    // split where the last [ was, and escape it
	    // this is a huge pita.  We now have to re-walk
	    // the contents of the would-be class to re-translate
	    // any characters that were passed through as-is
	    cs = pattern.substr(classStart + 1)
	    sp = this.parse(cs, SUBPARSE)
	    re = re.substr(0, reClassStart) + '\\[' + sp[0]
	    hasMagic = hasMagic || sp[1]
	  }

	  // handle the case where we had a +( thing at the *end*
	  // of the pattern.
	  // each pattern list stack adds 3 chars, and we need to go through
	  // and escape any | chars that were passed through as-is for the regexp.
	  // Go through and escape them, taking care not to double-escape any
	  // | chars that were already escaped.
	  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
	    var tail = re.slice(pl.reStart + 3)
	    // maybe some even number of \, then maybe 1 \, followed by a |
	    tail = tail.replace(/((?:\\{2})*)(\\?)\|/g, function (_, $1, $2) {
	      if (!$2) {
	        // the | isn't already escaped, so escape it.
	        $2 = '\\'
	      }

	      // need to escape all those slashes *again*, without escaping the
	      // one that we need for escaping the | character.  As it works out,
	      // escaping an even number of slashes can be done by simply repeating
	      // it exactly after itself.  That's why this trick works.
	      //
	      // I am sorry that you have to see this.
	      return $1 + $1 + $2 + '|'
	    })

	    this.debug('tail=%j\n   %s', tail, tail)
	    var t = pl.type === '*' ? star
	      : pl.type === '?' ? qmark
	      : '\\' + pl.type

	    hasMagic = true
	    re = re.slice(0, pl.reStart) + t + '\\(' + tail
	  }

	  // handle trailing things that only matter at the very end.
	  clearStateChar()
	  if (escaping) {
	    // trailing \\
	    re += '\\\\'
	  }

	  // only need to apply the nodot start if the re starts with
	  // something that could conceivably capture a dot
	  var addPatternStart = false
	  switch (re.charAt(0)) {
	    case '.':
	    case '[':
	    case '(': addPatternStart = true
	  }

	  // Hack to work around lack of negative lookbehind in JS
	  // A pattern like: *.!(x).!(y|z) needs to ensure that a name
	  // like 'a.xyz.yz' doesn't match.  So, the first negative
	  // lookahead, has to look ALL the way ahead, to the end of
	  // the pattern.
	  for (var n = negativeLists.length - 1; n > -1; n--) {
	    var nl = negativeLists[n]

	    var nlBefore = re.slice(0, nl.reStart)
	    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8)
	    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd)
	    var nlAfter = re.slice(nl.reEnd)

	    nlLast += nlAfter

	    // Handle nested stuff like *(*.js|!(*.json)), where open parens
	    // mean that we should *not* include the ) in the bit that is considered
	    // "after" the negated section.
	    var openParensBefore = nlBefore.split('(').length - 1
	    var cleanAfter = nlAfter
	    for (i = 0; i < openParensBefore; i++) {
	      cleanAfter = cleanAfter.replace(/\)[+*?]?/, '')
	    }
	    nlAfter = cleanAfter

	    var dollar = ''
	    if (nlAfter === '' && isSub !== SUBPARSE) {
	      dollar = '$'
	    }
	    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast
	    re = newRe
	  }

	  // if the re is not "" at this point, then we need to make sure
	  // it doesn't match against an empty path part.
	  // Otherwise a/* will match a/, which it should not.
	  if (re !== '' && hasMagic) {
	    re = '(?=.)' + re
	  }

	  if (addPatternStart) {
	    re = patternStart + re
	  }

	  // parsing just a piece of a larger pattern.
	  if (isSub === SUBPARSE) {
	    return [re, hasMagic]
	  }

	  // skip the regexp for non-magical patterns
	  // unescape anything in it, though, so that it'll be
	  // an exact match against a file etc.
	  if (!hasMagic) {
	    return globUnescape(pattern)
	  }

	  var flags = options.nocase ? 'i' : ''
	  var regExp = new RegExp('^' + re + '$', flags)

	  regExp._glob = pattern
	  regExp._src = re

	  return regExp
	}

	minimatch.makeRe = function (pattern, options) {
	  return new Minimatch(pattern, options || {}).makeRe()
	}

	Minimatch.prototype.makeRe = makeRe
	function makeRe () {
	  if (this.regexp || this.regexp === false) return this.regexp

	  // at this point, this.set is a 2d array of partial
	  // pattern strings, or "**".
	  //
	  // It's better to use .match().  This function shouldn't
	  // be used, really, but it's pretty convenient sometimes,
	  // when you just want to work with a regex.
	  var set = this.set

	  if (!set.length) {
	    this.regexp = false
	    return this.regexp
	  }
	  var options = this.options

	  var twoStar = options.noglobstar ? star
	    : options.dot ? twoStarDot
	    : twoStarNoDot
	  var flags = options.nocase ? 'i' : ''

	  var re = set.map(function (pattern) {
	    return pattern.map(function (p) {
	      return (p === GLOBSTAR) ? twoStar
	      : (typeof p === 'string') ? regExpEscape(p)
	      : p._src
	    }).join('\\\/')
	  }).join('|')

	  // must match entire pattern
	  // ending in a * or ** will make it less strict.
	  re = '^(?:' + re + ')$'

	  // can match anything, as long as it's not this.
	  if (this.negate) re = '^(?!' + re + ').*$'

	  try {
	    this.regexp = new RegExp(re, flags)
	  } catch (ex) {
	    this.regexp = false
	  }
	  return this.regexp
	}

	minimatch.match = function (list, pattern, options) {
	  options = options || {}
	  var mm = new Minimatch(pattern, options)
	  list = list.filter(function (f) {
	    return mm.match(f)
	  })
	  if (mm.options.nonull && !list.length) {
	    list.push(pattern)
	  }
	  return list
	}

	Minimatch.prototype.match = match
	function match (f, partial) {
	  this.debug('match', f, this.pattern)
	  // short-circuit in the case of busted things.
	  // comments, etc.
	  if (this.comment) return false
	  if (this.empty) return f === ''

	  if (f === '/' && partial) return true

	  var options = this.options

	  // windows: need to use /, not \
	  if (path.sep !== '/') {
	    f = f.split(path.sep).join('/')
	  }

	  // treat the test path as a set of pathparts.
	  f = f.split(slashSplit)
	  this.debug(this.pattern, 'split', f)

	  // just ONE of the pattern sets in this.set needs to match
	  // in order for it to be valid.  If negating, then just one
	  // match means that we have failed.
	  // Either way, return on the first hit.

	  var set = this.set
	  this.debug(this.pattern, 'set', set)

	  // Find the basename of the path by looking for the last non-empty segment
	  var filename
	  var i
	  for (i = f.length - 1; i >= 0; i--) {
	    filename = f[i]
	    if (filename) break
	  }

	  for (i = 0; i < set.length; i++) {
	    var pattern = set[i]
	    var file = f
	    if (options.matchBase && pattern.length === 1) {
	      file = [filename]
	    }
	    var hit = this.matchOne(file, pattern, partial)
	    if (hit) {
	      if (options.flipNegate) return true
	      return !this.negate
	    }
	  }

	  // didn't get any hits.  this is success if it's a negative
	  // pattern, failure otherwise.
	  if (options.flipNegate) return false
	  return this.negate
	}

	// set partial to true to test if, for example,
	// "/a/b" matches the start of "/*/b/*/d"
	// Partial means, if you run out of file before you run
	// out of pattern, then that's fine, as long as all
	// the parts match.
	Minimatch.prototype.matchOne = function (file, pattern, partial) {
	  var options = this.options

	  this.debug('matchOne',
	    { 'this': this, file: file, pattern: pattern })

	  this.debug('matchOne', file.length, pattern.length)

	  for (var fi = 0,
	      pi = 0,
	      fl = file.length,
	      pl = pattern.length
	      ; (fi < fl) && (pi < pl)
	      ; fi++, pi++) {
	    this.debug('matchOne loop')
	    var p = pattern[pi]
	    var f = file[fi]

	    this.debug(pattern, p, f)

	    // should be impossible.
	    // some invalid regexp stuff in the set.
	    if (p === false) return false

	    if (p === GLOBSTAR) {
	      this.debug('GLOBSTAR', [pattern, p, f])

	      // "**"
	      // a/**/b/**/c would match the following:
	      // a/b/x/y/z/c
	      // a/x/y/z/b/c
	      // a/b/x/b/x/c
	      // a/b/c
	      // To do this, take the rest of the pattern after
	      // the **, and see if it would match the file remainder.
	      // If so, return success.
	      // If not, the ** "swallows" a segment, and try again.
	      // This is recursively awful.
	      //
	      // a/**/b/**/c matching a/b/x/y/z/c
	      // - a matches a
	      // - doublestar
	      //   - matchOne(b/x/y/z/c, b/**/c)
	      //     - b matches b
	      //     - doublestar
	      //       - matchOne(x/y/z/c, c) -> no
	      //       - matchOne(y/z/c, c) -> no
	      //       - matchOne(z/c, c) -> no
	      //       - matchOne(c, c) yes, hit
	      var fr = fi
	      var pr = pi + 1
	      if (pr === pl) {
	        this.debug('** at the end')
	        // a ** at the end will just swallow the rest.
	        // We have found a match.
	        // however, it will not swallow /.x, unless
	        // options.dot is set.
	        // . and .. are *never* matched by **, for explosively
	        // exponential reasons.
	        for (; fi < fl; fi++) {
	          if (file[fi] === '.' || file[fi] === '..' ||
	            (!options.dot && file[fi].charAt(0) === '.')) return false
	        }
	        return true
	      }

	      // ok, let's see if we can swallow whatever we can.
	      while (fr < fl) {
	        var swallowee = file[fr]

	        this.debug('\nglobstar while', file, fr, pattern, pr, swallowee)

	        // XXX remove this slice.  Just pass the start index.
	        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
	          this.debug('globstar found match!', fr, fl, swallowee)
	          // found a match.
	          return true
	        } else {
	          // can't swallow "." or ".." ever.
	          // can only swallow ".foo" when explicitly asked.
	          if (swallowee === '.' || swallowee === '..' ||
	            (!options.dot && swallowee.charAt(0) === '.')) {
	            this.debug('dot detected!', file, fr, pattern, pr)
	            break
	          }

	          // ** swallows a segment, and continue.
	          this.debug('globstar swallow a segment, and continue')
	          fr++
	        }
	      }

	      // no match was found.
	      // However, in partial mode, we can't say this is necessarily over.
	      // If there's more *pattern* left, then
	      if (partial) {
	        // ran out of file
	        this.debug('\n>>> no match, partial?', file, fr, pattern, pr)
	        if (fr === fl) return true
	      }
	      return false
	    }

	    // something other than **
	    // non-magic patterns just have to match exactly
	    // patterns with magic have been turned into regexps.
	    var hit
	    if (typeof p === 'string') {
	      if (options.nocase) {
	        hit = f.toLowerCase() === p.toLowerCase()
	      } else {
	        hit = f === p
	      }
	      this.debug('string match', p, f, hit)
	    } else {
	      hit = f.match(p)
	      this.debug('pattern match', p, f, hit)
	    }

	    if (!hit) return false
	  }

	  // Note: ending in / means that we'll get a final ""
	  // at the end of the pattern.  This can only match a
	  // corresponding "" at the end of the file.
	  // If the file ends in /, then it can only match a
	  // a pattern that ends in /, unless the pattern just
	  // doesn't have any more for it. But, a/b/ should *not*
	  // match "a/b/*", even though "" matches against the
	  // [^/]*? pattern, except in partial mode, where it might
	  // simply not be reached yet.
	  // However, a/b/ should still satisfy a/*

	  // now either we fell off the end of the pattern, or we're done.
	  if (fi === fl && pi === pl) {
	    // ran out of pattern and filename at the same time.
	    // an exact hit!
	    return true
	  } else if (fi === fl) {
	    // ran out of file, but still had pattern left.
	    // this is ok if we're doing the match as part of
	    // a glob fs traversal.
	    return partial
	  } else if (pi === pl) {
	    // ran out of pattern, still have file left.
	    // this is only acceptable if we're on the very last
	    // empty segment of a file with a trailing slash.
	    // a/* should match a/b/
	    var emptyFileEnd = (fi === fl - 1) && (file[fi] === '')
	    return emptyFileEnd
	  }

	  // should be unreachable.
	  throw new Error('wtf?')
	}

	// replace stuff like \* with *
	function globUnescape (s) {
	  return s.replace(/\\(.)/g, '$1')
	}

	function regExpEscape (s) {
	  return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
	}


/***/ },
/* 2563 */
/***/ function(module, exports, __webpack_require__) {

	var concatMap = __webpack_require__(2565);
	var balanced = __webpack_require__(2564);

	module.exports = expandTop;

	var escSlash = '\0SLASH'+Math.random()+'\0';
	var escOpen = '\0OPEN'+Math.random()+'\0';
	var escClose = '\0CLOSE'+Math.random()+'\0';
	var escComma = '\0COMMA'+Math.random()+'\0';
	var escPeriod = '\0PERIOD'+Math.random()+'\0';

	function numeric(str) {
	  return parseInt(str, 10) == str
	    ? parseInt(str, 10)
	    : str.charCodeAt(0);
	}

	function escapeBraces(str) {
	  return str.split('\\\\').join(escSlash)
	            .split('\\{').join(escOpen)
	            .split('\\}').join(escClose)
	            .split('\\,').join(escComma)
	            .split('\\.').join(escPeriod);
	}

	function unescapeBraces(str) {
	  return str.split(escSlash).join('\\')
	            .split(escOpen).join('{')
	            .split(escClose).join('}')
	            .split(escComma).join(',')
	            .split(escPeriod).join('.');
	}


	// Basically just str.split(","), but handling cases
	// where we have nested braced sections, which should be
	// treated as individual members, like {a,{b,c},d}
	function parseCommaParts(str) {
	  if (!str)
	    return [''];

	  var parts = [];
	  var m = balanced('{', '}', str);

	  if (!m)
	    return str.split(',');

	  var pre = m.pre;
	  var body = m.body;
	  var post = m.post;
	  var p = pre.split(',');

	  p[p.length-1] += '{' + body + '}';
	  var postParts = parseCommaParts(post);
	  if (post.length) {
	    p[p.length-1] += postParts.shift();
	    p.push.apply(p, postParts);
	  }

	  parts.push.apply(parts, p);

	  return parts;
	}

	function expandTop(str) {
	  if (!str)
	    return [];

	  return expand(escapeBraces(str), true).map(unescapeBraces);
	}

	function identity(e) {
	  return e;
	}

	function embrace(str) {
	  return '{' + str + '}';
	}
	function isPadded(el) {
	  return /^-?0\d/.test(el);
	}

	function lte(i, y) {
	  return i <= y;
	}
	function gte(i, y) {
	  return i >= y;
	}

	function expand(str, isTop) {
	  var expansions = [];

	  var m = balanced('{', '}', str);
	  if (!m || /\$$/.test(m.pre)) return [str];

	  var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
	  var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
	  var isSequence = isNumericSequence || isAlphaSequence;
	  var isOptions = /^(.*,)+(.+)?$/.test(m.body);
	  if (!isSequence && !isOptions) {
	    // {a},b}
	    if (m.post.match(/,.*}/)) {
	      str = m.pre + '{' + m.body + escClose + m.post;
	      return expand(str);
	    }
	    return [str];
	  }

	  var n;
	  if (isSequence) {
	    n = m.body.split(/\.\./);
	  } else {
	    n = parseCommaParts(m.body);
	    if (n.length === 1) {
	      // x{{a,b}}y ==> x{a}y x{b}y
	      n = expand(n[0], false).map(embrace);
	      if (n.length === 1) {
	        var post = m.post.length
	          ? expand(m.post, false)
	          : [''];
	        return post.map(function(p) {
	          return m.pre + n[0] + p;
	        });
	      }
	    }
	  }

	  // at this point, n is the parts, and we know it's not a comma set
	  // with a single entry.

	  // no need to expand pre, since it is guaranteed to be free of brace-sets
	  var pre = m.pre;
	  var post = m.post.length
	    ? expand(m.post, false)
	    : [''];

	  var N;

	  if (isSequence) {
	    var x = numeric(n[0]);
	    var y = numeric(n[1]);
	    var width = Math.max(n[0].length, n[1].length)
	    var incr = n.length == 3
	      ? Math.abs(numeric(n[2]))
	      : 1;
	    var test = lte;
	    var reverse = y < x;
	    if (reverse) {
	      incr *= -1;
	      test = gte;
	    }
	    var pad = n.some(isPadded);

	    N = [];

	    for (var i = x; test(i, y); i += incr) {
	      var c;
	      if (isAlphaSequence) {
	        c = String.fromCharCode(i);
	        if (c === '\\')
	          c = '';
	      } else {
	        c = String(i);
	        if (pad) {
	          var need = width - c.length;
	          if (need > 0) {
	            var z = new Array(need + 1).join('0');
	            if (i < 0)
	              c = '-' + z + c.slice(1);
	            else
	              c = z + c;
	          }
	        }
	      }
	      N.push(c);
	    }
	  } else {
	    N = concatMap(n, function(el) { return expand(el, false) });
	  }

	  for (var j = 0; j < N.length; j++) {
	    for (var k = 0; k < post.length; k++) {
	      var expansion = pre + N[j] + post[k];
	      if (!isTop || isSequence || expansion)
	        expansions.push(expansion);
	    }
	  }

	  return expansions;
	}



/***/ },
/* 2564 */
/***/ function(module, exports) {

	module.exports = balanced;
	function balanced(a, b, str) {
	  var r = range(a, b, str);

	  return r && {
	    start: r[0],
	    end: r[1],
	    pre: str.slice(0, r[0]),
	    body: str.slice(r[0] + a.length, r[1]),
	    post: str.slice(r[1] + b.length)
	  };
	}

	balanced.range = range;
	function range(a, b, str) {
	  var begs, beg, left, right, result;
	  var ai = str.indexOf(a);
	  var bi = str.indexOf(b, ai + 1);
	  var i = ai;

	  if (ai >= 0 && bi > 0) {
	    begs = [];
	    left = str.length;

	    while (i < str.length && i >= 0 && ! result) {
	      if (i == ai) {
	        begs.push(i);
	        ai = str.indexOf(a, i + 1);
	      } else if (begs.length == 1) {
	        result = [ begs.pop(), bi ];
	      } else {
	        beg = begs.pop();
	        if (beg < left) {
	          left = beg;
	          right = bi;
	        }

	        bi = str.indexOf(b, i + 1);
	      }

	      i = ai < bi && ai >= 0 ? ai : bi;
	    }

	    if (begs.length) {
	      result = [ left, right ];
	    }
	  }

	  return result;
	}


/***/ },
/* 2565 */
/***/ function(module, exports) {

	module.exports = function (xs, fn) {
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        var x = fn(xs[i], i);
	        if (isArray(x)) res.push.apply(res, x);
	        else res.push(x);
	    }
	    return res;
	};

	var isArray = Array.isArray || function (xs) {
	    return Object.prototype.toString.call(xs) === '[object Array]';
	};


/***/ },
/* 2566 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var fs = __webpack_require__(345)

	module.exports = function (pth, cb) {
		var fn = typeof fs.access === 'function' ? fs.access : fs.stat;

		fn(pth, function (err) {
			cb(null, !err);
		});
	};

	module.exports.sync = function (pth) {
		var fn = typeof fs.accessSync === 'function' ? fs.accessSync : fs.statSync;

		try {
			fn(pth);
			return true;
		} catch (err) {
			return false;
		}
	};


/***/ },
/* 2567 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	function posix(path) {
		return path.charAt(0) === '/';
	};

	function win32(path) {
		// https://github.com/joyent/node/blob/b3fcc245fb25539909ef1d5eaa01dbf92e168633/lib/path.js#L56
		var splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
		var result = splitDeviceRe.exec(path);
		var device = result[1] || '';
		var isUnc = !!device && device.charAt(1) !== ':';

		// UNC paths are always absolute
		return !!result[2] || isUnc;
	};

	module.exports = process.platform === 'win32' ? win32 : posix;
	module.exports.posix = posix;
	module.exports.win32 = win32;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 2568 */
/***/ function(module, exports) {

	'use strict';
	module.exports = /^#!.*/;


/***/ },
/* 2569 */
/***/ function(module, exports) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	{
	  var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

	  /**
	   * Encode an integer in the range of 0 to 63 to a single base 64 digit.
	   */
	  exports.encode = function (number) {
	    if (0 <= number && number < intToCharMap.length) {
	      return intToCharMap[number];
	    }
	    throw new TypeError("Must be between 0 and 63: " + number);
	  };

	  /**
	   * Decode a single base 64 character code digit to an integer. Returns -1 on
	   * failure.
	   */
	  exports.decode = function (charCode) {
	    var bigA = 65;     // 'A'
	    var bigZ = 90;     // 'Z'

	    var littleA = 97;  // 'a'
	    var littleZ = 122; // 'z'

	    var zero = 48;     // '0'
	    var nine = 57;     // '9'

	    var plus = 43;     // '+'
	    var slash = 47;    // '/'

	    var littleOffset = 26;
	    var numberOffset = 52;

	    // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
	    if (bigA <= charCode && charCode <= bigZ) {
	      return (charCode - bigA);
	    }

	    // 26 - 51: abcdefghijklmnopqrstuvwxyz
	    if (littleA <= charCode && charCode <= littleZ) {
	      return (charCode - littleA + littleOffset);
	    }

	    // 52 - 61: 0123456789
	    if (zero <= charCode && charCode <= nine) {
	      return (charCode - zero + numberOffset);
	    }

	    // 62: +
	    if (charCode == plus) {
	      return 62;
	    }

	    // 63: /
	    if (charCode == slash) {
	      return 63;
	    }

	    // Invalid base64 digit.
	    return -1;
	  };
	}


/***/ },
/* 2570 */
/***/ function(module, exports) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	{
	  exports.GREATEST_LOWER_BOUND = 1;
	  exports.LEAST_UPPER_BOUND = 2;

	  /**
	   * Recursive implementation of binary search.
	   *
	   * @param aLow Indices here and lower do not contain the needle.
	   * @param aHigh Indices here and higher do not contain the needle.
	   * @param aNeedle The element being searched for.
	   * @param aHaystack The non-empty array being searched.
	   * @param aCompare Function which takes two elements and returns -1, 0, or 1.
	   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	   *     closest element that is smaller than or greater than the one we are
	   *     searching for, respectively, if the exact element cannot be found.
	   */
	  function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
	    // This function terminates when one of the following is true:
	    //
	    //   1. We find the exact element we are looking for.
	    //
	    //   2. We did not find the exact element, but we can return the index of
	    //      the next-closest element.
	    //
	    //   3. We did not find the exact element, and there is no next-closest
	    //      element than the one we are searching for, so we return -1.
	    var mid = Math.floor((aHigh - aLow) / 2) + aLow;
	    var cmp = aCompare(aNeedle, aHaystack[mid], true);
	    if (cmp === 0) {
	      // Found the element we are looking for.
	      return mid;
	    }
	    else if (cmp > 0) {
	      // Our needle is greater than aHaystack[mid].
	      if (aHigh - mid > 1) {
	        // The element is in the upper half.
	        return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
	      }

	      // The exact needle element was not found in this haystack. Determine if
	      // we are in termination case (3) or (2) and return the appropriate thing.
	      if (aBias == exports.LEAST_UPPER_BOUND) {
	        return aHigh < aHaystack.length ? aHigh : -1;
	      } else {
	        return mid;
	      }
	    }
	    else {
	      // Our needle is less than aHaystack[mid].
	      if (mid - aLow > 1) {
	        // The element is in the lower half.
	        return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
	      }

	      // we are in termination case (3) or (2) and return the appropriate thing.
	      if (aBias == exports.LEAST_UPPER_BOUND) {
	        return mid;
	      } else {
	        return aLow < 0 ? -1 : aLow;
	      }
	    }
	  }

	  /**
	   * This is an implementation of binary search which will always try and return
	   * the index of the closest element if there is no exact hit. This is because
	   * mappings between original and generated line/col pairs are single points,
	   * and there is an implicit region between each of them, so a miss just means
	   * that you aren't on the very start of a region.
	   *
	   * @param aNeedle The element you are looking for.
	   * @param aHaystack The array that is being searched.
	   * @param aCompare A function which takes the needle and an element in the
	   *     array and returns -1, 0, or 1 depending on whether the needle is less
	   *     than, equal to, or greater than the element, respectively.
	   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	   *     closest element that is smaller than or greater than the one we are
	   *     searching for, respectively, if the exact element cannot be found.
	   *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
	   */
	  exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
	    if (aHaystack.length === 0) {
	      return -1;
	    }

	    var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
	                                aCompare, aBias || exports.GREATEST_LOWER_BOUND);
	    if (index < 0) {
	      return -1;
	    }

	    // We have found either the exact element, or the next-closest element than
	    // the one we are searching for. However, there may be more than one such
	    // element. Make sure we always return the smallest of these.
	    while (index - 1 >= 0) {
	      if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
	        break;
	      }
	      --index;
	    }

	    return index;
	  };
	}


/***/ },
/* 2571 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2014 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	{
	  var util = __webpack_require__(430);

	  /**
	   * Determine whether mappingB is after mappingA with respect to generated
	   * position.
	   */
	  function generatedPositionAfter(mappingA, mappingB) {
	    // Optimized for most common case
	    var lineA = mappingA.generatedLine;
	    var lineB = mappingB.generatedLine;
	    var columnA = mappingA.generatedColumn;
	    var columnB = mappingB.generatedColumn;
	    return lineB > lineA || lineB == lineA && columnB >= columnA ||
	           util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
	  }

	  /**
	   * A data structure to provide a sorted view of accumulated mappings in a
	   * performance conscious manner. It trades a neglibable overhead in general
	   * case for a large speedup in case of mappings being added in order.
	   */
	  function MappingList() {
	    this._array = [];
	    this._sorted = true;
	    // Serves as infimum
	    this._last = {generatedLine: -1, generatedColumn: 0};
	  }

	  /**
	   * Iterate through internal items. This method takes the same arguments that
	   * `Array.prototype.forEach` takes.
	   *
	   * NOTE: The order of the mappings is NOT guaranteed.
	   */
	  MappingList.prototype.unsortedForEach =
	    function MappingList_forEach(aCallback, aThisArg) {
	      this._array.forEach(aCallback, aThisArg);
	    };

	  /**
	   * Add the given source mapping.
	   *
	   * @param Object aMapping
	   */
	  MappingList.prototype.add = function MappingList_add(aMapping) {
	    if (generatedPositionAfter(this._last, aMapping)) {
	      this._last = aMapping;
	      this._array.push(aMapping);
	    } else {
	      this._sorted = false;
	      this._array.push(aMapping);
	    }
	  };

	  /**
	   * Returns the flat, sorted array of mappings. The mappings are sorted by
	   * generated position.
	   *
	   * WARNING: This method returns internal data without copying, for
	   * performance. The return value must NOT be mutated, and should be treated as
	   * an immutable borrow. If you want to take ownership, you must make your own
	   * copy.
	   */
	  MappingList.prototype.toArray = function MappingList_toArray() {
	    if (!this._sorted) {
	      this._array.sort(util.compareByGeneratedPositionsInflated);
	      this._sorted = true;
	    }
	    return this._array;
	  };

	  exports.MappingList = MappingList;
	}


/***/ },
/* 2572 */
/***/ function(module, exports) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	{
	  // It turns out that some (most?) JavaScript engines don't self-host
	  // `Array.prototype.sort`. This makes sense because C++ will likely remain
	  // faster than JS when doing raw CPU-intensive sorting. However, when using a
	  // custom comparator function, calling back and forth between the VM's C++ and
	  // JIT'd JS is rather slow *and* loses JIT type information, resulting in
	  // worse generated code for the comparator function than would be optimal. In
	  // fact, when sorting with a comparator, these costs outweigh the benefits of
	  // sorting in C++. By using our own JS-implemented Quick Sort (below), we get
	  // a ~3500ms mean speed-up in `bench/bench.html`.

	  /**
	   * Swap the elements indexed by `x` and `y` in the array `ary`.
	   *
	   * @param {Array} ary
	   *        The array.
	   * @param {Number} x
	   *        The index of the first item.
	   * @param {Number} y
	   *        The index of the second item.
	   */
	  function swap(ary, x, y) {
	    var temp = ary[x];
	    ary[x] = ary[y];
	    ary[y] = temp;
	  }

	  /**
	   * Returns a random integer within the range `low .. high` inclusive.
	   *
	   * @param {Number} low
	   *        The lower bound on the range.
	   * @param {Number} high
	   *        The upper bound on the range.
	   */
	  function randomIntInRange(low, high) {
	    return Math.round(low + (Math.random() * (high - low)));
	  }

	  /**
	   * The Quick Sort algorithm.
	   *
	   * @param {Array} ary
	   *        An array to sort.
	   * @param {function} comparator
	   *        Function to use to compare two items.
	   * @param {Number} p
	   *        Start index of the array
	   * @param {Number} r
	   *        End index of the array
	   */
	  function doQuickSort(ary, comparator, p, r) {
	    // If our lower bound is less than our upper bound, we (1) partition the
	    // array into two pieces and (2) recurse on each half. If it is not, this is
	    // the empty array and our base case.

	    if (p < r) {
	      // (1) Partitioning.
	      //
	      // The partitioning chooses a pivot between `p` and `r` and moves all
	      // elements that are less than or equal to the pivot to the before it, and
	      // all the elements that are greater than it after it. The effect is that
	      // once partition is done, the pivot is in the exact place it will be when
	      // the array is put in sorted order, and it will not need to be moved
	      // again. This runs in O(n) time.

	      // Always choose a random pivot so that an input array which is reverse
	      // sorted does not cause O(n^2) running time.
	      var pivotIndex = randomIntInRange(p, r);
	      var i = p - 1;

	      swap(ary, pivotIndex, r);
	      var pivot = ary[r];

	      // Immediately after `j` is incremented in this loop, the following hold
	      // true:
	      //
	      //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
	      //
	      //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
	      for (var j = p; j < r; j++) {
	        if (comparator(ary[j], pivot) <= 0) {
	          i += 1;
	          swap(ary, i, j);
	        }
	      }

	      swap(ary, i + 1, j);
	      var q = i + 1;

	      // (2) Recurse on each half.

	      doQuickSort(ary, comparator, p, q - 1);
	      doQuickSort(ary, comparator, q + 1, r);
	    }
	  }

	  /**
	   * Sort the given array in-place with the given comparator function.
	   *
	   * @param {Array} ary
	   *        An array to sort.
	   * @param {function} comparator
	   *        Function to use to compare two items.
	   */
	  exports.quickSort = function (ary, comparator) {
	    doQuickSort(ary, comparator, 0, ary.length - 1);
	  };
	}


/***/ },
/* 2573 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	{
	  var util = __webpack_require__(430);
	  var binarySearch = __webpack_require__(2570);
	  var ArraySet = __webpack_require__(1347).ArraySet;
	  var base64VLQ = __webpack_require__(1348);
	  var quickSort = __webpack_require__(2572).quickSort;

	  function SourceMapConsumer(aSourceMap) {
	    var sourceMap = aSourceMap;
	    if (typeof aSourceMap === 'string') {
	      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	    }

	    return sourceMap.sections != null
	      ? new IndexedSourceMapConsumer(sourceMap)
	      : new BasicSourceMapConsumer(sourceMap);
	  }

	  SourceMapConsumer.fromSourceMap = function(aSourceMap) {
	    return BasicSourceMapConsumer.fromSourceMap(aSourceMap);
	  }

	  /**
	   * The version of the source mapping spec that we are consuming.
	   */
	  SourceMapConsumer.prototype._version = 3;

	  // `__generatedMappings` and `__originalMappings` are arrays that hold the
	  // parsed mapping coordinates from the source map's "mappings" attribute. They
	  // are lazily instantiated, accessed via the `_generatedMappings` and
	  // `_originalMappings` getters respectively, and we only parse the mappings
	  // and create these arrays once queried for a source location. We jump through
	  // these hoops because there can be many thousands of mappings, and parsing
	  // them is expensive, so we only want to do it if we must.
	  //
	  // Each object in the arrays is of the form:
	  //
	  //     {
	  //       generatedLine: The line number in the generated code,
	  //       generatedColumn: The column number in the generated code,
	  //       source: The path to the original source file that generated this
	  //               chunk of code,
	  //       originalLine: The line number in the original source that
	  //                     corresponds to this chunk of generated code,
	  //       originalColumn: The column number in the original source that
	  //                       corresponds to this chunk of generated code,
	  //       name: The name of the original symbol which generated this chunk of
	  //             code.
	  //     }
	  //
	  // All properties except for `generatedLine` and `generatedColumn` can be
	  // `null`.
	  //
	  // `_generatedMappings` is ordered by the generated positions.
	  //
	  // `_originalMappings` is ordered by the original positions.

	  SourceMapConsumer.prototype.__generatedMappings = null;
	  Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
	    get: function () {
	      if (!this.__generatedMappings) {
	        this._parseMappings(this._mappings, this.sourceRoot);
	      }

	      return this.__generatedMappings;
	    }
	  });

	  SourceMapConsumer.prototype.__originalMappings = null;
	  Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
	    get: function () {
	      if (!this.__originalMappings) {
	        this._parseMappings(this._mappings, this.sourceRoot);
	      }

	      return this.__originalMappings;
	    }
	  });

	  SourceMapConsumer.prototype._charIsMappingSeparator =
	    function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
	      var c = aStr.charAt(index);
	      return c === ";" || c === ",";
	    };

	  /**
	   * Parse the mappings in a string in to a data structure which we can easily
	   * query (the ordered arrays in the `this.__generatedMappings` and
	   * `this.__originalMappings` properties).
	   */
	  SourceMapConsumer.prototype._parseMappings =
	    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	      throw new Error("Subclasses must implement _parseMappings");
	    };

	  SourceMapConsumer.GENERATED_ORDER = 1;
	  SourceMapConsumer.ORIGINAL_ORDER = 2;

	  SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
	  SourceMapConsumer.LEAST_UPPER_BOUND = 2;

	  /**
	   * Iterate over each mapping between an original source/line/column and a
	   * generated line/column in this source map.
	   *
	   * @param Function aCallback
	   *        The function that is called with each mapping.
	   * @param Object aContext
	   *        Optional. If specified, this object will be the value of `this` every
	   *        time that `aCallback` is called.
	   * @param aOrder
	   *        Either `SourceMapConsumer.GENERATED_ORDER` or
	   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
	   *        iterate over the mappings sorted by the generated file's line/column
	   *        order or the original's source/line/column order, respectively. Defaults to
	   *        `SourceMapConsumer.GENERATED_ORDER`.
	   */
	  SourceMapConsumer.prototype.eachMapping =
	    function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
	      var context = aContext || null;
	      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

	      var mappings;
	      switch (order) {
	      case SourceMapConsumer.GENERATED_ORDER:
	        mappings = this._generatedMappings;
	        break;
	      case SourceMapConsumer.ORIGINAL_ORDER:
	        mappings = this._originalMappings;
	        break;
	      default:
	        throw new Error("Unknown order of iteration.");
	      }

	      var sourceRoot = this.sourceRoot;
	      mappings.map(function (mapping) {
	        var source = mapping.source === null ? null : this._sources.at(mapping.source);
	        if (source != null && sourceRoot != null) {
	          source = util.join(sourceRoot, source);
	        }
	        return {
	          source: source,
	          generatedLine: mapping.generatedLine,
	          generatedColumn: mapping.generatedColumn,
	          originalLine: mapping.originalLine,
	          originalColumn: mapping.originalColumn,
	          name: mapping.name === null ? null : this._names.at(mapping.name)
	        };
	      }, this).forEach(aCallback, context);
	    };

	  /**
	   * Returns all generated line and column information for the original source,
	   * line, and column provided. If no column is provided, returns all mappings
	   * corresponding to a either the line we are searching for or the next
	   * closest line that has any mappings. Otherwise, returns all mappings
	   * corresponding to the given line and either the column we are searching for
	   * or the next closest column that has any offsets.
	   *
	   * The only argument is an object with the following properties:
	   *
	   *   - source: The filename of the original source.
	   *   - line: The line number in the original source.
	   *   - column: Optional. the column number in the original source.
	   *
	   * and an array of objects is returned, each with the following properties:
	   *
	   *   - line: The line number in the generated source, or null.
	   *   - column: The column number in the generated source, or null.
	   */
	  SourceMapConsumer.prototype.allGeneratedPositionsFor =
	    function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
	      var line = util.getArg(aArgs, 'line');

	      // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
	      // returns the index of the closest mapping less than the needle. By
	      // setting needle.originalColumn to 0, we thus find the last mapping for
	      // the given line, provided such a mapping exists.
	      var needle = {
	        source: util.getArg(aArgs, 'source'),
	        originalLine: line,
	        originalColumn: util.getArg(aArgs, 'column', 0)
	      };

	      if (this.sourceRoot != null) {
	        needle.source = util.relative(this.sourceRoot, needle.source);
	      }
	      if (!this._sources.has(needle.source)) {
	        return [];
	      }
	      needle.source = this._sources.indexOf(needle.source);

	      var mappings = [];

	      var index = this._findMapping(needle,
	                                    this._originalMappings,
	                                    "originalLine",
	                                    "originalColumn",
	                                    util.compareByOriginalPositions,
	                                    binarySearch.LEAST_UPPER_BOUND);
	      if (index >= 0) {
	        var mapping = this._originalMappings[index];

	        if (aArgs.column === undefined) {
	          var originalLine = mapping.originalLine;

	          // Iterate until either we run out of mappings, or we run into
	          // a mapping for a different line than the one we found. Since
	          // mappings are sorted, this is guaranteed to find all mappings for
	          // the line we found.
	          while (mapping && mapping.originalLine === originalLine) {
	            mappings.push({
	              line: util.getArg(mapping, 'generatedLine', null),
	              column: util.getArg(mapping, 'generatedColumn', null),
	              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	            });

	            mapping = this._originalMappings[++index];
	          }
	        } else {
	          var originalColumn = mapping.originalColumn;

	          // Iterate until either we run out of mappings, or we run into
	          // a mapping for a different line than the one we were searching for.
	          // Since mappings are sorted, this is guaranteed to find all mappings for
	          // the line we are searching for.
	          while (mapping &&
	                 mapping.originalLine === line &&
	                 mapping.originalColumn == originalColumn) {
	            mappings.push({
	              line: util.getArg(mapping, 'generatedLine', null),
	              column: util.getArg(mapping, 'generatedColumn', null),
	              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	            });

	            mapping = this._originalMappings[++index];
	          }
	        }
	      }

	      return mappings;
	    };

	  exports.SourceMapConsumer = SourceMapConsumer;

	  /**
	   * A BasicSourceMapConsumer instance represents a parsed source map which we can
	   * query for information about the original file positions by giving it a file
	   * position in the generated source.
	   *
	   * The only parameter is the raw source map (either as a JSON string, or
	   * already parsed to an object). According to the spec, source maps have the
	   * following attributes:
	   *
	   *   - version: Which version of the source map spec this map is following.
	   *   - sources: An array of URLs to the original source files.
	   *   - names: An array of identifiers which can be referrenced by individual mappings.
	   *   - sourceRoot: Optional. The URL root from which all sources are relative.
	   *   - sourcesContent: Optional. An array of contents of the original source files.
	   *   - mappings: A string of base64 VLQs which contain the actual mappings.
	   *   - file: Optional. The generated file this source map is associated with.
	   *
	   * Here is an example source map, taken from the source map spec[0]:
	   *
	   *     {
	   *       version : 3,
	   *       file: "out.js",
	   *       sourceRoot : "",
	   *       sources: ["foo.js", "bar.js"],
	   *       names: ["src", "maps", "are", "fun"],
	   *       mappings: "AA,AB;;ABCDE;"
	   *     }
	   *
	   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
	   */
	  function BasicSourceMapConsumer(aSourceMap) {
	    var sourceMap = aSourceMap;
	    if (typeof aSourceMap === 'string') {
	      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	    }

	    var version = util.getArg(sourceMap, 'version');
	    var sources = util.getArg(sourceMap, 'sources');
	    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
	    // requires the array) to play nice here.
	    var names = util.getArg(sourceMap, 'names', []);
	    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
	    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
	    var mappings = util.getArg(sourceMap, 'mappings');
	    var file = util.getArg(sourceMap, 'file', null);

	    // Once again, Sass deviates from the spec and supplies the version as a
	    // string rather than a number, so we use loose equality checking here.
	    if (version != this._version) {
	      throw new Error('Unsupported version: ' + version);
	    }

	    sources = sources
	      // Some source maps produce relative source paths like "./foo.js" instead of
	      // "foo.js".  Normalize these first so that future comparisons will succeed.
	      // See bugzil.la/1090768.
	      .map(util.normalize)
	      // Always ensure that absolute sources are internally stored relative to
	      // the source root, if the source root is absolute. Not doing this would
	      // be particularly problematic when the source root is a prefix of the
	      // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
	      .map(function (source) {
	        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)
	          ? util.relative(sourceRoot, source)
	          : source;
	      });

	    // Pass `true` below to allow duplicate names and sources. While source maps
	    // are intended to be compressed and deduplicated, the TypeScript compiler
	    // sometimes generates source maps with duplicates in them. See Github issue
	    // #72 and bugzil.la/889492.
	    this._names = ArraySet.fromArray(names, true);
	    this._sources = ArraySet.fromArray(sources, true);

	    this.sourceRoot = sourceRoot;
	    this.sourcesContent = sourcesContent;
	    this._mappings = mappings;
	    this.file = file;
	  }

	  BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
	  BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

	  /**
	   * Create a BasicSourceMapConsumer from a SourceMapGenerator.
	   *
	   * @param SourceMapGenerator aSourceMap
	   *        The source map that will be consumed.
	   * @returns BasicSourceMapConsumer
	   */
	  BasicSourceMapConsumer.fromSourceMap =
	    function SourceMapConsumer_fromSourceMap(aSourceMap) {
	      var smc = Object.create(BasicSourceMapConsumer.prototype);

	      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
	      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
	      smc.sourceRoot = aSourceMap._sourceRoot;
	      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
	                                                              smc.sourceRoot);
	      smc.file = aSourceMap._file;

	      // Because we are modifying the entries (by converting string sources and
	      // names to indices into the sources and names ArraySets), we have to make
	      // a copy of the entry or else bad things happen. Shared mutable state
	      // strikes again! See github issue #191.

	      var generatedMappings = aSourceMap._mappings.toArray().slice();
	      var destGeneratedMappings = smc.__generatedMappings = [];
	      var destOriginalMappings = smc.__originalMappings = [];

	      for (var i = 0, length = generatedMappings.length; i < length; i++) {
	        var srcMapping = generatedMappings[i];
	        var destMapping = new Mapping;
	        destMapping.generatedLine = srcMapping.generatedLine;
	        destMapping.generatedColumn = srcMapping.generatedColumn;

	        if (srcMapping.source) {
	          destMapping.source = sources.indexOf(srcMapping.source);
	          destMapping.originalLine = srcMapping.originalLine;
	          destMapping.originalColumn = srcMapping.originalColumn;

	          if (srcMapping.name) {
	            destMapping.name = names.indexOf(srcMapping.name);
	          }

	          destOriginalMappings.push(destMapping);
	        }

	        destGeneratedMappings.push(destMapping);
	      }

	      quickSort(smc.__originalMappings, util.compareByOriginalPositions);

	      return smc;
	    };

	  /**
	   * The version of the source mapping spec that we are consuming.
	   */
	  BasicSourceMapConsumer.prototype._version = 3;

	  /**
	   * The list of original sources.
	   */
	  Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
	    get: function () {
	      return this._sources.toArray().map(function (s) {
	        return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
	      }, this);
	    }
	  });

	  /**
	   * Provide the JIT with a nice shape / hidden class.
	   */
	  function Mapping() {
	    this.generatedLine = 0;
	    this.generatedColumn = 0;
	    this.source = null;
	    this.originalLine = null;
	    this.originalColumn = null;
	    this.name = null;
	  }

	  /**
	   * Parse the mappings in a string in to a data structure which we can easily
	   * query (the ordered arrays in the `this.__generatedMappings` and
	   * `this.__originalMappings` properties).
	   */
	  BasicSourceMapConsumer.prototype._parseMappings =
	    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	      var generatedLine = 1;
	      var previousGeneratedColumn = 0;
	      var previousOriginalLine = 0;
	      var previousOriginalColumn = 0;
	      var previousSource = 0;
	      var previousName = 0;
	      var length = aStr.length;
	      var index = 0;
	      var cachedSegments = {};
	      var temp = {};
	      var originalMappings = [];
	      var generatedMappings = [];
	      var mapping, str, segment, end, value;

	      while (index < length) {
	        if (aStr.charAt(index) === ';') {
	          generatedLine++;
	          index++;
	          previousGeneratedColumn = 0;
	        }
	        else if (aStr.charAt(index) === ',') {
	          index++;
	        }
	        else {
	          mapping = new Mapping();
	          mapping.generatedLine = generatedLine;

	          // Because each offset is encoded relative to the previous one,
	          // many segments often have the same encoding. We can exploit this
	          // fact by caching the parsed variable length fields of each segment,
	          // allowing us to avoid a second parse if we encounter the same
	          // segment again.
	          for (end = index; end < length; end++) {
	            if (this._charIsMappingSeparator(aStr, end)) {
	              break;
	            }
	          }
	          str = aStr.slice(index, end);

	          segment = cachedSegments[str];
	          if (segment) {
	            index += str.length;
	          } else {
	            segment = [];
	            while (index < end) {
	              base64VLQ.decode(aStr, index, temp);
	              value = temp.value;
	              index = temp.rest;
	              segment.push(value);
	            }

	            if (segment.length === 2) {
	              throw new Error('Found a source, but no line and column');
	            }

	            if (segment.length === 3) {
	              throw new Error('Found a source and line, but no column');
	            }

	            cachedSegments[str] = segment;
	          }

	          // Generated column.
	          mapping.generatedColumn = previousGeneratedColumn + segment[0];
	          previousGeneratedColumn = mapping.generatedColumn;

	          if (segment.length > 1) {
	            // Original source.
	            mapping.source = previousSource + segment[1];
	            previousSource += segment[1];

	            // Original line.
	            mapping.originalLine = previousOriginalLine + segment[2];
	            previousOriginalLine = mapping.originalLine;
	            // Lines are stored 0-based
	            mapping.originalLine += 1;

	            // Original column.
	            mapping.originalColumn = previousOriginalColumn + segment[3];
	            previousOriginalColumn = mapping.originalColumn;

	            if (segment.length > 4) {
	              // Original name.
	              mapping.name = previousName + segment[4];
	              previousName += segment[4];
	            }
	          }

	          generatedMappings.push(mapping);
	          if (typeof mapping.originalLine === 'number') {
	            originalMappings.push(mapping);
	          }
	        }
	      }

	      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
	      this.__generatedMappings = generatedMappings;

	      quickSort(originalMappings, util.compareByOriginalPositions);
	      this.__originalMappings = originalMappings;
	    };

	  /**
	   * Find the mapping that best matches the hypothetical "needle" mapping that
	   * we are searching for in the given "haystack" of mappings.
	   */
	  BasicSourceMapConsumer.prototype._findMapping =
	    function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
	                                           aColumnName, aComparator, aBias) {
	      // To return the position we are searching for, we must first find the
	      // mapping for the given position and then return the opposite position it
	      // points to. Because the mappings are sorted, we can use binary search to
	      // find the best mapping.

	      if (aNeedle[aLineName] <= 0) {
	        throw new TypeError('Line must be greater than or equal to 1, got '
	                            + aNeedle[aLineName]);
	      }
	      if (aNeedle[aColumnName] < 0) {
	        throw new TypeError('Column must be greater than or equal to 0, got '
	                            + aNeedle[aColumnName]);
	      }

	      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
	    };

	  /**
	   * Compute the last column for each generated mapping. The last column is
	   * inclusive.
	   */
	  BasicSourceMapConsumer.prototype.computeColumnSpans =
	    function SourceMapConsumer_computeColumnSpans() {
	      for (var index = 0; index < this._generatedMappings.length; ++index) {
	        var mapping = this._generatedMappings[index];

	        // Mappings do not contain a field for the last generated columnt. We
	        // can come up with an optimistic estimate, however, by assuming that
	        // mappings are contiguous (i.e. given two consecutive mappings, the
	        // first mapping ends where the second one starts).
	        if (index + 1 < this._generatedMappings.length) {
	          var nextMapping = this._generatedMappings[index + 1];

	          if (mapping.generatedLine === nextMapping.generatedLine) {
	            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
	            continue;
	          }
	        }

	        // The last mapping for each line spans the entire line.
	        mapping.lastGeneratedColumn = Infinity;
	      }
	    };

	  /**
	   * Returns the original source, line, and column information for the generated
	   * source's line and column positions provided. The only argument is an object
	   * with the following properties:
	   *
	   *   - line: The line number in the generated source.
	   *   - column: The column number in the generated source.
	   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	   *     closest element that is smaller than or greater than the one we are
	   *     searching for, respectively, if the exact element cannot be found.
	   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - source: The original source file, or null.
	   *   - line: The line number in the original source, or null.
	   *   - column: The column number in the original source, or null.
	   *   - name: The original identifier, or null.
	   */
	  BasicSourceMapConsumer.prototype.originalPositionFor =
	    function SourceMapConsumer_originalPositionFor(aArgs) {
	      var needle = {
	        generatedLine: util.getArg(aArgs, 'line'),
	        generatedColumn: util.getArg(aArgs, 'column')
	      };

	      var index = this._findMapping(
	        needle,
	        this._generatedMappings,
	        "generatedLine",
	        "generatedColumn",
	        util.compareByGeneratedPositionsDeflated,
	        util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
	      );

	      if (index >= 0) {
	        var mapping = this._generatedMappings[index];

	        if (mapping.generatedLine === needle.generatedLine) {
	          var source = util.getArg(mapping, 'source', null);
	          if (source !== null) {
	            source = this._sources.at(source);
	            if (this.sourceRoot != null) {
	              source = util.join(this.sourceRoot, source);
	            }
	          }
	          var name = util.getArg(mapping, 'name', null);
	          if (name !== null) {
	            name = this._names.at(name);
	          }
	          return {
	            source: source,
	            line: util.getArg(mapping, 'originalLine', null),
	            column: util.getArg(mapping, 'originalColumn', null),
	            name: name
	          };
	        }
	      }

	      return {
	        source: null,
	        line: null,
	        column: null,
	        name: null
	      };
	    };

	  /**
	   * Return true if we have the source content for every source in the source
	   * map, false otherwise.
	   */
	  BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
	    function BasicSourceMapConsumer_hasContentsOfAllSources() {
	      if (!this.sourcesContent) {
	        return false;
	      }
	      return this.sourcesContent.length >= this._sources.size() &&
	        !this.sourcesContent.some(function (sc) { return sc == null; });
	    };

	  /**
	   * Returns the original source content. The only argument is the url of the
	   * original source file. Returns null if no original source content is
	   * available.
	   */
	  BasicSourceMapConsumer.prototype.sourceContentFor =
	    function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	      if (!this.sourcesContent) {
	        return null;
	      }

	      if (this.sourceRoot != null) {
	        aSource = util.relative(this.sourceRoot, aSource);
	      }

	      if (this._sources.has(aSource)) {
	        return this.sourcesContent[this._sources.indexOf(aSource)];
	      }

	      var url;
	      if (this.sourceRoot != null
	          && (url = util.urlParse(this.sourceRoot))) {
	        // XXX: file:// URIs and absolute paths lead to unexpected behavior for
	        // many users. We can help them out when they expect file:// URIs to
	        // behave like it would if they were running a local HTTP server. See
	        // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
	        var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
	        if (url.scheme == "file"
	            && this._sources.has(fileUriAbsPath)) {
	          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
	        }

	        if ((!url.path || url.path == "/")
	            && this._sources.has("/" + aSource)) {
	          return this.sourcesContent[this._sources.indexOf("/" + aSource)];
	        }
	      }

	      // This function is used recursively from
	      // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
	      // don't want to throw if we can't find the source - we just want to
	      // return null, so we provide a flag to exit gracefully.
	      if (nullOnMissing) {
	        return null;
	      }
	      else {
	        throw new Error('"' + aSource + '" is not in the SourceMap.');
	      }
	    };

	  /**
	   * Returns the generated line and column information for the original source,
	   * line, and column positions provided. The only argument is an object with
	   * the following properties:
	   *
	   *   - source: The filename of the original source.
	   *   - line: The line number in the original source.
	   *   - column: The column number in the original source.
	   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	   *     closest element that is smaller than or greater than the one we are
	   *     searching for, respectively, if the exact element cannot be found.
	   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - line: The line number in the generated source, or null.
	   *   - column: The column number in the generated source, or null.
	   */
	  BasicSourceMapConsumer.prototype.generatedPositionFor =
	    function SourceMapConsumer_generatedPositionFor(aArgs) {
	      var source = util.getArg(aArgs, 'source');
	      if (this.sourceRoot != null) {
	        source = util.relative(this.sourceRoot, source);
	      }
	      if (!this._sources.has(source)) {
	        return {
	          line: null,
	          column: null,
	          lastColumn: null
	        };
	      }
	      source = this._sources.indexOf(source);

	      var needle = {
	        source: source,
	        originalLine: util.getArg(aArgs, 'line'),
	        originalColumn: util.getArg(aArgs, 'column')
	      };

	      var index = this._findMapping(
	        needle,
	        this._originalMappings,
	        "originalLine",
	        "originalColumn",
	        util.compareByOriginalPositions,
	        util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
	      );

	      if (index >= 0) {
	        var mapping = this._originalMappings[index];

	        if (mapping.source === needle.source) {
	          return {
	            line: util.getArg(mapping, 'generatedLine', null),
	            column: util.getArg(mapping, 'generatedColumn', null),
	            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	          };
	        }
	      }

	      return {
	        line: null,
	        column: null,
	        lastColumn: null
	      };
	    };

	  exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

	  /**
	   * An IndexedSourceMapConsumer instance represents a parsed source map which
	   * we can query for information. It differs from BasicSourceMapConsumer in
	   * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
	   * input.
	   *
	   * The only parameter is a raw source map (either as a JSON string, or already
	   * parsed to an object). According to the spec for indexed source maps, they
	   * have the following attributes:
	   *
	   *   - version: Which version of the source map spec this map is following.
	   *   - file: Optional. The generated file this source map is associated with.
	   *   - sections: A list of section definitions.
	   *
	   * Each value under the "sections" field has two fields:
	   *   - offset: The offset into the original specified at which this section
	   *       begins to apply, defined as an object with a "line" and "column"
	   *       field.
	   *   - map: A source map definition. This source map could also be indexed,
	   *       but doesn't have to be.
	   *
	   * Instead of the "map" field, it's also possible to have a "url" field
	   * specifying a URL to retrieve a source map from, but that's currently
	   * unsupported.
	   *
	   * Here's an example source map, taken from the source map spec[0], but
	   * modified to omit a section which uses the "url" field.
	   *
	   *  {
	   *    version : 3,
	   *    file: "app.js",
	   *    sections: [{
	   *      offset: {line:100, column:10},
	   *      map: {
	   *        version : 3,
	   *        file: "section.js",
	   *        sources: ["foo.js", "bar.js"],
	   *        names: ["src", "maps", "are", "fun"],
	   *        mappings: "AAAA,E;;ABCDE;"
	   *      }
	   *    }],
	   *  }
	   *
	   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
	   */
	  function IndexedSourceMapConsumer(aSourceMap) {
	    var sourceMap = aSourceMap;
	    if (typeof aSourceMap === 'string') {
	      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	    }

	    var version = util.getArg(sourceMap, 'version');
	    var sections = util.getArg(sourceMap, 'sections');

	    if (version != this._version) {
	      throw new Error('Unsupported version: ' + version);
	    }

	    this._sources = new ArraySet();
	    this._names = new ArraySet();

	    var lastOffset = {
	      line: -1,
	      column: 0
	    };
	    this._sections = sections.map(function (s) {
	      if (s.url) {
	        // The url field will require support for asynchronicity.
	        // See https://github.com/mozilla/source-map/issues/16
	        throw new Error('Support for url field in sections not implemented.');
	      }
	      var offset = util.getArg(s, 'offset');
	      var offsetLine = util.getArg(offset, 'line');
	      var offsetColumn = util.getArg(offset, 'column');

	      if (offsetLine < lastOffset.line ||
	          (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
	        throw new Error('Section offsets must be ordered and non-overlapping.');
	      }
	      lastOffset = offset;

	      return {
	        generatedOffset: {
	          // The offset fields are 0-based, but we use 1-based indices when
	          // encoding/decoding from VLQ.
	          generatedLine: offsetLine + 1,
	          generatedColumn: offsetColumn + 1
	        },
	        consumer: new SourceMapConsumer(util.getArg(s, 'map'))
	      }
	    });
	  }

	  IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
	  IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

	  /**
	   * The version of the source mapping spec that we are consuming.
	   */
	  IndexedSourceMapConsumer.prototype._version = 3;

	  /**
	   * The list of original sources.
	   */
	  Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
	    get: function () {
	      var sources = [];
	      for (var i = 0; i < this._sections.length; i++) {
	        for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
	          sources.push(this._sections[i].consumer.sources[j]);
	        }
	      }
	      return sources;
	    }
	  });

	  /**
	   * Returns the original source, line, and column information for the generated
	   * source's line and column positions provided. The only argument is an object
	   * with the following properties:
	   *
	   *   - line: The line number in the generated source.
	   *   - column: The column number in the generated source.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - source: The original source file, or null.
	   *   - line: The line number in the original source, or null.
	   *   - column: The column number in the original source, or null.
	   *   - name: The original identifier, or null.
	   */
	  IndexedSourceMapConsumer.prototype.originalPositionFor =
	    function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
	      var needle = {
	        generatedLine: util.getArg(aArgs, 'line'),
	        generatedColumn: util.getArg(aArgs, 'column')
	      };

	      // Find the section containing the generated position we're trying to map
	      // to an original position.
	      var sectionIndex = binarySearch.search(needle, this._sections,
	        function(needle, section) {
	          var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
	          if (cmp) {
	            return cmp;
	          }

	          return (needle.generatedColumn -
	                  section.generatedOffset.generatedColumn);
	        });
	      var section = this._sections[sectionIndex];

	      if (!section) {
	        return {
	          source: null,
	          line: null,
	          column: null,
	          name: null
	        };
	      }

	      return section.consumer.originalPositionFor({
	        line: needle.generatedLine -
	          (section.generatedOffset.generatedLine - 1),
	        column: needle.generatedColumn -
	          (section.generatedOffset.generatedLine === needle.generatedLine
	           ? section.generatedOffset.generatedColumn - 1
	           : 0),
	        bias: aArgs.bias
	      });
	    };

	  /**
	   * Return true if we have the source content for every source in the source
	   * map, false otherwise.
	   */
	  IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
	    function IndexedSourceMapConsumer_hasContentsOfAllSources() {
	      return this._sections.every(function (s) {
	        return s.consumer.hasContentsOfAllSources();
	      });
	    };

	  /**
	   * Returns the original source content. The only argument is the url of the
	   * original source file. Returns null if no original source content is
	   * available.
	   */
	  IndexedSourceMapConsumer.prototype.sourceContentFor =
	    function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	      for (var i = 0; i < this._sections.length; i++) {
	        var section = this._sections[i];

	        var content = section.consumer.sourceContentFor(aSource, true);
	        if (content) {
	          return content;
	        }
	      }
	      if (nullOnMissing) {
	        return null;
	      }
	      else {
	        throw new Error('"' + aSource + '" is not in the SourceMap.');
	      }
	    };

	  /**
	   * Returns the generated line and column information for the original source,
	   * line, and column positions provided. The only argument is an object with
	   * the following properties:
	   *
	   *   - source: The filename of the original source.
	   *   - line: The line number in the original source.
	   *   - column: The column number in the original source.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - line: The line number in the generated source, or null.
	   *   - column: The column number in the generated source, or null.
	   */
	  IndexedSourceMapConsumer.prototype.generatedPositionFor =
	    function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
	      for (var i = 0; i < this._sections.length; i++) {
	        var section = this._sections[i];

	        // Only consider this section if the requested source is in the list of
	        // sources of the consumer.
	        if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {
	          continue;
	        }
	        var generatedPosition = section.consumer.generatedPositionFor(aArgs);
	        if (generatedPosition) {
	          var ret = {
	            line: generatedPosition.line +
	              (section.generatedOffset.generatedLine - 1),
	            column: generatedPosition.column +
	              (section.generatedOffset.generatedLine === generatedPosition.line
	               ? section.generatedOffset.generatedColumn - 1
	               : 0)
	          };
	          return ret;
	        }
	      }

	      return {
	        line: null,
	        column: null
	      };
	    };

	  /**
	   * Parse the mappings in a string in to a data structure which we can easily
	   * query (the ordered arrays in the `this.__generatedMappings` and
	   * `this.__originalMappings` properties).
	   */
	  IndexedSourceMapConsumer.prototype._parseMappings =
	    function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	      this.__generatedMappings = [];
	      this.__originalMappings = [];
	      for (var i = 0; i < this._sections.length; i++) {
	        var section = this._sections[i];
	        var sectionMappings = section.consumer._generatedMappings;
	        for (var j = 0; j < sectionMappings.length; j++) {
	          var mapping = sectionMappings[j];

	          var source = section.consumer._sources.at(mapping.source);
	          if (section.consumer.sourceRoot !== null) {
	            source = util.join(section.consumer.sourceRoot, source);
	          }
	          this._sources.add(source);
	          source = this._sources.indexOf(source);

	          var name = section.consumer._names.at(mapping.name);
	          this._names.add(name);
	          name = this._names.indexOf(name);

	          // The mappings coming from the consumer for the section have
	          // generated positions relative to the start of the section, so we
	          // need to offset them to be relative to the start of the concatenated
	          // generated file.
	          var adjustedMapping = {
	            source: source,
	            generatedLine: mapping.generatedLine +
	              (section.generatedOffset.generatedLine - 1),
	            generatedColumn: mapping.generatedColumn +
	              (section.generatedOffset.generatedLine === mapping.generatedLine
	              ? section.generatedOffset.generatedColumn - 1
	              : 0),
	            originalLine: mapping.originalLine,
	            originalColumn: mapping.originalColumn,
	            name: name
	          };

	          this.__generatedMappings.push(adjustedMapping);
	          if (typeof adjustedMapping.originalLine === 'number') {
	            this.__originalMappings.push(adjustedMapping);
	          }
	        }
	      }

	      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
	      quickSort(this.__originalMappings, util.compareByOriginalPositions);
	    };

	  exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
	}


/***/ },
/* 2574 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	{
	  var SourceMapGenerator = __webpack_require__(1349).SourceMapGenerator;
	  var util = __webpack_require__(430);

	  // Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
	  // operating systems these days (capturing the result).
	  var REGEX_NEWLINE = /(\r?\n)/;

	  // Newline character code for charCodeAt() comparisons
	  var NEWLINE_CODE = 10;

	  // Private symbol for identifying `SourceNode`s when multiple versions of
	  // the source-map library are loaded. This MUST NOT CHANGE across
	  // versions!
	  var isSourceNode = "$$$isSourceNode$$$";

	  /**
	   * SourceNodes provide a way to abstract over interpolating/concatenating
	   * snippets of generated JavaScript source code while maintaining the line and
	   * column information associated with the original source code.
	   *
	   * @param aLine The original line number.
	   * @param aColumn The original column number.
	   * @param aSource The original source's filename.
	   * @param aChunks Optional. An array of strings which are snippets of
	   *        generated JS, or other SourceNodes.
	   * @param aName The original identifier.
	   */
	  function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
	    this.children = [];
	    this.sourceContents = {};
	    this.line = aLine == null ? null : aLine;
	    this.column = aColumn == null ? null : aColumn;
	    this.source = aSource == null ? null : aSource;
	    this.name = aName == null ? null : aName;
	    this[isSourceNode] = true;
	    if (aChunks != null) this.add(aChunks);
	  }

	  /**
	   * Creates a SourceNode from generated code and a SourceMapConsumer.
	   *
	   * @param aGeneratedCode The generated code
	   * @param aSourceMapConsumer The SourceMap for the generated code
	   * @param aRelativePath Optional. The path that relative sources in the
	   *        SourceMapConsumer should be relative to.
	   */
	  SourceNode.fromStringWithSourceMap =
	    function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
	      // The SourceNode we want to fill with the generated code
	      // and the SourceMap
	      var node = new SourceNode();

	      // All even indices of this array are one line of the generated code,
	      // while all odd indices are the newlines between two adjacent lines
	      // (since `REGEX_NEWLINE` captures its match).
	      // Processed fragments are removed from this array, by calling `shiftNextLine`.
	      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
	      var shiftNextLine = function() {
	        var lineContents = remainingLines.shift();
	        // The last line of a file might not have a newline.
	        var newLine = remainingLines.shift() || "";
	        return lineContents + newLine;
	      };

	      // We need to remember the position of "remainingLines"
	      var lastGeneratedLine = 1, lastGeneratedColumn = 0;

	      // The generate SourceNodes we need a code range.
	      // To extract it current and last mapping is used.
	      // Here we store the last mapping.
	      var lastMapping = null;

	      aSourceMapConsumer.eachMapping(function (mapping) {
	        if (lastMapping !== null) {
	          // We add the code from "lastMapping" to "mapping":
	          // First check if there is a new line in between.
	          if (lastGeneratedLine < mapping.generatedLine) {
	            // Associate first line with "lastMapping"
	            addMappingWithCode(lastMapping, shiftNextLine());
	            lastGeneratedLine++;
	            lastGeneratedColumn = 0;
	            // The remaining code is added without mapping
	          } else {
	            // There is no new line in between.
	            // Associate the code between "lastGeneratedColumn" and
	            // "mapping.generatedColumn" with "lastMapping"
	            var nextLine = remainingLines[0];
	            var code = nextLine.substr(0, mapping.generatedColumn -
	                                          lastGeneratedColumn);
	            remainingLines[0] = nextLine.substr(mapping.generatedColumn -
	                                                lastGeneratedColumn);
	            lastGeneratedColumn = mapping.generatedColumn;
	            addMappingWithCode(lastMapping, code);
	            // No more remaining code, continue
	            lastMapping = mapping;
	            return;
	          }
	        }
	        // We add the generated code until the first mapping
	        // to the SourceNode without any mapping.
	        // Each line is added as separate string.
	        while (lastGeneratedLine < mapping.generatedLine) {
	          node.add(shiftNextLine());
	          lastGeneratedLine++;
	        }
	        if (lastGeneratedColumn < mapping.generatedColumn) {
	          var nextLine = remainingLines[0];
	          node.add(nextLine.substr(0, mapping.generatedColumn));
	          remainingLines[0] = nextLine.substr(mapping.generatedColumn);
	          lastGeneratedColumn = mapping.generatedColumn;
	        }
	        lastMapping = mapping;
	      }, this);
	      // We have processed all mappings.
	      if (remainingLines.length > 0) {
	        if (lastMapping) {
	          // Associate the remaining code in the current line with "lastMapping"
	          addMappingWithCode(lastMapping, shiftNextLine());
	        }
	        // and add the remaining lines without any mapping
	        node.add(remainingLines.join(""));
	      }

	      // Copy sourcesContent into SourceNode
	      aSourceMapConsumer.sources.forEach(function (sourceFile) {
	        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	        if (content != null) {
	          if (aRelativePath != null) {
	            sourceFile = util.join(aRelativePath, sourceFile);
	          }
	          node.setSourceContent(sourceFile, content);
	        }
	      });

	      return node;

	      function addMappingWithCode(mapping, code) {
	        if (mapping === null || mapping.source === undefined) {
	          node.add(code);
	        } else {
	          var source = aRelativePath
	            ? util.join(aRelativePath, mapping.source)
	            : mapping.source;
	          node.add(new SourceNode(mapping.originalLine,
	                                  mapping.originalColumn,
	                                  source,
	                                  code,
	                                  mapping.name));
	        }
	      }
	    };

	  /**
	   * Add a chunk of generated JS to this source node.
	   *
	   * @param aChunk A string snippet of generated JS code, another instance of
	   *        SourceNode, or an array where each member is one of those things.
	   */
	  SourceNode.prototype.add = function SourceNode_add(aChunk) {
	    if (Array.isArray(aChunk)) {
	      aChunk.forEach(function (chunk) {
	        this.add(chunk);
	      }, this);
	    }
	    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
	      if (aChunk) {
	        this.children.push(aChunk);
	      }
	    }
	    else {
	      throw new TypeError(
	        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	      );
	    }
	    return this;
	  };

	  /**
	   * Add a chunk of generated JS to the beginning of this source node.
	   *
	   * @param aChunk A string snippet of generated JS code, another instance of
	   *        SourceNode, or an array where each member is one of those things.
	   */
	  SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
	    if (Array.isArray(aChunk)) {
	      for (var i = aChunk.length-1; i >= 0; i--) {
	        this.prepend(aChunk[i]);
	      }
	    }
	    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
	      this.children.unshift(aChunk);
	    }
	    else {
	      throw new TypeError(
	        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	      );
	    }
	    return this;
	  };

	  /**
	   * Walk over the tree of JS snippets in this node and its children. The
	   * walking function is called once for each snippet of JS and is passed that
	   * snippet and the its original associated source's line/column location.
	   *
	   * @param aFn The traversal function.
	   */
	  SourceNode.prototype.walk = function SourceNode_walk(aFn) {
	    var chunk;
	    for (var i = 0, len = this.children.length; i < len; i++) {
	      chunk = this.children[i];
	      if (chunk[isSourceNode]) {
	        chunk.walk(aFn);
	      }
	      else {
	        if (chunk !== '') {
	          aFn(chunk, { source: this.source,
	                       line: this.line,
	                       column: this.column,
	                       name: this.name });
	        }
	      }
	    }
	  };

	  /**
	   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
	   * each of `this.children`.
	   *
	   * @param aSep The separator.
	   */
	  SourceNode.prototype.join = function SourceNode_join(aSep) {
	    var newChildren;
	    var i;
	    var len = this.children.length;
	    if (len > 0) {
	      newChildren = [];
	      for (i = 0; i < len-1; i++) {
	        newChildren.push(this.children[i]);
	        newChildren.push(aSep);
	      }
	      newChildren.push(this.children[i]);
	      this.children = newChildren;
	    }
	    return this;
	  };

	  /**
	   * Call String.prototype.replace on the very right-most source snippet. Useful
	   * for trimming whitespace from the end of a source node, etc.
	   *
	   * @param aPattern The pattern to replace.
	   * @param aReplacement The thing to replace the pattern with.
	   */
	  SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
	    var lastChild = this.children[this.children.length - 1];
	    if (lastChild[isSourceNode]) {
	      lastChild.replaceRight(aPattern, aReplacement);
	    }
	    else if (typeof lastChild === 'string') {
	      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
	    }
	    else {
	      this.children.push(''.replace(aPattern, aReplacement));
	    }
	    return this;
	  };

	  /**
	   * Set the source content for a source file. This will be added to the SourceMapGenerator
	   * in the sourcesContent field.
	   *
	   * @param aSourceFile The filename of the source file
	   * @param aSourceContent The content of the source file
	   */
	  SourceNode.prototype.setSourceContent =
	    function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
	      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
	    };

	  /**
	   * Walk over the tree of SourceNodes. The walking function is called for each
	   * source file content and is passed the filename and source content.
	   *
	   * @param aFn The traversal function.
	   */
	  SourceNode.prototype.walkSourceContents =
	    function SourceNode_walkSourceContents(aFn) {
	      for (var i = 0, len = this.children.length; i < len; i++) {
	        if (this.children[i][isSourceNode]) {
	          this.children[i].walkSourceContents(aFn);
	        }
	      }

	      var sources = Object.keys(this.sourceContents);
	      for (var i = 0, len = sources.length; i < len; i++) {
	        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
	      }
	    };

	  /**
	   * Return the string representation of this source node. Walks over the tree
	   * and concatenates all the various snippets together to one string.
	   */
	  SourceNode.prototype.toString = function SourceNode_toString() {
	    var str = "";
	    this.walk(function (chunk) {
	      str += chunk;
	    });
	    return str;
	  };

	  /**
	   * Returns the string representation of this source node along with a source
	   * map.
	   */
	  SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
	    var generated = {
	      code: "",
	      line: 1,
	      column: 0
	    };
	    var map = new SourceMapGenerator(aArgs);
	    var sourceMappingActive = false;
	    var lastOriginalSource = null;
	    var lastOriginalLine = null;
	    var lastOriginalColumn = null;
	    var lastOriginalName = null;
	    this.walk(function (chunk, original) {
	      generated.code += chunk;
	      if (original.source !== null
	          && original.line !== null
	          && original.column !== null) {
	        if(lastOriginalSource !== original.source
	           || lastOriginalLine !== original.line
	           || lastOriginalColumn !== original.column
	           || lastOriginalName !== original.name) {
	          map.addMapping({
	            source: original.source,
	            original: {
	              line: original.line,
	              column: original.column
	            },
	            generated: {
	              line: generated.line,
	              column: generated.column
	            },
	            name: original.name
	          });
	        }
	        lastOriginalSource = original.source;
	        lastOriginalLine = original.line;
	        lastOriginalColumn = original.column;
	        lastOriginalName = original.name;
	        sourceMappingActive = true;
	      } else if (sourceMappingActive) {
	        map.addMapping({
	          generated: {
	            line: generated.line,
	            column: generated.column
	          }
	        });
	        lastOriginalSource = null;
	        sourceMappingActive = false;
	      }
	      for (var idx = 0, length = chunk.length; idx < length; idx++) {
	        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
	          generated.line++;
	          generated.column = 0;
	          // Mappings end at eol
	          if (idx + 1 === length) {
	            lastOriginalSource = null;
	            sourceMappingActive = false;
	          } else if (sourceMappingActive) {
	            map.addMapping({
	              source: original.source,
	              original: {
	                line: original.line,
	                column: original.column
	              },
	              generated: {
	                line: generated.line,
	                column: generated.column
	              },
	              name: original.name
	            });
	          }
	        } else {
	          generated.column++;
	        }
	      }
	    });
	    this.walkSourceContents(function (sourceFile, sourceContent) {
	      map.setSourceContent(sourceFile, sourceContent);
	    });

	    return { code: generated.code, map: map };
	  };

	  exports.SourceNode = SourceNode;
	}


/***/ },
/* 2575 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.version = exports.availablePresets = exports.availablePlugins = undefined;
	exports.transform = transform;
	exports.transformFromAst = transformFromAst;

	var _babelCore = __webpack_require__(2365);

	var Babel = _interopRequireWildcard(_babelCore);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	/**
	 * Parses plugin names and presets from the specified options.
	 */
	function processOptions(options) {
	  // Parse preset names
	  var presets = (options.presets || []).map(function (presetName) {
	    if (typeof presetName === 'string') {
	      var preset = availablePresets[presetName];
	      if (!preset) {
	        throw new Error('Invalid preset specified in Babel options: "' + presetName + '"');
	      }
	      return preset;
	    } else {
	      // Could be an actual preset module
	      return presetName;
	    }
	  });

	  // Parse plugin names
	  var plugins = (options.plugins || []).map(function (pluginName) {
	    if (typeof pluginName === 'string') {
	      var plugin = availablePlugins[pluginName];
	      if (!plugin) {
	        throw new Error('Invalid plugin specified in Babel options: "' + pluginName + '"');
	      }
	      return plugin;
	    } else {
	      // Could be an actual plugin module
	      return pluginName;
	    }
	  });

	  return _extends({}, options, {
	    presets: presets,
	    plugins: plugins
	  });
	}

	function transform(code, options) {
	  return Babel.transform(code, processOptions(options));
	}

	function transformFromAst(ast, code, options) {
	  return Babel.transformFromAst(code, processOptions(options));
	}

	// All the plugins we should bundle
	var availablePlugins = exports.availablePlugins = {
	  'check-es2015-constants': __webpack_require__(757),
	  'external-helpers-2': __webpack_require__(2602),
	  'syntax-async-functions': __webpack_require__(523),
	  'syntax-async-generators': __webpack_require__(2603),
	  'syntax-class-constructor-call': __webpack_require__(1357),
	  'syntax-class-properties': __webpack_require__(1358),
	  'syntax-decorators': __webpack_require__(1359),
	  'syntax-do-expressions': __webpack_require__(1360),
	  'syntax-exponentiation-operator': __webpack_require__(1361),
	  'syntax-export-extensions': __webpack_require__(1362),
	  'syntax-flow': __webpack_require__(761),
	  'syntax-function-bind': __webpack_require__(1363),
	  'syntax-jsx': __webpack_require__(524),
	  'syntax-object-rest-spread': __webpack_require__(1364),
	  'syntax-trailing-function-commas': __webpack_require__(1365),
	  'transform-async-functions': __webpack_require__(2604),
	  'transform-async-to-generator': __webpack_require__(1366),
	  'transform-async-to-module-method': __webpack_require__(2814),
	  'transform-class-constructor-call': __webpack_require__(1462),
	  'transform-class-properties': __webpack_require__(1500),
	  'transform-decorators': __webpack_require__(1507),
	  'transform-do-expressions': __webpack_require__(1555),
	  'transform-es2015-arrow-functions': __webpack_require__(865),
	  'transform-es2015-block-scoped-functions': __webpack_require__(866),
	  'transform-es2015-block-scoping': __webpack_require__(870),
	  'transform-es2015-classes': __webpack_require__(892),
	  'transform-es2015-computed-properties': __webpack_require__(922),
	  'transform-es2015-destructuring': __webpack_require__(926),
	  'transform-es2015-for-of': __webpack_require__(930),
	  'transform-es2015-function-name': __webpack_require__(931),
	  'transform-es2015-instanceof': __webpack_require__(4180),
	  'transform-es2015-literals': __webpack_require__(962),
	  'transform-es2015-modules-amd': __webpack_require__(1707),
	  'transform-es2015-modules-commonjs': __webpack_require__(982),
	  'transform-es2015-modules-systemjs': __webpack_require__(4553),
	  'transform-es2015-modules-umd': __webpack_require__(4805),
	  'transform-es2015-object-super': __webpack_require__(1052),
	  'transform-es2015-parameters': __webpack_require__(1073),
	  'transform-es2015-shorthand-properties': __webpack_require__(1098),
	  'transform-es2015-spread': __webpack_require__(1116),
	  'transform-es2015-sticky-regex': __webpack_require__(1120),
	  'transform-es2015-template-literals': __webpack_require__(1138),
	  'transform-es2015-typeof-symbol': __webpack_require__(1142),
	  'transform-es2015-unicode-regex': __webpack_require__(1144),
	  'transform-es3-member-expression-literals': __webpack_require__(5872),
	  'transform-es3-property-literals': __webpack_require__(5873),
	  'transform-es5-property-mutators': __webpack_require__(5874),
	  'transform-eval': __webpack_require__(6063),
	  'transform-exponentiation-operator': __webpack_require__(2147),
	  'transform-export-extensions': __webpack_require__(2184),
	  'transform-flow-strip-types': __webpack_require__(2185),
	  'transform-function-bind': __webpack_require__(2192),
	  'transform-inline-environment-variables': __webpack_require__(6240),
	  'transform-jscript': __webpack_require__(6241),
	  'transform-member-expression-literals': __webpack_require__(6242),
	  'transform-merge-sibling-variables': __webpack_require__(6243),
	  'transform-minify-booleans': __webpack_require__(6244),
	  'transform-node-env-inline': __webpack_require__(6245),
	  'transform-object-assign': __webpack_require__(6246),
	  'transform-object-rest-spread': __webpack_require__(2193),
	  'transform-object-set-prototype-of-to-assign': __webpack_require__(6273),
	  'transform-property-literals': __webpack_require__(6274),
	  'transform-proto-to-assign': __webpack_require__(6275),
	  'transform-react-constant-elements': __webpack_require__(6306),
	  'transform-react-display-name': __webpack_require__(2206),
	  'transform-react-inline-elements': __webpack_require__(6308),
	  'transform-react-jsx': __webpack_require__(2248),
	  'transform-react-jsx-compat': __webpack_require__(6335),
	  'transform-react-jsx-source': __webpack_require__(6485),
	  'transform-regenerator': __webpack_require__(1252),
	  'transform-remove-console': __webpack_require__(6818),
	  'transform-remove-debugger': __webpack_require__(6819),
	  'transform-runtime': __webpack_require__(6821),
	  'transform-simplify-comparison-operators': __webpack_require__(6823),
	  'transform-strict-mode': __webpack_require__(1274),
	  'transform-undefined-to-void': __webpack_require__(6972),
	  'undeclared-variables-check': __webpack_require__(6973)
	};

	// All the presets we should bundle
	var availablePresets = exports.availablePresets = {
	  es2015: __webpack_require__(6976),
	  react: __webpack_require__(6977),
	  'stage-0': __webpack_require__(6978),
	  'stage-1': __webpack_require__(2361),
	  'stage-2': __webpack_require__(2362),
	  'stage-3': __webpack_require__(2363),

	  // ES2015 preset with es2015-modules-commonjs removed
	  // Plugin list copied from babel-preset-es2015/index.js
	  'es2015-no-commonjs': {
	    plugins: [__webpack_require__(1138), __webpack_require__(962), __webpack_require__(931), __webpack_require__(865), __webpack_require__(866), __webpack_require__(892), __webpack_require__(1052), __webpack_require__(1098), __webpack_require__(922), __webpack_require__(930), __webpack_require__(1120), __webpack_require__(1144), __webpack_require__(757), __webpack_require__(1116), __webpack_require__(1073), __webpack_require__(926), __webpack_require__(870), __webpack_require__(1142), [__webpack_require__(1252), { async: false, asyncGenerators: false }]]
	  }
	};

	var version = exports.version = Babel.version;

/***/ },
/* 2576 */
[7029, 2577],
/* 2577 */
[7042, 2601, 2600, 2598],
/* 2578 */
2441,
/* 2579 */
2442,
/* 2580 */
[7053, 2587],
/* 2581 */
[7054, 1351, 431],
/* 2582 */
[7055, 2578],
/* 2583 */
[7056, 2585],
/* 2584 */
[7058, 759, 758, 2582],
/* 2585 */
422,
/* 2586 */
[7061, 1351],
/* 2587 */
514,
/* 2588 */
[7063, 522, 1355, 1356, 760, 431],
/* 2589 */
1304,
/* 2590 */
1305,
/* 2591 */
[7067, 760],
/* 2592 */
[7070, 759],
/* 2593 */
[7071, 2594, 1352],
/* 2594 */
1309,
/* 2595 */
[7072, 2586, 1352],
/* 2596 */
740,
/* 2597 */
[7075, 2581, 431, 521, 758],
/* 2598 */
[7076, 2580, 2597, 758],
/* 2599 */
[7077, 2579, 2589, 521, 2595, 1354],
/* 2600 */
[7083, 2593, 1354],
/* 2601 */
[7085, 2599, 521],
/* 2602 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  return {
	    pre: function pre(file) {
	      file.set("helpersNamespace", t.identifier("babelHelpers"));
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 2603 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("asyncGenerators");
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 2604 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    inherits: __webpack_require__(523)
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 2605 */
[7190, 53, 35, 2606, 1367, 40],
/* 2606 */
[7191, 53, 35, 2607, 1367, 40],
/* 2607 */
[7192, 35, 40],
/* 2608 */
745,
/* 2609 */
1322,
/* 2610 */
1324,
/* 2611 */
746,
/* 2612 */
[7133, 2614, 1370],
/* 2613 */
[7135, 2610, 2611, 2612, 2616, 2625, 2626, 2627, 348, 433],
/* 2614 */
1327,
/* 2615 */
[7137, 2623],
/* 2616 */
[7139, 2615, 1370],
/* 2617 */
[7140, 764],
/* 2618 */
1334,
/* 2619 */
1335,
/* 2620 */
749,
/* 2621 */
[7149, 2636],
/* 2622 */
2533,
/* 2623 */
[7154, 764],
/* 2624 */
[7160, 2618],
/* 2625 */
2548,
/* 2626 */
[7163, 2622],
/* 2627 */
2550,
/* 2628 */
[7166, 348, 764],
/* 2629 */
[7168, 765, 348, 762, 432, 2635],
/* 2630 */
[7170, 2620, 348],
/* 2631 */
[7172, 2613, 2621],
/* 2632 */
[7175, 433],
/* 2633 */
[7176, 2632, 763],
/* 2634 */
[7184, 2617, 2619, 765, 348, 762, 2628, 432, 2609, 2630],
/* 2635 */
[7186, 765, 348, 762, 432, 433],
/* 2636 */
1345,
/* 2637 */
[7087, 288, 88, 53, 35, 287, 40],
/* 2638 */
[7090, 88, 35, 53, 40, 287],
/* 2639 */
2469,
/* 2640 */
[7091, 88, 53, 349],
/* 2641 */
[7092, 35, 40],
/* 2642 */
[7093, 88],
/* 2643 */
[7094, 88, 53, 35, 287, 40],
/* 2644 */
[7096, 88, 35, 2646, 40],
/* 2645 */
[7097, 88, 35, 40],
/* 2646 */
[7098, 35, 1402, 40, 2645],
/* 2647 */
[7099, 88, 53, 35, 768, 40],
/* 2648 */
[7100, 288, 88, 35, 40],
/* 2649 */
2479,
/* 2650 */
[7102, 88, 53, 35, 1372, 2648, 287, 40],
/* 2651 */
[7103, 88, 2649],
/* 2652 */
[7104, 88, 53, 35, 2655, 349, 287, 2670, 40],
/* 2653 */
[7107, 288, 53, 35, 1374, 40],
/* 2654 */
[7108, 88, 1400, 35, 53, 1373, 767, 40, 2697],
/* 2655 */
[7019, 53, 2668, 1383, 2667, 2666, 2656],
/* 2656 */
[7020, 2658, 2657, 2661, 2659, 2663],
/* 2657 */
2377,
/* 2658 */
2378,
/* 2659 */
[7021, 2660],
/* 2660 */
2380,
/* 2661 */
[7022, 2662],
/* 2662 */
2380,
/* 2663 */
2383,
/* 2664 */
2384,
/* 2665 */
[7023, 1375],
/* 2666 */
[7024, 2664, 1375, 2665],
/* 2667 */
2387,
/* 2668 */
[7025, 2669],
/* 2669 */
2389,
/* 2670 */
745,
/* 2671 */
[7125, 2672],
/* 2672 */
[7126, 2673],
/* 2673 */
2508,
/* 2674 */
[7109, 6981],
/* 2675 */
2486,
/* 2676 */
1324,
/* 2677 */
746,
/* 2678 */
2519,
/* 2679 */
[7132, 527],
/* 2680 */
[7135, 2676, 2677, 1377, 2683, 2692, 2693, 2694, 526, 350],
/* 2681 */
1327,
/* 2682 */
[7137, 2689],
/* 2683 */
[7139, 2682, 527],
/* 2684 */
[7141, 2691],
/* 2685 */
1334,
/* 2686 */
2532,
/* 2687 */
2533,
/* 2688 */
[7152, 1378, 771, 1376],
/* 2689 */
[7154, 2696],
/* 2690 */
[7156, 1376],
/* 2691 */
2547,
/* 2692 */
2548,
/* 2693 */
[7163, 2687],
/* 2694 */
2550,
/* 2695 */
[7168, 1381, 526, 770, 434, 2702],
/* 2696 */
[7169, 350],
/* 2697 */
[7171, 2680, 1378, 771],
/* 2698 */
[7175, 350],
/* 2699 */
[7176, 2698, 525],
/* 2700 */
[7180, 525],
/* 2701 */
[7183, 1382, 2678, 2690],
/* 2702 */
[7186, 1381, 526, 770, 434, 350],
/* 2703 */
[7188, 2686, 527],
/* 2704 */
1345,
/* 2705 */
[7027, 2706],
/* 2706 */
2392,
/* 2707 */
[7111, 88, 2772, 53, 35, 2765, 2764, 2766, 2767, 349, 40],
/* 2708 */
[7112, 35, 53, 40, 772, 182],
/* 2709 */
[7113, 53, 182],
/* 2710 */
[7114, 53, 182],
/* 2711 */
[7115, 53, 182],
/* 2712 */
[7117, 182, 2708, 2709, 2711, 2713, 2714, 2710],
/* 2713 */
[7118, 53, 182],
/* 2714 */
[7119, 53, 182],
/* 2715 */
[7120, 35, 40],
/* 2716 */
[7122, 35, 40],
/* 2717 */
[7124, 88, 53, 35, 1384, 2720, 40, 772],
/* 2718 */
2384,
/* 2719 */
[7023, 1385],
/* 2720 */
[7024, 2718, 1385, 2719],
/* 2721 */
2510,
/* 2722 */
1322,
/* 2723 */
[7127, 2730, 2743, 1393, 2760],
/* 2724 */
[7128, 2725],
/* 2725 */
[7129, 1386, 2733, 2750],
/* 2726 */
[7131, 2746, 528],
/* 2727 */
1324,
/* 2728 */
2518,
/* 2729 */
[7133, 2732, 529],
/* 2730 */
[7134, 2738, 2739, 773, 1398, 2770],
/* 2731 */
[7135, 2727, 1386, 2729, 1388, 2756, 2757, 2758, 185, 130],
/* 2732 */
1327,
/* 2733 */
[7136, 1388, 2747],
/* 2734 */
[7138, 1387, 1397],
/* 2735 */
[7141, 2755],
/* 2736 */
[7143, 2751, 2752, 2753, 185, 2768],
/* 2737 */
[7144, 1390, 184],
/* 2738 */
[7145, 2737, 2754, 184],
/* 2739 */
[7146, 1389, 1390, 2741, 185, 1394, 1395, 2722, 184, 1396],
/* 2740 */
[7147, 1389, 1396],
/* 2741 */
1335,
/* 2742 */
749,
/* 2743 */
[7148, 2735, 2745, 2749],
/* 2744 */
2533,
/* 2745 */
[7150, 130],
/* 2746 */
[7151, 130],
/* 2747 */
[7153, 1392, 351, 184],
/* 2748 */
[7154, 184],
/* 2749 */
[7155, 2726, 528],
/* 2750 */
[7157, 773, 185],
/* 2751 */
[7158, 2728],
/* 2752 */
2543,
/* 2753 */
[7159, 529],
/* 2754 */
[7161, 1395, 2769],
/* 2755 */
2547,
/* 2756 */
2548,
/* 2757 */
[7163, 2744],
/* 2758 */
2550,
/* 2759 */
[7168, 776, 185, 775, 351, 1397],
/* 2760 */
2552,
/* 2761 */
[7171, 2731, 773, 1393],
/* 2762 */
[7175, 130],
/* 2763 */
[7176, 2762, 183],
/* 2764 */
[7177, 183],
/* 2765 */
[7178, 2734, 776, 183],
/* 2766 */
[7179, 130],
/* 2767 */
[7180, 183],
/* 2768 */
[7181, 351, 183],
/* 2769 */
[7187, 529, 184],
/* 2770 */
[7189, 1391, 2740, 1394],
/* 2771 */
2504,
/* 2772 */
[7030, 2781],
/* 2773 */
[7032, 2783],
/* 2774 */
[7033, 2784],
/* 2775 */
[7034, 2785],
/* 2776 */
[7035, 2786],
/* 2777 */
[7039, 2788],
/* 2778 */
[7040, 2775, 2774, 2773],
/* 2779 */
1821,
/* 2780 */
[7042, 2813, 2812, 2805],
/* 2781 */
[7043, 2807],
/* 2782 */
[7044, 109],
/* 2783 */
[7045, 109],
/* 2784 */
[7046, 109, 2808],
/* 2785 */
[7047, 109, 2809],
/* 2786 */
[7048, 785, 186],
/* 2787 */
[7049, 2810, 186],
/* 2788 */
[7051, 785, 186],
/* 2789 */
[7052, 785, 2811, 186],
/* 2790 */
2441,
/* 2791 */
2442,
/* 2792 */
[7054, 777, 352],
/* 2793 */
[7055, 2790],
/* 2794 */
[7057, 109],
/* 2795 */
[7061, 777],
/* 2796 */
[7062, 777],
/* 2797 */
514,
/* 2798 */
[7063, 109, 783, 784, 781, 352],
/* 2799 */
1304,
/* 2800 */
[7065, 109, 435],
/* 2801 */
[7071, 2802, 778],
/* 2802 */
1309,
/* 2803 */
[7073, 778],
/* 2804 */
[7075, 2792, 352, 532, 186],
/* 2805 */
[7076, 1403, 2804, 186],
/* 2806 */
[7077, 2791, 2799, 532, 435, 1406],
/* 2807 */
[7078, 530],
/* 2808 */
[7079, 435, 782],
/* 2809 */
[7080, 782, 1405],
/* 2810 */
[7081, 2803, 782],
/* 2811 */
345,
/* 2812 */
[7083, 2801, 1406],
/* 2813 */
[7085, 2806, 532],
/* 2814 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(18)["default"];

	exports.__esModule = true;

	var _babelHelperRemapAsyncToGenerator = __webpack_require__(2815);

	var _babelHelperRemapAsyncToGenerator2 = _interopRequireDefault(_babelHelperRemapAsyncToGenerator);

	exports["default"] = function () {
	  return {
	    inherits: __webpack_require__(523),

	    visitor: {
	      Function: function Function(path, state) {
	        if (!path.node.async || path.node.generator) return;

	        _babelHelperRemapAsyncToGenerator2["default"](path, state.addImport(state.opts.module, state.opts.method));
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 2815 */
[7190, 18, 6, 2816, 1411, 11],
/* 2816 */
[7191, 18, 6, 2817, 1411, 11],
/* 2817 */
[7192, 6, 11],
/* 2818 */
745,
/* 2819 */
1322,
/* 2820 */
1324,
/* 2821 */
746,
/* 2822 */
[7133, 2824, 1414],
/* 2823 */
[7135, 2820, 2821, 2822, 2826, 2835, 2836, 2837, 353, 437],
/* 2824 */
1327,
/* 2825 */
[7137, 2833],
/* 2826 */
[7139, 2825, 1414],
/* 2827 */
[7140, 788],
/* 2828 */
1334,
/* 2829 */
1335,
/* 2830 */
749,
/* 2831 */
[7149, 2846],
/* 2832 */
2533,
/* 2833 */
[7154, 788],
/* 2834 */
[7160, 2828],
/* 2835 */
2548,
/* 2836 */
[7163, 2832],
/* 2837 */
2550,
/* 2838 */
[7166, 353, 788],
/* 2839 */
[7168, 789, 353, 786, 436, 2845],
/* 2840 */
[7170, 2830, 353],
/* 2841 */
[7172, 2823, 2831],
/* 2842 */
[7175, 437],
/* 2843 */
[7176, 2842, 787],
/* 2844 */
[7184, 2827, 2829, 789, 353, 786, 2838, 436, 2819, 2840],
/* 2845 */
[7186, 789, 353, 786, 436, 437],
/* 2846 */
1345,
/* 2847 */
[7087, 99, 26, 18, 6, 289, 11],
/* 2848 */
[7090, 26, 6, 18, 11, 289],
/* 2849 */
2469,
/* 2850 */
[7091, 26, 18, 438],
/* 2851 */
[7092, 6, 11],
/* 2852 */
[7093, 26],
/* 2853 */
[7094, 26, 18, 6, 289, 11],
/* 2854 */
[7096, 26, 6, 2856, 11],
/* 2855 */
[7097, 26, 6, 11],
/* 2856 */
[7098, 6, 536, 11, 2855],
/* 2857 */
[7099, 26, 18, 6, 792, 11],
/* 2858 */
[7100, 99, 26, 6, 11],
/* 2859 */
2479,
/* 2860 */
[7102, 26, 18, 6, 1416, 2858, 289, 11],
/* 2861 */
[7103, 26, 2859],
/* 2862 */
[7104, 26, 18, 6, 2865, 438, 289, 2880, 11],
/* 2863 */
[7107, 99, 18, 6, 1418, 11],
/* 2864 */
[7108, 26, 797, 6, 18, 1417, 791, 11, 2907],
/* 2865 */
[7019, 18, 2878, 1427, 2877, 2876, 2866],
/* 2866 */
[7020, 2868, 2867, 2871, 2869, 2873],
/* 2867 */
2377,
/* 2868 */
2378,
/* 2869 */
[7021, 2870],
/* 2870 */
2380,
/* 2871 */
[7022, 2872],
/* 2872 */
2380,
/* 2873 */
2383,
/* 2874 */
2384,
/* 2875 */
[7023, 1419],
/* 2876 */
[7024, 2874, 1419, 2875],
/* 2877 */
2387,
/* 2878 */
[7025, 2879],
/* 2879 */
2389,
/* 2880 */
745,
/* 2881 */
[7125, 2882],
/* 2882 */
[7126, 2883],
/* 2883 */
2508,
/* 2884 */
[7109, 6982],
/* 2885 */
2486,
/* 2886 */
1324,
/* 2887 */
746,
/* 2888 */
2519,
/* 2889 */
[7132, 535],
/* 2890 */
[7135, 2886, 2887, 1421, 2893, 2902, 2903, 2904, 534, 354],
/* 2891 */
1327,
/* 2892 */
[7137, 2899],
/* 2893 */
[7139, 2892, 535],
/* 2894 */
[7141, 2901],
/* 2895 */
1334,
/* 2896 */
2532,
/* 2897 */
2533,
/* 2898 */
[7152, 1422, 795, 1420],
/* 2899 */
[7154, 2906],
/* 2900 */
[7156, 1420],
/* 2901 */
2547,
/* 2902 */
2548,
/* 2903 */
[7163, 2897],
/* 2904 */
2550,
/* 2905 */
[7168, 1425, 534, 794, 439, 2912],
/* 2906 */
[7169, 354],
/* 2907 */
[7171, 2890, 1422, 795],
/* 2908 */
[7175, 354],
/* 2909 */
[7176, 2908, 533],
/* 2910 */
[7180, 533],
/* 2911 */
[7183, 1426, 2888, 2900],
/* 2912 */
[7186, 1425, 534, 794, 439, 354],
/* 2913 */
[7188, 2896, 535],
/* 2914 */
1345,
/* 2915 */
[7027, 2916],
/* 2916 */
2392,
/* 2917 */
[7030, 2925],
/* 2918 */
[7032, 2927],
/* 2919 */
[7033, 2928],
/* 2920 */
[7034, 2929],
/* 2921 */
[7039, 2932],
/* 2922 */
[7040, 2920, 2919, 2918],
/* 2923 */
1821,
/* 2924 */
[7042, 2957, 2956, 2949],
/* 2925 */
[7043, 2951],
/* 2926 */
[7044, 110],
/* 2927 */
[7045, 110],
/* 2928 */
[7046, 110, 2952],
/* 2929 */
[7047, 110, 2953],
/* 2930 */
[7048, 807, 187],
/* 2931 */
[7049, 2954, 187],
/* 2932 */
[7051, 807, 187],
/* 2933 */
[7052, 807, 2955, 187],
/* 2934 */
2441,
/* 2935 */
2442,
/* 2936 */
[7054, 799, 355],
/* 2937 */
[7055, 2934],
/* 2938 */
[7057, 110],
/* 2939 */
[7061, 799],
/* 2940 */
[7062, 799],
/* 2941 */
514,
/* 2942 */
[7063, 110, 805, 806, 803, 355],
/* 2943 */
1304,
/* 2944 */
[7065, 110, 440],
/* 2945 */
[7071, 2946, 800],
/* 2946 */
1309,
/* 2947 */
[7073, 800],
/* 2948 */
[7075, 2936, 355, 539, 187],
/* 2949 */
[7076, 1429, 2948, 187],
/* 2950 */
[7077, 2935, 2943, 539, 440, 1432],
/* 2951 */
[7078, 537],
/* 2952 */
[7079, 440, 804],
/* 2953 */
[7080, 804, 1431],
/* 2954 */
[7081, 2947, 804],
/* 2955 */
345,
/* 2956 */
[7083, 2945, 1432],
/* 2957 */
[7085, 2950, 539],
/* 2958 */
[7111, 26, 2917, 18, 6, 3055, 3054, 3056, 1458, 441, 11],
/* 2959 */
[7112, 6, 18, 11, 808, 188],
/* 2960 */
[7113, 18, 188],
/* 2961 */
[7114, 18, 188],
/* 2962 */
[7115, 18, 188],
/* 2963 */
[7117, 188, 2959, 2960, 2962, 2964, 2965, 2961],
/* 2964 */
[7118, 18, 188],
/* 2965 */
[7119, 18, 188],
/* 2966 */
[7120, 6, 11],
/* 2967 */
[7122, 6, 11],
/* 2968 */
[7124, 26, 18, 6, 1437, 1444, 11, 808],
/* 2969 */
[7087, 99, 26, 18, 6, 290, 11],
/* 2970 */
[7090, 26, 6, 18, 11, 290],
/* 2971 */
2469,
/* 2972 */
[7091, 26, 18, 441],
/* 2973 */
[7092, 6, 11],
/* 2974 */
[7093, 26],
/* 2975 */
[7094, 26, 18, 6, 290, 11],
/* 2976 */
[7096, 26, 6, 2978, 11],
/* 2977 */
[7097, 26, 6, 11],
/* 2978 */
[7098, 6, 536, 11, 2977],
/* 2979 */
[7099, 26, 18, 6, 811, 11],
/* 2980 */
[7100, 99, 26, 6, 11],
/* 2981 */
2479,
/* 2982 */
[7102, 26, 18, 6, 1439, 2980, 290, 11],
/* 2983 */
[7103, 26, 2981],
/* 2984 */
[7104, 26, 18, 6, 2987, 441, 290, 2999, 11],
/* 2985 */
[7107, 99, 18, 6, 1441, 11],
/* 2986 */
[7108, 26, 797, 6, 18, 1440, 810, 11, 1457],
/* 2987 */
[7019, 18, 2997, 1442, 2996, 1444, 2988],
/* 2988 */
[7020, 2990, 2989, 2993, 2991, 2995],
/* 2989 */
2377,
/* 2990 */
2378,
/* 2991 */
[7021, 2992],
/* 2992 */
2380,
/* 2993 */
[7022, 2994],
/* 2994 */
2380,
/* 2995 */
2383,
/* 2996 */
2387,
/* 2997 */
[7025, 2998],
/* 2998 */
2389,
/* 2999 */
745,
/* 3000 */
[7125, 3001],
/* 3001 */
[7126, 3002],
/* 3002 */
2508,
/* 3003 */
[7109, 6983],
/* 3004 */
2486,
/* 3005 */
[7027, 3006],
/* 3006 */
2392,
/* 3007 */
2384,
/* 3008 */
[7023, 1443],
/* 3009 */
2510,
/* 3010 */
1322,
/* 3011 */
[7127, 3019, 3031, 542, 3051],
/* 3012 */
[7128, 3013],
/* 3013 */
[7129, 1446, 3022, 3041],
/* 3014 */
[7131, 3035, 541],
/* 3015 */
1324,
/* 3016 */
2518,
/* 3017 */
2519,
/* 3018 */
[7132, 356],
/* 3019 */
[7134, 3026, 3027, 540, 1461, 3061],
/* 3020 */
[7135, 3015, 1446, 1447, 1449, 3047, 3048, 3049, 162, 131],
/* 3021 */
1327,
/* 3022 */
[7136, 1449, 3037],
/* 3023 */
[7138, 1448, 1460],
/* 3024 */
[7143, 3042, 3043, 3044, 162, 3057],
/* 3025 */
[7144, 1452, 190],
/* 3026 */
[7145, 3025, 3045, 190],
/* 3027 */
[7146, 1450, 1452, 3029, 162, 1454, 1455, 3010, 190, 1456],
/* 3028 */
[7147, 1450, 1456],
/* 3029 */
1335,
/* 3030 */
749,
/* 3031 */
[7148, 1451, 3034, 3039],
/* 3032 */
2532,
/* 3033 */
2533,
/* 3034 */
[7150, 131],
/* 3035 */
[7151, 131],
/* 3036 */
[7152, 540, 542, 1445],
/* 3037 */
[7153, 812, 291, 190],
/* 3038 */
[7154, 190],
/* 3039 */
[7155, 3014, 541],
/* 3040 */
[7156, 1445],
/* 3041 */
[7157, 540, 162],
/* 3042 */
[7158, 3016],
/* 3043 */
2543,
/* 3044 */
[7159, 356],
/* 3045 */
[7161, 1455, 3059],
/* 3046 */
2547,
/* 3047 */
2548,
/* 3048 */
[7163, 3033],
/* 3049 */
2550,
/* 3050 */
[7168, 815, 162, 814, 291, 1460],
/* 3051 */
2552,
/* 3052 */
[7175, 131],
/* 3053 */
[7176, 3052, 189],
/* 3054 */
[7177, 189],
/* 3055 */
[7178, 3023, 815, 189],
/* 3056 */
[7179, 131],
/* 3057 */
[7181, 291, 189],
/* 3058 */
[7183, 1459, 3017, 3040],
/* 3059 */
[7187, 356, 190],
/* 3060 */
[7188, 3032, 356],
/* 3061 */
[7189, 1453, 3028, 1454],
/* 3062 */
2504,
/* 3063 */
[7030, 3072],
/* 3064 */
[7032, 3074],
/* 3065 */
[7033, 3075],
/* 3066 */
[7034, 3076],
/* 3067 */
[7035, 3077],
/* 3068 */
[7039, 3079],
/* 3069 */
[7040, 3066, 3065, 3064],
/* 3070 */
1821,
/* 3071 */
[7042, 3104, 3103, 3096],
/* 3072 */
[7043, 3098],
/* 3073 */
[7044, 111],
/* 3074 */
[7045, 111],
/* 3075 */
[7046, 111, 3099],
/* 3076 */
[7047, 111, 3100],
/* 3077 */
[7048, 825, 191],
/* 3078 */
[7049, 3101, 191],
/* 3079 */
[7051, 825, 191],
/* 3080 */
[7052, 825, 3102, 191],
/* 3081 */
2441,
/* 3082 */
2442,
/* 3083 */
[7054, 817, 357],
/* 3084 */
[7055, 3081],
/* 3085 */
[7057, 111],
/* 3086 */
[7061, 817],
/* 3087 */
[7062, 817],
/* 3088 */
514,
/* 3089 */
[7063, 111, 823, 824, 821, 357],
/* 3090 */
1304,
/* 3091 */
[7065, 111, 442],
/* 3092 */
[7071, 3093, 818],
/* 3093 */
1309,
/* 3094 */
[7073, 818],
/* 3095 */
[7075, 3083, 357, 545, 191],
/* 3096 */
[7076, 1466, 3095, 191],
/* 3097 */
[7077, 3082, 3090, 545, 442, 1469],
/* 3098 */
[7078, 543],
/* 3099 */
[7079, 442, 822],
/* 3100 */
[7080, 822, 1468],
/* 3101 */
[7081, 3094, 822],
/* 3102 */
345,
/* 3103 */
[7083, 3092, 1469],
/* 3104 */
[7085, 3097, 545],
/* 3105 */
[7086, 816, 69, 45, 3201, 3209, 358, 1482, 59],
/* 3106 */
[7087, 292, 83, 69, 45, 293, 59],
/* 3107 */
[7090, 83, 45, 69, 59, 293],
/* 3108 */
2469,
/* 3109 */
[7091, 83, 69, 358],
/* 3110 */
[7092, 45, 59],
/* 3111 */
[7093, 83],
/* 3112 */
[7094, 83, 69, 45, 293, 59],
/* 3113 */
[7096, 83, 45, 3115, 59],
/* 3114 */
[7097, 83, 45, 59],
/* 3115 */
[7098, 45, 1465, 59, 3114],
/* 3116 */
[7099, 83, 69, 45, 829, 59],
/* 3117 */
[7100, 292, 83, 45, 59],
/* 3118 */
2479,
/* 3119 */
[7102, 83, 69, 45, 1475, 3117, 293, 59],
/* 3120 */
[7103, 83, 3118],
/* 3121 */
[7104, 83, 69, 45, 3124, 358, 293, 1482, 59],
/* 3122 */
[7107, 292, 69, 45, 1477, 59],
/* 3123 */
[7108, 83, 1464, 45, 69, 1476, 827, 59, 1495],
/* 3124 */
[7019, 69, 3137, 1479, 3136, 3135, 3125],
/* 3125 */
[7020, 3127, 3126, 3130, 3128, 3132],
/* 3126 */
2377,
/* 3127 */
2378,
/* 3128 */
[7021, 3129],
/* 3129 */
2380,
/* 3130 */
[7022, 3131],
/* 3131 */
2380,
/* 3132 */
2383,
/* 3133 */
2384,
/* 3134 */
[7023, 1478],
/* 3135 */
[7024, 3133, 1478, 3134],
/* 3136 */
2387,
/* 3137 */
[7025, 3138],
/* 3138 */
2389,
/* 3139 */
[7125, 3140],
/* 3140 */
[7126, 3141],
/* 3141 */
2508,
/* 3142 */
[7109, 6984],
/* 3143 */
2486,
/* 3144 */
[7027, 3145],
/* 3145 */
2392,
/* 3146 */
[7111, 83, 3063, 69, 45, 3205, 3204, 3206, 1496, 358, 59],
/* 3147 */
[7112, 45, 69, 59, 828, 192],
/* 3148 */
[7113, 69, 192],
/* 3149 */
[7114, 69, 192],
/* 3150 */
[7115, 69, 192],
/* 3151 */
[7117, 192, 3147, 3148, 3150, 3152, 3153, 3149],
/* 3152 */
[7118, 69, 192],
/* 3153 */
[7119, 69, 192],
/* 3154 */
[7120, 45, 59],
/* 3155 */
[7122, 45, 59],
/* 3156 */
[7124, 83, 69, 45, 1480, 3159, 59, 828],
/* 3157 */
2384,
/* 3158 */
[7023, 1481],
/* 3159 */
[7024, 3157, 1481, 3158],
/* 3160 */
2504,
/* 3161 */
2510,
/* 3162 */
[7127, 3170, 3180, 548, 3200],
/* 3163 */
[7128, 3164],
/* 3164 */
[7129, 1485, 3172, 3190],
/* 3165 */
[7131, 3184, 546],
/* 3166 */
1324,
/* 3167 */
2518,
/* 3168 */
2519,
/* 3169 */
[7132, 359],
/* 3170 */
[7134, 3176, 3177, 443, 1499, 3212],
/* 3171 */
1327,
/* 3172 */
[7136, 1489, 3186],
/* 3173 */
[7138, 1488, 1498],
/* 3174 */
[7143, 3191, 3192, 3193, 155, 3207],
/* 3175 */
[7144, 1491, 195],
/* 3176 */
[7145, 3175, 3194, 195],
/* 3177 */
[7146, 830, 1491, 1493, 155, 833, 1494, 1483, 195, 834],
/* 3178 */
[7147, 830, 834],
/* 3179 */
749,
/* 3180 */
[7148, 1490, 3183, 3188],
/* 3181 */
2532,
/* 3182 */
2533,
/* 3183 */
[7150, 132],
/* 3184 */
[7151, 132],
/* 3185 */
[7152, 443, 548, 1484],
/* 3186 */
[7153, 831, 193, 195],
/* 3187 */
[7154, 195],
/* 3188 */
[7155, 3165, 546],
/* 3189 */
[7156, 1484],
/* 3190 */
[7157, 443, 155],
/* 3191 */
[7158, 3167],
/* 3192 */
2543,
/* 3193 */
[7159, 359],
/* 3194 */
[7161, 1494, 3210],
/* 3195 */
2547,
/* 3196 */
2548,
/* 3197 */
[7163, 3182],
/* 3198 */
2550,
/* 3199 */
[7168, 549, 155, 547, 193, 1498],
/* 3200 */
2552,
/* 3201 */
[7172, 1487, 443],
/* 3202 */
[7175, 132],
/* 3203 */
[7176, 3202, 194],
/* 3204 */
[7177, 194],
/* 3205 */
[7178, 3173, 549, 194],
/* 3206 */
[7179, 132],
/* 3207 */
[7181, 193, 194],
/* 3208 */
[7183, 1497, 3168, 3189],
/* 3209 */
[7184, 830, 1493, 549, 155, 547, 833, 193, 1483, 834],
/* 3210 */
[7187, 359, 195],
/* 3211 */
[7188, 3181, 359],
/* 3212 */
[7189, 1492, 3178, 833],
/* 3213 */
[7029, 3214],
/* 3214 */
[7042, 3238, 3237, 3235],
/* 3215 */
2441,
/* 3216 */
2442,
/* 3217 */
[7053, 3224],
/* 3218 */
[7054, 1501, 444],
/* 3219 */
[7055, 3215],
/* 3220 */
[7056, 3222],
/* 3221 */
[7058, 836, 835, 3219],
/* 3222 */
422,
/* 3223 */
[7061, 1501],
/* 3224 */
514,
/* 3225 */
[7063, 551, 1505, 1506, 837, 444],
/* 3226 */
1304,
/* 3227 */
1305,
/* 3228 */
[7067, 837],
/* 3229 */
[7070, 836],
/* 3230 */
[7071, 3231, 1502],
/* 3231 */
1309,
/* 3232 */
[7072, 3223, 1502],
/* 3233 */
740,
/* 3234 */
[7075, 3218, 444, 550, 835],
/* 3235 */
[7076, 3217, 3234, 835],
/* 3236 */
[7077, 3216, 3226, 550, 3232, 1504],
/* 3237 */
[7083, 3230, 1504],
/* 3238 */
[7085, 3236, 550],
/* 3239 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(19)["default"];

	var _interopRequireDefault = __webpack_require__(20)["default"];

	var _interopRequireWildcard = __webpack_require__(7)["default"];

	exports.__esModule = true;

	var _babelHelperBindifyDecorators = __webpack_require__(3240);

	var _babelHelperBindifyDecorators2 = _interopRequireDefault(_babelHelperBindifyDecorators);

	var _babelTypes = __webpack_require__(13);

	var t = _interopRequireWildcard(_babelTypes);

	/*:: import type { NodePath } from "babel-traverse"*/
	exports["default"] = function (classPath) {
	  classPath.assertClass();

	  var memoisedExpressions = [];

	  function maybeMemoise(path) {
	    if (!path.node || path.isPure()) return;

	    var uid = classPath.scope.generateDeclaredUidIdentifier();
	    memoisedExpressions.push(t.assignmentExpression("=", uid, path.node));
	    path.replaceWith(uid);
	  }

	  function memoiseDecorators(paths /*: Array<NodePath>*/) {
	    if (!Array.isArray(paths) || !paths.length) return;

	    // ensure correct evaluation order of decorators
	    paths = paths.reverse();

	    // bind decorators if they're member expressions
	    _babelHelperBindifyDecorators2["default"](paths);

	    for (var _iterator = paths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var path = _ref;

	      maybeMemoise(path);
	    }
	  }

	  maybeMemoise(classPath.get("superClass"));
	  memoiseDecorators(classPath.get("decorators"), true);

	  var methods /*: Array<NodePath>*/ = classPath.get("body.body");
	  for (var _iterator2 = methods, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	    var _ref2;

	    if (_isArray2) {
	      if (_i2 >= _iterator2.length) break;
	      _ref2 = _iterator2[_i2++];
	    } else {
	      _i2 = _iterator2.next();
	      if (_i2.done) break;
	      _ref2 = _i2.value;
	    }

	    var methodPath = _ref2;

	    if (methodPath.is("computed")) {
	      maybeMemoise(methodPath.get("key"));
	    }

	    if (methodPath.has("decorators")) {
	      memoiseDecorators(classPath.get("decorators"));
	    }
	  }

	  if (memoisedExpressions) {
	    classPath.insertBefore(memoisedExpressions.map(function (expr) {
	      return t.expressionStatement(expr);
	    }));
	  }
	};

	module.exports = exports["default"];

/***/ },
/* 3240 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(19)["default"];

	var _interopRequireWildcard = __webpack_require__(7)["default"];

	exports.__esModule = true;
	exports["default"] = bindifyDecorators;

	var _babelTypes = __webpack_require__(13);

	var t = _interopRequireWildcard(_babelTypes);

	/*:: import type { NodePath } from "babel-traverse"*/
	function bindifyDecorators(decorators /*: Array<NodePath>*/) /*: Array<NodePath>*/ {
	  for (var _iterator = decorators, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var decoratorPath = _ref;

	    var decorator = decoratorPath.node;
	    var expression = decorator.expression;
	    if (!t.isMemberExpression(expression)) continue;

	    var temp = decoratorPath.scope.maybeGenerateMemoised(expression.object);
	    var ref = undefined;

	    var nodes = [];

	    if (temp) {
	      ref = temp;
	      nodes.push(t.assignmentExpression("=", temp, expression.object));
	    } else {
	      ref = expression.object;
	    }

	    nodes.push(t.callExpression(t.memberExpression(t.memberExpression(ref, expression.property, expression.computed), t.identifier("bind")), [ref]));

	    if (nodes.length === 1) {
	      decorator.expression = nodes[0];
	    } else {
	      decorator.expression = t.sequenceExpression(nodes);
	    }
	  }
	}

	module.exports = exports["default"];

/***/ },
/* 3241 */
[7030, 3249],
/* 3242 */
[7032, 3251],
/* 3243 */
[7033, 3252],
/* 3244 */
[7034, 3253],
/* 3245 */
[7039, 3256],
/* 3246 */
[7040, 3244, 3243, 3242],
/* 3247 */
1821,
/* 3248 */
[7042, 3281, 3280, 3273],
/* 3249 */
[7043, 3275],
/* 3250 */
[7044, 112],
/* 3251 */
[7045, 112],
/* 3252 */
[7046, 112, 3276],
/* 3253 */
[7047, 112, 3277],
/* 3254 */
[7048, 848, 196],
/* 3255 */
[7049, 3278, 196],
/* 3256 */
[7051, 848, 196],
/* 3257 */
[7052, 848, 3279, 196],
/* 3258 */
2441,
/* 3259 */
2442,
/* 3260 */
[7054, 840, 360],
/* 3261 */
[7055, 3258],
/* 3262 */
[7057, 112],
/* 3263 */
[7061, 840],
/* 3264 */
[7062, 840],
/* 3265 */
514,
/* 3266 */
[7063, 112, 846, 847, 844, 360],
/* 3267 */
1304,
/* 3268 */
[7065, 112, 445],
/* 3269 */
[7071, 3270, 841],
/* 3270 */
1309,
/* 3271 */
[7073, 841],
/* 3272 */
[7075, 3260, 360, 556, 196],
/* 3273 */
[7076, 1509, 3272, 196],
/* 3274 */
[7077, 3259, 3267, 556, 445, 1512],
/* 3275 */
[7078, 554],
/* 3276 */
[7079, 445, 845],
/* 3277 */
[7080, 845, 1511],
/* 3278 */
[7081, 3271, 845],
/* 3279 */
345,
/* 3280 */
[7083, 3269, 1512],
/* 3281 */
[7085, 3274, 556],
/* 3282 */
[7086, 839, 20, 7, 3349, 3354, 446, 1523, 13],
/* 3283 */
[7087, 100, 19, 20, 7, 294, 13],
/* 3284 */
[7090, 19, 7, 20, 13, 294],
/* 3285 */
2469,
/* 3286 */
[7091, 19, 20, 446],
/* 3287 */
[7092, 7, 13],
/* 3288 */
[7093, 19],
/* 3289 */
[7094, 19, 20, 7, 294, 13],
/* 3290 */
[7096, 19, 7, 3292, 13],
/* 3291 */
[7097, 19, 7, 13],
/* 3292 */
[7098, 7, 553, 13, 3291],
/* 3293 */
[7099, 19, 20, 7, 851, 13],
/* 3294 */
[7100, 100, 19, 7, 13],
/* 3295 */
2479,
/* 3296 */
[7102, 19, 20, 7, 1518, 3294, 294, 13],
/* 3297 */
[7103, 19, 3295],
/* 3298 */
[7104, 19, 20, 7, 3301, 446, 294, 1523, 13],
/* 3299 */
[7107, 100, 20, 7, 1520, 13],
/* 3300 */
[7108, 19, 838, 7, 20, 1519, 850, 13, 3348],
/* 3301 */
[7019, 20, 3314, 1522, 3313, 3312, 3302],
/* 3302 */
[7020, 3304, 3303, 3307, 3305, 3309],
/* 3303 */
2377,
/* 3304 */
2378,
/* 3305 */
[7021, 3306],
/* 3306 */
2380,
/* 3307 */
[7022, 3308],
/* 3308 */
2380,
/* 3309 */
2383,
/* 3310 */
2384,
/* 3311 */
[7023, 1521],
/* 3312 */
[7024, 3310, 1521, 3311],
/* 3313 */
2387,
/* 3314 */
[7025, 3315],
/* 3315 */
2389,
/* 3316 */
[7125, 3317],
/* 3317 */
[7126, 3318],
/* 3318 */
2508,
/* 3319 */
[7109, 6985],
/* 3320 */
2486,
/* 3321 */
[7027, 3322],
/* 3322 */
2392,
/* 3323 */
1322,
/* 3324 */
1324,
/* 3325 */
746,
/* 3326 */
2519,
/* 3327 */
[7132, 559],
/* 3328 */
1327,
/* 3329 */
[7137, 3339],
/* 3330 */
[7139, 3329, 559],
/* 3331 */
[7140, 855],
/* 3332 */
[7141, 3341],
/* 3333 */
1334,
/* 3334 */
1335,
/* 3335 */
749,
/* 3336 */
2532,
/* 3337 */
2533,
/* 3338 */
[7152, 852, 854, 1524],
/* 3339 */
[7154, 855],
/* 3340 */
[7156, 1524],
/* 3341 */
2547,
/* 3342 */
2548,
/* 3343 */
[7163, 3337],
/* 3344 */
2550,
/* 3345 */
[7166, 295, 855],
/* 3346 */
[7168, 856, 295, 557, 361, 3355],
/* 3347 */
[7170, 3335, 295],
/* 3348 */
[7171, 1526, 852, 854],
/* 3349 */
[7172, 1526, 852],
/* 3350 */
[7175, 362],
/* 3351 */
[7176, 3350, 558],
/* 3352 */
[7180, 558],
/* 3353 */
[7183, 1529, 3326, 3340],
/* 3354 */
[7184, 3331, 3334, 856, 295, 557, 3345, 361, 3323, 3347],
/* 3355 */
[7186, 856, 295, 557, 361, 362],
/* 3356 */
[7188, 3336, 559],
/* 3357 */
1345,
/* 3358 */
[7111, 19, 3241, 20, 7, 3455, 3454, 3456, 1551, 447, 13],
/* 3359 */
[7112, 7, 20, 13, 857, 197],
/* 3360 */
[7113, 20, 197],
/* 3361 */
[7114, 20, 197],
/* 3362 */
[7115, 20, 197],
/* 3363 */
[7117, 197, 3359, 3360, 3362, 3364, 3365, 3361],
/* 3364 */
[7118, 20, 197],
/* 3365 */
[7119, 20, 197],
/* 3366 */
[7120, 7, 13],
/* 3367 */
[7122, 7, 13],
/* 3368 */
[7124, 19, 20, 7, 1530, 1537, 13, 857],
/* 3369 */
[7087, 100, 19, 20, 7, 296, 13],
/* 3370 */
[7090, 19, 7, 20, 13, 296],
/* 3371 */
2469,
/* 3372 */
[7091, 19, 20, 447],
/* 3373 */
[7092, 7, 13],
/* 3374 */
[7093, 19],
/* 3375 */
[7094, 19, 20, 7, 296, 13],
/* 3376 */
[7096, 19, 7, 3378, 13],
/* 3377 */
[7097, 19, 7, 13],
/* 3378 */
[7098, 7, 553, 13, 3377],
/* 3379 */
[7099, 19, 20, 7, 860, 13],
/* 3380 */
[7100, 100, 19, 7, 13],
/* 3381 */
2479,
/* 3382 */
[7102, 19, 20, 7, 1532, 3380, 296, 13],
/* 3383 */
[7103, 19, 3381],
/* 3384 */
[7104, 19, 20, 7, 3387, 447, 296, 3399, 13],
/* 3385 */
[7107, 100, 20, 7, 1534, 13],
/* 3386 */
[7108, 19, 838, 7, 20, 1533, 859, 13, 1550],
/* 3387 */
[7019, 20, 3397, 1535, 3396, 1537, 3388],
/* 3388 */
[7020, 3390, 3389, 3393, 3391, 3395],
/* 3389 */
2377,
/* 3390 */
2378,
/* 3391 */
[7021, 3392],
/* 3392 */
2380,
/* 3393 */
[7022, 3394],
/* 3394 */
2380,
/* 3395 */
2383,
/* 3396 */
2387,
/* 3397 */
[7025, 3398],
/* 3398 */
2389,
/* 3399 */
745,
/* 3400 */
[7125, 3401],
/* 3401 */
[7126, 3402],
/* 3402 */
2508,
/* 3403 */
[7109, 6986],
/* 3404 */
2486,
/* 3405 */
[7027, 3406],
/* 3406 */
2392,
/* 3407 */
2384,
/* 3408 */
[7023, 1536],
/* 3409 */
2510,
/* 3410 */
1322,
/* 3411 */
[7127, 3419, 3431, 562, 3451],
/* 3412 */
[7128, 3413],
/* 3413 */
[7129, 1539, 3422, 3441],
/* 3414 */
[7131, 3435, 561],
/* 3415 */
1324,
/* 3416 */
2518,
/* 3417 */
2519,
/* 3418 */
[7132, 363],
/* 3419 */
[7134, 3426, 3427, 560, 1554, 3461],
/* 3420 */
[7135, 3415, 1539, 1540, 1542, 3447, 3448, 3449, 163, 133],
/* 3421 */
1327,
/* 3422 */
[7136, 1542, 3437],
/* 3423 */
[7138, 1541, 1553],
/* 3424 */
[7143, 3442, 3443, 3444, 163, 3457],
/* 3425 */
[7144, 1545, 199],
/* 3426 */
[7145, 3425, 3445, 199],
/* 3427 */
[7146, 1543, 1545, 3429, 163, 1547, 1548, 3410, 199, 1549],
/* 3428 */
[7147, 1543, 1549],
/* 3429 */
1335,
/* 3430 */
749,
/* 3431 */
[7148, 1544, 3434, 3439],
/* 3432 */
2532,
/* 3433 */
2533,
/* 3434 */
[7150, 133],
/* 3435 */
[7151, 133],
/* 3436 */
[7152, 560, 562, 1538],
/* 3437 */
[7153, 861, 297, 199],
/* 3438 */
[7154, 199],
/* 3439 */
[7155, 3414, 561],
/* 3440 */
[7156, 1538],
/* 3441 */
[7157, 560, 163],
/* 3442 */
[7158, 3416],
/* 3443 */
2543,
/* 3444 */
[7159, 363],
/* 3445 */
[7161, 1548, 3459],
/* 3446 */
2547,
/* 3447 */
2548,
/* 3448 */
[7163, 3433],
/* 3449 */
2550,
/* 3450 */
[7168, 864, 163, 863, 297, 1553],
/* 3451 */
2552,
/* 3452 */
[7175, 133],
/* 3453 */
[7176, 3452, 198],
/* 3454 */
[7177, 198],
/* 3455 */
[7178, 3423, 864, 198],
/* 3456 */
[7179, 133],
/* 3457 */
[7181, 297, 198],
/* 3458 */
[7183, 1552, 3417, 3440],
/* 3459 */
[7187, 363, 199],
/* 3460 */
[7188, 3432, 363],
/* 3461 */
[7189, 1546, 3428, 1547],
/* 3462 */
2504,
/* 3463 */
[7029, 3464],
/* 3464 */
[7042, 3488, 3487, 3485],
/* 3465 */
2441,
/* 3466 */
2442,
/* 3467 */
[7053, 3474],
/* 3468 */
[7054, 1556, 448],
/* 3469 */
[7055, 3465],
/* 3470 */
[7056, 3472],
/* 3471 */
[7058, 868, 867, 3469],
/* 3472 */
422,
/* 3473 */
[7061, 1556],
/* 3474 */
514,
/* 3475 */
[7063, 564, 1560, 1561, 869, 448],
/* 3476 */
1304,
/* 3477 */
1305,
/* 3478 */
[7067, 869],
/* 3479 */
[7070, 868],
/* 3480 */
[7071, 3481, 1557],
/* 3481 */
1309,
/* 3482 */
[7072, 3473, 1557],
/* 3483 */
740,
/* 3484 */
[7075, 3468, 448, 563, 867],
/* 3485 */
[7076, 3467, 3484, 867],
/* 3486 */
[7077, 3466, 3476, 563, 3482, 1559],
/* 3487 */
[7083, 3480, 1559],
/* 3488 */
[7085, 3486, 563],
/* 3489 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireWildcard = __webpack_require__(38)["default"];

	exports.__esModule = true;

	var _babelTypes = __webpack_require__(46);

	var t = _interopRequireWildcard(_babelTypes);

	function getTDZStatus(refPath, bindingPath) {
	  var executionStatus = bindingPath._guessExecutionStatusRelativeTo(refPath);

	  if (executionStatus === "before") {
	    return "inside";
	  } else if (executionStatus === "after") {
	    return "outside";
	  } else {
	    return "maybe";
	  }
	}

	function buildTDZAssert(node, file) {
	  return t.callExpression(file.addHelper("temporalRef"), [node, t.stringLiteral(node.name), file.addHelper("temporalUndefined")]);
	}

	function isReference(node, scope, state) {
	  var declared = state.letReferences[node.name];
	  if (!declared) return false;

	  // declared node is different in this scope
	  return scope.getBindingIdentifier(node.name) === declared;
	}

	var visitor = {
	  ReferencedIdentifier: function ReferencedIdentifier(path, state) {
	    if (!this.file.opts.tdz) return;

	    var node = path.node;
	    var parent = path.parent;
	    var scope = path.scope;

	    if (path.parentPath.isFor({ left: node })) return;
	    if (!isReference(node, scope, state)) return;

	    var bindingPath = scope.getBinding(node.name).path;

	    var status = getTDZStatus(path, bindingPath);
	    if (status === "inside") return;

	    if (status === "maybe") {
	      var assert = buildTDZAssert(node, state.file);

	      // add tdzThis to parent variable declarator so it's exploded
	      bindingPath.parent._tdzThis = true;

	      path.skip();

	      if (path.parentPath.isUpdateExpression()) {
	        if (parent._ignoreBlockScopingTDZ) return;
	        path.parentPath.replaceWith(t.sequenceExpression([assert, parent]));
	      } else {
	        path.replaceWith(assert);
	      }
	    } else if (status === "outside") {
	      path.replaceWith(t.throwStatement(t.inherits(t.newExpression(t.identifier("ReferenceError"), [t.stringLiteral(node.name + " is not defined - temporal dead zone")]), node)));
	    }
	  },

	  AssignmentExpression: {
	    exit: function exit(path, state) {
	      if (!this.file.opts.tdz) return;

	      var node = path.node;

	      if (node._ignoreBlockScopingTDZ) return;

	      var nodes = [];
	      var ids = path.getBindingIdentifiers();

	      for (var _name in ids) {
	        var id = ids[_name];

	        if (isReference(id, path.scope, state)) {
	          nodes.push(buildTDZAssert(id, state.file));
	        }
	      }

	      if (nodes.length) {
	        node._ignoreBlockScopingTDZ = true;
	        nodes.push(node);
	        path.replaceWithMultiple(nodes.map(t.expressionStatement));
	      }
	    }
	  }
	};
	exports.visitor = visitor;

/***/ },
/* 3490 */
[7030, 3499],
/* 3491 */
[7032, 3501],
/* 3492 */
[7033, 3502],
/* 3493 */
[7034, 3503],
/* 3494 */
[7035, 3504],
/* 3495 */
[7039, 3506],
/* 3496 */
[7040, 3493, 3492, 3491],
/* 3497 */
1821,
/* 3498 */
[7042, 3531, 3530, 3523],
/* 3499 */
[7043, 3525],
/* 3500 */
[7044, 113],
/* 3501 */
[7045, 113],
/* 3502 */
[7046, 113, 3526],
/* 3503 */
[7047, 113, 3527],
/* 3504 */
[7048, 881, 201],
/* 3505 */
[7049, 3528, 201],
/* 3506 */
[7051, 881, 201],
/* 3507 */
[7052, 881, 3529, 201],
/* 3508 */
2441,
/* 3509 */
2442,
/* 3510 */
[7054, 873, 364],
/* 3511 */
[7055, 3508],
/* 3512 */
[7057, 113],
/* 3513 */
[7061, 873],
/* 3514 */
[7062, 873],
/* 3515 */
514,
/* 3516 */
[7063, 113, 879, 880, 877, 364],
/* 3517 */
1304,
/* 3518 */
[7065, 113, 449],
/* 3519 */
[7071, 3520, 874],
/* 3520 */
1309,
/* 3521 */
[7073, 874],
/* 3522 */
[7075, 3510, 364, 567, 201],
/* 3523 */
[7076, 1564, 3522, 201],
/* 3524 */
[7077, 3509, 3517, 567, 449, 1567],
/* 3525 */
[7078, 565],
/* 3526 */
[7079, 449, 878],
/* 3527 */
[7080, 878, 1566],
/* 3528 */
[7081, 3521, 878],
/* 3529 */
345,
/* 3530 */
[7083, 3519, 1567],
/* 3531 */
[7085, 3524, 567],
/* 3532 */
[7086, 872, 70, 38, 3630, 3639, 298, 3533, 46],
/* 3533 */
745,
/* 3534 */
[7087, 200, 89, 70, 38, 299, 46],
/* 3535 */
[7090, 89, 38, 70, 46, 299],
/* 3536 */
2469,
/* 3537 */
[7091, 89, 70, 298],
/* 3538 */
[7092, 38, 46],
/* 3539 */
[7093, 89],
/* 3540 */
[7094, 89, 70, 38, 299, 46],
/* 3541 */
[7096, 89, 38, 3543, 46],
/* 3542 */
[7097, 89, 38, 46],
/* 3543 */
[7098, 38, 1563, 46, 3542],
/* 3544 */
[7099, 89, 70, 38, 885, 46],
/* 3545 */
[7100, 200, 89, 38, 46],
/* 3546 */
2479,
/* 3547 */
[7102, 89, 70, 38, 1573, 3545, 299, 46],
/* 3548 */
[7103, 89, 3546],
/* 3549 */
[7104, 89, 70, 38, 3552, 298, 299, 3567, 46],
/* 3550 */
[7107, 200, 70, 38, 1575, 46],
/* 3551 */
[7108, 89, 1562, 38, 70, 1574, 883, 46, 1592],
/* 3552 */
[7019, 70, 3565, 1577, 3564, 3563, 3553],
/* 3553 */
[7020, 3555, 3554, 3558, 3556, 3560],
/* 3554 */
2377,
/* 3555 */
2378,
/* 3556 */
[7021, 3557],
/* 3557 */
2380,
/* 3558 */
[7022, 3559],
/* 3559 */
2380,
/* 3560 */
2383,
/* 3561 */
2384,
/* 3562 */
[7023, 1576],
/* 3563 */
[7024, 3561, 1576, 3562],
/* 3564 */
2387,
/* 3565 */
[7025, 3566],
/* 3566 */
2389,
/* 3567 */
745,
/* 3568 */
[7125, 3569],
/* 3569 */
[7126, 3570],
/* 3570 */
2508,
/* 3571 */
[7109, 6987],
/* 3572 */
2486,
/* 3573 */
[7027, 3574],
/* 3574 */
2392,
/* 3575 */
[7111, 89, 3490, 70, 38, 3634, 3633, 3635, 1593, 298, 46],
/* 3576 */
[7112, 38, 70, 46, 884, 202],
/* 3577 */
[7113, 70, 202],
/* 3578 */
[7114, 70, 202],
/* 3579 */
[7115, 70, 202],
/* 3580 */
[7117, 202, 3576, 3577, 3579, 3581, 3582, 3578],
/* 3581 */
[7118, 70, 202],
/* 3582 */
[7119, 70, 202],
/* 3583 */
[7120, 38, 46],
/* 3584 */
[7122, 38, 46],
/* 3585 */
[7124, 89, 70, 38, 1578, 3588, 46, 884],
/* 3586 */
2384,
/* 3587 */
[7023, 1579],
/* 3588 */
[7024, 3586, 1579, 3587],
/* 3589 */
2504,
/* 3590 */
2510,
/* 3591 */
[7127, 3599, 3609, 570, 3629],
/* 3592 */
[7128, 3593],
/* 3593 */
[7129, 1582, 3601, 3619],
/* 3594 */
[7131, 3613, 568],
/* 3595 */
1324,
/* 3596 */
2518,
/* 3597 */
2519,
/* 3598 */
[7132, 365],
/* 3599 */
[7134, 3605, 3606, 450, 1596, 3641],
/* 3600 */
1327,
/* 3601 */
[7136, 1586, 3615],
/* 3602 */
[7138, 1585, 1594],
/* 3603 */
[7143, 3620, 3621, 3622, 156, 3636],
/* 3604 */
[7144, 1588, 205],
/* 3605 */
[7145, 3604, 3623, 205],
/* 3606 */
[7146, 886, 1588, 1590, 156, 889, 1591, 1580, 205, 890],
/* 3607 */
[7147, 886, 890],
/* 3608 */
749,
/* 3609 */
[7148, 1587, 3612, 3617],
/* 3610 */
2532,
/* 3611 */
2533,
/* 3612 */
[7150, 134],
/* 3613 */
[7151, 134],
/* 3614 */
[7152, 450, 570, 1581],
/* 3615 */
[7153, 887, 203, 205],
/* 3616 */
[7154, 205],
/* 3617 */
[7155, 3594, 568],
/* 3618 */
[7156, 1581],
/* 3619 */
[7157, 450, 156],
/* 3620 */
[7158, 3596],
/* 3621 */
2543,
/* 3622 */
[7159, 365],
/* 3623 */
[7161, 1591, 3640],
/* 3624 */
2547,
/* 3625 */
2548,
/* 3626 */
[7163, 3611],
/* 3627 */
2550,
/* 3628 */
[7168, 571, 156, 569, 203, 1594],
/* 3629 */
2552,
/* 3630 */
[7172, 1584, 450],
/* 3631 */
[7175, 134],
/* 3632 */
[7176, 3631, 204],
/* 3633 */
[7177, 204],
/* 3634 */
[7178, 3602, 571, 204],
/* 3635 */
[7179, 134],
/* 3636 */
[7181, 203, 204],
/* 3637 */
[7183, 891, 3597, 3618],
/* 3638 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(891);


/***/ },
/* 3639 */
[7184, 886, 1590, 571, 156, 569, 889, 203, 1580, 890],
/* 3640 */
[7187, 365, 205],
/* 3641 */
[7189, 1589, 3607, 889],
/* 3642 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _inherits = __webpack_require__(3678)["default"];

	var _classCallCheck = __webpack_require__(157)["default"];

	var _interopRequireDefault = __webpack_require__(39)["default"];

	var _interopRequireWildcard = __webpack_require__(28)["default"];

	exports.__esModule = true;

	var _babelHelperFunctionName = __webpack_require__(896);

	var _babelHelperFunctionName2 = _interopRequireDefault(_babelHelperFunctionName);

	var _vanilla = __webpack_require__(1597);

	var _vanilla2 = _interopRequireDefault(_vanilla);

	var _babelTypes = __webpack_require__(31);

	var t = _interopRequireWildcard(_babelTypes);

	var LooseClassTransformer = (function (_VanillaTransformer) {
	  _inherits(LooseClassTransformer, _VanillaTransformer);

	  function LooseClassTransformer() {
	    _classCallCheck(this, LooseClassTransformer);

	    _VanillaTransformer.apply(this, arguments);
	    this.isLoose = true;
	  }

	  LooseClassTransformer.prototype._processMethod = function _processMethod(node, scope) {
	    if (!node.decorators) {
	      // use assignments instead of define properties for loose classes

	      var classRef = this.classRef;
	      if (!node["static"]) classRef = t.memberExpression(classRef, t.identifier("prototype"));
	      var methodName = t.memberExpression(classRef, node.key, node.computed || t.isLiteral(node.key));

	      var func = t.functionExpression(null, node.params, node.body, node.generator, node.async);
	      var key = t.toComputedKey(node, node.key);
	      if (t.isStringLiteral(key)) {
	        func = _babelHelperFunctionName2["default"]({
	          node: func,
	          id: key,
	          scope: scope
	        });
	      }

	      var expr = t.expressionStatement(t.assignmentExpression("=", methodName, func));
	      t.inheritsComments(expr, node);
	      this.body.push(expr);
	      return true;
	    }
	  };

	  return LooseClassTransformer;
	})(_vanilla2["default"]);

	exports["default"] = LooseClassTransformer;
	module.exports = exports["default"];

/***/ },
/* 3643 */
[7193, 39, 28, 896, 3645, 3664, 31],
/* 3644 */
1322,
/* 3645 */
[7128, 3646],
/* 3646 */
[7129, 3647, 3648, 3658],
/* 3647 */
746,
/* 3648 */
[7136, 3650, 3656],
/* 3649 */
[7137, 3657],
/* 3650 */
[7139, 3649, 3665],
/* 3651 */
[7140, 572],
/* 3652 */
1334,
/* 3653 */
1335,
/* 3654 */
749,
/* 3655 */
[7149, 3667],
/* 3656 */
[7153, 1598, 366, 572],
/* 3657 */
[7154, 572],
/* 3658 */
[7157, 3655, 367],
/* 3659 */
[7166, 367, 572],
/* 3660 */
[7168, 895, 367, 893, 366, 3666],
/* 3661 */
[7170, 3654, 367],
/* 3662 */
[7175, 573],
/* 3663 */
[7176, 3662, 894],
/* 3664 */
[7184, 3651, 3653, 895, 367, 893, 3659, 366, 3644, 3661],
/* 3665 */
[7185, 1599, 1600, 573, 3660],
/* 3666 */
[7186, 895, 367, 893, 366, 573],
/* 3667 */
1345,
/* 3668 */
[7192, 28, 31],
/* 3669 */
[7195, 157, 575, 39, 28, 1601, 574, 31],
/* 3670 */
[7030, 3681],
/* 3671 */
[7032, 3683],
/* 3672 */
[7033, 3684],
/* 3673 */
[7034, 3685],
/* 3674 */
[7035, 3686],
/* 3675 */
[7037, 3688],
/* 3676 */
[7039, 3689],
/* 3677 */
[7040, 3673, 3672, 3671],
/* 3678 */
[7041, 897, 3675],
/* 3679 */
1821,
/* 3680 */
[7042, 3714, 3713, 3705],
/* 3681 */
[7043, 3707],
/* 3682 */
[7044, 106],
/* 3683 */
[7045, 106],
/* 3684 */
[7046, 106, 3708],
/* 3685 */
[7047, 106, 3709],
/* 3686 */
[7048, 907, 164],
/* 3687 */
[7049, 3710, 164],
/* 3688 */
[7050, 3711, 164],
/* 3689 */
[7051, 907, 164],
/* 3690 */
[7052, 907, 3712, 164],
/* 3691 */
2441,
/* 3692 */
2442,
/* 3693 */
[7054, 899, 368],
/* 3694 */
[7057, 106],
/* 3695 */
[7061, 899],
/* 3696 */
[7062, 899],
/* 3697 */
[7063, 106, 905, 906, 903, 368],
/* 3698 */
1304,
/* 3699 */
[7065, 106, 452],
/* 3700 */
[7068, 106, 1607, 898, 1604],
/* 3701 */
[7071, 3702, 900],
/* 3702 */
1309,
/* 3703 */
[7073, 900],
/* 3704 */
[7075, 3693, 368, 577, 164],
/* 3705 */
[7076, 898, 3704, 164],
/* 3706 */
[7077, 3692, 3698, 577, 452, 1608],
/* 3707 */
[7078, 451],
/* 3708 */
[7079, 452, 904],
/* 3709 */
[7080, 904, 1606],
/* 3710 */
[7081, 3703, 904],
/* 3711 */
[7082, 451, 3700],
/* 3712 */
345,
/* 3713 */
[7083, 3701, 1608],
/* 3714 */
[7085, 3706, 577],
/* 3715 */
745,
/* 3716 */
1322,
/* 3717 */
1324,
/* 3718 */
746,
/* 3719 */
[7133, 3721, 1616],
/* 3720 */
[7135, 3717, 3718, 3719, 3723, 3732, 3733, 3734, 369, 454],
/* 3721 */
1327,
/* 3722 */
[7137, 3730],
/* 3723 */
[7139, 3722, 1616],
/* 3724 */
[7140, 910],
/* 3725 */
1334,
/* 3726 */
1335,
/* 3727 */
749,
/* 3728 */
[7149, 3743],
/* 3729 */
2533,
/* 3730 */
[7154, 910],
/* 3731 */
[7160, 3725],
/* 3732 */
2548,
/* 3733 */
[7163, 3729],
/* 3734 */
2550,
/* 3735 */
[7166, 369, 910],
/* 3736 */
[7168, 911, 369, 908, 453, 3742],
/* 3737 */
[7170, 3727, 369],
/* 3738 */
[7172, 3720, 3728],
/* 3739 */
[7175, 454],
/* 3740 */
[7176, 3739, 909],
/* 3741 */
[7184, 3724, 3726, 911, 369, 908, 3735, 453, 3716, 3737],
/* 3742 */
[7186, 911, 369, 908, 453, 454],
/* 3743 */
1345,
/* 3744 */
[7087, 157, 84, 39, 28, 301, 31],
/* 3745 */
[7090, 84, 28, 39, 31, 301],
/* 3746 */
2469,
/* 3747 */
[7091, 84, 39, 300],
/* 3748 */
[7092, 28, 31],
/* 3749 */
[7093, 84],
/* 3750 */
[7094, 84, 39, 28, 301, 31],
/* 3751 */
[7096, 84, 28, 3753, 31],
/* 3752 */
[7097, 84, 28, 31],
/* 3753 */
[7098, 28, 1603, 31, 3752],
/* 3754 */
[7099, 84, 39, 28, 913, 31],
/* 3755 */
[7100, 157, 84, 28, 31],
/* 3756 */
2479,
/* 3757 */
[7102, 84, 39, 28, 1618, 3755, 301, 31],
/* 3758 */
[7103, 84, 3756],
/* 3759 */
[7104, 84, 39, 28, 3762, 300, 301, 3777, 31],
/* 3760 */
[7107, 157, 39, 28, 1620, 31],
/* 3761 */
[7108, 84, 1602, 28, 39, 1619, 574, 31, 3804],
/* 3762 */
[7019, 39, 3775, 1629, 3774, 3773, 3763],
/* 3763 */
[7020, 3765, 3764, 3768, 3766, 3770],
/* 3764 */
2377,
/* 3765 */
2378,
/* 3766 */
[7021, 3767],
/* 3767 */
2380,
/* 3768 */
[7022, 3769],
/* 3769 */
2380,
/* 3770 */
2383,
/* 3771 */
2384,
/* 3772 */
[7023, 1621],
/* 3773 */
[7024, 3771, 1621, 3772],
/* 3774 */
2387,
/* 3775 */
[7025, 3776],
/* 3776 */
2389,
/* 3777 */
745,
/* 3778 */
[7125, 3779],
/* 3779 */
[7126, 3780],
/* 3780 */
2508,
/* 3781 */
[7109, 6988],
/* 3782 */
2486,
/* 3783 */
1324,
/* 3784 */
746,
/* 3785 */
2519,
/* 3786 */
[7132, 580],
/* 3787 */
[7135, 3783, 3784, 1623, 3790, 3799, 3800, 3801, 579, 370],
/* 3788 */
1327,
/* 3789 */
[7137, 3796],
/* 3790 */
[7139, 3789, 580],
/* 3791 */
[7141, 3798],
/* 3792 */
1334,
/* 3793 */
2532,
/* 3794 */
2533,
/* 3795 */
[7152, 1624, 916, 1622],
/* 3796 */
[7154, 3803],
/* 3797 */
[7156, 1622],
/* 3798 */
2547,
/* 3799 */
2548,
/* 3800 */
[7163, 3794],
/* 3801 */
2550,
/* 3802 */
[7168, 1627, 579, 915, 455, 3809],
/* 3803 */
[7169, 370],
/* 3804 */
[7171, 3787, 1624, 916],
/* 3805 */
[7175, 370],
/* 3806 */
[7176, 3805, 578],
/* 3807 */
[7180, 578],
/* 3808 */
[7183, 1628, 3785, 3797],
/* 3809 */
[7186, 1627, 579, 915, 455, 370],
/* 3810 */
[7188, 3793, 580],
/* 3811 */
1345,
/* 3812 */
[7027, 3813],
/* 3813 */
2392,
/* 3814 */
[7111, 84, 3670, 39, 28, 3872, 3871, 3873, 3874, 300, 31],
/* 3815 */
[7112, 28, 39, 31, 917, 206],
/* 3816 */
[7113, 39, 206],
/* 3817 */
[7114, 39, 206],
/* 3818 */
[7115, 39, 206],
/* 3819 */
[7117, 206, 3815, 3816, 3818, 3820, 3821, 3817],
/* 3820 */
[7118, 39, 206],
/* 3821 */
[7119, 39, 206],
/* 3822 */
[7120, 28, 31],
/* 3823 */
[7122, 28, 31],
/* 3824 */
[7124, 84, 39, 28, 1630, 3827, 31, 917],
/* 3825 */
2384,
/* 3826 */
[7023, 1631],
/* 3827 */
[7024, 3825, 1631, 3826],
/* 3828 */
2510,
/* 3829 */
1322,
/* 3830 */
[7127, 3837, 3850, 1639, 3867],
/* 3831 */
[7128, 3832],
/* 3832 */
[7129, 1632, 3840, 3857],
/* 3833 */
[7131, 3853, 581],
/* 3834 */
1324,
/* 3835 */
2518,
/* 3836 */
[7133, 3839, 582],
/* 3837 */
[7134, 3845, 3846, 918, 1644, 3877],
/* 3838 */
[7135, 3834, 1632, 3836, 1634, 3863, 3864, 3865, 209, 135],
/* 3839 */
1327,
/* 3840 */
[7136, 1634, 3854],
/* 3841 */
[7138, 1633, 1643],
/* 3842 */
[7141, 3862],
/* 3843 */
[7143, 3858, 3859, 3860, 209, 3875],
/* 3844 */
[7144, 1636, 208],
/* 3845 */
[7145, 3844, 3861, 208],
/* 3846 */
[7146, 1635, 1636, 3848, 209, 1640, 1641, 3829, 208, 1642],
/* 3847 */
[7147, 1635, 1642],
/* 3848 */
1335,
/* 3849 */
749,
/* 3850 */
[7148, 3842, 3852, 3856],
/* 3851 */
2533,
/* 3852 */
[7150, 135],
/* 3853 */
[7151, 135],
/* 3854 */
[7153, 1638, 371, 208],
/* 3855 */
[7154, 208],
/* 3856 */
[7155, 3833, 581],
/* 3857 */
[7157, 918, 209],
/* 3858 */
[7158, 3835],
/* 3859 */
2543,
/* 3860 */
[7159, 582],
/* 3861 */
[7161, 1641, 3876],
/* 3862 */
2547,
/* 3863 */
2548,
/* 3864 */
[7163, 3851],
/* 3865 */
2550,
/* 3866 */
[7168, 921, 209, 920, 371, 1643],
/* 3867 */
2552,
/* 3868 */
[7171, 3838, 918, 1639],
/* 3869 */
[7175, 135],
/* 3870 */
[7176, 3869, 207],
/* 3871 */
[7177, 207],
/* 3872 */
[7178, 3841, 921, 207],
/* 3873 */
[7179, 135],
/* 3874 */
[7180, 207],
/* 3875 */
[7181, 371, 207],
/* 3876 */
[7187, 582, 208],
/* 3877 */
[7189, 1637, 3847, 1640],
/* 3878 */
2504,
/* 3879 */
[7029, 3880],
/* 3880 */
[7042, 3904, 3903, 3901],
/* 3881 */
2441,
/* 3882 */
2442,
/* 3883 */
[7053, 3890],
/* 3884 */
[7054, 1645, 456],
/* 3885 */
[7055, 3881],
/* 3886 */
[7056, 3888],
/* 3887 */
[7058, 924, 923, 3885],
/* 3888 */
422,
/* 3889 */
[7061, 1645],
/* 3890 */
514,
/* 3891 */
[7063, 584, 1649, 1650, 925, 456],
/* 3892 */
1304,
/* 3893 */
1305,
/* 3894 */
[7067, 925],
/* 3895 */
[7070, 924],
/* 3896 */
[7071, 3897, 1646],
/* 3897 */
1309,
/* 3898 */
[7072, 3889, 1646],
/* 3899 */
740,
/* 3900 */
[7075, 3884, 456, 583, 923],
/* 3901 */
[7076, 3883, 3900, 923],
/* 3902 */
[7077, 3882, 3892, 583, 3898, 1648],
/* 3903 */
[7083, 3896, 1648],
/* 3904 */
[7085, 3902, 583],
/* 3905 */
[7029, 3907],
/* 3906 */
82,
/* 3907 */
[7042, 3931, 3930, 3928],
/* 3908 */
2441,
/* 3909 */
2442,
/* 3910 */
[7053, 3917],
/* 3911 */
[7054, 1651, 457],
/* 3912 */
[7055, 3908],
/* 3913 */
[7056, 3915],
/* 3914 */
[7058, 928, 927, 3912],
/* 3915 */
422,
/* 3916 */
[7061, 1651],
/* 3917 */
514,
/* 3918 */
[7063, 586, 1655, 1656, 929, 457],
/* 3919 */
1304,
/* 3920 */
1305,
/* 3921 */
[7067, 929],
/* 3922 */
[7070, 928],
/* 3923 */
[7071, 3924, 1652],
/* 3924 */
1309,
/* 3925 */
[7072, 3916, 1652],
/* 3926 */
740,
/* 3927 */
[7075, 3911, 457, 585, 927],
/* 3928 */
[7076, 3910, 3927, 927],
/* 3929 */
[7077, 3909, 3919, 585, 3925, 1654],
/* 3930 */
[7083, 3923, 1654],
/* 3931 */
[7085, 3929, 585],
/* 3932 */
[7191, 21, 8, 3933, 3934, 14],
/* 3933 */
[7192, 8, 14],
/* 3934 */
[7086, 944, 21, 8, 3958, 3961, 460, 3935, 14],
/* 3935 */
745,
/* 3936 */
1322,
/* 3937 */
1324,
/* 3938 */
746,
/* 3939 */
[7133, 3941, 1659],
/* 3940 */
[7135, 3937, 3938, 3939, 3943, 3952, 3953, 3954, 372, 459],
/* 3941 */
1327,
/* 3942 */
[7137, 3950],
/* 3943 */
[7139, 3942, 1659],
/* 3944 */
[7140, 934],
/* 3945 */
1334,
/* 3946 */
1335,
/* 3947 */
749,
/* 3948 */
[7149, 3963],
/* 3949 */
2533,
/* 3950 */
[7154, 934],
/* 3951 */
[7160, 3945],
/* 3952 */
2548,
/* 3953 */
[7163, 3949],
/* 3954 */
2550,
/* 3955 */
[7166, 372, 934],
/* 3956 */
[7168, 935, 372, 932, 458, 3962],
/* 3957 */
[7170, 3947, 372],
/* 3958 */
[7172, 3940, 3948],
/* 3959 */
[7175, 459],
/* 3960 */
[7176, 3959, 933],
/* 3961 */
[7184, 3944, 3946, 935, 372, 932, 3955, 458, 3936, 3957],
/* 3962 */
[7186, 935, 372, 932, 458, 459],
/* 3963 */
1345,
/* 3964 */
[7087, 101, 27, 21, 8, 302, 14],
/* 3965 */
[7090, 27, 8, 21, 14, 302],
/* 3966 */
2469,
/* 3967 */
[7091, 27, 21, 460],
/* 3968 */
[7092, 8, 14],
/* 3969 */
[7093, 27],
/* 3970 */
[7094, 27, 21, 8, 302, 14],
/* 3971 */
[7096, 27, 8, 3973, 14],
/* 3972 */
[7097, 27, 8, 14],
/* 3973 */
[7098, 8, 590, 14, 3972],
/* 3974 */
[7099, 27, 21, 8, 938, 14],
/* 3975 */
[7100, 101, 27, 8, 14],
/* 3976 */
2479,
/* 3977 */
[7102, 27, 21, 8, 1661, 3975, 302, 14],
/* 3978 */
[7103, 27, 3976],
/* 3979 */
[7104, 27, 21, 8, 3982, 460, 302, 3997, 14],
/* 3980 */
[7107, 101, 21, 8, 1663, 14],
/* 3981 */
[7108, 27, 943, 8, 21, 1662, 937, 14, 4024],
/* 3982 */
[7019, 21, 3995, 1672, 3994, 3993, 3983],
/* 3983 */
[7020, 3985, 3984, 3988, 3986, 3990],
/* 3984 */
2377,
/* 3985 */
2378,
/* 3986 */
[7021, 3987],
/* 3987 */
2380,
/* 3988 */
[7022, 3989],
/* 3989 */
2380,
/* 3990 */
2383,
/* 3991 */
2384,
/* 3992 */
[7023, 1664],
/* 3993 */
[7024, 3991, 1664, 3992],
/* 3994 */
2387,
/* 3995 */
[7025, 3996],
/* 3996 */
2389,
/* 3997 */
745,
/* 3998 */
[7125, 3999],
/* 3999 */
[7126, 4000],
/* 4000 */
2508,
/* 4001 */
[7109, 6989],
/* 4002 */
2486,
/* 4003 */
1324,
/* 4004 */
746,
/* 4005 */
2519,
/* 4006 */
[7132, 589],
/* 4007 */
[7135, 4003, 4004, 1666, 4010, 4019, 4020, 4021, 588, 373],
/* 4008 */
1327,
/* 4009 */
[7137, 4016],
/* 4010 */
[7139, 4009, 589],
/* 4011 */
[7141, 4018],
/* 4012 */
1334,
/* 4013 */
2532,
/* 4014 */
2533,
/* 4015 */
[7152, 1667, 941, 1665],
/* 4016 */
[7154, 4023],
/* 4017 */
[7156, 1665],
/* 4018 */
2547,
/* 4019 */
2548,
/* 4020 */
[7163, 4014],
/* 4021 */
2550,
/* 4022 */
[7168, 1670, 588, 940, 461, 4029],
/* 4023 */
[7169, 373],
/* 4024 */
[7171, 4007, 1667, 941],
/* 4025 */
[7175, 373],
/* 4026 */
[7176, 4025, 587],
/* 4027 */
[7180, 587],
/* 4028 */
[7183, 1671, 4005, 4017],
/* 4029 */
[7186, 1670, 588, 940, 461, 373],
/* 4030 */
[7188, 4013, 589],
/* 4031 */
1345,
/* 4032 */
[7027, 4033],
/* 4033 */
2392,
/* 4034 */
[7030, 4042],
/* 4035 */
[7032, 4044],
/* 4036 */
[7033, 4045],
/* 4037 */
[7034, 4046],
/* 4038 */
[7039, 4049],
/* 4039 */
[7040, 4037, 4036, 4035],
/* 4040 */
1821,
/* 4041 */
[7042, 4074, 4073, 4066],
/* 4042 */
[7043, 4068],
/* 4043 */
[7044, 114],
/* 4044 */
[7045, 114],
/* 4045 */
[7046, 114, 4069],
/* 4046 */
[7047, 114, 4070],
/* 4047 */
[7048, 953, 210],
/* 4048 */
[7049, 4071, 210],
/* 4049 */
[7051, 953, 210],
/* 4050 */
[7052, 953, 4072, 210],
/* 4051 */
2441,
/* 4052 */
2442,
/* 4053 */
[7054, 945, 374],
/* 4054 */
[7055, 4051],
/* 4055 */
[7057, 114],
/* 4056 */
[7061, 945],
/* 4057 */
[7062, 945],
/* 4058 */
514,
/* 4059 */
[7063, 114, 951, 952, 949, 374],
/* 4060 */
1304,
/* 4061 */
[7065, 114, 462],
/* 4062 */
[7071, 4063, 946],
/* 4063 */
1309,
/* 4064 */
[7073, 946],
/* 4065 */
[7075, 4053, 374, 593, 210],
/* 4066 */
[7076, 1674, 4065, 210],
/* 4067 */
[7077, 4052, 4060, 593, 462, 1677],
/* 4068 */
[7078, 591],
/* 4069 */
[7079, 462, 950],
/* 4070 */
[7080, 950, 1676],
/* 4071 */
[7081, 4064, 950],
/* 4072 */
345,
/* 4073 */
[7083, 4062, 1677],
/* 4074 */
[7085, 4067, 593],
/* 4075 */
[7111, 27, 4034, 21, 8, 4172, 4171, 4173, 1703, 463, 14],
/* 4076 */
[7112, 8, 21, 14, 954, 211],
/* 4077 */
[7113, 21, 211],
/* 4078 */
[7114, 21, 211],
/* 4079 */
[7115, 21, 211],
/* 4080 */
[7117, 211, 4076, 4077, 4079, 4081, 4082, 4078],
/* 4081 */
[7118, 21, 211],
/* 4082 */
[7119, 21, 211],
/* 4083 */
[7120, 8, 14],
/* 4084 */
[7122, 8, 14],
/* 4085 */
[7124, 27, 21, 8, 1682, 1689, 14, 954],
/* 4086 */
[7087, 101, 27, 21, 8, 303, 14],
/* 4087 */
[7090, 27, 8, 21, 14, 303],
/* 4088 */
2469,
/* 4089 */
[7091, 27, 21, 463],
/* 4090 */
[7092, 8, 14],
/* 4091 */
[7093, 27],
/* 4092 */
[7094, 27, 21, 8, 303, 14],
/* 4093 */
[7096, 27, 8, 4095, 14],
/* 4094 */
[7097, 27, 8, 14],
/* 4095 */
[7098, 8, 590, 14, 4094],
/* 4096 */
[7099, 27, 21, 8, 957, 14],
/* 4097 */
[7100, 101, 27, 8, 14],
/* 4098 */
2479,
/* 4099 */
[7102, 27, 21, 8, 1684, 4097, 303, 14],
/* 4100 */
[7103, 27, 4098],
/* 4101 */
[7104, 27, 21, 8, 4104, 463, 303, 4116, 14],
/* 4102 */
[7107, 101, 21, 8, 1686, 14],
/* 4103 */
[7108, 27, 943, 8, 21, 1685, 956, 14, 1702],
/* 4104 */
[7019, 21, 4114, 1687, 4113, 1689, 4105],
/* 4105 */
[7020, 4107, 4106, 4110, 4108, 4112],
/* 4106 */
2377,
/* 4107 */
2378,
/* 4108 */
[7021, 4109],
/* 4109 */
2380,
/* 4110 */
[7022, 4111],
/* 4111 */
2380,
/* 4112 */
2383,
/* 4113 */
2387,
/* 4114 */
[7025, 4115],
/* 4115 */
2389,
/* 4116 */
745,
/* 4117 */
[7125, 4118],
/* 4118 */
[7126, 4119],
/* 4119 */
2508,
/* 4120 */
[7109, 6990],
/* 4121 */
2486,
/* 4122 */
[7027, 4123],
/* 4123 */
2392,
/* 4124 */
2384,
/* 4125 */
[7023, 1688],
/* 4126 */
2510,
/* 4127 */
1322,
/* 4128 */
[7127, 4136, 4148, 596, 4168],
/* 4129 */
[7128, 4130],
/* 4130 */
[7129, 1691, 4139, 4158],
/* 4131 */
[7131, 4152, 595],
/* 4132 */
1324,
/* 4133 */
2518,
/* 4134 */
2519,
/* 4135 */
[7132, 375],
/* 4136 */
[7134, 4143, 4144, 594, 1706, 4178],
/* 4137 */
[7135, 4132, 1691, 1692, 1694, 4164, 4165, 4166, 165, 136],
/* 4138 */
1327,
/* 4139 */
[7136, 1694, 4154],
/* 4140 */
[7138, 1693, 1705],
/* 4141 */
[7143, 4159, 4160, 4161, 165, 4174],
/* 4142 */
[7144, 1697, 213],
/* 4143 */
[7145, 4142, 4162, 213],
/* 4144 */
[7146, 1695, 1697, 4146, 165, 1699, 1700, 4127, 213, 1701],
/* 4145 */
[7147, 1695, 1701],
/* 4146 */
1335,
/* 4147 */
749,
/* 4148 */
[7148, 1696, 4151, 4156],
/* 4149 */
2532,
/* 4150 */
2533,
/* 4151 */
[7150, 136],
/* 4152 */
[7151, 136],
/* 4153 */
[7152, 594, 596, 1690],
/* 4154 */
[7153, 958, 304, 213],
/* 4155 */
[7154, 213],
/* 4156 */
[7155, 4131, 595],
/* 4157 */
[7156, 1690],
/* 4158 */
[7157, 594, 165],
/* 4159 */
[7158, 4133],
/* 4160 */
2543,
/* 4161 */
[7159, 375],
/* 4162 */
[7161, 1700, 4176],
/* 4163 */
2547,
/* 4164 */
2548,
/* 4165 */
[7163, 4150],
/* 4166 */
2550,
/* 4167 */
[7168, 961, 165, 960, 304, 1705],
/* 4168 */
2552,
/* 4169 */
[7175, 136],
/* 4170 */
[7176, 4169, 212],
/* 4171 */
[7177, 212],
/* 4172 */
[7178, 4140, 961, 212],
/* 4173 */
[7179, 136],
/* 4174 */
[7181, 304, 212],
/* 4175 */
[7183, 1704, 4134, 4157],
/* 4176 */
[7187, 375, 213],
/* 4177 */
[7188, 4149, 375],
/* 4178 */
[7189, 1698, 4145, 1699],
/* 4179 */
2504,
/* 4180 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  return {
	    visitor: {
	      BinaryExpression: function BinaryExpression(path) {
	        var node = path.node;

	        if (node.operator === "instanceof") {
	          path.replaceWith(t.callExpression(this.addHelper("instanceof"), [node.left, node.right]));
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 4181 */
[7030, 4190],
/* 4182 */
[7032, 4192],
/* 4183 */
[7033, 4193],
/* 4184 */
[7034, 4194],
/* 4185 */
[7035, 4195],
/* 4186 */
[7039, 4197],
/* 4187 */
[7040, 4184, 4183, 4182],
/* 4188 */
1821,
/* 4189 */
[7042, 4222, 4221, 4214],
/* 4190 */
[7043, 4216],
/* 4191 */
[7044, 115],
/* 4192 */
[7045, 115],
/* 4193 */
[7046, 115, 4217],
/* 4194 */
[7047, 115, 4218],
/* 4195 */
[7048, 972, 214],
/* 4196 */
[7049, 4219, 214],
/* 4197 */
[7051, 972, 214],
/* 4198 */
[7052, 972, 4220, 214],
/* 4199 */
2441,
/* 4200 */
2442,
/* 4201 */
[7054, 964, 376],
/* 4202 */
[7055, 4199],
/* 4203 */
[7057, 115],
/* 4204 */
[7061, 964],
/* 4205 */
[7062, 964],
/* 4206 */
514,
/* 4207 */
[7063, 115, 970, 971, 968, 376],
/* 4208 */
1304,
/* 4209 */
[7065, 115, 464],
/* 4210 */
[7071, 4211, 965],
/* 4211 */
1309,
/* 4212 */
[7073, 965],
/* 4213 */
[7075, 4201, 376, 599, 214],
/* 4214 */
[7076, 1711, 4213, 214],
/* 4215 */
[7077, 4200, 4208, 599, 464, 1714],
/* 4216 */
[7078, 597],
/* 4217 */
[7079, 464, 969],
/* 4218 */
[7080, 969, 1713],
/* 4219 */
[7081, 4212, 969],
/* 4220 */
345,
/* 4221 */
[7083, 4210, 1714],
/* 4222 */
[7085, 4215, 599],
/* 4223 */
[7086, 1709, 71, 47, 4319, 4327, 377, 1727, 60],
/* 4224 */
[7087, 305, 90, 71, 47, 306, 60],
/* 4225 */
[7090, 90, 47, 71, 60, 306],
/* 4226 */
2469,
/* 4227 */
[7091, 90, 71, 377],
/* 4228 */
[7092, 47, 60],
/* 4229 */
[7093, 90],
/* 4230 */
[7094, 90, 71, 47, 306, 60],
/* 4231 */
[7096, 90, 47, 4233, 60],
/* 4232 */
[7097, 90, 47, 60],
/* 4233 */
[7098, 47, 1710, 60, 4232],
/* 4234 */
[7099, 90, 71, 47, 976, 60],
/* 4235 */
[7100, 305, 90, 47, 60],
/* 4236 */
2479,
/* 4237 */
[7102, 90, 71, 47, 1720, 4235, 306, 60],
/* 4238 */
[7103, 90, 4236],
/* 4239 */
[7104, 90, 71, 47, 4242, 377, 306, 1727, 60],
/* 4240 */
[7107, 305, 71, 47, 1722, 60],
/* 4241 */
[7108, 90, 1708, 47, 71, 1721, 974, 60, 1740],
/* 4242 */
[7019, 71, 4255, 1724, 4254, 4253, 4243],
/* 4243 */
[7020, 4245, 4244, 4248, 4246, 4250],
/* 4244 */
2377,
/* 4245 */
2378,
/* 4246 */
[7021, 4247],
/* 4247 */
2380,
/* 4248 */
[7022, 4249],
/* 4249 */
2380,
/* 4250 */
2383,
/* 4251 */
2384,
/* 4252 */
[7023, 1723],
/* 4253 */
[7024, 4251, 1723, 4252],
/* 4254 */
2387,
/* 4255 */
[7025, 4256],
/* 4256 */
2389,
/* 4257 */
[7125, 4258],
/* 4258 */
[7126, 4259],
/* 4259 */
2508,
/* 4260 */
[7109, 6991],
/* 4261 */
2486,
/* 4262 */
[7027, 4263],
/* 4263 */
2392,
/* 4264 */
[7111, 90, 4181, 71, 47, 4323, 4322, 4324, 1741, 377, 60],
/* 4265 */
[7112, 47, 71, 60, 975, 215],
/* 4266 */
[7113, 71, 215],
/* 4267 */
[7114, 71, 215],
/* 4268 */
[7115, 71, 215],
/* 4269 */
[7117, 215, 4265, 4266, 4268, 4270, 4271, 4267],
/* 4270 */
[7118, 71, 215],
/* 4271 */
[7119, 71, 215],
/* 4272 */
[7120, 47, 60],
/* 4273 */
[7122, 47, 60],
/* 4274 */
[7124, 90, 71, 47, 1725, 4277, 60, 975],
/* 4275 */
2384,
/* 4276 */
[7023, 1726],
/* 4277 */
[7024, 4275, 1726, 4276],
/* 4278 */
2504,
/* 4279 */
2510,
/* 4280 */
[7127, 4288, 4298, 602, 4318],
/* 4281 */
[7128, 4282],
/* 4282 */
[7129, 1730, 4290, 4308],
/* 4283 */
[7131, 4302, 600],
/* 4284 */
1324,
/* 4285 */
2518,
/* 4286 */
2519,
/* 4287 */
[7132, 378],
/* 4288 */
[7134, 4294, 4295, 465, 1744, 4330],
/* 4289 */
1327,
/* 4290 */
[7136, 1734, 4304],
/* 4291 */
[7138, 1733, 1743],
/* 4292 */
[7143, 4309, 4310, 4311, 158, 4325],
/* 4293 */
[7144, 1736, 218],
/* 4294 */
[7145, 4293, 4312, 218],
/* 4295 */
[7146, 977, 1736, 1738, 158, 980, 1739, 1728, 218, 981],
/* 4296 */
[7147, 977, 981],
/* 4297 */
749,
/* 4298 */
[7148, 1735, 4301, 4306],
/* 4299 */
2532,
/* 4300 */
2533,
/* 4301 */
[7150, 137],
/* 4302 */
[7151, 137],
/* 4303 */
[7152, 465, 602, 1729],
/* 4304 */
[7153, 978, 216, 218],
/* 4305 */
[7154, 218],
/* 4306 */
[7155, 4283, 600],
/* 4307 */
[7156, 1729],
/* 4308 */
[7157, 465, 158],
/* 4309 */
[7158, 4285],
/* 4310 */
2543,
/* 4311 */
[7159, 378],
/* 4312 */
[7161, 1739, 4328],
/* 4313 */
2547,
/* 4314 */
2548,
/* 4315 */
[7163, 4300],
/* 4316 */
2550,
/* 4317 */
[7168, 603, 158, 601, 216, 1743],
/* 4318 */
2552,
/* 4319 */
[7172, 1732, 465],
/* 4320 */
[7175, 137],
/* 4321 */
[7176, 4320, 217],
/* 4322 */
[7177, 217],
/* 4323 */
[7178, 4291, 603, 217],
/* 4324 */
[7179, 137],
/* 4325 */
[7181, 216, 217],
/* 4326 */
[7183, 1742, 4286, 4307],
/* 4327 */
[7184, 977, 1738, 603, 158, 601, 980, 216, 1728, 981],
/* 4328 */
[7187, 378, 218],
/* 4329 */
[7188, 4299, 378],
/* 4330 */
[7189, 1737, 4296, 980],
/* 4331 */
[7030, 4339],
/* 4332 */
[7032, 4341],
/* 4333 */
[7033, 4342],
/* 4334 */
[7034, 4343],
/* 4335 */
[7039, 4346],
/* 4336 */
[7040, 4334, 4333, 4332],
/* 4337 */
1821,
/* 4338 */
[7042, 4371, 4370, 4363],
/* 4339 */
[7043, 4365],
/* 4340 */
[7044, 116],
/* 4341 */
[7045, 116],
/* 4342 */
[7046, 116, 4366],
/* 4343 */
[7047, 116, 4367],
/* 4344 */
[7048, 991, 219],
/* 4345 */
[7049, 4368, 219],
/* 4346 */
[7051, 991, 219],
/* 4347 */
[7052, 991, 4369, 219],
/* 4348 */
2441,
/* 4349 */
2442,
/* 4350 */
[7054, 983, 379],
/* 4351 */
[7055, 4348],
/* 4352 */
[7057, 116],
/* 4353 */
[7061, 983],
/* 4354 */
[7062, 983],
/* 4355 */
514,
/* 4356 */
[7063, 116, 989, 990, 987, 379],
/* 4357 */
1304,
/* 4358 */
[7065, 116, 466],
/* 4359 */
[7071, 4360, 984],
/* 4360 */
1309,
/* 4361 */
[7073, 984],
/* 4362 */
[7075, 4350, 379, 610, 219],
/* 4363 */
[7076, 1746, 4362, 219],
/* 4364 */
[7077, 4349, 4357, 610, 466, 1749],
/* 4365 */
[7078, 608],
/* 4366 */
[7079, 466, 988],
/* 4367 */
[7080, 988, 1748],
/* 4368 */
[7081, 4361, 988],
/* 4369 */
345,
/* 4370 */
[7083, 4359, 1749],
/* 4371 */
[7085, 4364, 610],
/* 4372 */
[7086, 606, 24, 9, 4439, 4444, 467, 1760, 15],
/* 4373 */
[7087, 102, 23, 24, 9, 307, 15],
/* 4374 */
[7090, 23, 9, 24, 15, 307],
/* 4375 */
2469,
/* 4376 */
[7091, 23, 24, 467],
/* 4377 */
[7092, 9, 15],
/* 4378 */
[7093, 23],
/* 4379 */
[7094, 23, 24, 9, 307, 15],
/* 4380 */
[7096, 23, 9, 4382, 15],
/* 4381 */
[7097, 23, 9, 15],
/* 4382 */
[7098, 9, 607, 15, 4381],
/* 4383 */
[7099, 23, 24, 9, 994, 15],
/* 4384 */
[7100, 102, 23, 9, 15],
/* 4385 */
2479,
/* 4386 */
[7102, 23, 24, 9, 1755, 4384, 307, 15],
/* 4387 */
[7103, 23, 4385],
/* 4388 */
[7104, 23, 24, 9, 4391, 467, 307, 1760, 15],
/* 4389 */
[7107, 102, 24, 9, 1757, 15],
/* 4390 */
[7108, 23, 605, 9, 24, 1756, 993, 15, 4438],
/* 4391 */
[7019, 24, 4404, 1759, 4403, 4402, 4392],
/* 4392 */
[7020, 4394, 4393, 4397, 4395, 4399],
/* 4393 */
2377,
/* 4394 */
2378,
/* 4395 */
[7021, 4396],
/* 4396 */
2380,
/* 4397 */
[7022, 4398],
/* 4398 */
2380,
/* 4399 */
2383,
/* 4400 */
2384,
/* 4401 */
[7023, 1758],
/* 4402 */
[7024, 4400, 1758, 4401],
/* 4403 */
2387,
/* 4404 */
[7025, 4405],
/* 4405 */
2389,
/* 4406 */
[7125, 4407],
/* 4407 */
[7126, 4408],
/* 4408 */
2508,
/* 4409 */
[7109, 6992],
/* 4410 */
2486,
/* 4411 */
[7027, 4412],
/* 4412 */
2392,
/* 4413 */
1322,
/* 4414 */
1324,
/* 4415 */
746,
/* 4416 */
2519,
/* 4417 */
[7132, 613],
/* 4418 */
1327,
/* 4419 */
[7137, 4429],
/* 4420 */
[7139, 4419, 613],
/* 4421 */
[7140, 998],
/* 4422 */
[7141, 4431],
/* 4423 */
1334,
/* 4424 */
1335,
/* 4425 */
749,
/* 4426 */
2532,
/* 4427 */
2533,
/* 4428 */
[7152, 995, 997, 1761],
/* 4429 */
[7154, 998],
/* 4430 */
[7156, 1761],
/* 4431 */
2547,
/* 4432 */
2548,
/* 4433 */
[7163, 4427],
/* 4434 */
2550,
/* 4435 */
[7166, 308, 998],
/* 4436 */
[7168, 999, 308, 611, 380, 4445],
/* 4437 */
[7170, 4425, 308],
/* 4438 */
[7171, 1763, 995, 997],
/* 4439 */
[7172, 1763, 995],
/* 4440 */
[7175, 381],
/* 4441 */
[7176, 4440, 612],
/* 4442 */
[7180, 612],
/* 4443 */
[7183, 1766, 4416, 4430],
/* 4444 */
[7184, 4421, 4424, 999, 308, 611, 4435, 380, 4413, 4437],
/* 4445 */
[7186, 999, 308, 611, 380, 381],
/* 4446 */
[7188, 4426, 613],
/* 4447 */
1345,
/* 4448 */
[7111, 23, 4331, 24, 9, 4545, 4544, 4546, 1788, 468, 15],
/* 4449 */
[7112, 9, 24, 15, 1000, 220],
/* 4450 */
[7113, 24, 220],
/* 4451 */
[7114, 24, 220],
/* 4452 */
[7115, 24, 220],
/* 4453 */
[7117, 220, 4449, 4450, 4452, 4454, 4455, 4451],
/* 4454 */
[7118, 24, 220],
/* 4455 */
[7119, 24, 220],
/* 4456 */
[7120, 9, 15],
/* 4457 */
[7122, 9, 15],
/* 4458 */
[7124, 23, 24, 9, 1767, 1774, 15, 1000],
/* 4459 */
[7087, 102, 23, 24, 9, 309, 15],
/* 4460 */
[7090, 23, 9, 24, 15, 309],
/* 4461 */
2469,
/* 4462 */
[7091, 23, 24, 468],
/* 4463 */
[7092, 9, 15],
/* 4464 */
[7093, 23],
/* 4465 */
[7094, 23, 24, 9, 309, 15],
/* 4466 */
[7096, 23, 9, 4468, 15],
/* 4467 */
[7097, 23, 9, 15],
/* 4468 */
[7098, 9, 607, 15, 4467],
/* 4469 */
[7099, 23, 24, 9, 1003, 15],
/* 4470 */
[7100, 102, 23, 9, 15],
/* 4471 */
2479,
/* 4472 */
[7102, 23, 24, 9, 1769, 4470, 309, 15],
/* 4473 */
[7103, 23, 4471],
/* 4474 */
[7104, 23, 24, 9, 4477, 468, 309, 4489, 15],
/* 4475 */
[7107, 102, 24, 9, 1771, 15],
/* 4476 */
[7108, 23, 605, 9, 24, 1770, 1002, 15, 1787],
/* 4477 */
[7019, 24, 4487, 1772, 4486, 1774, 4478],
/* 4478 */
[7020, 4480, 4479, 4483, 4481, 4485],
/* 4479 */
2377,
/* 4480 */
2378,
/* 4481 */
[7021, 4482],
/* 4482 */
2380,
/* 4483 */
[7022, 4484],
/* 4484 */
2380,
/* 4485 */
2383,
/* 4486 */
2387,
/* 4487 */
[7025, 4488],
/* 4488 */
2389,
/* 4489 */
745,
/* 4490 */
[7125, 4491],
/* 4491 */
[7126, 4492],
/* 4492 */
2508,
/* 4493 */
[7109, 6993],
/* 4494 */
2486,
/* 4495 */
[7027, 4496],
/* 4496 */
2392,
/* 4497 */
2384,
/* 4498 */
[7023, 1773],
/* 4499 */
2510,
/* 4500 */
1322,
/* 4501 */
[7127, 4509, 4521, 616, 4541],
/* 4502 */
[7128, 4503],
/* 4503 */
[7129, 1776, 4512, 4531],
/* 4504 */
[7131, 4525, 615],
/* 4505 */
1324,
/* 4506 */
2518,
/* 4507 */
2519,
/* 4508 */
[7132, 382],
/* 4509 */
[7134, 4516, 4517, 614, 1791, 4551],
/* 4510 */
[7135, 4505, 1776, 1777, 1779, 4537, 4538, 4539, 166, 138],
/* 4511 */
1327,
/* 4512 */
[7136, 1779, 4527],
/* 4513 */
[7138, 1778, 1790],
/* 4514 */
[7143, 4532, 4533, 4534, 166, 4547],
/* 4515 */
[7144, 1782, 222],
/* 4516 */
[7145, 4515, 4535, 222],
/* 4517 */
[7146, 1780, 1782, 4519, 166, 1784, 1785, 4500, 222, 1786],
/* 4518 */
[7147, 1780, 1786],
/* 4519 */
1335,
/* 4520 */
749,
/* 4521 */
[7148, 1781, 4524, 4529],
/* 4522 */
2532,
/* 4523 */
2533,
/* 4524 */
[7150, 138],
/* 4525 */
[7151, 138],
/* 4526 */
[7152, 614, 616, 1775],
/* 4527 */
[7153, 1004, 310, 222],
/* 4528 */
[7154, 222],
/* 4529 */
[7155, 4504, 615],
/* 4530 */
[7156, 1775],
/* 4531 */
[7157, 614, 166],
/* 4532 */
[7158, 4506],
/* 4533 */
2543,
/* 4534 */
[7159, 382],
/* 4535 */
[7161, 1785, 4549],
/* 4536 */
2547,
/* 4537 */
2548,
/* 4538 */
[7163, 4523],
/* 4539 */
2550,
/* 4540 */
[7168, 1007, 166, 1006, 310, 1790],
/* 4541 */
2552,
/* 4542 */
[7175, 138],
/* 4543 */
[7176, 4542, 221],
/* 4544 */
[7177, 221],
/* 4545 */
[7178, 4513, 1007, 221],
/* 4546 */
[7179, 138],
/* 4547 */
[7181, 310, 221],
/* 4548 */
[7183, 1789, 4507, 4530],
/* 4549 */
[7187, 382, 222],
/* 4550 */
[7188, 4522, 382],
/* 4551 */
[7189, 1783, 4518, 1784],
/* 4552 */
2504,
/* 4553 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Symbol = __webpack_require__(621)["default"];

	var _getIterator = __webpack_require__(17)["default"];

	var _Object$create = __webpack_require__(470)["default"];

	var _interopRequireDefault = __webpack_require__(10)["default"];

	exports.__esModule = true;

	var _babelHelperHoistVariables = __webpack_require__(4554);

	var _babelHelperHoistVariables2 = _interopRequireDefault(_babelHelperHoistVariables);

	var _babelTemplate = __webpack_require__(4697);

	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

	var buildTemplate = _babelTemplate2["default"]("\n  System.register(MODULE_NAME, [SOURCES], function (EXPORT_IDENTIFIER, CONTEXT_IDENTIFIER) {\n    BEFORE_BODY;\n    return {\n      setters: [SETTERS],\n      execute: function () {\n        BODY;\n      }\n    };\n  });\n");

	var buildExportAll = _babelTemplate2["default"]("\n  for (var KEY in TARGET) {\n    if (KEY !== \"default\") EXPORT_OBJ[KEY] = TARGET[KEY];\n  }\n");

	exports["default"] = function (_ref7) {
	  var t = _ref7.types;

	  var IGNORE_REASSIGNMENT_SYMBOL = _Symbol();

	  var reassignmentVisitor = {
	    "AssignmentExpression|UpdateExpression": function AssignmentExpressionUpdateExpression(path) {
	      if (path.node[IGNORE_REASSIGNMENT_SYMBOL]) return;
	      path.node[IGNORE_REASSIGNMENT_SYMBOL] = true;

	      var arg = path.get(path.isAssignmentExpression() ? "left" : "argument");
	      if (!arg.isIdentifier()) return;

	      var name = arg.node.name;

	      // redeclared in this scope
	      if (this.scope.getBinding(name) !== path.scope.getBinding(name)) return;

	      var exportedNames = this.exports[name];
	      if (!exportedNames) return;

	      var node = path.node;

	      for (var _iterator = exportedNames, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	        var _ref;

	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }

	        var exportedName = _ref;

	        node = this.buildCall(exportedName, node).expression;
	      }

	      path.replaceWith(node);
	    }
	  };

	  return {
	    inherits: __webpack_require__(1274),

	    visitor: {
	      ReferencedIdentifier: function ReferencedIdentifier(path, state) {
	        if (path.node.name == "__moduleName" && !path.scope.hasBinding("__moduleName")) {
	          path.replaceWith(t.memberExpression(state.contextIdent, t.identifier("id")));
	        }
	      },

	      Program: {
	        enter: function enter(path, state) {
	          state.contextIdent = path.scope.generateUidIdentifier("context");
	        },
	        exit: function exit(path, state) {
	          var exportIdent = path.scope.generateUidIdentifier("export");
	          var contextIdent = state.contextIdent;

	          var exportNames = _Object$create(null);
	          var modules = _Object$create(null);

	          var beforeBody = [];
	          var setters = [];
	          var sources = [];
	          var variableIds = [];

	          function addExportName(key, val) {
	            exportNames[key] = exportNames[key] || [];
	            exportNames[key].push(val);
	          }

	          function pushModule(source, key, specifiers) {
	            var _modules = modules[source] = modules[source] || { imports: [], exports: [] };
	            _modules[key] = _modules[key].concat(specifiers);
	          }

	          function buildExportCall(name, val) {
	            return t.expressionStatement(t.callExpression(exportIdent, [t.stringLiteral(name), val]));
	          }

	          var body /*: Array<Object>*/ = path.get("body");

	          var canHoist = true;
	          for (var _iterator2 = body, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	            var _ref2;

	            if (_isArray2) {
	              if (_i2 >= _iterator2.length) break;
	              _ref2 = _iterator2[_i2++];
	            } else {
	              _i2 = _iterator2.next();
	              if (_i2.done) break;
	              _ref2 = _i2.value;
	            }

	            var _path = _ref2;

	            if (_path.isExportDeclaration()) _path = _path.get("declaration");
	            if (_path.isVariableDeclaration() && _path.node.kind !== "var") {
	              canHoist = false;
	              break;
	            }
	          }

	          for (var _iterator3 = body, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	            var _ref3;

	            if (_isArray3) {
	              if (_i3 >= _iterator3.length) break;
	              _ref3 = _iterator3[_i3++];
	            } else {
	              _i3 = _iterator3.next();
	              if (_i3.done) break;
	              _ref3 = _i3.value;
	            }

	            var _path2 = _ref3;

	            if (canHoist && _path2.isFunctionDeclaration()) {
	              beforeBody.push(_path2.node);
	              _path2.remove();
	            } else if (_path2.isImportDeclaration()) {
	              var source = _path2.node.source.value;
	              pushModule(source, "imports", _path2.node.specifiers);
	              for (var _name in _path2.getBindingIdentifiers()) {
	                _path2.scope.removeBinding(_name);
	                variableIds.push(t.identifier(_name));
	              }
	              _path2.remove();
	            } else if (_path2.isExportAllDeclaration()) {
	              pushModule(_path2.node.source.value, "exports", _path2.node);
	              _path2.remove();
	            } else if (_path2.isExportDefaultDeclaration()) {
	              var declar = _path2.get("declaration");
	              if (declar.isClassDeclaration() || declar.isFunctionDeclaration()) {
	                var id = declar.node.id;
	                var nodes = [];

	                if (id) {
	                  nodes.push(declar.node);
	                  nodes.push(buildExportCall("default", id));
	                  addExportName(id.name, "default");
	                } else {
	                  nodes.push(buildExportCall("default", t.toExpression(declar.node)));
	                }

	                if (!canHoist || declar.isClassDeclaration()) {
	                  _path2.replaceWithMultiple(nodes);
	                } else {
	                  beforeBody = beforeBody.concat(nodes);
	                  _path2.remove();
	                }
	              } else {
	                _path2.replaceWith(buildExportCall("default", declar.node));
	              }
	            } else if (_path2.isExportNamedDeclaration()) {
	              var declar = _path2.get("declaration");

	              if (declar.node) {
	                _path2.replaceWith(declar);

	                var nodes = [];
	                var bindingIdentifiers = undefined;
	                if (_path2.isFunction()) {
	                  // istanbul ignore next

	                  var _bindingIdentifiers;

	                  bindingIdentifiers = (_bindingIdentifiers = {}, _bindingIdentifiers[declar.node.id.name] = declar.node.id, _bindingIdentifiers);
	                } else {
	                  bindingIdentifiers = declar.getBindingIdentifiers();
	                }
	                for (var _name2 in bindingIdentifiers) {
	                  addExportName(_name2, _name2);
	                  nodes.push(buildExportCall(_name2, t.identifier(_name2)));
	                }
	                _path2.insertAfter(nodes);
	              }

	              var specifiers = _path2.node.specifiers;
	              if (specifiers && specifiers.length) {
	                if (_path2.node.source) {
	                  pushModule(_path2.node.source.value, "exports", specifiers);
	                  _path2.remove();
	                } else {
	                  var nodes = [];

	                  for (var _iterator4 = specifiers, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	                    var _ref4;

	                    if (_isArray4) {
	                      if (_i4 >= _iterator4.length) break;
	                      _ref4 = _iterator4[_i4++];
	                    } else {
	                      _i4 = _iterator4.next();
	                      if (_i4.done) break;
	                      _ref4 = _i4.value;
	                    }

	                    var specifier = _ref4;

	                    nodes.push(buildExportCall(specifier.exported.name, specifier.local));
	                    addExportName(specifier.local.name, specifier.exported.name);
	                  }

	                  _path2.replaceWithMultiple(nodes);
	                }
	              }
	            }
	          }

	          for (var source in modules) {
	            var specifiers = modules[source];

	            var setterBody = [];
	            var target = path.scope.generateUidIdentifier(source);

	            for (var _iterator5 = specifiers.imports, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
	              var _ref5;

	              if (_isArray5) {
	                if (_i5 >= _iterator5.length) break;
	                _ref5 = _iterator5[_i5++];
	              } else {
	                _i5 = _iterator5.next();
	                if (_i5.done) break;
	                _ref5 = _i5.value;
	              }

	              var specifier = _ref5;

	              if (t.isImportNamespaceSpecifier(specifier)) {
	                setterBody.push(t.expressionStatement(t.assignmentExpression("=", specifier.local, target)));
	              } else if (t.isImportDefaultSpecifier(specifier)) {
	                specifier = t.importSpecifier(specifier.local, t.identifier("default"));
	              }

	              if (t.isImportSpecifier(specifier)) {
	                setterBody.push(t.expressionStatement(t.assignmentExpression("=", specifier.local, t.memberExpression(target, specifier.imported))));
	              }
	            }

	            if (specifiers.exports.length) {
	              var exportObjRef = path.scope.generateUidIdentifier("exportObj");

	              setterBody.push(t.variableDeclaration("var", [t.variableDeclarator(exportObjRef, t.objectExpression([]))]));

	              for (var _iterator6 = specifiers.exports, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _getIterator(_iterator6);;) {
	                var _ref6;

	                if (_isArray6) {
	                  if (_i6 >= _iterator6.length) break;
	                  _ref6 = _iterator6[_i6++];
	                } else {
	                  _i6 = _iterator6.next();
	                  if (_i6.done) break;
	                  _ref6 = _i6.value;
	                }

	                var node = _ref6;

	                if (t.isExportAllDeclaration(node)) {
	                  setterBody.push(buildExportAll({
	                    KEY: path.scope.generateUidIdentifier("key"),
	                    EXPORT_OBJ: exportObjRef,
	                    TARGET: target
	                  }));
	                } else if (t.isExportSpecifier(node)) {
	                  setterBody.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(exportObjRef, node.exported), t.memberExpression(target, node.local))));
	                } else {
	                  // todo
	                }
	              }

	              setterBody.push(t.expressionStatement(t.callExpression(exportIdent, [exportObjRef])));
	            }

	            sources.push(t.stringLiteral(source));
	            setters.push(t.functionExpression(null, [target], t.blockStatement(setterBody)));
	          }

	          var moduleName = this.getModuleName();
	          if (moduleName) moduleName = t.stringLiteral(moduleName);

	          if (canHoist) {
	            _babelHelperHoistVariables2["default"](path, function (id) {
	              return variableIds.push(id);
	            });
	          }

	          if (variableIds.length) {
	            beforeBody.unshift(t.variableDeclaration("var", variableIds.map(function (id) {
	              return t.variableDeclarator(id);
	            })));
	          }

	          path.traverse(reassignmentVisitor, {
	            exports: exportNames,
	            buildCall: buildExportCall,
	            scope: path.scope
	          });

	          path.node.body = [buildTemplate({
	            BEFORE_BODY: beforeBody,
	            MODULE_NAME: moduleName,
	            SETTERS: setters,
	            SOURCES: sources,
	            BODY: path.node.body,
	            EXPORT_IDENTIFIER: exportIdent,
	            CONTEXT_IDENTIFIER: contextIdent
	          })];
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 4554 */
[7196, 17, 2, 61],
/* 4555 */
[7111, 17, 1817, 10, 2, 4652, 4651, 4653, 1813, 469, 61],
/* 4556 */
[7112, 2, 10, 61, 1008, 223],
/* 4557 */
[7113, 10, 223],
/* 4558 */
[7114, 10, 223],
/* 4559 */
[7115, 10, 223],
/* 4560 */
[7117, 223, 4556, 4557, 4559, 4561, 4562, 4558],
/* 4561 */
[7118, 10, 223],
/* 4562 */
[7119, 10, 223],
/* 4563 */
[7120, 2, 61],
/* 4564 */
[7122, 2, 61],
/* 4565 */
[7124, 17, 10, 2, 1792, 1799, 61, 1008],
/* 4566 */
[7087, 103, 17, 10, 2, 311, 61],
/* 4567 */
[7090, 17, 2, 10, 61, 311],
/* 4568 */
2469,
/* 4569 */
[7091, 17, 10, 469],
/* 4570 */
[7092, 2, 61],
/* 4571 */
[7093, 17],
/* 4572 */
[7094, 17, 10, 2, 311, 61],
/* 4573 */
[7096, 17, 2, 4575, 61],
/* 4574 */
[7097, 17, 2, 61],
/* 4575 */
[7098, 2, 622, 61, 4574],
/* 4576 */
[7099, 17, 10, 2, 1011, 61],
/* 4577 */
[7100, 103, 17, 2, 61],
/* 4578 */
2479,
/* 4579 */
[7102, 17, 10, 2, 1794, 4577, 311, 61],
/* 4580 */
[7103, 17, 4578],
/* 4581 */
[7104, 17, 10, 2, 4584, 469, 311, 4596, 61],
/* 4582 */
[7107, 103, 10, 2, 1796, 61],
/* 4583 */
[7108, 17, 620, 2, 10, 1795, 1010, 61, 1812],
/* 4584 */
[7019, 10, 4594, 1797, 4593, 1799, 4585],
/* 4585 */
[7020, 4587, 4586, 4590, 4588, 4592],
/* 4586 */
2377,
/* 4587 */
2378,
/* 4588 */
[7021, 4589],
/* 4589 */
2380,
/* 4590 */
[7022, 4591],
/* 4591 */
2380,
/* 4592 */
2383,
/* 4593 */
2387,
/* 4594 */
[7025, 4595],
/* 4595 */
2389,
/* 4596 */
745,
/* 4597 */
[7125, 4598],
/* 4598 */
[7126, 4599],
/* 4599 */
2508,
/* 4600 */
[7109, 6994],
/* 4601 */
2486,
/* 4602 */
[7027, 4603],
/* 4603 */
2392,
/* 4604 */
2384,
/* 4605 */
[7023, 1798],
/* 4606 */
2510,
/* 4607 */
1322,
/* 4608 */
[7127, 4616, 4628, 619, 4648],
/* 4609 */
[7128, 4610],
/* 4610 */
[7129, 1801, 4619, 4638],
/* 4611 */
[7131, 4632, 618],
/* 4612 */
1324,
/* 4613 */
2518,
/* 4614 */
2519,
/* 4615 */
[7132, 383],
/* 4616 */
[7134, 4623, 4624, 617, 1816, 4658],
/* 4617 */
[7135, 4612, 1801, 1802, 1804, 4644, 4645, 4646, 167, 139],
/* 4618 */
1327,
/* 4619 */
[7136, 1804, 4634],
/* 4620 */
[7138, 1803, 1815],
/* 4621 */
[7143, 4639, 4640, 4641, 167, 4654],
/* 4622 */
[7144, 1807, 225],
/* 4623 */
[7145, 4622, 4642, 225],
/* 4624 */
[7146, 1805, 1807, 4626, 167, 1809, 1810, 4607, 225, 1811],
/* 4625 */
[7147, 1805, 1811],
/* 4626 */
1335,
/* 4627 */
749,
/* 4628 */
[7148, 1806, 4631, 4636],
/* 4629 */
2532,
/* 4630 */
2533,
/* 4631 */
[7150, 139],
/* 4632 */
[7151, 139],
/* 4633 */
[7152, 617, 619, 1800],
/* 4634 */
[7153, 1012, 312, 225],
/* 4635 */
[7154, 225],
/* 4636 */
[7155, 4611, 618],
/* 4637 */
[7156, 1800],
/* 4638 */
[7157, 617, 167],
/* 4639 */
[7158, 4613],
/* 4640 */
2543,
/* 4641 */
[7159, 383],
/* 4642 */
[7161, 1810, 4656],
/* 4643 */
2547,
/* 4644 */
2548,
/* 4645 */
[7163, 4630],
/* 4646 */
2550,
/* 4647 */
[7168, 1015, 167, 1014, 312, 1815],
/* 4648 */
2552,
/* 4649 */
[7175, 139],
/* 4650 */
[7176, 4649, 224],
/* 4651 */
[7177, 224],
/* 4652 */
[7178, 4620, 1015, 224],
/* 4653 */
[7179, 139],
/* 4654 */
[7181, 312, 224],
/* 4655 */
[7183, 1814, 4614, 4637],
/* 4656 */
[7187, 383, 225],
/* 4657 */
[7188, 4629, 383],
/* 4658 */
[7189, 1808, 4625, 1809],
/* 4659 */
2504,
/* 4660 */
[7032, 4666],
/* 4661 */
[7033, 4667],
/* 4662 */
[7034, 4668],
/* 4663 */
[7042, 4696, 4695, 4688],
/* 4664 */
[7043, 4690],
/* 4665 */
[7044, 117],
/* 4666 */
[7045, 117],
/* 4667 */
[7046, 117, 4691],
/* 4668 */
[7047, 117, 4692],
/* 4669 */
[7048, 1024, 226],
/* 4670 */
[7049, 4693, 226],
/* 4671 */
[7051, 1024, 226],
/* 4672 */
[7052, 1024, 4694, 226],
/* 4673 */
2441,
/* 4674 */
2442,
/* 4675 */
[7054, 1016, 384],
/* 4676 */
[7055, 4673],
/* 4677 */
[7057, 117],
/* 4678 */
[7061, 1016],
/* 4679 */
[7062, 1016],
/* 4680 */
514,
/* 4681 */
[7063, 117, 1022, 1023, 1020, 384],
/* 4682 */
1304,
/* 4683 */
[7065, 117, 471],
/* 4684 */
[7071, 4685, 1017],
/* 4685 */
1309,
/* 4686 */
[7073, 1017],
/* 4687 */
[7075, 4675, 384, 625, 226],
/* 4688 */
[7076, 1822, 4687, 226],
/* 4689 */
[7077, 4674, 4682, 625, 471, 1825],
/* 4690 */
[7078, 623],
/* 4691 */
[7079, 471, 1021],
/* 4692 */
[7080, 1021, 1824],
/* 4693 */
[7081, 4686, 1021],
/* 4694 */
345,
/* 4695 */
[7083, 4684, 1825],
/* 4696 */
[7085, 4689, 625],
/* 4697 */
[7086, 621, 10, 2, 4793, 4801, 385, 1838, 62],
/* 4698 */
[7087, 103, 17, 10, 2, 313, 62],
/* 4699 */
[7090, 17, 2, 10, 62, 313],
/* 4700 */
2469,
/* 4701 */
[7091, 17, 10, 385],
/* 4702 */
[7092, 2, 62],
/* 4703 */
[7093, 17],
/* 4704 */
[7094, 17, 10, 2, 313, 62],
/* 4705 */
[7096, 17, 2, 4707, 62],
/* 4706 */
[7097, 17, 2, 62],
/* 4707 */
[7098, 2, 622, 62, 4706],
/* 4708 */
[7099, 17, 10, 2, 1028, 62],
/* 4709 */
[7100, 103, 17, 2, 62],
/* 4710 */
2479,
/* 4711 */
[7102, 17, 10, 2, 1831, 4709, 313, 62],
/* 4712 */
[7103, 17, 4710],
/* 4713 */
[7104, 17, 10, 2, 4716, 385, 313, 1838, 62],
/* 4714 */
[7107, 103, 10, 2, 1833, 62],
/* 4715 */
[7108, 17, 620, 2, 10, 1832, 1026, 62, 1851],
/* 4716 */
[7019, 10, 4729, 1835, 4728, 4727, 4717],
/* 4717 */
[7020, 4719, 4718, 4722, 4720, 4724],
/* 4718 */
2377,
/* 4719 */
2378,
/* 4720 */
[7021, 4721],
/* 4721 */
2380,
/* 4722 */
[7022, 4723],
/* 4723 */
2380,
/* 4724 */
2383,
/* 4725 */
2384,
/* 4726 */
[7023, 1834],
/* 4727 */
[7024, 4725, 1834, 4726],
/* 4728 */
2387,
/* 4729 */
[7025, 4730],
/* 4730 */
2389,
/* 4731 */
[7125, 4732],
/* 4732 */
[7126, 4733],
/* 4733 */
2508,
/* 4734 */
[7109, 6995],
/* 4735 */
2486,
/* 4736 */
[7027, 4737],
/* 4737 */
2392,
/* 4738 */
[7111, 17, 1817, 10, 2, 4797, 4796, 4798, 1852, 385, 62],
/* 4739 */
[7112, 2, 10, 62, 1027, 227],
/* 4740 */
[7113, 10, 227],
/* 4741 */
[7114, 10, 227],
/* 4742 */
[7115, 10, 227],
/* 4743 */
[7117, 227, 4739, 4740, 4742, 4744, 4745, 4741],
/* 4744 */
[7118, 10, 227],
/* 4745 */
[7119, 10, 227],
/* 4746 */
[7120, 2, 62],
/* 4747 */
[7122, 2, 62],
/* 4748 */
[7124, 17, 10, 2, 1836, 4751, 62, 1027],
/* 4749 */
2384,
/* 4750 */
[7023, 1837],
/* 4751 */
[7024, 4749, 1837, 4750],
/* 4752 */
2504,
/* 4753 */
2510,
/* 4754 */
[7127, 4762, 4772, 628, 4792],
/* 4755 */
[7128, 4756],
/* 4756 */
[7129, 1841, 4764, 4782],
/* 4757 */
[7131, 4776, 626],
/* 4758 */
1324,
/* 4759 */
2518,
/* 4760 */
2519,
/* 4761 */
[7132, 386],
/* 4762 */
[7134, 4768, 4769, 472, 1855, 4804],
/* 4763 */
1327,
/* 4764 */
[7136, 1845, 4778],
/* 4765 */
[7138, 1844, 1854],
/* 4766 */
[7143, 4783, 4784, 4785, 159, 4799],
/* 4767 */
[7144, 1847, 230],
/* 4768 */
[7145, 4767, 4786, 230],
/* 4769 */
[7146, 1029, 1847, 1849, 159, 1032, 1850, 1839, 230, 1033],
/* 4770 */
[7147, 1029, 1033],
/* 4771 */
749,
/* 4772 */
[7148, 1846, 4775, 4780],
/* 4773 */
2532,
/* 4774 */
2533,
/* 4775 */
[7150, 140],
/* 4776 */
[7151, 140],
/* 4777 */
[7152, 472, 628, 1840],
/* 4778 */
[7153, 1030, 228, 230],
/* 4779 */
[7154, 230],
/* 4780 */
[7155, 4757, 626],
/* 4781 */
[7156, 1840],
/* 4782 */
[7157, 472, 159],
/* 4783 */
[7158, 4759],
/* 4784 */
2543,
/* 4785 */
[7159, 386],
/* 4786 */
[7161, 1850, 4802],
/* 4787 */
2547,
/* 4788 */
2548,
/* 4789 */
[7163, 4774],
/* 4790 */
2550,
/* 4791 */
[7168, 629, 159, 627, 228, 1854],
/* 4792 */
2552,
/* 4793 */
[7172, 1843, 472],
/* 4794 */
[7175, 140],
/* 4795 */
[7176, 4794, 229],
/* 4796 */
[7177, 229],
/* 4797 */
[7178, 4765, 629, 229],
/* 4798 */
[7179, 140],
/* 4799 */
[7181, 228, 229],
/* 4800 */
[7183, 1853, 4760, 4781],
/* 4801 */
[7184, 1029, 1849, 629, 159, 627, 1032, 228, 1839, 1033],
/* 4802 */
[7187, 386, 230],
/* 4803 */
[7188, 4773, 386],
/* 4804 */
[7189, 1848, 4770, 1032],
/* 4805 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(72)["default"];

	exports.__esModule = true;

	var _path = __webpack_require__(175);

	var _babelTemplate = __webpack_require__(4848);

	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

	var buildWrapper = _babelTemplate2["default"]("\n  (function (global, factory) {\n    if (typeof define === \"function\" && define.amd) {\n      define(MODULE_NAME, AMD_ARGUMENTS, factory);\n    } else if (typeof exports !== \"undefined\") {\n      factory(COMMON_ARGUMENTS);\n    } else {\n      var mod = { exports: {} };\n      factory(BROWSER_ARGUMENTS);\n      global.GLOBAL_ARG = mod.exports;\n    }\n  })(this, FUNC);\n");

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  function isValidDefine(path) {
	    if (!path.isExpressionStatement()) return;

	    var expr = path.get("expression");
	    if (!expr.isCallExpression()) return false;
	    if (!expr.get("callee").isIdentifier({ name: "define" })) return false;

	    var args = expr.get("arguments");
	    if (args.length === 3 && !args.shift().isStringLiteral()) return false;
	    if (args.length !== 2) return false;
	    if (!args.shift().isArrayExpression()) return false;
	    if (!args.shift().isFunctionExpression()) return false;

	    return true;
	  }

	  return {
	    inherits: __webpack_require__(1707),

	    visitor: {
	      Program: {
	        exit: function exit(path) {
	          var last = path.get("body").pop();
	          if (!isValidDefine(last)) return;

	          var call = last.node.expression;
	          var args = call.arguments;

	          var moduleName = args.length === 3 ? args.shift() : null;
	          var amdArgs = call.arguments[0];
	          var func = call.arguments[1];

	          var commonArgs = amdArgs.elements.map(function (arg) {
	            if (arg.value === "module" || arg.value === "exports") {
	              return t.identifier(arg.value);
	            } else {
	              return t.callExpression(t.identifier("require"), [arg]);
	            }
	          });

	          var browserArgs = amdArgs.elements.map(function (arg) {
	            if (arg.value === "module") {
	              return t.identifier("mod");
	            } else if (arg.value === "exports") {
	              return t.memberExpression(t.identifier("mod"), t.identifier("exports"));
	            } else {
	              return t.memberExpression(t.identifier("global"), t.identifier(t.toIdentifier(_path.basename(arg.value, _path.extname(arg.value)))));
	            }
	          });

	          var globalArg = t.identifier(t.toIdentifier(moduleName ? moduleName.value : this.file.opts.basename));

	          last.replaceWith(buildWrapper({
	            MODULE_NAME: moduleName,
	            BROWSER_ARGUMENTS: browserArgs,
	            AMD_ARGUMENTS: amdArgs,
	            COMMON_ARGUMENTS: commonArgs,
	            GLOBAL_ARG: globalArg,
	            FUNC: func
	          }));
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 4806 */
[7030, 4815],
/* 4807 */
[7032, 4817],
/* 4808 */
[7033, 4818],
/* 4809 */
[7034, 4819],
/* 4810 */
[7035, 4820],
/* 4811 */
[7039, 4822],
/* 4812 */
[7040, 4809, 4808, 4807],
/* 4813 */
1821,
/* 4814 */
[7042, 4847, 4846, 4839],
/* 4815 */
[7043, 4841],
/* 4816 */
[7044, 118],
/* 4817 */
[7045, 118],
/* 4818 */
[7046, 118, 4842],
/* 4819 */
[7047, 118, 4843],
/* 4820 */
[7048, 1042, 231],
/* 4821 */
[7049, 4844, 231],
/* 4822 */
[7051, 1042, 231],
/* 4823 */
[7052, 1042, 4845, 231],
/* 4824 */
2441,
/* 4825 */
2442,
/* 4826 */
[7054, 1034, 387],
/* 4827 */
[7055, 4824],
/* 4828 */
[7057, 118],
/* 4829 */
[7061, 1034],
/* 4830 */
[7062, 1034],
/* 4831 */
514,
/* 4832 */
[7063, 118, 1040, 1041, 1038, 387],
/* 4833 */
1304,
/* 4834 */
[7065, 118, 473],
/* 4835 */
[7071, 4836, 1035],
/* 4836 */
1309,
/* 4837 */
[7073, 1035],
/* 4838 */
[7075, 4826, 387, 632, 231],
/* 4839 */
[7076, 1860, 4838, 231],
/* 4840 */
[7077, 4825, 4833, 632, 473, 1863],
/* 4841 */
[7078, 630],
/* 4842 */
[7079, 473, 1039],
/* 4843 */
[7080, 1039, 1862],
/* 4844 */
[7081, 4837, 1039],
/* 4845 */
345,
/* 4846 */
[7083, 4835, 1863],
/* 4847 */
[7085, 4840, 632],
/* 4848 */
[7086, 1858, 72, 48, 4944, 4952, 388, 1876, 63],
/* 4849 */
[7087, 314, 91, 72, 48, 315, 63],
/* 4850 */
[7090, 91, 48, 72, 63, 315],
/* 4851 */
2469,
/* 4852 */
[7091, 91, 72, 388],
/* 4853 */
[7092, 48, 63],
/* 4854 */
[7093, 91],
/* 4855 */
[7094, 91, 72, 48, 315, 63],
/* 4856 */
[7096, 91, 48, 4858, 63],
/* 4857 */
[7097, 91, 48, 63],
/* 4858 */
[7098, 48, 1859, 63, 4857],
/* 4859 */
[7099, 91, 72, 48, 1046, 63],
/* 4860 */
[7100, 314, 91, 48, 63],
/* 4861 */
2479,
/* 4862 */
[7102, 91, 72, 48, 1869, 4860, 315, 63],
/* 4863 */
[7103, 91, 4861],
/* 4864 */
[7104, 91, 72, 48, 4867, 388, 315, 1876, 63],
/* 4865 */
[7107, 314, 72, 48, 1871, 63],
/* 4866 */
[7108, 91, 1857, 48, 72, 1870, 1044, 63, 1889],
/* 4867 */
[7019, 72, 4880, 1873, 4879, 4878, 4868],
/* 4868 */
[7020, 4870, 4869, 4873, 4871, 4875],
/* 4869 */
2377,
/* 4870 */
2378,
/* 4871 */
[7021, 4872],
/* 4872 */
2380,
/* 4873 */
[7022, 4874],
/* 4874 */
2380,
/* 4875 */
2383,
/* 4876 */
2384,
/* 4877 */
[7023, 1872],
/* 4878 */
[7024, 4876, 1872, 4877],
/* 4879 */
2387,
/* 4880 */
[7025, 4881],
/* 4881 */
2389,
/* 4882 */
[7125, 4883],
/* 4883 */
[7126, 4884],
/* 4884 */
2508,
/* 4885 */
[7109, 6996],
/* 4886 */
2486,
/* 4887 */
[7027, 4888],
/* 4888 */
2392,
/* 4889 */
[7111, 91, 4806, 72, 48, 4948, 4947, 4949, 1890, 388, 63],
/* 4890 */
[7112, 48, 72, 63, 1045, 232],
/* 4891 */
[7113, 72, 232],
/* 4892 */
[7114, 72, 232],
/* 4893 */
[7115, 72, 232],
/* 4894 */
[7117, 232, 4890, 4891, 4893, 4895, 4896, 4892],
/* 4895 */
[7118, 72, 232],
/* 4896 */
[7119, 72, 232],
/* 4897 */
[7120, 48, 63],
/* 4898 */
[7122, 48, 63],
/* 4899 */
[7124, 91, 72, 48, 1874, 4902, 63, 1045],
/* 4900 */
2384,
/* 4901 */
[7023, 1875],
/* 4902 */
[7024, 4900, 1875, 4901],
/* 4903 */
2504,
/* 4904 */
2510,
/* 4905 */
[7127, 4913, 4923, 635, 4943],
/* 4906 */
[7128, 4907],
/* 4907 */
[7129, 1879, 4915, 4933],
/* 4908 */
[7131, 4927, 633],
/* 4909 */
1324,
/* 4910 */
2518,
/* 4911 */
2519,
/* 4912 */
[7132, 389],
/* 4913 */
[7134, 4919, 4920, 474, 1893, 4955],
/* 4914 */
1327,
/* 4915 */
[7136, 1883, 4929],
/* 4916 */
[7138, 1882, 1892],
/* 4917 */
[7143, 4934, 4935, 4936, 160, 4950],
/* 4918 */
[7144, 1885, 235],
/* 4919 */
[7145, 4918, 4937, 235],
/* 4920 */
[7146, 1047, 1885, 1887, 160, 1050, 1888, 1877, 235, 1051],
/* 4921 */
[7147, 1047, 1051],
/* 4922 */
749,
/* 4923 */
[7148, 1884, 4926, 4931],
/* 4924 */
2532,
/* 4925 */
2533,
/* 4926 */
[7150, 141],
/* 4927 */
[7151, 141],
/* 4928 */
[7152, 474, 635, 1878],
/* 4929 */
[7153, 1048, 233, 235],
/* 4930 */
[7154, 235],
/* 4931 */
[7155, 4908, 633],
/* 4932 */
[7156, 1878],
/* 4933 */
[7157, 474, 160],
/* 4934 */
[7158, 4910],
/* 4935 */
2543,
/* 4936 */
[7159, 389],
/* 4937 */
[7161, 1888, 4953],
/* 4938 */
2547,
/* 4939 */
2548,
/* 4940 */
[7163, 4925],
/* 4941 */
2550,
/* 4942 */
[7168, 636, 160, 634, 233, 1892],
/* 4943 */
2552,
/* 4944 */
[7172, 1881, 474],
/* 4945 */
[7175, 141],
/* 4946 */
[7176, 4945, 234],
/* 4947 */
[7177, 234],
/* 4948 */
[7178, 4916, 636, 234],
/* 4949 */
[7179, 141],
/* 4950 */
[7181, 233, 234],
/* 4951 */
[7183, 1891, 4911, 4932],
/* 4952 */
[7184, 1047, 1887, 636, 160, 634, 1050, 233, 1877, 1051],
/* 4953 */
[7187, 389, 235],
/* 4954 */
[7188, 4924, 389],
/* 4955 */
[7189, 1886, 4921, 1050],
/* 4956 */
[7195, 240, 1063, 73, 41, 4957, 637, 54],
/* 4957 */
[7194, 41, 54],
/* 4958 */
[7087, 240, 85, 73, 41, 316, 54],
/* 4959 */
[7090, 85, 41, 73, 54, 316],
/* 4960 */
2469,
/* 4961 */
[7091, 85, 73, 475],
/* 4962 */
[7092, 41, 54],
/* 4963 */
[7093, 85],
/* 4964 */
[7094, 85, 73, 41, 316, 54],
/* 4965 */
[7096, 85, 41, 4967, 54],
/* 4966 */
[7097, 85, 41, 54],
/* 4967 */
[7098, 41, 1924, 54, 4966],
/* 4968 */
[7099, 85, 73, 41, 1054, 54],
/* 4969 */
[7100, 240, 85, 41, 54],
/* 4970 */
2479,
/* 4971 */
[7102, 85, 73, 41, 1895, 4969, 316, 54],
/* 4972 */
[7103, 85, 4970],
/* 4973 */
[7104, 85, 73, 41, 4976, 475, 316, 4991, 54],
/* 4974 */
[7107, 240, 73, 41, 1897, 54],
/* 4975 */
[7108, 85, 1923, 41, 73, 1896, 637, 54, 5018],
/* 4976 */
[7019, 73, 4989, 1906, 4988, 4987, 4977],
/* 4977 */
[7020, 4979, 4978, 4982, 4980, 4984],
/* 4978 */
2377,
/* 4979 */
2378,
/* 4980 */
[7021, 4981],
/* 4981 */
2380,
/* 4982 */
[7022, 4983],
/* 4983 */
2380,
/* 4984 */
2383,
/* 4985 */
2384,
/* 4986 */
[7023, 1898],
/* 4987 */
[7024, 4985, 1898, 4986],
/* 4988 */
2387,
/* 4989 */
[7025, 4990],
/* 4990 */
2389,
/* 4991 */
745,
/* 4992 */
[7125, 4993],
/* 4993 */
[7126, 4994],
/* 4994 */
2508,
/* 4995 */
[7109, 6997],
/* 4996 */
2486,
/* 4997 */
1324,
/* 4998 */
746,
/* 4999 */
2519,
/* 5000 */
[7132, 640],
/* 5001 */
[7135, 4997, 4998, 1900, 5004, 5013, 5014, 5015, 639, 390],
/* 5002 */
1327,
/* 5003 */
[7137, 5010],
/* 5004 */
[7139, 5003, 640],
/* 5005 */
[7141, 5012],
/* 5006 */
1334,
/* 5007 */
2532,
/* 5008 */
2533,
/* 5009 */
[7152, 1901, 1057, 1899],
/* 5010 */
[7154, 5017],
/* 5011 */
[7156, 1899],
/* 5012 */
2547,
/* 5013 */
2548,
/* 5014 */
[7163, 5008],
/* 5015 */
2550,
/* 5016 */
[7168, 1904, 639, 1056, 476, 5023],
/* 5017 */
[7169, 390],
/* 5018 */
[7171, 5001, 1901, 1057],
/* 5019 */
[7175, 390],
/* 5020 */
[7176, 5019, 638],
/* 5021 */
[7180, 638],
/* 5022 */
[7183, 1905, 4999, 5011],
/* 5023 */
[7186, 1904, 639, 1056, 476, 390],
/* 5024 */
[7188, 5007, 640],
/* 5025 */
1345,
/* 5026 */
[7027, 5027],
/* 5027 */
2392,
/* 5028 */
[7111, 85, 5093, 73, 41, 5086, 5085, 5087, 5088, 475, 54],
/* 5029 */
[7112, 41, 73, 54, 1058, 236],
/* 5030 */
[7113, 73, 236],
/* 5031 */
[7114, 73, 236],
/* 5032 */
[7115, 73, 236],
/* 5033 */
[7117, 236, 5029, 5030, 5032, 5034, 5035, 5031],
/* 5034 */
[7118, 73, 236],
/* 5035 */
[7119, 73, 236],
/* 5036 */
[7120, 41, 54],
/* 5037 */
[7122, 41, 54],
/* 5038 */
[7124, 85, 73, 41, 1907, 5041, 54, 1058],
/* 5039 */
2384,
/* 5040 */
[7023, 1908],
/* 5041 */
[7024, 5039, 1908, 5040],
/* 5042 */
2510,
/* 5043 */
1322,
/* 5044 */
[7127, 5051, 5064, 1916, 5081],
/* 5045 */
[7128, 5046],
/* 5046 */
[7129, 1909, 5054, 5071],
/* 5047 */
[7131, 5067, 641],
/* 5048 */
1324,
/* 5049 */
2518,
/* 5050 */
[7133, 5053, 642],
/* 5051 */
[7134, 5059, 5060, 1059, 1921, 5091],
/* 5052 */
[7135, 5048, 1909, 5050, 1911, 5077, 5078, 5079, 239, 142],
/* 5053 */
1327,
/* 5054 */
[7136, 1911, 5068],
/* 5055 */
[7138, 1910, 1920],
/* 5056 */
[7141, 5076],
/* 5057 */
[7143, 5072, 5073, 5074, 239, 5089],
/* 5058 */
[7144, 1913, 238],
/* 5059 */
[7145, 5058, 5075, 238],
/* 5060 */
[7146, 1912, 1913, 5062, 239, 1917, 1918, 5043, 238, 1919],
/* 5061 */
[7147, 1912, 1919],
/* 5062 */
1335,
/* 5063 */
749,
/* 5064 */
[7148, 5056, 5066, 5070],
/* 5065 */
2533,
/* 5066 */
[7150, 142],
/* 5067 */
[7151, 142],
/* 5068 */
[7153, 1915, 391, 238],
/* 5069 */
[7154, 238],
/* 5070 */
[7155, 5047, 641],
/* 5071 */
[7157, 1059, 239],
/* 5072 */
[7158, 5049],
/* 5073 */
2543,
/* 5074 */
[7159, 642],
/* 5075 */
[7161, 1918, 5090],
/* 5076 */
2547,
/* 5077 */
2548,
/* 5078 */
[7163, 5065],
/* 5079 */
2550,
/* 5080 */
[7168, 1062, 239, 1061, 391, 1920],
/* 5081 */
2552,
/* 5082 */
[7171, 5052, 1059, 1916],
/* 5083 */
[7175, 142],
/* 5084 */
[7176, 5083, 237],
/* 5085 */
[7177, 237],
/* 5086 */
[7178, 5055, 1062, 237],
/* 5087 */
[7179, 142],
/* 5088 */
[7180, 237],
/* 5089 */
[7181, 391, 237],
/* 5090 */
[7187, 642, 238],
/* 5091 */
[7189, 1914, 5061, 1917],
/* 5092 */
2504,
/* 5093 */
[7030, 5102],
/* 5094 */
[7032, 5104],
/* 5095 */
[7033, 5105],
/* 5096 */
[7034, 5106],
/* 5097 */
[7035, 5107],
/* 5098 */
[7039, 5109],
/* 5099 */
[7040, 5096, 5095, 5094],
/* 5100 */
1821,
/* 5101 */
[7042, 5134, 5133, 5126],
/* 5102 */
[7043, 5128],
/* 5103 */
[7044, 119],
/* 5104 */
[7045, 119],
/* 5105 */
[7046, 119, 5129],
/* 5106 */
[7047, 119, 5130],
/* 5107 */
[7048, 1072, 241],
/* 5108 */
[7049, 5131, 241],
/* 5109 */
[7051, 1072, 241],
/* 5110 */
[7052, 1072, 5132, 241],
/* 5111 */
2441,
/* 5112 */
2442,
/* 5113 */
[7054, 1064, 392],
/* 5114 */
[7055, 5111],
/* 5115 */
[7057, 119],
/* 5116 */
[7061, 1064],
/* 5117 */
[7062, 1064],
/* 5118 */
514,
/* 5119 */
[7063, 119, 1070, 1071, 1068, 392],
/* 5120 */
1304,
/* 5121 */
[7065, 119, 477],
/* 5122 */
[7071, 5123, 1065],
/* 5123 */
1309,
/* 5124 */
[7073, 1065],
/* 5125 */
[7075, 5113, 392, 645, 241],
/* 5126 */
[7076, 1925, 5125, 241],
/* 5127 */
[7077, 5112, 5120, 645, 477, 1928],
/* 5128 */
[7078, 643],
/* 5129 */
[7079, 477, 1069],
/* 5130 */
[7080, 1069, 1927],
/* 5131 */
[7081, 5124, 1069],
/* 5132 */
345,
/* 5133 */
[7083, 5122, 1928],
/* 5134 */
[7085, 5127, 645],
/* 5135 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(74)["default"];

	var _interopRequireDefault = __webpack_require__(55)["default"];

	var _interopRequireWildcard = __webpack_require__(29)["default"];

	exports.__esModule = true;

	var _babelHelperGetFunctionArity = __webpack_require__(5140);

	var _babelHelperGetFunctionArity2 = _interopRequireDefault(_babelHelperGetFunctionArity);

	var _babelHelperCallDelegate = __webpack_require__(5138);

	var _babelHelperCallDelegate2 = _interopRequireDefault(_babelHelperCallDelegate);

	var _babelTemplate = __webpack_require__(1945);

	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

	var _babelTypes = __webpack_require__(34);

	var t = _interopRequireWildcard(_babelTypes);

	var buildDefaultParam = _babelTemplate2["default"]("\n  let VARIABLE_NAME =\n    ARGUMENTS.length <= ARGUMENT_KEY || ARGUMENTS[ARGUMENT_KEY] === undefined ?\n      DEFAULT_VALUE\n    :\n      ARGUMENTS[ARGUMENT_KEY];\n");

	var buildDefaultParamAssign = _babelTemplate2["default"]("\n  if (VARIABLE_NAME === undefined) VARIABLE_NAME = DEFAULT_VALUE;\n");

	var buildCutOff = _babelTemplate2["default"]("\n  let $0 = $1[$2];\n");

	function hasDefaults(node) {
	  for (var _iterator = (node.params /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var param = _ref;

	    if (!t.isIdentifier(param)) return true;
	  }
	  return false;
	}

	var iifeVisitor = {
	  ReferencedIdentifier: function ReferencedIdentifier(path, state) {
	    var name = path.node.name;
	    if (name === "eval" || path.scope.hasOwnBinding(name) && path.scope.getOwnBinding(name).kind !== "param") {
	      state.iife = true;
	      path.stop();
	    }
	  },

	  Scope: function Scope(path) {
	    // different bindings
	    path.skip();
	  }
	};

	var visitor = {
	  Function: function Function(path) {
	    var node = path.node;
	    var scope = path.scope;

	    if (!hasDefaults(node)) return;

	    // ensure it's a block, useful for arrow functions
	    path.ensureBlock();

	    var state = {
	      iife: false,
	      scope: scope
	    };

	    var body = [];

	    //
	    var argsIdentifier = t.identifier("arguments");
	    argsIdentifier._shadowedFunctionLiteral = path;

	    // push a default parameter definition
	    function pushDefNode(left, right, i) {
	      var defNode = undefined;
	      if (exceedsLastNonDefault(i) || t.isPattern(left)) {
	        defNode = buildDefaultParam({
	          VARIABLE_NAME: left,
	          DEFAULT_VALUE: right,
	          ARGUMENT_KEY: t.numericLiteral(i),
	          ARGUMENTS: argsIdentifier
	        });
	      } else {
	        defNode = buildDefaultParamAssign({
	          VARIABLE_NAME: left,
	          DEFAULT_VALUE: right
	        });
	      }
	      defNode._blockHoist = node.params.length - i;
	      body.push(defNode);
	    }

	    // check if an index exceeds the functions arity
	    function exceedsLastNonDefault(i) {
	      return i + 1 > lastNonDefaultParam;
	    }

	    //
	    var lastNonDefaultParam = _babelHelperGetFunctionArity2["default"](node);

	    //
	    var params = path.get("params");
	    for (var i = 0; i < params.length; i++) {
	      var param = params[i];

	      if (!param.isAssignmentPattern()) {
	        if (!param.isIdentifier()) {
	          param.traverse(iifeVisitor, state);
	        }

	        continue;
	      }

	      var left = param.get("left");
	      var right = param.get("right");

	      //
	      if (exceedsLastNonDefault(i) || left.isPattern()) {
	        var placeholder = scope.generateUidIdentifier("x");
	        placeholder._isDefaultPlaceholder = true;
	        node.params[i] = placeholder;
	      } else {
	        node.params[i] = left.node;
	      }

	      //
	      if (!state.iife) {
	        if (right.isIdentifier() && scope.hasOwnBinding(right.node.name) && scope.getOwnBinding(right.node.name).kind !== "param") {
	          // the right hand side references a parameter
	          state.iife = true;
	        } else {
	          right.traverse(iifeVisitor, state);
	        }
	      }

	      pushDefNode(left.node, right.node, i);
	    }

	    // add declarations for trailing parameters
	    for (var i = lastNonDefaultParam + 1; i < node.params.length; i++) {
	      var param = node.params[i];
	      if (param._isDefaultPlaceholder) continue;

	      var declar = buildCutOff(param, argsIdentifier, t.numericLiteral(i));
	      declar._blockHoist = node.params.length - i;
	      body.push(declar);
	    }

	    // we need to cut off all trailing parameters
	    node.params = node.params.slice(0, lastNonDefaultParam);

	    if (state.iife) {
	      body.push(_babelHelperCallDelegate2["default"](path, scope));
	      path.set("body", t.blockStatement(body));
	    } else {
	      path.get("body").unshiftContainer("body", body);
	    }
	  }
	};
	exports.visitor = visitor;

/***/ },
/* 5136 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireWildcard = __webpack_require__(29)["default"];

	exports.__esModule = true;

	var _babelTypes = __webpack_require__(34);

	var t = _interopRequireWildcard(_babelTypes);

	var visitor = {
	  Function: function Function(path) {
	    var params /*: Array*/ = path.get("params");

	    // If there's a rest param, no need to loop through it. Also, we need to
	    // hoist one more level to get `declar` at the right spot.
	    var hoistTweak = t.isRestElement(params[params.length - 1]) ? 1 : 0;
	    var outputParamsLength = params.length - hoistTweak;

	    for (var i = 0; i < outputParamsLength; i++) {
	      var param = params[i];
	      if (param.isArrayPattern() || param.isObjectPattern()) {
	        var uid = path.scope.generateUidIdentifier("ref");

	        var declar = t.variableDeclaration("let", [t.variableDeclarator(param.node, uid)]);
	        declar._blockHoist = outputParamsLength - i;

	        path.ensureBlock();
	        path.get("body").unshiftContainer("body", declar);

	        param.replaceWith(uid);
	      }
	    }
	  }
	};
	exports.visitor = visitor;

/***/ },
/* 5137 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(74)["default"];

	var _interopRequireDefault = __webpack_require__(55)["default"];

	var _interopRequireWildcard = __webpack_require__(29)["default"];

	exports.__esModule = true;

	var _babelTemplate = __webpack_require__(1945);

	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

	var _babelTypes = __webpack_require__(34);

	var t = _interopRequireWildcard(_babelTypes);

	var buildRest = _babelTemplate2["default"]("\n  for (var LEN = ARGUMENTS.length,\n           ARRAY = Array(ARRAY_LEN),\n           KEY = START;\n       KEY < LEN;\n       KEY++) {\n    ARRAY[ARRAY_KEY] = ARGUMENTS[KEY];\n  }\n");

	var loadRest = _babelTemplate2["default"]("\n  ARGUMENTS.length <= INDEX ? undefined : ARGUMENTS[INDEX]\n");

	var memberExpressionOptimisationVisitor = {
	  Scope: function Scope(path, state) {
	    // check if this scope has a local binding that will shadow the rest parameter
	    if (!path.scope.bindingIdentifierEquals(state.name, state.outerBinding)) {
	      path.skip();
	    }
	  },

	  Flow: function Flow(path) {
	    // don't touch reference in type annotations
	    path.skip();
	  },

	  Function: function Function(path, state) {
	    // skip over functions as whatever `arguments` we reference inside will refer
	    // to the wrong function
	    var oldNoOptimise = state.noOptimise;
	    state.noOptimise = true;
	    path.traverse(memberExpressionOptimisationVisitor, state);
	    state.noOptimise = oldNoOptimise;
	    path.skip();
	  },

	  ReferencedIdentifier: function ReferencedIdentifier(path, state) {
	    var node = path.node;

	    // we can't guarantee the purity of arguments
	    if (node.name === "arguments") {
	      state.deopted = true;
	    }

	    // is this a referenced identifier and is it referencing the rest parameter?
	    if (node.name !== state.name) return;

	    if (state.noOptimise) {
	      state.deopted = true;
	    } else {
	      var parentPath = path.parentPath;

	      // ex: args[0]
	      if (parentPath.isMemberExpression({ computed: true, object: node })) {
	        // if we know that this member expression is referencing a number then
	        // we can safely optimise it
	        var prop = parentPath.get("property");
	        if (prop.isBaseType("number")) {
	          state.candidates.push({ cause: "indexGetter", path: path });
	          return;
	        }
	      }

	      // ex: args.length
	      if (parentPath.isMemberExpression({ computed: false, object: node })) {
	        var prop = parentPath.get("property");
	        if (prop.node.name === "length") {
	          state.candidates.push({ cause: "lengthGetter", path: path });
	          return;
	        }
	      }

	      // we can only do these optimizations if the rest variable would match
	      // the arguments exactly
	      // optimise single spread args in calls
	      // ex: fn(...args)
	      if (state.offset === 0 && parentPath.isSpreadElement()) {
	        var call = parentPath.parentPath;
	        if (call.isCallExpression() && call.node.arguments.length === 1) {
	          state.candidates.push({ cause: "argSpread", path: path });
	          return;
	        }
	      }

	      state.references.push(path);
	    }
	  },

	  /**
	   * Deopt on use of a binding identifier with the same name as our rest param.
	   *
	   * See https://github.com/babel/babel/issues/2091
	   */

	  BindingIdentifier: function BindingIdentifier(_ref2, state) {
	    var node = _ref2.node;

	    if (node.name === state.name) {
	      state.deopted = true;
	    }
	  }
	};
	function hasRest(node) {
	  return t.isRestElement(node.params[node.params.length - 1]);
	}

	function optimiseIndexGetter(path, argsId, offset) {
	  path.parentPath.replaceWith(loadRest({
	    ARGUMENTS: argsId,
	    INDEX: t.numericLiteral(path.parent.property.value + offset)
	  }));
	}

	function optimiseLengthGetter(path, argsLengthExpression, argsId, offset) {
	  if (offset) {
	    path.parentPath.replaceWith(t.binaryExpression("-", argsLengthExpression, t.numericLiteral(offset)));
	  } else {
	    path.replaceWith(argsId);
	  }
	}

	var visitor = {
	  Function: function Function(path) {
	    var node = path.node;
	    var scope = path.scope;

	    if (!hasRest(node)) return;

	    var rest = node.params.pop().argument;

	    var argsId = t.identifier("arguments");
	    var argsLengthExpression = t.memberExpression(argsId, t.identifier("length"));

	    // otherwise `arguments` will be remapped in arrow functions
	    argsId._shadowedFunctionLiteral = path;

	    // check and optimise for extremely common cases
	    var state = {
	      references: [],
	      offset: node.params.length,

	      argumentsNode: argsId,
	      outerBinding: scope.getBindingIdentifier(rest.name),

	      // candidate member expressions we could optimise if there are no other references
	      candidates: [],

	      // local rest binding name
	      name: rest.name,

	      // whether any references to the rest parameter were made in a function
	      deopted: false
	    };

	    path.traverse(memberExpressionOptimisationVisitor, state);

	    if (!state.deopted && !state.references.length) {
	      // we only have shorthands and there are no other references
	      if (state.candidates.length) {
	        for (var _iterator = (state.candidates /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	          var _ref;

	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }

	          var _path = _ref.path;
	          var cause = _ref.cause;

	          switch (cause) {
	            case "indexGetter":
	              optimiseIndexGetter(_path, argsId, state.offset);
	              break;
	            case "lengthGetter":
	              optimiseLengthGetter(_path, argsLengthExpression, argsId, state.offset);
	              break;
	            default:
	              _path.replaceWith(argsId);
	          }
	        }
	      }
	      return;
	    } else {
	      state.references = state.references.concat(state.candidates.map(function (_ref3) {
	        var path = _ref3.path;
	        return path;
	      }));
	    }

	    // deopt shadowed functions as transforms like regenerator may try touch the allocation loop
	    state.deopted = state.deopted || !!node.shadow;

	    var start = t.numericLiteral(node.params.length);
	    var key = scope.generateUidIdentifier("key");
	    var len = scope.generateUidIdentifier("len");

	    var arrKey = key;
	    var arrLen = len;
	    if (node.params.length) {
	      // this method has additional params, so we need to subtract
	      // the index of the current argument position from the
	      // position in the array that we want to populate
	      arrKey = t.binaryExpression("-", key, start);

	      // we need to work out the size of the array that we're
	      // going to store all the rest parameters
	      //
	      // we need to add a check to avoid constructing the array
	      // with <0 if there are less arguments than params as it'll
	      // cause an error
	      arrLen = t.conditionalExpression(t.binaryExpression(">", len, start), t.binaryExpression("-", len, start), t.numericLiteral(0));
	    }

	    var loop = buildRest({
	      ARGUMENTS: argsId,
	      ARRAY_KEY: arrKey,
	      ARRAY_LEN: arrLen,
	      START: start,
	      ARRAY: rest,
	      KEY: key,
	      LEN: len
	    });

	    if (state.deopted) {
	      loop._blockHoist = node.params.length + 1;
	      node.body.body.unshift(loop);
	    } else {
	      // perform allocation at the lowest common ancestor of all references
	      loop._blockHoist = 1;

	      var target = path.getEarliestCommonAncestorFrom(state.references).getStatementParent();

	      // don't perform the allocation inside a loop
	      var highestLoop = undefined;
	      target.findParent(function (path) {
	        if (path.isLoop()) {
	          highestLoop = path;
	        } else if (path.isFunction()) {
	          // stop crawling up for functions
	          return true;
	        }
	      });
	      if (highestLoop) target = highestLoop;

	      target.insertBefore(loop);
	    }
	  }
	};
	exports.visitor = visitor;

/***/ },
/* 5138 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(55)["default"];

	var _interopRequireWildcard = __webpack_require__(29)["default"];

	exports.__esModule = true;

	var _babelHelperHoistVariables = __webpack_require__(5139);

	var _babelHelperHoistVariables2 = _interopRequireDefault(_babelHelperHoistVariables);

	var _babelTypes = __webpack_require__(34);

	var t = _interopRequireWildcard(_babelTypes);

	/*:: import type { NodePath } from "babel-traverse";*/

	var visitor = {
	  enter: function enter(path, state) {
	    if (path.isThisExpression()) {
	      state.foundThis = true;
	    }

	    if (path.isReferencedIdentifier({ name: "arguments" })) {
	      state.foundArguments = true;
	    }
	  },

	  Function: function Function(path) {
	    path.skip();
	  }
	};

	exports["default"] = function (path /*: NodePath*/) {
	  var scope = arguments.length <= 1 || arguments[1] === undefined ? path.scope : arguments[1];
	  return (function () {
	    var node = path.node;

	    var container = t.functionExpression(null, [], node.body, node.generator, node.async);

	    var callee = container;
	    var args = [];

	    // todo: only hoist if necessary
	    _babelHelperHoistVariables2["default"](path, function (id) {
	      return scope.push({ id: id });
	    });

	    var state = {
	      foundThis: false,
	      foundArguments: false
	    };

	    path.traverse(visitor, state);

	    if (state.foundArguments) {
	      callee = t.memberExpression(container, t.identifier("apply"));
	      args = [];

	      if (state.foundThis) {
	        args.push(t.thisExpression());
	      }

	      if (state.foundArguments) {
	        if (!state.foundThis) args.push(t.nullLiteral());
	        args.push(t.identifier("arguments"));
	      }
	    }

	    var call = t.callExpression(callee, args);
	    if (node.generator) call = t.yieldExpression(call, true);

	    return t.returnStatement(call);
	  })();
	};

	module.exports = exports["default"];

/***/ },
/* 5139 */
[7196, 74, 29, 34],
/* 5140 */
[7192, 29, 34],
/* 5141 */
[7030, 5150],
/* 5142 */
[7032, 5152],
/* 5143 */
[7033, 5153],
/* 5144 */
[7034, 5154],
/* 5145 */
[7035, 5155],
/* 5146 */
[7039, 5157],
/* 5147 */
[7040, 5144, 5143, 5142],
/* 5148 */
1821,
/* 5149 */
[7042, 5182, 5181, 5174],
/* 5150 */
[7043, 5176],
/* 5151 */
[7044, 120],
/* 5152 */
[7045, 120],
/* 5153 */
[7046, 120, 5177],
/* 5154 */
[7047, 120, 5178],
/* 5155 */
[7048, 1082, 242],
/* 5156 */
[7049, 5179, 242],
/* 5157 */
[7051, 1082, 242],
/* 5158 */
[7052, 1082, 5180, 242],
/* 5159 */
2441,
/* 5160 */
2442,
/* 5161 */
[7054, 1074, 393],
/* 5162 */
[7055, 5159],
/* 5163 */
[7057, 120],
/* 5164 */
[7061, 1074],
/* 5165 */
[7062, 1074],
/* 5166 */
514,
/* 5167 */
[7063, 120, 1080, 1081, 1078, 393],
/* 5168 */
1304,
/* 5169 */
[7065, 120, 478],
/* 5170 */
[7071, 5171, 1075],
/* 5171 */
1309,
/* 5172 */
[7073, 1075],
/* 5173 */
[7075, 5161, 393, 648, 242],
/* 5174 */
[7076, 1937, 5173, 242],
/* 5175 */
[7077, 5160, 5168, 648, 478, 1940],
/* 5176 */
[7078, 646],
/* 5177 */
[7079, 478, 1079],
/* 5178 */
[7080, 1079, 1939],
/* 5179 */
[7081, 5172, 1079],
/* 5180 */
345,
/* 5181 */
[7083, 5170, 1940],
/* 5182 */
[7085, 5175, 648],
/* 5183 */
745,
/* 5184 */
1322,
/* 5185 */
1324,
/* 5186 */
746,
/* 5187 */
[7133, 5189, 1948],
/* 5188 */
[7135, 5185, 5186, 5187, 5191, 5200, 5201, 5202, 394, 480],
/* 5189 */
1327,
/* 5190 */
[7137, 5198],
/* 5191 */
[7139, 5190, 1948],
/* 5192 */
[7140, 1085],
/* 5193 */
1334,
/* 5194 */
1335,
/* 5195 */
749,
/* 5196 */
[7149, 5211],
/* 5197 */
2533,
/* 5198 */
[7154, 1085],
/* 5199 */
[7160, 5193],
/* 5200 */
2548,
/* 5201 */
[7163, 5197],
/* 5202 */
2550,
/* 5203 */
[7166, 394, 1085],
/* 5204 */
[7168, 1086, 394, 1083, 479, 5210],
/* 5205 */
[7170, 5195, 394],
/* 5206 */
[7172, 5188, 5196],
/* 5207 */
[7175, 480],
/* 5208 */
[7176, 5207, 1084],
/* 5209 */
[7184, 5192, 5194, 1086, 394, 1083, 5203, 479, 5184, 5205],
/* 5210 */
[7186, 1086, 394, 1083, 479, 480],
/* 5211 */
1345,
/* 5212 */
[7087, 317, 74, 55, 29, 319, 34],
/* 5213 */
[7090, 74, 29, 55, 34, 319],
/* 5214 */
2469,
/* 5215 */
[7091, 74, 55, 318],
/* 5216 */
[7092, 29, 34],
/* 5217 */
[7093, 74],
/* 5218 */
[7094, 74, 55, 29, 319, 34],
/* 5219 */
[7096, 74, 29, 5221, 34],
/* 5220 */
[7097, 74, 29, 34],
/* 5221 */
[7098, 29, 1936, 34, 5220],
/* 5222 */
[7099, 74, 55, 29, 1089, 34],
/* 5223 */
[7100, 317, 74, 29, 34],
/* 5224 */
2479,
/* 5225 */
[7102, 74, 55, 29, 1950, 5223, 319, 34],
/* 5226 */
[7103, 74, 5224],
/* 5227 */
[7104, 74, 55, 29, 5230, 318, 319, 5245, 34],
/* 5228 */
[7107, 317, 55, 29, 1952, 34],
/* 5229 */
[7108, 74, 1934, 29, 55, 1951, 1088, 34, 5272],
/* 5230 */
[7019, 55, 5243, 1961, 5242, 5241, 5231],
/* 5231 */
[7020, 5233, 5232, 5236, 5234, 5238],
/* 5232 */
2377,
/* 5233 */
2378,
/* 5234 */
[7021, 5235],
/* 5235 */
2380,
/* 5236 */
[7022, 5237],
/* 5237 */
2380,
/* 5238 */
2383,
/* 5239 */
2384,
/* 5240 */
[7023, 1953],
/* 5241 */
[7024, 5239, 1953, 5240],
/* 5242 */
2387,
/* 5243 */
[7025, 5244],
/* 5244 */
2389,
/* 5245 */
745,
/* 5246 */
[7125, 5247],
/* 5247 */
[7126, 5248],
/* 5248 */
2508,
/* 5249 */
[7109, 6998],
/* 5250 */
2486,
/* 5251 */
1324,
/* 5252 */
746,
/* 5253 */
2519,
/* 5254 */
[7132, 651],
/* 5255 */
[7135, 5251, 5252, 1955, 5258, 5267, 5268, 5269, 650, 395],
/* 5256 */
1327,
/* 5257 */
[7137, 5264],
/* 5258 */
[7139, 5257, 651],
/* 5259 */
[7141, 5266],
/* 5260 */
1334,
/* 5261 */
2532,
/* 5262 */
2533,
/* 5263 */
[7152, 1956, 1092, 1954],
/* 5264 */
[7154, 5271],
/* 5265 */
[7156, 1954],
/* 5266 */
2547,
/* 5267 */
2548,
/* 5268 */
[7163, 5262],
/* 5269 */
2550,
/* 5270 */
[7168, 1959, 650, 1091, 481, 5277],
/* 5271 */
[7169, 395],
/* 5272 */
[7171, 5255, 1956, 1092],
/* 5273 */
[7175, 395],
/* 5274 */
[7176, 5273, 649],
/* 5275 */
[7180, 649],
/* 5276 */
[7183, 1960, 5253, 5265],
/* 5277 */
[7186, 1959, 650, 1091, 481, 395],
/* 5278 */
[7188, 5261, 651],
/* 5279 */
1345,
/* 5280 */
[7027, 5281],
/* 5281 */
2392,
/* 5282 */
[7111, 74, 5141, 55, 29, 5340, 5339, 5341, 5342, 318, 34],
/* 5283 */
[7112, 29, 55, 34, 1093, 243],
/* 5284 */
[7113, 55, 243],
/* 5285 */
[7114, 55, 243],
/* 5286 */
[7115, 55, 243],
/* 5287 */
[7117, 243, 5283, 5284, 5286, 5288, 5289, 5285],
/* 5288 */
[7118, 55, 243],
/* 5289 */
[7119, 55, 243],
/* 5290 */
[7120, 29, 34],
/* 5291 */
[7122, 29, 34],
/* 5292 */
[7124, 74, 55, 29, 1962, 5295, 34, 1093],
/* 5293 */
2384,
/* 5294 */
[7023, 1963],
/* 5295 */
[7024, 5293, 1963, 5294],
/* 5296 */
2510,
/* 5297 */
1322,
/* 5298 */
[7127, 5305, 5318, 1971, 5335],
/* 5299 */
[7128, 5300],
/* 5300 */
[7129, 1964, 5308, 5325],
/* 5301 */
[7131, 5321, 652],
/* 5302 */
1324,
/* 5303 */
2518,
/* 5304 */
[7133, 5307, 653],
/* 5305 */
[7134, 5313, 5314, 1094, 1976, 5345],
/* 5306 */
[7135, 5302, 1964, 5304, 1966, 5331, 5332, 5333, 246, 143],
/* 5307 */
1327,
/* 5308 */
[7136, 1966, 5322],
/* 5309 */
[7138, 1965, 1975],
/* 5310 */
[7141, 5330],
/* 5311 */
[7143, 5326, 5327, 5328, 246, 5343],
/* 5312 */
[7144, 1968, 245],
/* 5313 */
[7145, 5312, 5329, 245],
/* 5314 */
[7146, 1967, 1968, 5316, 246, 1972, 1973, 5297, 245, 1974],
/* 5315 */
[7147, 1967, 1974],
/* 5316 */
1335,
/* 5317 */
749,
/* 5318 */
[7148, 5310, 5320, 5324],
/* 5319 */
2533,
/* 5320 */
[7150, 143],
/* 5321 */
[7151, 143],
/* 5322 */
[7153, 1970, 396, 245],
/* 5323 */
[7154, 245],
/* 5324 */
[7155, 5301, 652],
/* 5325 */
[7157, 1094, 246],
/* 5326 */
[7158, 5303],
/* 5327 */
2543,
/* 5328 */
[7159, 653],
/* 5329 */
[7161, 1973, 5344],
/* 5330 */
2547,
/* 5331 */
2548,
/* 5332 */
[7163, 5319],
/* 5333 */
2550,
/* 5334 */
[7168, 1097, 246, 1096, 396, 1975],
/* 5335 */
2552,
/* 5336 */
[7171, 5306, 1094, 1971],
/* 5337 */
[7175, 143],
/* 5338 */
[7176, 5337, 244],
/* 5339 */
[7177, 244],
/* 5340 */
[7178, 5309, 1097, 244],
/* 5341 */
[7179, 143],
/* 5342 */
[7180, 244],
/* 5343 */
[7181, 396, 244],
/* 5344 */
[7187, 653, 245],
/* 5345 */
[7189, 1969, 5315, 1972],
/* 5346 */
2504,
/* 5347 */
[7030, 5357],
/* 5348 */
[7032, 5359],
/* 5349 */
[7033, 5360],
/* 5350 */
[7034, 5361],
/* 5351 */
[7035, 5362],
/* 5352 */
[7038, 5365],
/* 5353 */
[7039, 5364],
/* 5354 */
[7040, 5350, 5349, 5348],
/* 5355 */
1821,
/* 5356 */
[7042, 5389, 5388, 5381],
/* 5357 */
[7043, 5383],
/* 5358 */
[7044, 121],
/* 5359 */
[7045, 121],
/* 5360 */
[7046, 121, 5384],
/* 5361 */
[7047, 121, 5385],
/* 5362 */
[7048, 1107, 247],
/* 5363 */
[7049, 5386, 247],
/* 5364 */
[7051, 1107, 247],
/* 5365 */
[7052, 1107, 5387, 247],
/* 5366 */
2441,
/* 5367 */
2442,
/* 5368 */
[7054, 1099, 397],
/* 5369 */
[7055, 5366],
/* 5370 */
[7057, 121],
/* 5371 */
[7061, 1099],
/* 5372 */
[7062, 1099],
/* 5373 */
514,
/* 5374 */
[7063, 121, 1105, 1106, 1103, 397],
/* 5375 */
1304,
/* 5376 */
[7065, 121, 482],
/* 5377 */
[7071, 5378, 1100],
/* 5378 */
1309,
/* 5379 */
[7073, 1100],
/* 5380 */
[7075, 5368, 397, 656, 247],
/* 5381 */
[7076, 1980, 5380, 247],
/* 5382 */
[7077, 5367, 5375, 656, 482, 1983],
/* 5383 */
[7078, 654],
/* 5384 */
[7079, 482, 1104],
/* 5385 */
[7080, 1104, 1982],
/* 5386 */
[7081, 5379, 1104],
/* 5387 */
345,
/* 5388 */
[7083, 5377, 1983],
/* 5389 */
[7085, 5382, 656],
/* 5390 */
[7111, 92, 5347, 80, 49, 5487, 5486, 5488, 2009, 483, 64],
/* 5391 */
[7112, 49, 80, 64, 1108, 248],
/* 5392 */
[7113, 80, 248],
/* 5393 */
[7114, 80, 248],
/* 5394 */
[7115, 80, 248],
/* 5395 */
[7117, 248, 5391, 5392, 5394, 5396, 5397, 5393],
/* 5396 */
[7118, 80, 248],
/* 5397 */
[7119, 80, 248],
/* 5398 */
[7120, 49, 64],
/* 5399 */
[7122, 49, 64],
/* 5400 */
[7124, 92, 80, 49, 1988, 1995, 64, 1108],
/* 5401 */
[7087, 320, 92, 80, 49, 321, 64],
/* 5402 */
[7090, 92, 49, 80, 64, 321],
/* 5403 */
2469,
/* 5404 */
[7091, 92, 80, 483],
/* 5405 */
[7092, 49, 64],
/* 5406 */
[7093, 92],
/* 5407 */
[7094, 92, 80, 49, 321, 64],
/* 5408 */
[7096, 92, 49, 5410, 64],
/* 5409 */
[7097, 92, 49, 64],
/* 5410 */
[7098, 49, 1979, 64, 5409],
/* 5411 */
[7099, 92, 80, 49, 1111, 64],
/* 5412 */
[7100, 320, 92, 49, 64],
/* 5413 */
2479,
/* 5414 */
[7102, 92, 80, 49, 1990, 5412, 321, 64],
/* 5415 */
[7103, 92, 5413],
/* 5416 */
[7104, 92, 80, 49, 5419, 483, 321, 5431, 64],
/* 5417 */
[7107, 320, 80, 49, 1992, 64],
/* 5418 */
[7108, 92, 1978, 49, 80, 1991, 1110, 64, 2008],
/* 5419 */
[7019, 80, 5429, 1993, 5428, 1995, 5420],
/* 5420 */
[7020, 5422, 5421, 5425, 5423, 5427],
/* 5421 */
2377,
/* 5422 */
2378,
/* 5423 */
[7021, 5424],
/* 5424 */
2380,
/* 5425 */
[7022, 5426],
/* 5426 */
2380,
/* 5427 */
2383,
/* 5428 */
2387,
/* 5429 */
[7025, 5430],
/* 5430 */
2389,
/* 5431 */
745,
/* 5432 */
[7125, 5433],
/* 5433 */
[7126, 5434],
/* 5434 */
2508,
/* 5435 */
[7109, 6999],
/* 5436 */
2486,
/* 5437 */
[7027, 5438],
/* 5438 */
2392,
/* 5439 */
2384,
/* 5440 */
[7023, 1994],
/* 5441 */
2510,
/* 5442 */
1322,
/* 5443 */
[7127, 5451, 5463, 659, 5483],
/* 5444 */
[7128, 5445],
/* 5445 */
[7129, 1997, 5454, 5473],
/* 5446 */
[7131, 5467, 658],
/* 5447 */
1324,
/* 5448 */
2518,
/* 5449 */
2519,
/* 5450 */
[7132, 398],
/* 5451 */
[7134, 5458, 5459, 657, 2012, 5493],
/* 5452 */
[7135, 5447, 1997, 1998, 2000, 5479, 5480, 5481, 168, 144],
/* 5453 */
1327,
/* 5454 */
[7136, 2000, 5469],
/* 5455 */
[7138, 1999, 2011],
/* 5456 */
[7143, 5474, 5475, 5476, 168, 5489],
/* 5457 */
[7144, 2003, 250],
/* 5458 */
[7145, 5457, 5477, 250],
/* 5459 */
[7146, 2001, 2003, 5461, 168, 2005, 2006, 5442, 250, 2007],
/* 5460 */
[7147, 2001, 2007],
/* 5461 */
1335,
/* 5462 */
749,
/* 5463 */
[7148, 2002, 5466, 5471],
/* 5464 */
2532,
/* 5465 */
2533,
/* 5466 */
[7150, 144],
/* 5467 */
[7151, 144],
/* 5468 */
[7152, 657, 659, 1996],
/* 5469 */
[7153, 1112, 322, 250],
/* 5470 */
[7154, 250],
/* 5471 */
[7155, 5446, 658],
/* 5472 */
[7156, 1996],
/* 5473 */
[7157, 657, 168],
/* 5474 */
[7158, 5448],
/* 5475 */
2543,
/* 5476 */
[7159, 398],
/* 5477 */
[7161, 2006, 5491],
/* 5478 */
2547,
/* 5479 */
2548,
/* 5480 */
[7163, 5465],
/* 5481 */
2550,
/* 5482 */
[7168, 1115, 168, 1114, 322, 2011],
/* 5483 */
2552,
/* 5484 */
[7175, 144],
/* 5485 */
[7176, 5484, 249],
/* 5486 */
[7177, 249],
/* 5487 */
[7178, 5455, 1115, 249],
/* 5488 */
[7179, 144],
/* 5489 */
[7181, 322, 249],
/* 5490 */
[7183, 2010, 5449, 5472],
/* 5491 */
[7187, 398, 250],
/* 5492 */
[7188, 5464, 398],
/* 5493 */
[7189, 2004, 5460, 2005],
/* 5494 */
2504,
/* 5495 */
[7029, 5496],
/* 5496 */
[7042, 5520, 5519, 5517],
/* 5497 */
2441,
/* 5498 */
2442,
/* 5499 */
[7053, 5506],
/* 5500 */
[7054, 2013, 484],
/* 5501 */
[7055, 5497],
/* 5502 */
[7056, 5504],
/* 5503 */
[7058, 1118, 1117, 5501],
/* 5504 */
422,
/* 5505 */
[7061, 2013],
/* 5506 */
514,
/* 5507 */
[7063, 661, 2017, 2018, 1119, 484],
/* 5508 */
1304,
/* 5509 */
1305,
/* 5510 */
[7067, 1119],
/* 5511 */
[7070, 1118],
/* 5512 */
[7071, 5513, 2014],
/* 5513 */
1309,
/* 5514 */
[7072, 5505, 2014],
/* 5515 */
740,
/* 5516 */
[7075, 5500, 484, 660, 1117],
/* 5517 */
[7076, 5499, 5516, 1117],
/* 5518 */
[7077, 5498, 5508, 660, 5514, 2016],
/* 5519 */
[7083, 5512, 2016],
/* 5520 */
[7085, 5518, 660],
/* 5521 */
[7197, 77, 42, 5522, 56],
/* 5522 */
[7198, 5523],
/* 5523 */
[7141, 5524],
/* 5524 */
2547,
/* 5525 */
[7030, 5535],
/* 5526 */
[7032, 5537],
/* 5527 */
[7033, 5538],
/* 5528 */
[7034, 5539],
/* 5529 */
[7035, 5540],
/* 5530 */
[7038, 5543],
/* 5531 */
[7039, 5542],
/* 5532 */
[7040, 5528, 5527, 5526],
/* 5533 */
1821,
/* 5534 */
[7042, 5567, 5566, 5559],
/* 5535 */
[7043, 5561],
/* 5536 */
[7044, 122],
/* 5537 */
[7045, 122],
/* 5538 */
[7046, 122, 5562],
/* 5539 */
[7047, 122, 5563],
/* 5540 */
[7048, 1129, 251],
/* 5541 */
[7049, 5564, 251],
/* 5542 */
[7051, 1129, 251],
/* 5543 */
[7052, 1129, 5565, 251],
/* 5544 */
2441,
/* 5545 */
2442,
/* 5546 */
[7054, 1121, 399],
/* 5547 */
[7055, 5544],
/* 5548 */
[7057, 122],
/* 5549 */
[7061, 1121],
/* 5550 */
[7062, 1121],
/* 5551 */
514,
/* 5552 */
[7063, 122, 1127, 1128, 1125, 399],
/* 5553 */
1304,
/* 5554 */
[7065, 122, 485],
/* 5555 */
[7071, 5556, 1122],
/* 5556 */
1309,
/* 5557 */
[7073, 1122],
/* 5558 */
[7075, 5546, 399, 664, 251],
/* 5559 */
[7076, 2022, 5558, 251],
/* 5560 */
[7077, 5545, 5553, 664, 485, 2025],
/* 5561 */
[7078, 662],
/* 5562 */
[7079, 485, 1126],
/* 5563 */
[7080, 1126, 2024],
/* 5564 */
[7081, 5557, 1126],
/* 5565 */
345,
/* 5566 */
[7083, 5555, 2025],
/* 5567 */
[7085, 5560, 664],
/* 5568 */
[7111, 93, 5525, 77, 42, 5665, 5664, 5666, 2051, 486, 56],
/* 5569 */
[7112, 42, 77, 56, 1130, 252],
/* 5570 */
[7113, 77, 252],
/* 5571 */
[7114, 77, 252],
/* 5572 */
[7115, 77, 252],
/* 5573 */
[7117, 252, 5569, 5570, 5572, 5574, 5575, 5571],
/* 5574 */
[7118, 77, 252],
/* 5575 */
[7119, 77, 252],
/* 5576 */
[7120, 42, 56],
/* 5577 */
[7122, 42, 56],
/* 5578 */
[7124, 93, 77, 42, 2030, 2037, 56, 1130],
/* 5579 */
[7087, 323, 93, 77, 42, 324, 56],
/* 5580 */
[7090, 93, 42, 77, 56, 324],
/* 5581 */
2469,
/* 5582 */
[7091, 93, 77, 486],
/* 5583 */
[7092, 42, 56],
/* 5584 */
[7093, 93],
/* 5585 */
[7094, 93, 77, 42, 324, 56],
/* 5586 */
[7096, 93, 42, 5588, 56],
/* 5587 */
[7097, 93, 42, 56],
/* 5588 */
[7098, 42, 2021, 56, 5587],
/* 5589 */
[7099, 93, 77, 42, 1133, 56],
/* 5590 */
[7100, 323, 93, 42, 56],
/* 5591 */
2479,
/* 5592 */
[7102, 93, 77, 42, 2032, 5590, 324, 56],
/* 5593 */
[7103, 93, 5591],
/* 5594 */
[7104, 93, 77, 42, 5597, 486, 324, 5609, 56],
/* 5595 */
[7107, 323, 77, 42, 2034, 56],
/* 5596 */
[7108, 93, 2020, 42, 77, 2033, 1132, 56, 2050],
/* 5597 */
[7019, 77, 5607, 2035, 5606, 2037, 5598],
/* 5598 */
[7020, 5600, 5599, 5603, 5601, 5605],
/* 5599 */
2377,
/* 5600 */
2378,
/* 5601 */
[7021, 5602],
/* 5602 */
2380,
/* 5603 */
[7022, 5604],
/* 5604 */
2380,
/* 5605 */
2383,
/* 5606 */
2387,
/* 5607 */
[7025, 5608],
/* 5608 */
2389,
/* 5609 */
745,
/* 5610 */
[7125, 5611],
/* 5611 */
[7126, 5612],
/* 5612 */
2508,
/* 5613 */
[7109, 7000],
/* 5614 */
2486,
/* 5615 */
[7027, 5616],
/* 5616 */
2392,
/* 5617 */
2384,
/* 5618 */
[7023, 2036],
/* 5619 */
2510,
/* 5620 */
1322,
/* 5621 */
[7127, 5629, 5641, 667, 5661],
/* 5622 */
[7128, 5623],
/* 5623 */
[7129, 2039, 5632, 5651],
/* 5624 */
[7131, 5645, 666],
/* 5625 */
1324,
/* 5626 */
2518,
/* 5627 */
2519,
/* 5628 */
[7132, 400],
/* 5629 */
[7134, 5636, 5637, 665, 2054, 5671],
/* 5630 */
[7135, 5625, 2039, 2040, 2042, 5657, 5658, 5659, 169, 145],
/* 5631 */
1327,
/* 5632 */
[7136, 2042, 5647],
/* 5633 */
[7138, 2041, 2053],
/* 5634 */
[7143, 5652, 5653, 5654, 169, 5667],
/* 5635 */
[7144, 2045, 254],
/* 5636 */
[7145, 5635, 5655, 254],
/* 5637 */
[7146, 2043, 2045, 5639, 169, 2047, 2048, 5620, 254, 2049],
/* 5638 */
[7147, 2043, 2049],
/* 5639 */
1335,
/* 5640 */
749,
/* 5641 */
[7148, 2044, 5644, 5649],
/* 5642 */
2532,
/* 5643 */
2533,
/* 5644 */
[7150, 145],
/* 5645 */
[7151, 145],
/* 5646 */
[7152, 665, 667, 2038],
/* 5647 */
[7153, 1134, 325, 254],
/* 5648 */
[7154, 254],
/* 5649 */
[7155, 5624, 666],
/* 5650 */
[7156, 2038],
/* 5651 */
[7157, 665, 169],
/* 5652 */
[7158, 5626],
/* 5653 */
2543,
/* 5654 */
[7159, 400],
/* 5655 */
[7161, 2048, 5669],
/* 5656 */
2547,
/* 5657 */
2548,
/* 5658 */
[7163, 5643],
/* 5659 */
2550,
/* 5660 */
[7168, 1137, 169, 1136, 325, 2053],
/* 5661 */
2552,
/* 5662 */
[7175, 145],
/* 5663 */
[7176, 5662, 253],
/* 5664 */
[7177, 253],
/* 5665 */
[7178, 5633, 1137, 253],
/* 5666 */
[7179, 145],
/* 5667 */
[7181, 325, 253],
/* 5668 */
[7183, 2052, 5627, 5650],
/* 5669 */
[7187, 400, 254],
/* 5670 */
[7188, 5642, 400],
/* 5671 */
[7189, 2046, 5638, 2047],
/* 5672 */
2504,
/* 5673 */
[7029, 5674],
/* 5674 */
[7042, 5698, 5697, 5695],
/* 5675 */
2441,
/* 5676 */
2442,
/* 5677 */
[7053, 5684],
/* 5678 */
[7054, 2055, 487],
/* 5679 */
[7055, 5675],
/* 5680 */
[7056, 5682],
/* 5681 */
[7058, 1140, 1139, 5679],
/* 5682 */
422,
/* 5683 */
[7061, 2055],
/* 5684 */
514,
/* 5685 */
[7063, 669, 2059, 2060, 1141, 487],
/* 5686 */
1304,
/* 5687 */
1305,
/* 5688 */
[7067, 1141],
/* 5689 */
[7070, 1140],
/* 5690 */
[7071, 5691, 2056],
/* 5691 */
1309,
/* 5692 */
[7072, 5683, 2056],
/* 5693 */
740,
/* 5694 */
[7075, 5678, 487, 668, 1139],
/* 5695 */
[7076, 5677, 5694, 1139],
/* 5696 */
[7077, 5676, 5686, 668, 5692, 2058],
/* 5697 */
[7083, 5690, 2058],
/* 5698 */
[7085, 5696, 668],
/* 5699 */
[7038, 5700],
/* 5700 */
[7052, 5717, 5716, 2062],
/* 5701 */
2441,
/* 5702 */
[7053, 5711],
/* 5703 */
[7055, 5701],
/* 5704 */
512,
/* 5705 */
[7057, 401],
/* 5706 */
[7058, 670, 2062, 5703],
/* 5707 */
[7059, 1143, 401],
/* 5708 */
[7060, 401, 2066, 2063],
/* 5709 */
[7061, 2061],
/* 5710 */
[7062, 2061],
/* 5711 */
514,
/* 5712 */
[7065, 401, 1143],
/* 5713 */
1305,
/* 5714 */
[7067, 5708],
/* 5715 */
[7069, 401, 2065, 2069],
/* 5716 */
345,
/* 5717 */
[7084, 401, 670, 2065, 2063, 5706, 5714, 2064, 2067, 5715, 2068, 2069, 5712, 5707, 5705, 5710, 5702, 1143, 2066, 5713],
/* 5718 */
[7197, 75, 43, 5773, 65],
/* 5719 */
[7111, 94, 5825, 75, 43, 5818, 5817, 5819, 2090, 488, 65],
/* 5720 */
[7112, 43, 75, 65, 1145, 255],
/* 5721 */
[7113, 75, 255],
/* 5722 */
[7114, 75, 255],
/* 5723 */
[7115, 75, 255],
/* 5724 */
[7117, 255, 5720, 5721, 5723, 5725, 5726, 5722],
/* 5725 */
[7118, 75, 255],
/* 5726 */
[7119, 75, 255],
/* 5727 */
[7120, 43, 65],
/* 5728 */
[7122, 43, 65],
/* 5729 */
[7124, 94, 75, 43, 2070, 2077, 65, 1145],
/* 5730 */
[7087, 328, 94, 75, 43, 326, 65],
/* 5731 */
[7090, 94, 43, 75, 65, 326],
/* 5732 */
2469,
/* 5733 */
[7091, 94, 75, 488],
/* 5734 */
[7092, 43, 65],
/* 5735 */
[7093, 94],
/* 5736 */
[7094, 94, 75, 43, 326, 65],
/* 5737 */
[7096, 94, 43, 5739, 65],
/* 5738 */
[7097, 94, 43, 65],
/* 5739 */
[7098, 43, 2096, 65, 5738],
/* 5740 */
[7099, 94, 75, 43, 1148, 65],
/* 5741 */
[7100, 328, 94, 43, 65],
/* 5742 */
2479,
/* 5743 */
[7102, 94, 75, 43, 2072, 5741, 326, 65],
/* 5744 */
[7103, 94, 5742],
/* 5745 */
[7104, 94, 75, 43, 5748, 488, 326, 5760, 65],
/* 5746 */
[7107, 328, 75, 43, 2074, 65],
/* 5747 */
[7108, 94, 2095, 43, 75, 2073, 1147, 65, 2089],
/* 5748 */
[7019, 75, 5758, 2075, 5757, 2077, 5749],
/* 5749 */
[7020, 5751, 5750, 5754, 5752, 5756],
/* 5750 */
2377,
/* 5751 */
2378,
/* 5752 */
[7021, 5753],
/* 5753 */
2380,
/* 5754 */
[7022, 5755],
/* 5755 */
2380,
/* 5756 */
2383,
/* 5757 */
2387,
/* 5758 */
[7025, 5759],
/* 5759 */
2389,
/* 5760 */
745,
/* 5761 */
[7125, 5762],
/* 5762 */
[7126, 5763],
/* 5763 */
2508,
/* 5764 */
[7109, 7001],
/* 5765 */
2486,
/* 5766 */
[7027, 5767],
/* 5767 */
2392,
/* 5768 */
2384,
/* 5769 */
[7023, 2076],
/* 5770 */
2504,
/* 5771 */
2510,
/* 5772 */
1322,
/* 5773 */
[7198, 1149],
/* 5774 */
[7127, 5782, 5794, 673, 5814],
/* 5775 */
[7128, 5776],
/* 5776 */
[7129, 2079, 5785, 5804],
/* 5777 */
[7131, 5798, 672],
/* 5778 */
1324,
/* 5779 */
2518,
/* 5780 */
2519,
/* 5781 */
[7132, 402],
/* 5782 */
[7134, 5789, 5790, 671, 2093, 5824],
/* 5783 */
[7135, 5778, 2079, 2080, 2082, 5810, 5811, 5812, 170, 146],
/* 5784 */
1327,
/* 5785 */
[7136, 2082, 5800],
/* 5786 */
[7138, 2081, 2092],
/* 5787 */
[7143, 5805, 5806, 5807, 170, 5820],
/* 5788 */
[7144, 2084, 257],
/* 5789 */
[7145, 5788, 5808, 257],
/* 5790 */
[7146, 2083, 2084, 5792, 170, 2086, 2087, 5772, 257, 2088],
/* 5791 */
[7147, 2083, 2088],
/* 5792 */
1335,
/* 5793 */
749,
/* 5794 */
[7148, 1149, 5797, 5802],
/* 5795 */
2532,
/* 5796 */
2533,
/* 5797 */
[7150, 146],
/* 5798 */
[7151, 146],
/* 5799 */
[7152, 671, 673, 2078],
/* 5800 */
[7153, 1150, 327, 257],
/* 5801 */
[7154, 257],
/* 5802 */
[7155, 5777, 672],
/* 5803 */
[7156, 2078],
/* 5804 */
[7157, 671, 170],
/* 5805 */
[7158, 5779],
/* 5806 */
2543,
/* 5807 */
[7159, 402],
/* 5808 */
[7161, 2087, 5822],
/* 5809 */
2547,
/* 5810 */
2548,
/* 5811 */
[7163, 5796],
/* 5812 */
2550,
/* 5813 */
[7168, 1153, 170, 1152, 327, 2092],
/* 5814 */
2552,
/* 5815 */
[7175, 146],
/* 5816 */
[7176, 5815, 256],
/* 5817 */
[7177, 256],
/* 5818 */
[7178, 5786, 1153, 256],
/* 5819 */
[7179, 146],
/* 5820 */
[7181, 327, 256],
/* 5821 */
[7183, 2091, 5780, 5803],
/* 5822 */
[7187, 402, 257],
/* 5823 */
[7188, 5795, 402],
/* 5824 */
[7189, 2085, 5791, 2086],
/* 5825 */
[7030, 5835],
/* 5826 */
[7032, 5837],
/* 5827 */
[7033, 5838],
/* 5828 */
[7034, 5839],
/* 5829 */
[7035, 5840],
/* 5830 */
[7038, 5843],
/* 5831 */
[7039, 5842],
/* 5832 */
[7040, 5828, 5827, 5826],
/* 5833 */
1821,
/* 5834 */
[7042, 5867, 5866, 5859],
/* 5835 */
[7043, 5861],
/* 5836 */
[7044, 123],
/* 5837 */
[7045, 123],
/* 5838 */
[7046, 123, 5862],
/* 5839 */
[7047, 123, 5863],
/* 5840 */
[7048, 1162, 258],
/* 5841 */
[7049, 5864, 258],
/* 5842 */
[7051, 1162, 258],
/* 5843 */
[7052, 1162, 5865, 258],
/* 5844 */
2441,
/* 5845 */
2442,
/* 5846 */
[7054, 1154, 403],
/* 5847 */
[7055, 5844],
/* 5848 */
[7057, 123],
/* 5849 */
[7061, 1154],
/* 5850 */
[7062, 1154],
/* 5851 */
514,
/* 5852 */
[7063, 123, 1160, 1161, 1158, 403],
/* 5853 */
1304,
/* 5854 */
[7065, 123, 489],
/* 5855 */
[7071, 5856, 1155],
/* 5856 */
1309,
/* 5857 */
[7073, 1155],
/* 5858 */
[7075, 5846, 403, 676, 258],
/* 5859 */
[7076, 2097, 5858, 258],
/* 5860 */
[7077, 5845, 5853, 676, 489, 2100],
/* 5861 */
[7078, 674],
/* 5862 */
[7079, 489, 1159],
/* 5863 */
[7080, 1159, 2099],
/* 5864 */
[7081, 5857, 1159],
/* 5865 */
345,
/* 5866 */
[7083, 5855, 2100],
/* 5867 */
[7085, 5860, 676],
/* 5868 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by `/scripts/character-class-escape-sets.js`. Do not edit.
	var regenerate = __webpack_require__(2105);

	exports.REGULAR = {
		'd': regenerate()
			.addRange(0x30, 0x39),
		'D': regenerate()
			.addRange(0x0, 0x2F)
			.addRange(0x3A, 0xFFFF),
		's': regenerate(0x20, 0xA0, 0x1680, 0x180E, 0x202F, 0x205F, 0x3000, 0xFEFF)
			.addRange(0x9, 0xD)
			.addRange(0x2000, 0x200A)
			.addRange(0x2028, 0x2029),
		'S': regenerate()
			.addRange(0x0, 0x8)
			.addRange(0xE, 0x1F)
			.addRange(0x21, 0x9F)
			.addRange(0xA1, 0x167F)
			.addRange(0x1681, 0x180D)
			.addRange(0x180F, 0x1FFF)
			.addRange(0x200B, 0x2027)
			.addRange(0x202A, 0x202E)
			.addRange(0x2030, 0x205E)
			.addRange(0x2060, 0x2FFF)
			.addRange(0x3001, 0xFEFE)
			.addRange(0xFF00, 0xFFFF),
		'w': regenerate(0x5F)
			.addRange(0x30, 0x39)
			.addRange(0x41, 0x5A)
			.addRange(0x61, 0x7A),
		'W': regenerate(0x60)
			.addRange(0x0, 0x2F)
			.addRange(0x3A, 0x40)
			.addRange(0x5B, 0x5E)
			.addRange(0x7B, 0xFFFF)
	};

	exports.UNICODE = {
		'd': regenerate()
			.addRange(0x30, 0x39),
		'D': regenerate()
			.addRange(0x0, 0x2F)
			.addRange(0x3A, 0x10FFFF),
		's': regenerate(0x20, 0xA0, 0x1680, 0x180E, 0x202F, 0x205F, 0x3000, 0xFEFF)
			.addRange(0x9, 0xD)
			.addRange(0x2000, 0x200A)
			.addRange(0x2028, 0x2029),
		'S': regenerate()
			.addRange(0x0, 0x8)
			.addRange(0xE, 0x1F)
			.addRange(0x21, 0x9F)
			.addRange(0xA1, 0x167F)
			.addRange(0x1681, 0x180D)
			.addRange(0x180F, 0x1FFF)
			.addRange(0x200B, 0x2027)
			.addRange(0x202A, 0x202E)
			.addRange(0x2030, 0x205E)
			.addRange(0x2060, 0x2FFF)
			.addRange(0x3001, 0xFEFE)
			.addRange(0xFF00, 0x10FFFF),
		'w': regenerate(0x5F)
			.addRange(0x30, 0x39)
			.addRange(0x41, 0x5A)
			.addRange(0x61, 0x7A),
		'W': regenerate(0x60)
			.addRange(0x0, 0x2F)
			.addRange(0x3A, 0x40)
			.addRange(0x5B, 0x5E)
			.addRange(0x7B, 0x10FFFF)
	};

	exports.UNICODE_IGNORE_CASE = {
		'd': regenerate()
			.addRange(0x30, 0x39),
		'D': regenerate()
			.addRange(0x0, 0x2F)
			.addRange(0x3A, 0x10FFFF),
		's': regenerate(0x20, 0xA0, 0x1680, 0x180E, 0x202F, 0x205F, 0x3000, 0xFEFF)
			.addRange(0x9, 0xD)
			.addRange(0x2000, 0x200A)
			.addRange(0x2028, 0x2029),
		'S': regenerate()
			.addRange(0x0, 0x8)
			.addRange(0xE, 0x1F)
			.addRange(0x21, 0x9F)
			.addRange(0xA1, 0x167F)
			.addRange(0x1681, 0x180D)
			.addRange(0x180F, 0x1FFF)
			.addRange(0x200B, 0x2027)
			.addRange(0x202A, 0x202E)
			.addRange(0x2030, 0x205E)
			.addRange(0x2060, 0x2FFF)
			.addRange(0x3001, 0xFEFE)
			.addRange(0xFF00, 0x10FFFF),
		'w': regenerate(0x5F, 0x17F, 0x212A)
			.addRange(0x30, 0x39)
			.addRange(0x41, 0x5A)
			.addRange(0x61, 0x7A),
		'W': regenerate(0x4B, 0x53, 0x60)
			.addRange(0x0, 0x2F)
			.addRange(0x3A, 0x40)
			.addRange(0x5B, 0x5E)
			.addRange(0x7B, 0x10FFFF)
	};


/***/ },
/* 5869 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*!
	 * RegJSGen
	 * Copyright 2014 Benjamin Tan <https://d10.github.io/>
	 * Available under MIT license <http://d10.mit-license.org/>
	 */
	;(function() {
	  'use strict';

	  /** Used to determine if values are of the language type `Object` */
	  var objectTypes = {
	    'function': true,
	    'object': true
	  };

	  /** Used as a reference to the global object */
	  var root = (objectTypes[typeof window] && window) || this;

	  /** Backup possible global object */
	  var oldRoot = root;

	  /** Detect free variable `exports` */
	  var freeExports = objectTypes[typeof exports] && exports;

	  /** Detect free variable `module` */
	  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

	  /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */
	  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;
	  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {
	    root = freeGlobal;
	  }

	  /*--------------------------------------------------------------------------*/

	  /*! Based on https://mths.be/fromcodepoint v0.2.0 by @mathias */

	  var stringFromCharCode = String.fromCharCode;
	  var floor = Math.floor;
	  function fromCodePoint() {
	    var MAX_SIZE = 0x4000;
	    var codeUnits = [];
	    var highSurrogate;
	    var lowSurrogate;
	    var index = -1;
	    var length = arguments.length;
	    if (!length) {
	      return '';
	    }
	    var result = '';
	    while (++index < length) {
	      var codePoint = Number(arguments[index]);
	      if (
	        !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
	        codePoint < 0 || // not a valid Unicode code point
	        codePoint > 0x10FFFF || // not a valid Unicode code point
	        floor(codePoint) != codePoint // not an integer
	      ) {
	        throw RangeError('Invalid code point: ' + codePoint);
	      }
	      if (codePoint <= 0xFFFF) {
	        // BMP code point
	        codeUnits.push(codePoint);
	      } else {
	        // Astral code point; split in surrogate halves
	        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
	        codePoint -= 0x10000;
	        highSurrogate = (codePoint >> 10) + 0xD800;
	        lowSurrogate = (codePoint % 0x400) + 0xDC00;
	        codeUnits.push(highSurrogate, lowSurrogate);
	      }
	      if (index + 1 == length || codeUnits.length > MAX_SIZE) {
	        result += stringFromCharCode.apply(null, codeUnits);
	        codeUnits.length = 0;
	      }
	    }
	    return result;
	  }

	  function assertType(type, expected) {
	    if (expected.indexOf('|') == -1) {
	      if (type == expected) {
	        return;
	      }

	      throw Error('Invalid node type: ' + type);
	    }

	    expected = assertType.hasOwnProperty(expected)
	      ? assertType[expected]
	      : (assertType[expected] = RegExp('^(?:' + expected + ')$'));

	    if (expected.test(type)) {
	      return;
	    }

	    throw Error('Invalid node type: ' + type);
	  }

	  /*--------------------------------------------------------------------------*/

	  function generate(node) {
	    var type = node.type;

	    if (generate.hasOwnProperty(type) && typeof generate[type] == 'function') {
	      return generate[type](node);
	    }

	    throw Error('Invalid node type: ' + type);
	  }

	  /*--------------------------------------------------------------------------*/

	  function generateAlternative(node) {
	    assertType(node.type, 'alternative');

	    var terms = node.body,
	        length = terms ? terms.length : 0;

	    if (length == 1) {
	      return generateTerm(terms[0]);
	    } else {
	      var i = -1,
	          result = '';

	      while (++i < length) {
	        result += generateTerm(terms[i]);
	      }

	      return result;
	    }
	  }

	  function generateAnchor(node) {
	    assertType(node.type, 'anchor');

	    switch (node.kind) {
	      case 'start':
	        return '^';
	      case 'end':
	        return '$';
	      case 'boundary':
	        return '\\b';
	      case 'not-boundary':
	        return '\\B';
	      default:
	        throw Error('Invalid assertion');
	    }
	  }

	  function generateAtom(node) {
	    assertType(node.type, 'anchor|characterClass|characterClassEscape|dot|group|reference|value');

	    return generate(node);
	  }

	  function generateCharacterClass(node) {
	    assertType(node.type, 'characterClass');

	    var classRanges = node.body,
	        length = classRanges ? classRanges.length : 0;

	    var i = -1,
	        result = '[';

	    if (node.negative) {
	      result += '^';
	    }

	    while (++i < length) {
	      result += generateClassAtom(classRanges[i]);
	    }

	    result += ']';

	    return result;
	  }

	  function generateCharacterClassEscape(node) {
	    assertType(node.type, 'characterClassEscape');

	    return '\\' + node.value;
	  }

	  function generateCharacterClassRange(node) {
	    assertType(node.type, 'characterClassRange');

	    var min = node.min,
	        max = node.max;

	    if (min.type == 'characterClassRange' || max.type == 'characterClassRange') {
	      throw Error('Invalid character class range');
	    }

	    return generateClassAtom(min) + '-' + generateClassAtom(max);
	  }

	  function generateClassAtom(node) {
	    assertType(node.type, 'anchor|characterClassEscape|characterClassRange|dot|value');

	    return generate(node);
	  }

	  function generateDisjunction(node) {
	    assertType(node.type, 'disjunction');

	    var body = node.body,
	        length = body ? body.length : 0;

	    if (length == 0) {
	      throw Error('No body');
	    } else if (length == 1) {
	      return generate(body[0]);
	    } else {
	      var i = -1,
	          result = '';

	      while (++i < length) {
	        if (i != 0) {
	          result += '|';
	        }
	        result += generate(body[i]);
	      }

	      return result;
	    }
	  }

	  function generateDot(node) {
	    assertType(node.type, 'dot');

	    return '.';
	  }

	  function generateGroup(node) {
	    assertType(node.type, 'group');

	    var result = '(';

	    switch (node.behavior) {
	      case 'normal':
	        break;
	      case 'ignore':
	        result += '?:';
	        break;
	      case 'lookahead':
	        result += '?=';
	        break;
	      case 'negativeLookahead':
	        result += '?!';
	        break;
	      default:
	        throw Error('Invalid behaviour: ' + node.behaviour);
	    }

	    var body = node.body,
	        length = body ? body.length : 0;

	    if (length == 1) {
	      result += generate(body[0]);
	    } else {
	      var i = -1;

	      while (++i < length) {
	        result += generate(body[i]);
	      }
	    }

	    result += ')';

	    return result;
	  }

	  function generateQuantifier(node) {
	    assertType(node.type, 'quantifier');

	    var quantifier = '',
	        min = node.min,
	        max = node.max;

	    switch (max) {
	      case undefined:
	      case null:
	        switch (min) {
	          case 0:
	            quantifier = '*'
	            break;
	          case 1:
	            quantifier = '+';
	            break;
	          default:
	            quantifier = '{' + min + ',}';
	            break;
	        }
	        break;
	      default:
	        if (min == max) {
	          quantifier = '{' + min + '}';
	        }
	        else if (min == 0 && max == 1) {
	          quantifier = '?';
	        } else {
	          quantifier = '{' + min + ',' + max + '}';
	        }
	        break;
	    }

	    if (!node.greedy) {
	      quantifier += '?';
	    }

	    return generateAtom(node.body[0]) + quantifier;
	  }

	  function generateReference(node) {
	    assertType(node.type, 'reference');

	    return '\\' + node.matchIndex;
	  }

	  function generateTerm(node) {
	    assertType(node.type, 'anchor|characterClass|characterClassEscape|empty|group|quantifier|reference|value');

	    return generate(node);
	  }

	  function generateValue(node) {
	    assertType(node.type, 'value');

	    var kind = node.kind,
	        codePoint = node.codePoint;

	    switch (kind) {
	      case 'controlLetter':
	        return '\\c' + fromCodePoint(codePoint + 64);
	      case 'hexadecimalEscape':
	        return '\\x' + ('00' + codePoint.toString(16).toUpperCase()).slice(-2);
	      case 'identifier':
	        return '\\' + fromCodePoint(codePoint);
	      case 'null':
	        return '\\' + codePoint;
	      case 'octal':
	        return '\\' + codePoint.toString(8);
	      case 'singleEscape':
	        switch (codePoint) {
	          case 0x0008:
	            return '\\b';
	          case 0x009:
	            return '\\t';
	          case 0x00A:
	            return '\\n';
	          case 0x00B:
	            return '\\v';
	          case 0x00C:
	            return '\\f';
	          case 0x00D:
	            return '\\r';
	          default:
	            throw Error('Invalid codepoint: ' + codePoint);
	        }
	      case 'symbol':
	        return fromCodePoint(codePoint);
	      case 'unicodeEscape':
	        return '\\u' + ('0000' + codePoint.toString(16).toUpperCase()).slice(-4);
	      case 'unicodeCodePointEscape':
	        return '\\u{' + codePoint.toString(16).toUpperCase() + '}';
	      default:
	        throw Error('Unsupported node kind: ' + kind);
	    }
	  }

	  /*--------------------------------------------------------------------------*/

	  generate.alternative = generateAlternative;
	  generate.anchor = generateAnchor;
	  generate.characterClass = generateCharacterClass;
	  generate.characterClassEscape = generateCharacterClassEscape;
	  generate.characterClassRange = generateCharacterClassRange;
	  generate.disjunction = generateDisjunction;
	  generate.dot = generateDot;
	  generate.group = generateGroup;
	  generate.quantifier = generateQuantifier;
	  generate.reference = generateReference;
	  generate.value = generateValue;

	  /*--------------------------------------------------------------------------*/

	  // export regjsgen
	  // some AMD build optimizers, like r.js, check for condition patterns like the following:
	  if (true) {
	    // define as an anonymous module so, through path mapping, it can be aliased
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return {
	        'generate': generate
	      };
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // check for `exports` after `define` in case a build optimizer adds an `exports` object
	  else if (freeExports && freeModule) {
	    // in Narwhal, Node.js, Rhino -require, or RingoJS
	    freeExports.generate = generate;
	  }
	  // in a browser or Rhino
	  else {
	    root.regjsgen = {
	      'generate': generate
	    };
	  }
	}.call(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(33)(module), (function() { return this; }())))

/***/ },
/* 5870 */
/***/ function(module, exports) {

	// regjsparser
	//
	// ==================================================================
	//
	// See ECMA-262 Standard: 15.10.1
	//
	// NOTE: The ECMA-262 standard uses the term "Assertion" for /^/. Here the
	//   term "Anchor" is used.
	//
	// Pattern ::
	//      Disjunction
	//
	// Disjunction ::
	//      Alternative
	//      Alternative | Disjunction
	//
	// Alternative ::
	//      [empty]
	//      Alternative Term
	//
	// Term ::
	//      Anchor
	//      Atom
	//      Atom Quantifier
	//
	// Anchor ::
	//      ^
	//      $
	//      \ b
	//      \ B
	//      ( ? = Disjunction )
	//      ( ? ! Disjunction )
	//
	// Quantifier ::
	//      QuantifierPrefix
	//      QuantifierPrefix ?
	//
	// QuantifierPrefix ::
	//      *
	//      +
	//      ?
	//      { DecimalDigits }
	//      { DecimalDigits , }
	//      { DecimalDigits , DecimalDigits }
	//
	// Atom ::
	//      PatternCharacter
	//      .
	//      \ AtomEscape
	//      CharacterClass
	//      ( Disjunction )
	//      ( ? : Disjunction )
	//
	// PatternCharacter ::
	//      SourceCharacter but not any of: ^ $ \ . * + ? ( ) [ ] { } |
	//
	// AtomEscape ::
	//      DecimalEscape
	//      CharacterEscape
	//      CharacterClassEscape
	//
	// CharacterEscape[U] ::
	//      ControlEscape
	//      c ControlLetter
	//      HexEscapeSequence
	//      RegExpUnicodeEscapeSequence[?U] (ES6)
	//      IdentityEscape[?U]
	//
	// ControlEscape ::
	//      one of f n r t v
	// ControlLetter ::
	//      one of
	//          a b c d e f g h i j k l m n o p q r s t u v w x y z
	//          A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
	//
	// IdentityEscape ::
	//      SourceCharacter but not IdentifierPart
	//      <ZWJ>
	//      <ZWNJ>
	//
	// DecimalEscape ::
	//      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]
	//
	// CharacterClassEscape ::
	//      one of d D s S w W
	//
	// CharacterClass ::
	//      [ [lookahead ∉ {^}] ClassRanges ]
	//      [ ^ ClassRanges ]
	//
	// ClassRanges ::
	//      [empty]
	//      NonemptyClassRanges
	//
	// NonemptyClassRanges ::
	//      ClassAtom
	//      ClassAtom NonemptyClassRangesNoDash
	//      ClassAtom - ClassAtom ClassRanges
	//
	// NonemptyClassRangesNoDash ::
	//      ClassAtom
	//      ClassAtomNoDash NonemptyClassRangesNoDash
	//      ClassAtomNoDash - ClassAtom ClassRanges
	//
	// ClassAtom ::
	//      -
	//      ClassAtomNoDash
	//
	// ClassAtomNoDash ::
	//      SourceCharacter but not one of \ or ] or -
	//      \ ClassEscape
	//
	// ClassEscape ::
	//      DecimalEscape
	//      b
	//      CharacterEscape
	//      CharacterClassEscape

	(function() {

	  function parse(str, flags) {
	    function addRaw(node) {
	      node.raw = str.substring(node.range[0], node.range[1]);
	      return node;
	    }

	    function updateRawStart(node, start) {
	      node.range[0] = start;
	      return addRaw(node);
	    }

	    function createAnchor(kind, rawLength) {
	      return addRaw({
	        type: 'anchor',
	        kind: kind,
	        range: [
	          pos - rawLength,
	          pos
	        ]
	      });
	    }

	    function createValue(kind, codePoint, from, to) {
	      return addRaw({
	        type: 'value',
	        kind: kind,
	        codePoint: codePoint,
	        range: [from, to]
	      });
	    }

	    function createEscaped(kind, codePoint, value, fromOffset) {
	      fromOffset = fromOffset || 0;
	      return createValue(kind, codePoint, pos - (value.length + fromOffset), pos);
	    }

	    function createCharacter(matches) {
	      var _char = matches[0];
	      var first = _char.charCodeAt(0);
	      if (hasUnicodeFlag) {
	        var second;
	        if (_char.length === 1 && first >= 0xD800 && first <= 0xDBFF) {
	          second = lookahead().charCodeAt(0);
	          if (second >= 0xDC00 && second <= 0xDFFF) {
	            // Unicode surrogate pair
	            pos++;
	            return createValue(
	                'symbol',
	                (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000,
	                pos - 2, pos);
	          }
	        }
	      }
	      return createValue('symbol', first, pos - 1, pos);
	    }

	    function createDisjunction(alternatives, from, to) {
	      return addRaw({
	        type: 'disjunction',
	        body: alternatives,
	        range: [
	          from,
	          to
	        ]
	      });
	    }

	    function createDot() {
	      return addRaw({
	        type: 'dot',
	        range: [
	          pos - 1,
	          pos
	        ]
	      });
	    }

	    function createCharacterClassEscape(value) {
	      return addRaw({
	        type: 'characterClassEscape',
	        value: value,
	        range: [
	          pos - 2,
	          pos
	        ]
	      });
	    }

	    function createReference(matchIndex) {
	      return addRaw({
	        type: 'reference',
	        matchIndex: parseInt(matchIndex, 10),
	        range: [
	          pos - 1 - matchIndex.length,
	          pos
	        ]
	      });
	    }

	    function createGroup(behavior, disjunction, from, to) {
	      return addRaw({
	        type: 'group',
	        behavior: behavior,
	        body: disjunction,
	        range: [
	          from,
	          to
	        ]
	      });
	    }

	    function createQuantifier(min, max, from, to) {
	      if (to == null) {
	        from = pos - 1;
	        to = pos;
	      }

	      return addRaw({
	        type: 'quantifier',
	        min: min,
	        max: max,
	        greedy: true,
	        body: null, // set later on
	        range: [
	          from,
	          to
	        ]
	      });
	    }

	    function createAlternative(terms, from, to) {
	      return addRaw({
	        type: 'alternative',
	        body: terms,
	        range: [
	          from,
	          to
	        ]
	      });
	    }

	    function createCharacterClass(classRanges, negative, from, to) {
	      return addRaw({
	        type: 'characterClass',
	        body: classRanges,
	        negative: negative,
	        range: [
	          from,
	          to
	        ]
	      });
	    }

	    function createClassRange(min, max, from, to) {
	      // See 15.10.2.15:
	      if (min.codePoint > max.codePoint) {
	        bail('invalid range in character class', min.raw + '-' + max.raw, from, to);
	      }

	      return addRaw({
	        type: 'characterClassRange',
	        min: min,
	        max: max,
	        range: [
	          from,
	          to
	        ]
	      });
	    }

	    function flattenBody(body) {
	      if (body.type === 'alternative') {
	        return body.body;
	      } else {
	        return [body];
	      }
	    }

	    function isEmpty(obj) {
	      return obj.type === 'empty';
	    }

	    function incr(amount) {
	      amount = (amount || 1);
	      var res = str.substring(pos, pos + amount);
	      pos += (amount || 1);
	      return res;
	    }

	    function skip(value) {
	      if (!match(value)) {
	        bail('character', value);
	      }
	    }

	    function match(value) {
	      if (str.indexOf(value, pos) === pos) {
	        return incr(value.length);
	      }
	    }

	    function lookahead() {
	      return str[pos];
	    }

	    function current(value) {
	      return str.indexOf(value, pos) === pos;
	    }

	    function next(value) {
	      return str[pos + 1] === value;
	    }

	    function matchReg(regExp) {
	      var subStr = str.substring(pos);
	      var res = subStr.match(regExp);
	      if (res) {
	        res.range = [];
	        res.range[0] = pos;
	        incr(res[0].length);
	        res.range[1] = pos;
	      }
	      return res;
	    }

	    function parseDisjunction() {
	      // Disjunction ::
	      //      Alternative
	      //      Alternative | Disjunction
	      var res = [], from = pos;
	      res.push(parseAlternative());

	      while (match('|')) {
	        res.push(parseAlternative());
	      }

	      if (res.length === 1) {
	        return res[0];
	      }

	      return createDisjunction(res, from, pos);
	    }

	    function parseAlternative() {
	      var res = [], from = pos;
	      var term;

	      // Alternative ::
	      //      [empty]
	      //      Alternative Term
	      while (term = parseTerm()) {
	        res.push(term);
	      }

	      if (res.length === 1) {
	        return res[0];
	      }

	      return createAlternative(res, from, pos);
	    }

	    function parseTerm() {
	      // Term ::
	      //      Anchor
	      //      Atom
	      //      Atom Quantifier

	      if (pos >= str.length || current('|') || current(')')) {
	        return null; /* Means: The term is empty */
	      }

	      var anchor = parseAnchor();

	      if (anchor) {
	        return anchor;
	      }

	      var atom = parseAtom();
	      if (!atom) {
	        bail('Expected atom');
	      }
	      var quantifier = parseQuantifier() || false;
	      if (quantifier) {
	        quantifier.body = flattenBody(atom);
	        // The quantifier contains the atom. Therefore, the beginning of the
	        // quantifier range is given by the beginning of the atom.
	        updateRawStart(quantifier, atom.range[0]);
	        return quantifier;
	      }
	      return atom;
	    }

	    function parseGroup(matchA, typeA, matchB, typeB) {
	      var type = null, from = pos;

	      if (match(matchA)) {
	        type = typeA;
	      } else if (match(matchB)) {
	        type = typeB;
	      } else {
	        return false;
	      }

	      var body = parseDisjunction();
	      if (!body) {
	        bail('Expected disjunction');
	      }
	      skip(')');
	      var group = createGroup(type, flattenBody(body), from, pos);

	      if (type == 'normal') {
	        // Keep track of the number of closed groups. This is required for
	        // parseDecimalEscape(). In case the string is parsed a second time the
	        // value already holds the total count and no incrementation is required.
	        if (firstIteration) {
	          closedCaptureCounter++;
	        }
	      }
	      return group;
	    }

	    function parseAnchor() {
	      // Anchor ::
	      //      ^
	      //      $
	      //      \ b
	      //      \ B
	      //      ( ? = Disjunction )
	      //      ( ? ! Disjunction )
	      var res, from = pos;

	      if (match('^')) {
	        return createAnchor('start', 1 /* rawLength */);
	      } else if (match('$')) {
	        return createAnchor('end', 1 /* rawLength */);
	      } else if (match('\\b')) {
	        return createAnchor('boundary', 2 /* rawLength */);
	      } else if (match('\\B')) {
	        return createAnchor('not-boundary', 2 /* rawLength */);
	      } else {
	        return parseGroup('(?=', 'lookahead', '(?!', 'negativeLookahead');
	      }
	    }

	    function parseQuantifier() {
	      // Quantifier ::
	      //      QuantifierPrefix
	      //      QuantifierPrefix ?
	      //
	      // QuantifierPrefix ::
	      //      *
	      //      +
	      //      ?
	      //      { DecimalDigits }
	      //      { DecimalDigits , }
	      //      { DecimalDigits , DecimalDigits }

	      var res, from = pos;
	      var quantifier;
	      var min, max;

	      if (match('*')) {
	        quantifier = createQuantifier(0);
	      }
	      else if (match('+')) {
	        quantifier = createQuantifier(1);
	      }
	      else if (match('?')) {
	        quantifier = createQuantifier(0, 1);
	      }
	      else if (res = matchReg(/^\{([0-9]+)\}/)) {
	        min = parseInt(res[1], 10);
	        quantifier = createQuantifier(min, min, res.range[0], res.range[1]);
	      }
	      else if (res = matchReg(/^\{([0-9]+),\}/)) {
	        min = parseInt(res[1], 10);
	        quantifier = createQuantifier(min, undefined, res.range[0], res.range[1]);
	      }
	      else if (res = matchReg(/^\{([0-9]+),([0-9]+)\}/)) {
	        min = parseInt(res[1], 10);
	        max = parseInt(res[2], 10);
	        if (min > max) {
	          bail('numbers out of order in {} quantifier', '', from, pos);
	        }
	        quantifier = createQuantifier(min, max, res.range[0], res.range[1]);
	      }

	      if (quantifier) {
	        if (match('?')) {
	          quantifier.greedy = false;
	          quantifier.range[1] += 1;
	        }
	      }

	      return quantifier;
	    }

	    function parseAtom() {
	      // Atom ::
	      //      PatternCharacter
	      //      .
	      //      \ AtomEscape
	      //      CharacterClass
	      //      ( Disjunction )
	      //      ( ? : Disjunction )

	      var res;

	      // jviereck: allow ']', '}' here as well to be compatible with browser's
	      //   implementations: ']'.match(/]/);
	      // if (res = matchReg(/^[^^$\\.*+?()[\]{}|]/)) {
	      if (res = matchReg(/^[^^$\\.*+?(){[|]/)) {
	        //      PatternCharacter
	        return createCharacter(res);
	      }
	      else if (match('.')) {
	        //      .
	        return createDot();
	      }
	      else if (match('\\')) {
	        //      \ AtomEscape
	        res = parseAtomEscape();
	        if (!res) {
	          bail('atomEscape');
	        }
	        return res;
	      }
	      else if (res = parseCharacterClass()) {
	        return res;
	      }
	      else {
	        //      ( Disjunction )
	        //      ( ? : Disjunction )
	        return parseGroup('(?:', 'ignore', '(', 'normal');
	      }
	    }

	    function parseUnicodeSurrogatePairEscape(firstEscape) {
	      if (hasUnicodeFlag) {
	        var first, second;
	        if (firstEscape.kind == 'unicodeEscape' &&
	          (first = firstEscape.codePoint) >= 0xD800 && first <= 0xDBFF &&
	          current('\\') && next('u') ) {
	          var prevPos = pos;
	          pos++;
	          var secondEscape = parseClassEscape();
	          if (secondEscape.kind == 'unicodeEscape' &&
	            (second = secondEscape.codePoint) >= 0xDC00 && second <= 0xDFFF) {
	            // Unicode surrogate pair
	            firstEscape.range[1] = secondEscape.range[1];
	            firstEscape.codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
	            firstEscape.type = 'value';
	            firstEscape.kind = 'unicodeCodePointEscape';
	            addRaw(firstEscape);
	          }
	          else {
	            pos = prevPos;
	          }
	        }
	      }
	      return firstEscape;
	    }

	    function parseClassEscape() {
	      return parseAtomEscape(true);
	    }

	    function parseAtomEscape(insideCharacterClass) {
	      // AtomEscape ::
	      //      DecimalEscape
	      //      CharacterEscape
	      //      CharacterClassEscape

	      var res, from = pos;

	      res = parseDecimalEscape();
	      if (res) {
	        return res;
	      }

	      // For ClassEscape
	      if (insideCharacterClass) {
	        if (match('b')) {
	          // 15.10.2.19
	          // The production ClassEscape :: b evaluates by returning the
	          // CharSet containing the one character <BS> (Unicode value 0008).
	          return createEscaped('singleEscape', 0x0008, '\\b');
	        } else if (match('B')) {
	          bail('\\B not possible inside of CharacterClass', '', from);
	        }
	      }

	      res = parseCharacterEscape();

	      return res;
	    }


	    function parseDecimalEscape() {
	      // DecimalEscape ::
	      //      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]
	      //      CharacterClassEscape :: one of d D s S w W

	      var res, match;

	      if (res = matchReg(/^(?!0)\d+/)) {
	        match = res[0];
	        var refIdx = parseInt(res[0], 10);
	        if (refIdx <= closedCaptureCounter) {
	          // If the number is smaller than the normal-groups found so
	          // far, then it is a reference...
	          return createReference(res[0]);
	        } else {
	          // ... otherwise it needs to be interpreted as a octal (if the
	          // number is in an octal format). If it is NOT octal format,
	          // then the slash is ignored and the number is matched later
	          // as normal characters.

	          // Recall the negative decision to decide if the input must be parsed
	          // a second time with the total normal-groups.
	          backrefDenied.push(refIdx);

	          // Reset the position again, as maybe only parts of the previous
	          // matched numbers are actual octal numbers. E.g. in '019' only
	          // the '01' should be matched.
	          incr(-res[0].length);
	          if (res = matchReg(/^[0-7]{1,3}/)) {
	            return createEscaped('octal', parseInt(res[0], 8), res[0], 1);
	          } else {
	            // If we end up here, we have a case like /\91/. Then the
	            // first slash is to be ignored and the 9 & 1 to be treated
	            // like ordinary characters. Create a character for the
	            // first number only here - other number-characters
	            // (if available) will be matched later.
	            res = createCharacter(matchReg(/^[89]/));
	            return updateRawStart(res, res.range[0] - 1);
	          }
	        }
	      }
	      // Only allow octal numbers in the following. All matched numbers start
	      // with a zero (if the do not, the previous if-branch is executed).
	      // If the number is not octal format and starts with zero (e.g. `091`)
	      // then only the zeros `0` is treated here and the `91` are ordinary
	      // characters.
	      // Example:
	      //   /\091/.exec('\091')[0].length === 3
	      else if (res = matchReg(/^[0-7]{1,3}/)) {
	        match = res[0];
	        if (/^0{1,3}$/.test(match)) {
	          // If they are all zeros, then only take the first one.
	          return createEscaped('null', 0x0000, '0', match.length + 1);
	        } else {
	          return createEscaped('octal', parseInt(match, 8), match, 1);
	        }
	      } else if (res = matchReg(/^[dDsSwW]/)) {
	        return createCharacterClassEscape(res[0]);
	      }
	      return false;
	    }

	    function parseCharacterEscape() {
	      // CharacterEscape ::
	      //      ControlEscape
	      //      c ControlLetter
	      //      HexEscapeSequence
	      //      UnicodeEscapeSequence
	      //      IdentityEscape

	      var res;
	      if (res = matchReg(/^[fnrtv]/)) {
	        // ControlEscape
	        var codePoint = 0;
	        switch (res[0]) {
	          case 't': codePoint = 0x009; break;
	          case 'n': codePoint = 0x00A; break;
	          case 'v': codePoint = 0x00B; break;
	          case 'f': codePoint = 0x00C; break;
	          case 'r': codePoint = 0x00D; break;
	        }
	        return createEscaped('singleEscape', codePoint, '\\' + res[0]);
	      } else if (res = matchReg(/^c([a-zA-Z])/)) {
	        // c ControlLetter
	        return createEscaped('controlLetter', res[1].charCodeAt(0) % 32, res[1], 2);
	      } else if (res = matchReg(/^x([0-9a-fA-F]{2})/)) {
	        // HexEscapeSequence
	        return createEscaped('hexadecimalEscape', parseInt(res[1], 16), res[1], 2);
	      } else if (res = matchReg(/^u([0-9a-fA-F]{4})/)) {
	        // UnicodeEscapeSequence
	        return parseUnicodeSurrogatePairEscape(
	          createEscaped('unicodeEscape', parseInt(res[1], 16), res[1], 2)
	        );
	      } else if (hasUnicodeFlag && (res = matchReg(/^u\{([0-9a-fA-F]+)\}/))) {
	        // RegExpUnicodeEscapeSequence (ES6 Unicode code point escape)
	        return createEscaped('unicodeCodePointEscape', parseInt(res[1], 16), res[1], 4);
	      } else {
	        // IdentityEscape
	        return parseIdentityEscape();
	      }
	    }

	    // Taken from the Esprima parser.
	    function isIdentifierPart(ch) {
	      // Generated by `tools/generate-identifier-regex.js`.
	      var NonAsciiIdentifierPart = new RegExp('[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]');

	      return (ch === 36) || (ch === 95) ||  // $ (dollar) and _ (underscore)
	        (ch >= 65 && ch <= 90) ||         // A..Z
	        (ch >= 97 && ch <= 122) ||        // a..z
	        (ch >= 48 && ch <= 57) ||         // 0..9
	        (ch === 92) ||                    // \ (backslash)
	        ((ch >= 0x80) && NonAsciiIdentifierPart.test(String.fromCharCode(ch)));
	    }

	    function parseIdentityEscape() {
	      // IdentityEscape ::
	      //      SourceCharacter but not IdentifierPart
	      //      <ZWJ>
	      //      <ZWNJ>

	      var ZWJ = '\u200C';
	      var ZWNJ = '\u200D';

	      var tmp;

	      if (!isIdentifierPart(lookahead())) {
	        tmp = incr();
	        return createEscaped('identifier', tmp.charCodeAt(0), tmp, 1);
	      }

	      if (match(ZWJ)) {
	        // <ZWJ>
	        return createEscaped('identifier', 0x200C, ZWJ);
	      } else if (match(ZWNJ)) {
	        // <ZWNJ>
	        return createEscaped('identifier', 0x200D, ZWNJ);
	      }

	      return null;
	    }

	    function parseCharacterClass() {
	      // CharacterClass ::
	      //      [ [lookahead ∉ {^}] ClassRanges ]
	      //      [ ^ ClassRanges ]

	      var res, from = pos;
	      if (res = matchReg(/^\[\^/)) {
	        res = parseClassRanges();
	        skip(']');
	        return createCharacterClass(res, true, from, pos);
	      } else if (match('[')) {
	        res = parseClassRanges();
	        skip(']');
	        return createCharacterClass(res, false, from, pos);
	      }

	      return null;
	    }

	    function parseClassRanges() {
	      // ClassRanges ::
	      //      [empty]
	      //      NonemptyClassRanges

	      var res;
	      if (current(']')) {
	        // Empty array means nothing insinde of the ClassRange.
	        return [];
	      } else {
	        res = parseNonemptyClassRanges();
	        if (!res) {
	          bail('nonEmptyClassRanges');
	        }
	        return res;
	      }
	    }

	    function parseHelperClassRanges(atom) {
	      var from, to, res;
	      if (current('-') && !next(']')) {
	        // ClassAtom - ClassAtom ClassRanges
	        skip('-');

	        res = parseClassAtom();
	        if (!res) {
	          bail('classAtom');
	        }
	        to = pos;
	        var classRanges = parseClassRanges();
	        if (!classRanges) {
	          bail('classRanges');
	        }
	        from = atom.range[0];
	        if (classRanges.type === 'empty') {
	          return [createClassRange(atom, res, from, to)];
	        }
	        return [createClassRange(atom, res, from, to)].concat(classRanges);
	      }

	      res = parseNonemptyClassRangesNoDash();
	      if (!res) {
	        bail('nonEmptyClassRangesNoDash');
	      }

	      return [atom].concat(res);
	    }

	    function parseNonemptyClassRanges() {
	      // NonemptyClassRanges ::
	      //      ClassAtom
	      //      ClassAtom NonemptyClassRangesNoDash
	      //      ClassAtom - ClassAtom ClassRanges

	      var atom = parseClassAtom();
	      if (!atom) {
	        bail('classAtom');
	      }

	      if (current(']')) {
	        // ClassAtom
	        return [atom];
	      }

	      // ClassAtom NonemptyClassRangesNoDash
	      // ClassAtom - ClassAtom ClassRanges
	      return parseHelperClassRanges(atom);
	    }

	    function parseNonemptyClassRangesNoDash() {
	      // NonemptyClassRangesNoDash ::
	      //      ClassAtom
	      //      ClassAtomNoDash NonemptyClassRangesNoDash
	      //      ClassAtomNoDash - ClassAtom ClassRanges

	      var res = parseClassAtom();
	      if (!res) {
	        bail('classAtom');
	      }
	      if (current(']')) {
	        //      ClassAtom
	        return res;
	      }

	      // ClassAtomNoDash NonemptyClassRangesNoDash
	      // ClassAtomNoDash - ClassAtom ClassRanges
	      return parseHelperClassRanges(res);
	    }

	    function parseClassAtom() {
	      // ClassAtom ::
	      //      -
	      //      ClassAtomNoDash
	      if (match('-')) {
	        return createCharacter('-');
	      } else {
	        return parseClassAtomNoDash();
	      }
	    }

	    function parseClassAtomNoDash() {
	      // ClassAtomNoDash ::
	      //      SourceCharacter but not one of \ or ] or -
	      //      \ ClassEscape

	      var res;
	      if (res = matchReg(/^[^\\\]-]/)) {
	        return createCharacter(res[0]);
	      } else if (match('\\')) {
	        res = parseClassEscape();
	        if (!res) {
	          bail('classEscape');
	        }

	        return parseUnicodeSurrogatePairEscape(res);
	      }
	    }

	    function bail(message, details, from, to) {
	      from = from == null ? pos : from;
	      to = to == null ? from : to;

	      var contextStart = Math.max(0, from - 10);
	      var contextEnd = Math.min(to + 10, str.length);

	      // Output a bit of context and a line pointing to where our error is.
	      //
	      // We are assuming that there are no actual newlines in the content as this is a regular expression.
	      var context = '    ' + str.substring(contextStart, contextEnd);
	      var pointer = '    ' + new Array(from - contextStart + 1).join(' ') + '^';

	      throw SyntaxError(message + ' at position ' + from + (details ? ': ' + details : '') + '\n' + context + '\n' + pointer);
	    }

	    var backrefDenied = [];
	    var closedCaptureCounter = 0;
	    var firstIteration = true;
	    var hasUnicodeFlag = (flags || "").indexOf("u") !== -1;
	    var pos = 0;

	    // Convert the input to a string and treat the empty string special.
	    str = String(str);
	    if (str === '') {
	      str = '(?:)';
	    }

	    var result = parseDisjunction();

	    if (result.range[1] !== str.length) {
	      bail('Could not parse entire input - got stuck', '', result.range[1]);
	    }

	    // The spec requires to interpret the `\2` in `/\2()()/` as backreference.
	    // As the parser collects the number of capture groups as the string is
	    // parsed it is impossible to make these decisions at the point when the
	    // `\2` is handled. In case the local decision turns out to be wrong after
	    // the parsing has finished, the input string is parsed a second time with
	    // the total number of capture groups set.
	    //
	    // SEE: https://github.com/jviereck/regjsparser/issues/70
	    for (var i = 0; i < backrefDenied.length; i++) {
	      if (backrefDenied[i] <= closedCaptureCounter) {
	        // Parse the input a second time.
	        pos = 0;
	        firstIteration = false;
	        return parseDisjunction();
	      }
	    }

	    return result;
	  }

	  var regjsparser = {
	    parse: parse
	  };

	  if (typeof module !== 'undefined' && module.exports) {
	    module.exports = regjsparser;
	  } else {
	    window.regjsparser = regjsparser;
	  }

	}());


/***/ },
/* 5871 */
/***/ function(module, exports, __webpack_require__) {

	var generate = __webpack_require__(5869).generate;
	var parse = __webpack_require__(5870).parse;
	var regenerate = __webpack_require__(2105);
	var iuMappings = __webpack_require__(7002);
	var ESCAPE_SETS = __webpack_require__(5868);

	function getCharacterClassEscapeSet(character) {
		if (unicode) {
			if (ignoreCase) {
				return ESCAPE_SETS.UNICODE_IGNORE_CASE[character];
			}
			return ESCAPE_SETS.UNICODE[character];
		}
		return ESCAPE_SETS.REGULAR[character];
	}

	var object = {};
	var hasOwnProperty = object.hasOwnProperty;
	function has(object, property) {
		return hasOwnProperty.call(object, property);
	}

	// Prepare a Regenerate set containing all code points, used for negative
	// character classes (if any).
	var UNICODE_SET = regenerate().addRange(0x0, 0x10FFFF);
	// Without the `u` flag, the range stops at 0xFFFF.
	// https://mths.be/es6#sec-pattern-semantics
	var BMP_SET = regenerate().addRange(0x0, 0xFFFF);

	// Prepare a Regenerate set containing all code points that are supposed to be
	// matched by `/./u`. https://mths.be/es6#sec-atom
	var DOT_SET_UNICODE = UNICODE_SET.clone() // all Unicode code points
		.remove(
			// minus `LineTerminator`s (https://mths.be/es6#sec-line-terminators):
			0x000A, // Line Feed <LF>
			0x000D, // Carriage Return <CR>
			0x2028, // Line Separator <LS>
			0x2029  // Paragraph Separator <PS>
		);
	// Prepare a Regenerate set containing all code points that are supposed to be
	// matched by `/./` (only BMP code points).
	var DOT_SET = DOT_SET_UNICODE.clone()
		.intersection(BMP_SET);

	// Add a range of code points + any case-folded code points in that range to a
	// set.
	regenerate.prototype.iuAddRange = function(min, max) {
		var $this = this;
		do {
			var folded = caseFold(min);
			if (folded) {
				$this.add(folded);
			}
		} while (++min <= max);
		return $this;
	};

	function assign(target, source) {
		for (var key in source) {
			// Note: `hasOwnProperty` is not needed here.
			target[key] = source[key];
		}
	}

	function update(item, pattern) {
		// TODO: Test if memoizing `pattern` here is worth the effort.
		if (!pattern) {
			return;
		}
		var tree = parse(pattern, '');
		switch (tree.type) {
			case 'characterClass':
			case 'group':
			case 'value':
				// No wrapping needed.
				break;
			default:
				// Wrap the pattern in a non-capturing group.
				tree = wrap(tree, pattern);
		}
		assign(item, tree);
	}

	function wrap(tree, pattern) {
		// Wrap the pattern in a non-capturing group.
		return {
			'type': 'group',
			'behavior': 'ignore',
			'body': [tree],
			'raw': '(?:' + pattern + ')'
		};
	}

	function caseFold(codePoint) {
		return has(iuMappings, codePoint) ? iuMappings[codePoint] : false;
	}

	var ignoreCase = false;
	var unicode = false;
	function processCharacterClass(characterClassItem) {
		var set = regenerate();
		var body = characterClassItem.body.forEach(function(item) {
			switch (item.type) {
				case 'value':
					set.add(item.codePoint);
					if (ignoreCase && unicode) {
						var folded = caseFold(item.codePoint);
						if (folded) {
							set.add(folded);
						}
					}
					break;
				case 'characterClassRange':
					var min = item.min.codePoint;
					var max = item.max.codePoint;
					set.addRange(min, max);
					if (ignoreCase && unicode) {
						set.iuAddRange(min, max);
					}
					break;
				case 'characterClassEscape':
					set.add(getCharacterClassEscapeSet(item.value));
					break;
				// The `default` clause is only here as a safeguard; it should never be
				// reached. Code coverage tools should ignore it.
				/* istanbul ignore next */
				default:
					throw Error('Unknown term type: ' + item.type);
			}
		});
		if (characterClassItem.negative) {
			set = (unicode ? UNICODE_SET : BMP_SET).clone().remove(set);
		}
		update(characterClassItem, set.toString());
		return characterClassItem;
	}

	function processTerm(item) {
		switch (item.type) {
			case 'dot':
				update(
					item,
					(unicode ? DOT_SET_UNICODE : DOT_SET).toString()
				);
				break;
			case 'characterClass':
				item = processCharacterClass(item);
				break;
			case 'characterClassEscape':
				update(
					item,
					getCharacterClassEscapeSet(item.value).toString()
				);
				break;
			case 'alternative':
			case 'disjunction':
			case 'group':
			case 'quantifier':
				item.body = item.body.map(processTerm);
				break;
			case 'value':
				var codePoint = item.codePoint;
				var set = regenerate(codePoint);
				if (ignoreCase && unicode) {
					var folded = caseFold(codePoint);
					if (folded) {
						set.add(folded);
					}
				}
				update(item, set.toString());
				break;
			case 'anchor':
			case 'empty':
			case 'group':
			case 'reference':
				// Nothing to do here.
				break;
			// The `default` clause is only here as a safeguard; it should never be
			// reached. Code coverage tools should ignore it.
			/* istanbul ignore next */
			default:
				throw Error('Unknown term type: ' + item.type);
		}
		return item;
	};

	module.exports = function(pattern, flags) {
		var tree = parse(pattern, flags);
		ignoreCase = flags ? flags.indexOf('i') > -1 : false;
		unicode = flags ? flags.indexOf('u') > -1 : false;
		assign(tree, processTerm(tree));
		return generate(tree);
	};


/***/ },
/* 5872 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  return {
	    visitor: {
	      MemberExpression: {
	        exit: function exit(_ref2) {
	          var node = _ref2.node;

	          var prop = node.property;
	          if (!node.computed && t.isIdentifier(prop) && !t.isValidIdentifier(prop.name)) {
	            // foo.default -> foo["default"]
	            node.property = t.stringLiteral(prop.name);
	            node.computed = true;
	          }
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 5873 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  return {
	    visitor: {
	      ObjectProperty: {
	        exit: function exit(_ref2) {
	          var node = _ref2.node;

	          var key = node.key;
	          if (!node.computed && t.isIdentifier(key) && !t.isValidIdentifier(key.name)) {
	            // default: "bar" -> "default": "bar"
	            node.key = t.stringLiteral(key.name);
	          }
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 5874 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(25)["default"];

	var _interopRequireWildcard = __webpack_require__(4)["default"];

	exports.__esModule = true;

	var _babelHelperDefineMap = __webpack_require__(5875);

	var defineMap = _interopRequireWildcard(_babelHelperDefineMap);

	exports["default"] = function (_ref2) {
	  var t = _ref2.types;

	  return {
	    visitor: {
	      ObjectExpression: function ObjectExpression(path, file) {
	        var node = path.node;

	        var hasAny = false;
	        for (var _iterator = (node.properties /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	          var _ref;

	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }

	          var prop = _ref;

	          if (prop.kind === "get" || prop.kind === "set") {
	            hasAny = true;
	            break;
	          }
	        }
	        if (!hasAny) return;

	        var mutatorMap = {};

	        node.properties = node.properties.filter(function (prop) {
	          if (!prop.computed && (prop.kind === "get" || prop.kind === "set")) {
	            defineMap.push(mutatorMap, prop, null, file);
	            return false;
	          } else {
	            return true;
	          }
	        });

	        path.replaceWith(t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("defineProperties")), [node, defineMap.toDefineObject(mutatorMap)]));
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 5875 */
[7193, 22, 4, 5876, 2121, 2135, 12],
/* 5876 */
[7191, 22, 4, 5877, 5878, 12],
/* 5877 */
[7192, 4, 12],
/* 5878 */
[7086, 1177, 22, 4, 6012, 2135, 490, 5879, 12],
/* 5879 */
745,
/* 5880 */
[7087, 104, 25, 22, 4, 329, 12],
/* 5881 */
[7090, 25, 4, 22, 12, 329],
/* 5882 */
2469,
/* 5883 */
[7091, 25, 22, 490],
/* 5884 */
[7092, 4, 12],
/* 5885 */
[7093, 25],
/* 5886 */
[7094, 25, 22, 4, 329, 12],
/* 5887 */
[7096, 25, 4, 5889, 12],
/* 5888 */
[7097, 25, 4, 12],
/* 5889 */
[7098, 4, 681, 12, 5888],
/* 5890 */
[7099, 25, 22, 4, 404, 12],
/* 5891 */
[7100, 104, 25, 4, 12],
/* 5892 */
2479,
/* 5893 */
[7102, 25, 22, 4, 2107, 5891, 329, 12],
/* 5894 */
[7103, 25, 5892],
/* 5895 */
[7104, 25, 22, 4, 5898, 490, 329, 5913, 12],
/* 5896 */
[7107, 104, 22, 4, 2109, 12],
/* 5897 */
[7108, 25, 1176, 4, 22, 2108, 1164, 12, 1173],
/* 5898 */
[7019, 22, 5911, 2111, 5910, 5909, 5899],
/* 5899 */
[7020, 5901, 5900, 5904, 5902, 5906],
/* 5900 */
2377,
/* 5901 */
2378,
/* 5902 */
[7021, 5903],
/* 5903 */
2380,
/* 5904 */
[7022, 5905],
/* 5905 */
2380,
/* 5906 */
2383,
/* 5907 */
2384,
/* 5908 */
[7023, 2110],
/* 5909 */
[7024, 5907, 2110, 5908],
/* 5910 */
2387,
/* 5911 */
[7025, 5912],
/* 5912 */
2389,
/* 5913 */
745,
/* 5914 */
[7125, 5915],
/* 5915 */
[7126, 5916],
/* 5916 */
2508,
/* 5917 */
[7109, 7003],
/* 5918 */
2486,
/* 5919 */
[7027, 5920],
/* 5920 */
2392,
/* 5921 */
[7111, 25, 6022, 22, 4, 6016, 6015, 6017, 2133, 491, 12],
/* 5922 */
[7112, 4, 22, 12, 1165, 259],
/* 5923 */
[7113, 22, 259],
/* 5924 */
[7114, 22, 259],
/* 5925 */
[7115, 22, 259],
/* 5926 */
[7117, 259, 5922, 5923, 5925, 5927, 5928, 5924],
/* 5927 */
[7118, 22, 259],
/* 5928 */
[7119, 22, 259],
/* 5929 */
[7120, 4, 12],
/* 5930 */
[7122, 4, 12],
/* 5931 */
[7124, 25, 22, 4, 2112, 2119, 12, 1165],
/* 5932 */
[7087, 104, 25, 22, 4, 330, 12],
/* 5933 */
[7090, 25, 4, 22, 12, 330],
/* 5934 */
2469,
/* 5935 */
[7091, 25, 22, 491],
/* 5936 */
[7092, 4, 12],
/* 5937 */
[7093, 25],
/* 5938 */
[7094, 25, 22, 4, 330, 12],
/* 5939 */
[7096, 25, 4, 5941, 12],
/* 5940 */
[7097, 25, 4, 12],
/* 5941 */
[7098, 4, 681, 12, 5940],
/* 5942 */
[7099, 25, 22, 4, 404, 12],
/* 5943 */
[7100, 104, 25, 4, 12],
/* 5944 */
2479,
/* 5945 */
[7102, 25, 22, 4, 2114, 5943, 330, 12],
/* 5946 */
[7103, 25, 5944],
/* 5947 */
[7104, 25, 22, 4, 5950, 491, 330, 5962, 12],
/* 5948 */
[7107, 104, 22, 4, 2116, 12],
/* 5949 */
[7108, 25, 1176, 4, 22, 2115, 1167, 12, 1173],
/* 5950 */
[7019, 22, 5960, 2117, 5959, 2119, 5951],
/* 5951 */
[7020, 5953, 5952, 5956, 5954, 5958],
/* 5952 */
2377,
/* 5953 */
2378,
/* 5954 */
[7021, 5955],
/* 5955 */
2380,
/* 5956 */
[7022, 5957],
/* 5957 */
2380,
/* 5958 */
2383,
/* 5959 */
2387,
/* 5960 */
[7025, 5961],
/* 5961 */
2389,
/* 5962 */
745,
/* 5963 */
[7125, 5964],
/* 5964 */
[7126, 5965],
/* 5965 */
2508,
/* 5966 */
[7109, 7004],
/* 5967 */
2486,
/* 5968 */
[7027, 5969],
/* 5969 */
2392,
/* 5970 */
2384,
/* 5971 */
[7023, 2118],
/* 5972 */
2504,
/* 5973 */
2510,
/* 5974 */
[7127, 5981, 5991, 679, 6011],
/* 5975 */
[7129, 2123, 5983, 6001],
/* 5976 */
[7131, 5995, 677],
/* 5977 */
1324,
/* 5978 */
2518,
/* 5979 */
2519,
/* 5980 */
[7132, 405],
/* 5981 */
[7134, 5987, 5988, 492, 2137, 6021],
/* 5982 */
1327,
/* 5983 */
[7136, 2127, 5997],
/* 5984 */
[7138, 2126, 2136],
/* 5985 */
[7143, 6002, 6003, 6004, 161, 6018],
/* 5986 */
[7144, 2129, 262],
/* 5987 */
[7145, 5986, 6005, 262],
/* 5988 */
[7146, 1168, 2129, 2131, 161, 1171, 2132, 2120, 262, 1172],
/* 5989 */
[7147, 1168, 1172],
/* 5990 */
749,
/* 5991 */
[7148, 2128, 5994, 5999],
/* 5992 */
2532,
/* 5993 */
2533,
/* 5994 */
[7150, 147],
/* 5995 */
[7151, 147],
/* 5996 */
[7152, 492, 679, 2122],
/* 5997 */
[7153, 1169, 260, 262],
/* 5998 */
[7154, 262],
/* 5999 */
[7155, 5976, 677],
/* 6000 */
[7156, 2122],
/* 6001 */
[7157, 492, 161],
/* 6002 */
[7158, 5978],
/* 6003 */
2543,
/* 6004 */
[7159, 405],
/* 6005 */
[7161, 2132, 6019],
/* 6006 */
2547,
/* 6007 */
2548,
/* 6008 */
[7163, 5993],
/* 6009 */
2550,
/* 6010 */
[7168, 680, 161, 678, 260, 2136],
/* 6011 */
2552,
/* 6012 */
[7172, 2125, 492],
/* 6013 */
[7175, 147],
/* 6014 */
[7176, 6013, 261],
/* 6015 */
[7177, 261],
/* 6016 */
[7178, 5984, 680, 261],
/* 6017 */
[7179, 147],
/* 6018 */
[7181, 260, 261],
/* 6019 */
[7187, 405, 262],
/* 6020 */
[7188, 5992, 405],
/* 6021 */
[7189, 2130, 5989, 1171],
/* 6022 */
[7030, 6030],
/* 6023 */
[7032, 6032],
/* 6024 */
[7033, 6033],
/* 6025 */
[7034, 6034],
/* 6026 */
[7039, 6037],
/* 6027 */
[7040, 6025, 6024, 6023],
/* 6028 */
1821,
/* 6029 */
[7042, 6062, 6061, 6054],
/* 6030 */
[7043, 6056],
/* 6031 */
[7044, 124],
/* 6032 */
[7045, 124],
/* 6033 */
[7046, 124, 6057],
/* 6034 */
[7047, 124, 6058],
/* 6035 */
[7048, 1186, 263],
/* 6036 */
[7049, 6059, 263],
/* 6037 */
[7051, 1186, 263],
/* 6038 */
[7052, 1186, 6060, 263],
/* 6039 */
2441,
/* 6040 */
2442,
/* 6041 */
[7054, 1178, 406],
/* 6042 */
[7055, 6039],
/* 6043 */
[7057, 124],
/* 6044 */
[7061, 1178],
/* 6045 */
[7062, 1178],
/* 6046 */
514,
/* 6047 */
[7063, 124, 1184, 1185, 1182, 406],
/* 6048 */
1304,
/* 6049 */
[7065, 124, 493],
/* 6050 */
[7071, 6051, 1179],
/* 6051 */
1309,
/* 6052 */
[7073, 1179],
/* 6053 */
[7075, 6041, 406, 684, 263],
/* 6054 */
[7076, 2139, 6053, 263],
/* 6055 */
[7077, 6040, 6048, 684, 493, 2142],
/* 6056 */
[7078, 682],
/* 6057 */
[7079, 493, 1183],
/* 6058 */
[7080, 1183, 2141],
/* 6059 */
[7081, 6052, 1183],
/* 6060 */
345,
/* 6061 */
[7083, 6050, 2142],
/* 6062 */
[7085, 6055, 684],
/* 6063 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var parse = _ref.parse;
	  var traverse = _ref.traverse;

	  return {
	    visitor: {
	      CallExpression: function CallExpression(path) {
	        if (path.get("callee").isIdentifier({ name: "eval" }) && path.node.arguments.length === 1) {
	          var evaluate = path.get("arguments")[0].evaluate();
	          if (!evaluate.confident) return;

	          var code = evaluate.value;
	          if (typeof code !== "string") return;

	          var ast = parse(code);
	          traverse.removeProperties(ast);
	          return ast.program;
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 6064 */
/***/ function(module, exports, __webpack_require__) {

	/* @flow */

	"use strict";

	var _interopRequireDefault = __webpack_require__(76)["default"];

	var _interopRequireWildcard = __webpack_require__(44)["default"];

	exports.__esModule = true;

	var _babelHelperExplodeAssignableExpression = __webpack_require__(6065);

	var _babelHelperExplodeAssignableExpression2 = _interopRequireDefault(_babelHelperExplodeAssignableExpression);

	var _babelTypes = __webpack_require__(57);

	var t = _interopRequireWildcard(_babelTypes);

	exports["default"] = function (opts /*: {
	                                      build: Function;
	                                      operator: string;
	                                    }*/) /*: Object*/ {
	  var visitor = {};

	  function isAssignment(node) {
	    return node.operator === opts.operator + "=";
	  }

	  function buildAssignment(left, right) {
	    return t.assignmentExpression("=", left, right);
	  }

	  visitor.ExpressionStatement = function (path, file) {
	    // hit the `AssignmentExpression` one below
	    if (path.isCompletionRecord()) return;

	    var expr = path.node.expression;
	    if (!isAssignment(expr)) return;

	    var nodes = [];
	    var exploded = _babelHelperExplodeAssignableExpression2["default"](expr.left, nodes, file, path.scope, true);

	    nodes.push(t.expressionStatement(buildAssignment(exploded.ref, opts.build(exploded.uid, expr.right))));

	    path.replaceWithMultiple(nodes);
	  };

	  visitor.AssignmentExpression = function (path, file) {
	    var node = path.node;
	    var scope = path.scope;

	    if (!isAssignment(node)) return;

	    var nodes = [];
	    var exploded = _babelHelperExplodeAssignableExpression2["default"](node.left, nodes, file, scope);
	    nodes.push(buildAssignment(exploded.ref, opts.build(exploded.uid, node.right)));
	    path.replaceWithMultiple(nodes);
	  };

	  visitor.BinaryExpression = function (path) {
	    var node = path.node;

	    if (node.operator === opts.operator) {
	      path.replaceWith(opts.build(node.left, node.right));
	    }
	  };

	  return visitor;
	};

	module.exports = exports["default"];

/***/ },
/* 6065 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireWildcard = __webpack_require__(44)["default"];

	exports.__esModule = true;

	var _babelTypes = __webpack_require__(57);

	var t = _interopRequireWildcard(_babelTypes);

	/*:: import type { Scope } from "babel-traverse";*/

	function getObjRef(node, nodes, file, scope) {
	  var ref = undefined;
	  if (t.isIdentifier(node)) {
	    if (scope.hasBinding(node.name)) {
	      // this variable is declared in scope so we can be 100% sure
	      // that evaluating it multiple times wont trigger a getter
	      // or something else
	      return node;
	    } else {
	      // could possibly trigger a getter so we need to only evaluate
	      // it once
	      ref = node;
	    }
	  } else if (t.isMemberExpression(node)) {
	    ref = node.object;

	    if (t.isIdentifier(ref) && scope.hasBinding(ref.name)) {
	      // the object reference that we need to save is locally declared
	      // so as per the previous comment we can be 100% sure evaluating
	      // it multiple times will be safe
	      return ref;
	    }
	  } else {
	    throw new Error("We can't explode this node type " + node.type);
	  }

	  var temp = scope.generateUidIdentifierBasedOnNode(ref);
	  nodes.push(t.variableDeclaration("var", [t.variableDeclarator(temp, ref)]));
	  return temp;
	}

	function getPropRef(node, nodes, file, scope) {
	  var prop = node.property;
	  var key = t.toComputedKey(node, prop);
	  if (t.isLiteral(key)) return key;

	  var temp = scope.generateUidIdentifierBasedOnNode(prop);
	  nodes.push(t.variableDeclaration("var", [t.variableDeclarator(temp, prop)]));
	  return temp;
	}

	exports["default"] = function (node /*: Object*/, nodes /*: Array<Object>*/, file, scope /*: Scope*/, allowedSingleIdent /*:: ?: boolean*/) /*: {
	                                                                                                                                              uid: Object;
	                                                                                                                                              ref: Object;
	                                                                                                                                            }*/ {
	  var obj = undefined;
	  if (t.isIdentifier(node) && allowedSingleIdent) {
	    obj = node;
	  } else {
	    obj = getObjRef(node, nodes, file, scope);
	  }

	  var ref = undefined,
	      uid = undefined;

	  if (t.isIdentifier(node)) {
	    ref = node;
	    uid = obj;
	  } else {
	    var prop = getPropRef(node, nodes, file, scope);
	    var computed = node.computed || t.isLiteral(prop);
	    uid = ref = t.memberExpression(obj, prop, computed);
	  }

	  return {
	    uid: uid,
	    ref: ref
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 6066 */
[7111, 95, 6171, 76, 44, 6163, 6162, 6164, 2169, 494, 57],
/* 6067 */
[7112, 44, 76, 57, 1187, 264],
/* 6068 */
[7113, 76, 264],
/* 6069 */
[7114, 76, 264],
/* 6070 */
[7115, 76, 264],
/* 6071 */
[7117, 264, 6067, 6068, 6070, 6072, 6073, 6069],
/* 6072 */
[7118, 76, 264],
/* 6073 */
[7119, 76, 264],
/* 6074 */
[7120, 44, 57],
/* 6075 */
[7122, 44, 57],
/* 6076 */
[7124, 95, 76, 44, 2148, 2155, 57, 1187],
/* 6077 */
[7087, 333, 95, 76, 44, 331, 57],
/* 6078 */
[7090, 95, 44, 76, 57, 331],
/* 6079 */
2469,
/* 6080 */
[7091, 95, 76, 494],
/* 6081 */
[7092, 44, 57],
/* 6082 */
[7093, 95],
/* 6083 */
[7094, 95, 76, 44, 331, 57],
/* 6084 */
[7096, 95, 44, 6086, 57],
/* 6085 */
[7097, 95, 44, 57],
/* 6086 */
[7098, 44, 2175, 57, 6085],
/* 6087 */
[7099, 95, 76, 44, 1190, 57],
/* 6088 */
[7100, 333, 95, 44, 57],
/* 6089 */
2479,
/* 6090 */
[7102, 95, 76, 44, 2150, 6088, 331, 57],
/* 6091 */
[7103, 95, 6089],
/* 6092 */
[7104, 95, 76, 44, 6095, 494, 331, 6107, 57],
/* 6093 */
[7107, 333, 76, 44, 2152, 57],
/* 6094 */
[7108, 95, 2174, 44, 76, 2151, 1189, 57, 2168],
/* 6095 */
[7019, 76, 6105, 2153, 6104, 2155, 6096],
/* 6096 */
[7020, 6098, 6097, 6101, 6099, 6103],
/* 6097 */
2377,
/* 6098 */
2378,
/* 6099 */
[7021, 6100],
/* 6100 */
2380,
/* 6101 */
[7022, 6102],
/* 6102 */
2380,
/* 6103 */
2383,
/* 6104 */
2387,
/* 6105 */
[7025, 6106],
/* 6106 */
2389,
/* 6107 */
745,
/* 6108 */
[7125, 6109],
/* 6109 */
[7126, 6110],
/* 6110 */
2508,
/* 6111 */
[7109, 7005],
/* 6112 */
2486,
/* 6113 */
[7027, 6114],
/* 6114 */
2392,
/* 6115 */
2384,
/* 6116 */
[7023, 2154],
/* 6117 */
2510,
/* 6118 */
1322,
/* 6119 */
[7127, 6127, 6139, 687, 6159],
/* 6120 */
[7128, 6121],
/* 6121 */
[7129, 2157, 6130, 6149],
/* 6122 */
[7131, 6143, 686],
/* 6123 */
1324,
/* 6124 */
2518,
/* 6125 */
2519,
/* 6126 */
[7132, 407],
/* 6127 */
[7134, 6134, 6135, 685, 2172, 6169],
/* 6128 */
[7135, 6123, 2157, 2158, 2160, 6155, 6156, 6157, 171, 148],
/* 6129 */
1327,
/* 6130 */
[7136, 2160, 6145],
/* 6131 */
[7138, 2159, 2171],
/* 6132 */
[7143, 6150, 6151, 6152, 171, 6165],
/* 6133 */
[7144, 2163, 266],
/* 6134 */
[7145, 6133, 6153, 266],
/* 6135 */
[7146, 2161, 2163, 6137, 171, 2165, 2166, 6118, 266, 2167],
/* 6136 */
[7147, 2161, 2167],
/* 6137 */
1335,
/* 6138 */
749,
/* 6139 */
[7148, 2162, 6142, 6147],
/* 6140 */
2532,
/* 6141 */
2533,
/* 6142 */
[7150, 148],
/* 6143 */
[7151, 148],
/* 6144 */
[7152, 685, 687, 2156],
/* 6145 */
[7153, 1191, 332, 266],
/* 6146 */
[7154, 266],
/* 6147 */
[7155, 6122, 686],
/* 6148 */
[7156, 2156],
/* 6149 */
[7157, 685, 171],
/* 6150 */
[7158, 6124],
/* 6151 */
2543,
/* 6152 */
[7159, 407],
/* 6153 */
[7161, 2166, 6167],
/* 6154 */
2547,
/* 6155 */
2548,
/* 6156 */
[7163, 6141],
/* 6157 */
2550,
/* 6158 */
[7168, 1194, 171, 1193, 332, 2171],
/* 6159 */
2552,
/* 6160 */
[7175, 148],
/* 6161 */
[7176, 6160, 265],
/* 6162 */
[7177, 265],
/* 6163 */
[7178, 6131, 1194, 265],
/* 6164 */
[7179, 148],
/* 6165 */
[7181, 332, 265],
/* 6166 */
[7183, 2170, 6125, 6148],
/* 6167 */
[7187, 407, 266],
/* 6168 */
[7188, 6140, 407],
/* 6169 */
[7189, 2164, 6136, 2165],
/* 6170 */
2504,
/* 6171 */
[7030, 6181],
/* 6172 */
[7032, 6183],
/* 6173 */
[7033, 6184],
/* 6174 */
[7034, 6185],
/* 6175 */
[7035, 6186],
/* 6176 */
[7038, 6189],
/* 6177 */
[7039, 6188],
/* 6178 */
[7040, 6174, 6173, 6172],
/* 6179 */
1821,
/* 6180 */
[7042, 6213, 6212, 6205],
/* 6181 */
[7043, 6207],
/* 6182 */
[7044, 125],
/* 6183 */
[7045, 125],
/* 6184 */
[7046, 125, 6208],
/* 6185 */
[7047, 125, 6209],
/* 6186 */
[7048, 1203, 267],
/* 6187 */
[7049, 6210, 267],
/* 6188 */
[7051, 1203, 267],
/* 6189 */
[7052, 1203, 6211, 267],
/* 6190 */
2441,
/* 6191 */
2442,
/* 6192 */
[7054, 1195, 408],
/* 6193 */
[7055, 6190],
/* 6194 */
[7057, 125],
/* 6195 */
[7061, 1195],
/* 6196 */
[7062, 1195],
/* 6197 */
514,
/* 6198 */
[7063, 125, 1201, 1202, 1199, 408],
/* 6199 */
1304,
/* 6200 */
[7065, 125, 495],
/* 6201 */
[7071, 6202, 1196],
/* 6202 */
1309,
/* 6203 */
[7073, 1196],
/* 6204 */
[7075, 6192, 408, 690, 267],
/* 6205 */
[7076, 2176, 6204, 267],
/* 6206 */
[7077, 6191, 6199, 690, 495, 2179],
/* 6207 */
[7078, 688],
/* 6208 */
[7079, 495, 1200],
/* 6209 */
[7080, 1200, 2178],
/* 6210 */
[7081, 6203, 1200],
/* 6211 */
345,
/* 6212 */
[7083, 6201, 2179],
/* 6213 */
[7085, 6206, 690],
/* 6214 */
[7029, 6215],
/* 6215 */
[7042, 6239, 6238, 6236],
/* 6216 */
2441,
/* 6217 */
2442,
/* 6218 */
[7053, 6225],
/* 6219 */
[7054, 2186, 496],
/* 6220 */
[7055, 6216],
/* 6221 */
[7056, 6223],
/* 6222 */
[7058, 1205, 1204, 6220],
/* 6223 */
422,
/* 6224 */
[7061, 2186],
/* 6225 */
514,
/* 6226 */
[7063, 692, 2190, 2191, 1206, 496],
/* 6227 */
1304,
/* 6228 */
1305,
/* 6229 */
[7067, 1206],
/* 6230 */
[7070, 1205],
/* 6231 */
[7071, 6232, 2187],
/* 6232 */
1309,
/* 6233 */
[7072, 6224, 2187],
/* 6234 */
740,
/* 6235 */
[7075, 6219, 496, 691, 1204],
/* 6236 */
[7076, 6218, 6235, 1204],
/* 6237 */
[7077, 6217, 6227, 691, 6233, 2189],
/* 6238 */
[7083, 6231, 2189],
/* 6239 */
[7085, 6237, 691],
/* 6240 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  return {
	    visitor: {
	      MemberExpression: function MemberExpression(path) {
	        if (path.get("object").matchesPattern("process.env")) {
	          var key = path.toComputedKey();
	          if (t.isStringLiteral(key)) {
	            path.replaceWith(t.valueToNode(process.env[key.value]));
	          }
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 6241 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  return {
	    visitor: {
	      FunctionExpression: {
	        exit: function exit(path) {
	          var node = path.node;

	          if (!node.id) return;
	          node._ignoreUserWhitespace = true;

	          path.replaceWith(t.callExpression(t.functionExpression(null, [], t.blockStatement([t.toStatement(node), t.returnStatement(node.id)])), []));
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 6242 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  return {
	    visitor: {
	      MemberExpression: {
	        exit: function exit(_ref2) {
	          var node = _ref2.node;

	          var prop = node.property;
	          if (node.computed && t.isLiteral(prop) && t.isValidIdentifier(prop.value)) {
	            // foo["bar"] => foo.bar
	            node.property = t.identifier(prop.value);
	            node.computed = false;
	          }
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 6243 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    visitor: {
	      VariableDeclaration: function VariableDeclaration(path) {
	        if (!path.inList) return;

	        var node = path.node;

	        while (true) {
	          var sibling = path.getSibling(path.key + 1);
	          if (!sibling.isVariableDeclaration({ kind: node.kind })) break;

	          node.declarations = node.declarations.concat(sibling.node.declarations);
	          sibling.remove();
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 6244 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  return {
	    visitor: {
	      Literal: function Literal(path) {
	        if (typeof path.node.value === "boolean") {
	          path.replaceWith(t.unaryExpression("!", t.numericLiteral(+!path.node.value), true));
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 6245 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  return {
	    visitor: {
	      MemberExpression: function MemberExpression(path) {
	        if (path.matchesPattern("process.env.NODE_ENV")) {
	          path.replaceWith(t.valueToNode(("production")));

	          if (path.parentPath.isBinaryExpression()) {
	            var evaluated = path.parentPath.evaluate();
	            if (evaluated.confident) {
	              path.parentPath.replaceWith(t.valueToNode(evaluated.value));
	            }
	          }
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 6246 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    visitor: {
	      CallExpression: function CallExpression(path, file) {
	        if (path.get("callee").matchesPattern("Object.assign")) {
	          path.node.callee = file.addHelper("extends");
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 6247 */
[7029, 6248],
/* 6248 */
[7042, 6272, 6271, 6269],
/* 6249 */
2441,
/* 6250 */
2442,
/* 6251 */
[7053, 6258],
/* 6252 */
[7054, 2194, 497],
/* 6253 */
[7055, 6249],
/* 6254 */
[7056, 6256],
/* 6255 */
[7058, 1208, 1207, 6253],
/* 6256 */
422,
/* 6257 */
[7061, 2194],
/* 6258 */
514,
/* 6259 */
[7063, 694, 2198, 2199, 1209, 497],
/* 6260 */
1304,
/* 6261 */
1305,
/* 6262 */
[7067, 1209],
/* 6263 */
[7070, 1208],
/* 6264 */
[7071, 6265, 2195],
/* 6265 */
1309,
/* 6266 */
[7072, 6257, 2195],
/* 6267 */
740,
/* 6268 */
[7075, 6252, 497, 693, 1207],
/* 6269 */
[7076, 6251, 6268, 1207],
/* 6270 */
[7077, 6250, 6260, 693, 6266, 2197],
/* 6271 */
[7083, 6264, 2197],
/* 6272 */
[7085, 6270, 693],
/* 6273 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    visitor: {
	      CallExpression: function CallExpression(path, file) {
	        if (path.get("callee").matchesPattern("Object.setPrototypeOf")) {
	          path.node.callee = file.addHelper("defaults");
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 6274 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  return {
	    visitor: {
	      ObjectProperty: {
	        exit: function exit(_ref2) {
	          var node = _ref2.node;

	          var key = node.key;
	          if (t.isLiteral(key) && t.isValidIdentifier(key.value)) {
	            // "foo": "bar" -> foo: "bar"
	            node.key = t.identifier(key.value);
	            node.computed = false;
	          }
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 6275 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(6276)["default"];

	var _interopRequireDefault = __webpack_require__(6277)["default"];

	exports.__esModule = true;

	var _lodashArrayPull = __webpack_require__(6303);

	var _lodashArrayPull2 = _interopRequireDefault(_lodashArrayPull);

	exports["default"] = function (_ref2) {
	  var t = _ref2.types;

	  function isProtoKey(node) {
	    return t.isLiteral(t.toComputedKey(node, node.key), { value: "__proto__" });
	  }

	  function isProtoAssignmentExpression(node) {
	    var left = node.left;
	    return t.isMemberExpression(left) && t.isLiteral(t.toComputedKey(left, left.property), { value: "__proto__" });
	  }

	  function buildDefaultsCallExpression(expr, ref, file) {
	    return t.expressionStatement(t.callExpression(file.addHelper("defaults"), [ref, expr.right]));
	  }

	  return {
	    visitor: {
	      AssignmentExpression: function AssignmentExpression(path, file) {
	        if (!isProtoAssignmentExpression(path.node)) return;

	        var nodes = [];
	        var left = path.node.left.object;
	        var temp = path.scope.maybeGenerateMemoised(left);

	        if (temp) nodes.push(t.expressionStatement(t.assignmentExpression("=", temp, left)));
	        nodes.push(buildDefaultsCallExpression(path.node, temp || left, file));
	        if (temp) nodes.push(temp);

	        path.replaceWithMultiple(nodes);
	      },

	      ExpressionStatement: function ExpressionStatement(path, file) {
	        var expr = path.node.expression;
	        if (!t.isAssignmentExpression(expr, { operator: "=" })) return;

	        if (isProtoAssignmentExpression(expr)) {
	          path.replaceWith(buildDefaultsCallExpression(expr, expr.left.object, file));
	        }
	      },

	      ObjectExpression: function ObjectExpression(path, file) {
	        var proto = undefined;
	        var node = path.node;

	        for (var _iterator = (node.properties /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	          var _ref;

	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }

	          var prop = _ref;

	          if (isProtoKey(prop)) {
	            proto = prop.value;
	            _lodashArrayPull2["default"](node.properties, prop);
	          }
	        }

	        if (proto) {
	          var args = [t.objectExpression([]), proto];
	          if (node.properties.length) args.push(node);
	          path.replaceWith(t.callExpression(file.addHelper("extends"), args));
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 6276 */
[7029, 6278],
/* 6277 */
5,
/* 6278 */
[7042, 6302, 6301, 6299],
/* 6279 */
2441,
/* 6280 */
2442,
/* 6281 */
[7053, 6288],
/* 6282 */
[7054, 2200, 498],
/* 6283 */
[7055, 6279],
/* 6284 */
[7056, 6286],
/* 6285 */
[7058, 1211, 1210, 6283],
/* 6286 */
422,
/* 6287 */
[7061, 2200],
/* 6288 */
514,
/* 6289 */
[7063, 696, 2204, 2205, 1212, 498],
/* 6290 */
1304,
/* 6291 */
1305,
/* 6292 */
[7067, 1212],
/* 6293 */
[7070, 1211],
/* 6294 */
[7071, 6295, 2201],
/* 6295 */
1309,
/* 6296 */
[7072, 6287, 2201],
/* 6297 */
740,
/* 6298 */
[7075, 6282, 498, 695, 1210],
/* 6299 */
[7076, 6281, 6298, 1210],
/* 6300 */
[7077, 6280, 6290, 695, 6296, 2203],
/* 6301 */
[7083, 6294, 2203],
/* 6302 */
[7085, 6300, 695],
/* 6303 */
[7198, 6304],
/* 6304 */
[7141, 6305],
/* 6305 */
2547,
/* 6306 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  var immutabilityVisitor = {
	    enter: function enter(path, state) {
	      var stop = function stop() {
	        state.isImmutable = false;
	        path.stop();
	      };

	      if (path.isJSXClosingElement()) {
	        path.skip();
	        return;
	      }

	      if (path.isJSXIdentifier({ name: "ref" }) && path.parentPath.isJSXAttribute({ name: path.node })) {
	        return stop();
	      }

	      if (path.isJSXIdentifier() || path.isIdentifier() || path.isJSXMemberExpression()) {
	        return;
	      }

	      if (!path.isImmutable()) stop();
	    }
	  };

	  return {
	    visitor: {
	      JSXElement: function JSXElement(path) {
	        if (path.node._hoisted) return;

	        var state = { isImmutable: true };
	        path.traverse(immutabilityVisitor, state);

	        if (state.isImmutable) {
	          path.hoist();
	        } else {
	          path.node._hoisted = true;
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 6307 */
5,
/* 6308 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(6309)["default"];

	exports.__esModule = true;

	exports["default"] = function (_ref2) {
	  var t = _ref2.types;

	  function hasRefOrSpread(attrs) {
	    for (var i = 0; i < attrs.length; i++) {
	      var attr = attrs[i];
	      if (t.isJSXSpreadAttribute(attr)) return true;
	      if (isJSXAttributeOfName(attr, "ref")) return true;
	    }
	    return false;
	  }

	  function isJSXAttributeOfName(attr, name) {
	    return t.isJSXAttribute(attr) && t.isJSXIdentifier(attr.name, { name: name });
	  }

	  function getAttributeValue(attr) {
	    var value = attr.value;
	    if (!value) return t.identifier("true");
	    if (t.isJSXExpressionContainer(value)) value = value.expression;
	    return value;
	  }

	  return {
	    visitor: {
	      JSXElement: function JSXElement(path, file) {
	        var node = path.node;

	        // filter
	        var open = node.openingElement;
	        if (hasRefOrSpread(open.attributes)) return;

	        // init
	        var props = t.objectExpression([]);
	        var key = null;
	        var type = open.name;

	        if (t.isJSXIdentifier(type) && t.react.isCompatTag(type.name)) {
	          type = t.stringLiteral(type.name);
	        }

	        function pushProp(objProps, key, value) {
	          objProps.push(t.objectProperty(key, value));
	        }

	        // props
	        for (var _iterator = (open.attributes /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	          var _ref;

	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }

	          var attr = _ref;

	          if (isJSXAttributeOfName(attr, "key")) {
	            key = getAttributeValue(attr);
	          } else {
	            var _name = attr.name.name;
	            var propertyKey = t.isValidIdentifier(_name) ? t.identifier(_name) : t.stringLiteral(_name);
	            pushProp(props.properties, propertyKey, getAttributeValue(attr));
	          }
	        }

	        var args = [type, props];
	        if (key || node.children.length) {
	          var children = t.react.buildChildren(node);
	          args.push.apply(args, [key || t.unaryExpression("void", t.numericLiteral(0), true)].concat(children));
	        }

	        var el = t.callExpression(file.addHelper("jsx"), args);
	        path.replaceWith(el);
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 6309 */
[7029, 6310],
/* 6310 */
[7042, 6334, 6333, 6331],
/* 6311 */
2441,
/* 6312 */
2442,
/* 6313 */
[7053, 6320],
/* 6314 */
[7054, 2207, 499],
/* 6315 */
[7055, 6311],
/* 6316 */
[7056, 6318],
/* 6317 */
[7058, 1214, 1213, 6315],
/* 6318 */
422,
/* 6319 */
[7061, 2207],
/* 6320 */
514,
/* 6321 */
[7063, 698, 2211, 2212, 1215, 499],
/* 6322 */
1304,
/* 6323 */
1305,
/* 6324 */
[7067, 1215],
/* 6325 */
[7070, 1214],
/* 6326 */
[7071, 6327, 2208],
/* 6327 */
1309,
/* 6328 */
[7072, 6319, 2208],
/* 6329 */
740,
/* 6330 */
[7075, 6314, 499, 697, 1213],
/* 6331 */
[7076, 6313, 6330, 1213],
/* 6332 */
[7077, 6312, 6322, 697, 6328, 2210],
/* 6333 */
[7083, 6326, 2210],
/* 6334 */
[7085, 6332, 697],
/* 6335 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("jsx");
	    },

	    visitor: __webpack_require__(6336)({
	      pre: function pre(state) {
	        state.callee = state.tagExpr;
	      },

	      post: function post(state) {
	        if (t.react.isCompatTag(state.tagName)) {
	          state.call = t.callExpression(t.memberExpression(t.memberExpression(t.identifier("React"), t.identifier("DOM")), state.tagExpr, t.isLiteral(state.tagExpr)), state.args);
	        }
	      }
	    })
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 6336 */
[7199, 78, 50, 1219, 66],
/* 6337 */
[7111, 96, 6442, 78, 50, 6435, 6434, 6436, 2233, 500, 66],
/* 6338 */
[7112, 50, 78, 66, 1216, 268],
/* 6339 */
[7113, 78, 268],
/* 6340 */
[7114, 78, 268],
/* 6341 */
[7115, 78, 268],
/* 6342 */
[7117, 268, 6338, 6339, 6341, 6343, 6344, 6340],
/* 6343 */
[7118, 78, 268],
/* 6344 */
[7119, 78, 268],
/* 6345 */
[7120, 50, 66],
/* 6346 */
[7122, 50, 66],
/* 6347 */
[7124, 96, 78, 50, 2213, 1219, 66, 1216],
/* 6348 */
[7087, 336, 96, 78, 50, 334, 66],
/* 6349 */
[7090, 96, 50, 78, 66, 334],
/* 6350 */
2469,
/* 6351 */
[7091, 96, 78, 500],
/* 6352 */
[7092, 50, 66],
/* 6353 */
[7093, 96],
/* 6354 */
[7094, 96, 78, 50, 334, 66],
/* 6355 */
[7096, 96, 50, 6357, 66],
/* 6356 */
[7097, 96, 50, 66],
/* 6357 */
[7098, 50, 2239, 66, 6356],
/* 6358 */
[7099, 96, 78, 50, 1220, 66],
/* 6359 */
[7100, 336, 96, 50, 66],
/* 6360 */
2479,
/* 6361 */
[7102, 96, 78, 50, 2215, 6359, 334, 66],
/* 6362 */
[7103, 96, 6360],
/* 6363 */
[7104, 96, 78, 50, 6366, 500, 334, 6378, 66],
/* 6364 */
[7107, 336, 78, 50, 2217, 66],
/* 6365 */
[7108, 96, 2238, 50, 78, 2216, 1218, 66, 2232],
/* 6366 */
[7019, 78, 6376, 2218, 6375, 1219, 6367],
/* 6367 */
[7020, 6369, 6368, 6372, 6370, 6374],
/* 6368 */
2377,
/* 6369 */
2378,
/* 6370 */
[7021, 6371],
/* 6371 */
2380,
/* 6372 */
[7022, 6373],
/* 6373 */
2380,
/* 6374 */
2383,
/* 6375 */
2387,
/* 6376 */
[7025, 6377],
/* 6377 */
2389,
/* 6378 */
745,
/* 6379 */
[7125, 6380],
/* 6380 */
[7126, 6381],
/* 6381 */
2508,
/* 6382 */
[7109, 7006],
/* 6383 */
2486,
/* 6384 */
[7027, 6385],
/* 6385 */
2392,
/* 6386 */
2504,
/* 6387 */
2384,
/* 6388 */
[7023, 2219],
/* 6389 */
2510,
/* 6390 */
1322,
/* 6391 */
[7127, 6399, 6411, 701, 6431],
/* 6392 */
[7128, 6393],
/* 6393 */
[7129, 2221, 6402, 6421],
/* 6394 */
[7131, 6415, 700],
/* 6395 */
1324,
/* 6396 */
2518,
/* 6397 */
2519,
/* 6398 */
[7132, 409],
/* 6399 */
[7134, 6406, 6407, 699, 2236, 6441],
/* 6400 */
[7135, 6395, 2221, 2222, 2224, 6427, 6428, 6429, 172, 149],
/* 6401 */
1327,
/* 6402 */
[7136, 2224, 6417],
/* 6403 */
[7138, 2223, 2235],
/* 6404 */
[7143, 6422, 6423, 6424, 172, 6437],
/* 6405 */
[7144, 2227, 270],
/* 6406 */
[7145, 6405, 6425, 270],
/* 6407 */
[7146, 2225, 2227, 6409, 172, 2229, 2230, 6390, 270, 2231],
/* 6408 */
[7147, 2225, 2231],
/* 6409 */
1335,
/* 6410 */
749,
/* 6411 */
[7148, 2226, 6414, 6419],
/* 6412 */
2532,
/* 6413 */
2533,
/* 6414 */
[7150, 149],
/* 6415 */
[7151, 149],
/* 6416 */
[7152, 699, 701, 2220],
/* 6417 */
[7153, 1221, 335, 270],
/* 6418 */
[7154, 270],
/* 6419 */
[7155, 6394, 700],
/* 6420 */
[7156, 2220],
/* 6421 */
[7157, 699, 172],
/* 6422 */
[7158, 6396],
/* 6423 */
2543,
/* 6424 */
[7159, 409],
/* 6425 */
[7161, 2230, 6439],
/* 6426 */
2547,
/* 6427 */
2548,
/* 6428 */
[7163, 6413],
/* 6429 */
2550,
/* 6430 */
[7168, 1224, 172, 1223, 335, 2235],
/* 6431 */
2552,
/* 6432 */
[7175, 149],
/* 6433 */
[7176, 6432, 269],
/* 6434 */
[7177, 269],
/* 6435 */
[7178, 6403, 1224, 269],
/* 6436 */
[7179, 149],
/* 6437 */
[7181, 335, 269],
/* 6438 */
[7183, 2234, 6397, 6420],
/* 6439 */
[7187, 409, 270],
/* 6440 */
[7188, 6412, 409],
/* 6441 */
[7189, 2228, 6408, 2229],
/* 6442 */
[7030, 6452],
/* 6443 */
[7032, 6454],
/* 6444 */
[7033, 6455],
/* 6445 */
[7034, 6456],
/* 6446 */
[7035, 6457],
/* 6447 */
[7038, 6460],
/* 6448 */
[7039, 6459],
/* 6449 */
[7040, 6445, 6444, 6443],
/* 6450 */
1821,
/* 6451 */
[7042, 6484, 6483, 6476],
/* 6452 */
[7043, 6478],
/* 6453 */
[7044, 126],
/* 6454 */
[7045, 126],
/* 6455 */
[7046, 126, 6479],
/* 6456 */
[7047, 126, 6480],
/* 6457 */
[7048, 1233, 271],
/* 6458 */
[7049, 6481, 271],
/* 6459 */
[7051, 1233, 271],
/* 6460 */
[7052, 1233, 6482, 271],
/* 6461 */
2441,
/* 6462 */
2442,
/* 6463 */
[7054, 1225, 410],
/* 6464 */
[7055, 6461],
/* 6465 */
[7057, 126],
/* 6466 */
[7061, 1225],
/* 6467 */
[7062, 1225],
/* 6468 */
514,
/* 6469 */
[7063, 126, 1231, 1232, 1229, 410],
/* 6470 */
1304,
/* 6471 */
[7065, 126, 501],
/* 6472 */
[7071, 6473, 1226],
/* 6473 */
1309,
/* 6474 */
[7073, 1226],
/* 6475 */
[7075, 6463, 410, 704, 271],
/* 6476 */
[7076, 2240, 6475, 271],
/* 6477 */
[7077, 6462, 6470, 704, 501, 2243],
/* 6478 */
[7078, 702],
/* 6479 */
[7079, 501, 1230],
/* 6480 */
[7080, 1230, 2242],
/* 6481 */
[7081, 6474, 1230],
/* 6482 */
345,
/* 6483 */
[7083, 6472, 2243],
/* 6484 */
[7085, 6477, 704],
/* 6485 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {
	/**
	* This adds {fileName, lineNumber} annotations to React component definitions
	* and to jsx tag literals.
	*
	*
	* == JSX Literals ==
	*
	* <sometag />
	*
	* becomes:
	*
	* <sometag __source={{fileName: 'this/file.js', lineNumber: 10}}/>
	*/

	"use strict";

	var _interopRequireDefault = __webpack_require__(6486)["default"];

	exports.__esModule = true;

	var _path = __webpack_require__(175);

	var _path2 = _interopRequireDefault(_path);

	var TRACE_ID = "__source";

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  function makeTrace(fileName, lineNumber) {
	    var fileNameLiteral = fileName != null ? t.stringLiteral(fileName) : t.nullLiteral();
	    var fileLineLiteral = lineNumber != null ? t.numericLiteral(lineNumber) : t.nullLiteral();
	    var fileNameProperty = t.objectProperty(t.identifier("fileName"), fileNameLiteral);
	    var lineNumberProperty = t.objectProperty(t.identifier("lineNumber"), fileLineLiteral);
	    return t.objectExpression([fileNameProperty, lineNumberProperty]);
	  }

	  var visitor = {
	    JSXOpeningElement: function JSXOpeningElement(node, state) {
	      var id = t.jSXIdentifier(TRACE_ID);
	      var fileName = state.file.log.filename !== "unknown" ? _path2["default"].relative(__dirname, state.file.log.filename) : null;
	      var trace = makeTrace(fileName, node.container.openingElement.loc.start.line);

	      node.container.openingElement.attributes.push(t.jSXAttribute(id, t.jSXExpressionContainer(trace)));
	    }
	  };

	  return {
	    visitor: visitor
	  };
	};

	module.exports = exports["default"];
	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ },
/* 6486 */
5,
/* 6487 */
[7199, 79, 51, 1237, 67],
/* 6488 */
[7111, 86, 6593, 79, 51, 6586, 6585, 6587, 2269, 502, 67],
/* 6489 */
[7112, 51, 79, 67, 1234, 272],
/* 6490 */
[7113, 79, 272],
/* 6491 */
[7114, 79, 272],
/* 6492 */
[7115, 79, 272],
/* 6493 */
[7117, 272, 6489, 6490, 6492, 6494, 6495, 6491],
/* 6494 */
[7118, 79, 272],
/* 6495 */
[7119, 79, 272],
/* 6496 */
[7120, 51, 67],
/* 6497 */
[7122, 51, 67],
/* 6498 */
[7124, 86, 79, 51, 2249, 1237, 67, 1234],
/* 6499 */
[7087, 339, 86, 79, 51, 337, 67],
/* 6500 */
[7090, 86, 51, 79, 67, 337],
/* 6501 */
2469,
/* 6502 */
[7091, 86, 79, 502],
/* 6503 */
[7092, 51, 67],
/* 6504 */
[7093, 86],
/* 6505 */
[7094, 86, 79, 51, 337, 67],
/* 6506 */
[7096, 86, 51, 6508, 67],
/* 6507 */
[7097, 86, 51, 67],
/* 6508 */
[7098, 51, 2275, 67, 6507],
/* 6509 */
[7099, 86, 79, 51, 1238, 67],
/* 6510 */
[7100, 339, 86, 51, 67],
/* 6511 */
2479,
/* 6512 */
[7102, 86, 79, 51, 2251, 6510, 337, 67],
/* 6513 */
[7103, 86, 6511],
/* 6514 */
[7104, 86, 79, 51, 6517, 502, 337, 6529, 67],
/* 6515 */
[7107, 339, 79, 51, 2253, 67],
/* 6516 */
[7108, 86, 2274, 51, 79, 2252, 1236, 67, 2268],
/* 6517 */
[7019, 79, 6527, 2254, 6526, 1237, 6518],
/* 6518 */
[7020, 6520, 6519, 6523, 6521, 6525],
/* 6519 */
2377,
/* 6520 */
2378,
/* 6521 */
[7021, 6522],
/* 6522 */
2380,
/* 6523 */
[7022, 6524],
/* 6524 */
2380,
/* 6525 */
2383,
/* 6526 */
2387,
/* 6527 */
[7025, 6528],
/* 6528 */
2389,
/* 6529 */
745,
/* 6530 */
[7125, 6531],
/* 6531 */
[7126, 6532],
/* 6532 */
2508,
/* 6533 */
[7109, 7007],
/* 6534 */
2486,
/* 6535 */
[7027, 6536],
/* 6536 */
2392,
/* 6537 */
2504,
/* 6538 */
2384,
/* 6539 */
[7023, 2255],
/* 6540 */
2510,
/* 6541 */
1322,
/* 6542 */
[7127, 6550, 6562, 707, 6582],
/* 6543 */
[7128, 6544],
/* 6544 */
[7129, 2257, 6553, 6572],
/* 6545 */
[7131, 6566, 706],
/* 6546 */
1324,
/* 6547 */
2518,
/* 6548 */
2519,
/* 6549 */
[7132, 411],
/* 6550 */
[7134, 6557, 6558, 705, 2272, 6592],
/* 6551 */
[7135, 6546, 2257, 2258, 2260, 6578, 6579, 6580, 173, 150],
/* 6552 */
1327,
/* 6553 */
[7136, 2260, 6568],
/* 6554 */
[7138, 2259, 2271],
/* 6555 */
[7143, 6573, 6574, 6575, 173, 6588],
/* 6556 */
[7144, 2263, 274],
/* 6557 */
[7145, 6556, 6576, 274],
/* 6558 */
[7146, 2261, 2263, 6560, 173, 2265, 2266, 6541, 274, 2267],
/* 6559 */
[7147, 2261, 2267],
/* 6560 */
1335,
/* 6561 */
749,
/* 6562 */
[7148, 2262, 6565, 6570],
/* 6563 */
2532,
/* 6564 */
2533,
/* 6565 */
[7150, 150],
/* 6566 */
[7151, 150],
/* 6567 */
[7152, 705, 707, 2256],
/* 6568 */
[7153, 1239, 338, 274],
/* 6569 */
[7154, 274],
/* 6570 */
[7155, 6545, 706],
/* 6571 */
[7156, 2256],
/* 6572 */
[7157, 705, 173],
/* 6573 */
[7158, 6547],
/* 6574 */
2543,
/* 6575 */
[7159, 411],
/* 6576 */
[7161, 2266, 6590],
/* 6577 */
2547,
/* 6578 */
2548,
/* 6579 */
[7163, 6564],
/* 6580 */
2550,
/* 6581 */
[7168, 1242, 173, 1241, 338, 2271],
/* 6582 */
2552,
/* 6583 */
[7175, 150],
/* 6584 */
[7176, 6583, 273],
/* 6585 */
[7177, 273],
/* 6586 */
[7178, 6554, 1242, 273],
/* 6587 */
[7179, 150],
/* 6588 */
[7181, 338, 273],
/* 6589 */
[7183, 2270, 6548, 6571],
/* 6590 */
[7187, 411, 274],
/* 6591 */
[7188, 6563, 411],
/* 6592 */
[7189, 2264, 6559, 2265],
/* 6593 */
[7030, 6603],
/* 6594 */
[7032, 6605],
/* 6595 */
[7033, 6606],
/* 6596 */
[7034, 6607],
/* 6597 */
[7035, 6608],
/* 6598 */
[7038, 6611],
/* 6599 */
[7039, 6610],
/* 6600 */
[7040, 6596, 6595, 6594],
/* 6601 */
1821,
/* 6602 */
[7042, 6635, 6634, 6627],
/* 6603 */
[7043, 6629],
/* 6604 */
[7044, 127],
/* 6605 */
[7045, 127],
/* 6606 */
[7046, 127, 6630],
/* 6607 */
[7047, 127, 6631],
/* 6608 */
[7048, 1251, 275],
/* 6609 */
[7049, 6632, 275],
/* 6610 */
[7051, 1251, 275],
/* 6611 */
[7052, 1251, 6633, 275],
/* 6612 */
2441,
/* 6613 */
2442,
/* 6614 */
[7054, 1243, 412],
/* 6615 */
[7055, 6612],
/* 6616 */
[7057, 127],
/* 6617 */
[7061, 1243],
/* 6618 */
[7062, 1243],
/* 6619 */
514,
/* 6620 */
[7063, 127, 1249, 1250, 1247, 412],
/* 6621 */
1304,
/* 6622 */
[7065, 127, 503],
/* 6623 */
[7071, 6624, 1244],
/* 6624 */
1309,
/* 6625 */
[7073, 1244],
/* 6626 */
[7075, 6614, 412, 710, 275],
/* 6627 */
[7076, 2276, 6626, 275],
/* 6628 */
[7077, 6613, 6621, 710, 503, 2279],
/* 6629 */
[7078, 708],
/* 6630 */
[7079, 503, 1248],
/* 6631 */
[7080, 1248, 2278],
/* 6632 */
[7081, 6625, 1248],
/* 6633 */
345,
/* 6634 */
[7083, 6623, 2279],
/* 6635 */
[7085, 6628, 710],
/* 6636 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */

	"use strict";

	var _Object$keys = __webpack_require__(1253)["default"];

	var _interopRequireWildcard = __webpack_require__(32)["default"];

	var _babelTypes = __webpack_require__(36);

	var t = _interopRequireWildcard(_babelTypes);

	var hasOwn = Object.prototype.hasOwnProperty;

	// The hoist function takes a FunctionExpression or FunctionDeclaration
	// and replaces any Declaration nodes in its body with assignments, then
	// returns a VariableDeclaration containing just the names of the removed
	// declarations.
	exports.hoist = function (funPath) {
	  t.assertFunction(funPath.node);

	  var vars = {};

	  function varDeclToExpr(vdec, includeIdentifiers) {
	    t.assertVariableDeclaration(vdec);
	    // TODO assert.equal(vdec.kind, "var");
	    var exprs = [];

	    vdec.declarations.forEach(function (dec) {
	      vars[dec.id.name] = dec.id;

	      if (dec.init) {
	        exprs.push(t.assignmentExpression("=", dec.id, dec.init));
	      } else if (includeIdentifiers) {
	        exprs.push(dec.id);
	      }
	    });

	    if (exprs.length === 0) return null;

	    if (exprs.length === 1) return exprs[0];

	    return t.sequenceExpression(exprs);
	  }

	  funPath.get("body").traverse({
	    VariableDeclaration: {
	      exit: function exit(path) {
	        var expr = varDeclToExpr(path.node, false);
	        if (expr === null) {
	          path.remove();
	        } else {
	          // We don't need to traverse this expression any further because
	          // there can't be any new declarations inside an expression.
	          path.replaceWith(t.expressionStatement(expr));
	        }

	        // Since the original node has been either removed or replaced,
	        // avoid traversing it any further.
	        path.skip();
	      }
	    },

	    ForStatement: function ForStatement(path) {
	      var init = path.node.init;
	      if (t.isVariableDeclaration(init)) {
	        path.get("init").replaceWith(varDeclToExpr(init, false));
	      }
	    },

	    ForXStatement: function ForXStatement(path) {
	      var left = path.get("left");
	      if (left.isVariableDeclaration()) {
	        left.replaceWith(varDeclToExpr(left.node, true));
	      }
	    },

	    FunctionDeclaration: function FunctionDeclaration(path) {
	      var node = path.node;
	      vars[node.id.name] = node.id;

	      var assignment = t.expressionStatement(t.assignmentExpression("=", node.id, t.functionExpression(node.id, node.params, node.body, node.generator, node.expression)));

	      if (path.parentPath.isBlockStatement()) {
	        // Insert the assignment form before the first statement in the
	        // enclosing block.
	        path.parentPath.unshiftContainer("body", assignment);

	        // Remove the function declaration now that we've inserted the
	        // equivalent assignment form at the beginning of the block.
	        path.remove();
	      } else {
	        // If the parent node is not a block statement, then we can just
	        // replace the declaration with the equivalent assignment form
	        // without worrying about hoisting it.
	        path.replaceWith(assignment);
	      }

	      // Don't hoist variables out of inner functions.
	      path.skip();
	    },

	    FunctionExpression: function FunctionExpression(path) {
	      // Don't descend into nested function expressions.
	      path.skip();
	    }
	  });

	  var paramNames = {};
	  funPath.get("params").forEach(function (paramPath) {
	    var param = paramPath.node;
	    if (t.isIdentifier(param)) {
	      paramNames[param.name] = param;
	    } else {
	      // Variables declared by destructuring parameter patterns will be
	      // harmlessly re-declared.
	    }
	  });

	  var declarations = [];

	  _Object$keys(vars).forEach(function (name) {
	    if (!hasOwn.call(paramNames, name)) {
	      declarations.push(t.variableDeclarator(vars[name], null));
	    }
	  });

	  if (declarations.length === 0) {
	    return null; // Be sure to handle this case!
	  }

	  return t.variableDeclaration("var", declarations);
	};

/***/ },
/* 6637 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */

	"use strict";

	var _interopRequireDefault = __webpack_require__(58)["default"];

	var _interopRequireWildcard = __webpack_require__(32)["default"];

	var _assert = __webpack_require__(725);

	var _assert2 = _interopRequireDefault(_assert);

	var _babelTypes = __webpack_require__(36);

	var t = _interopRequireWildcard(_babelTypes);

	var _util = __webpack_require__(30);

	function Entry() {
	  _assert2["default"].ok(this instanceof Entry);
	}

	function FunctionEntry(returnLoc) {
	  Entry.call(this);
	  t.assertLiteral(returnLoc);
	  this.returnLoc = returnLoc;
	}

	_util.inherits(FunctionEntry, Entry);
	exports.FunctionEntry = FunctionEntry;

	function LoopEntry(breakLoc, continueLoc, label) {
	  Entry.call(this);

	  t.assertLiteral(breakLoc);
	  t.assertLiteral(continueLoc);

	  if (label) {
	    t.assertIdentifier(label);
	  } else {
	    label = null;
	  }

	  this.breakLoc = breakLoc;
	  this.continueLoc = continueLoc;
	  this.label = label;
	}

	_util.inherits(LoopEntry, Entry);
	exports.LoopEntry = LoopEntry;

	function SwitchEntry(breakLoc) {
	  Entry.call(this);
	  t.assertLiteral(breakLoc);
	  this.breakLoc = breakLoc;
	}

	_util.inherits(SwitchEntry, Entry);
	exports.SwitchEntry = SwitchEntry;

	function TryEntry(firstLoc, catchEntry, finallyEntry) {
	  Entry.call(this);

	  t.assertLiteral(firstLoc);

	  if (catchEntry) {
	    _assert2["default"].ok(catchEntry instanceof CatchEntry);
	  } else {
	    catchEntry = null;
	  }

	  if (finallyEntry) {
	    _assert2["default"].ok(finallyEntry instanceof FinallyEntry);
	  } else {
	    finallyEntry = null;
	  }

	  // Have to have one or the other (or both).
	  _assert2["default"].ok(catchEntry || finallyEntry);

	  this.firstLoc = firstLoc;
	  this.catchEntry = catchEntry;
	  this.finallyEntry = finallyEntry;
	}

	_util.inherits(TryEntry, Entry);
	exports.TryEntry = TryEntry;

	function CatchEntry(firstLoc, paramId) {
	  Entry.call(this);

	  t.assertLiteral(firstLoc);
	  t.assertIdentifier(paramId);

	  this.firstLoc = firstLoc;
	  this.paramId = paramId;
	}

	_util.inherits(CatchEntry, Entry);
	exports.CatchEntry = CatchEntry;

	function FinallyEntry(firstLoc, afterLoc) {
	  Entry.call(this);
	  t.assertLiteral(firstLoc);
	  t.assertLiteral(afterLoc);
	  this.firstLoc = firstLoc;
	  this.afterLoc = afterLoc;
	}

	_util.inherits(FinallyEntry, Entry);
	exports.FinallyEntry = FinallyEntry;

	function LabeledEntry(breakLoc, label) {
	  Entry.call(this);

	  t.assertLiteral(breakLoc);
	  t.assertIdentifier(label);

	  this.breakLoc = breakLoc;
	  this.label = label;
	}

	_util.inherits(LabeledEntry, Entry);
	exports.LabeledEntry = LabeledEntry;

	function LeapManager(emitter) {
	  _assert2["default"].ok(this instanceof LeapManager);

	  var Emitter = __webpack_require__(2284).Emitter;
	  _assert2["default"].ok(emitter instanceof Emitter);

	  this.emitter = emitter;
	  this.entryStack = [new FunctionEntry(emitter.finalLoc)];
	}

	var LMp = LeapManager.prototype;
	exports.LeapManager = LeapManager;

	LMp.withEntry = function (entry, callback) {
	  _assert2["default"].ok(entry instanceof Entry);
	  this.entryStack.push(entry);
	  try {
	    callback.call(this.emitter);
	  } finally {
	    var popped = this.entryStack.pop();
	    _assert2["default"].strictEqual(popped, entry);
	  }
	};

	LMp._findLeapLocation = function (property, label) {
	  for (var i = this.entryStack.length - 1; i >= 0; --i) {
	    var entry = this.entryStack[i];
	    var loc = entry[property];
	    if (loc) {
	      if (label) {
	        if (entry.label && entry.label.name === label.name) {
	          return loc;
	        }
	      } else if (entry instanceof LabeledEntry) {
	        // Ignore LabeledEntry entries unless we are actually breaking to
	        // a label.
	      } else {
	          return loc;
	        }
	    }
	  }

	  return null;
	};

	LMp.getBreakLoc = function (label) {
	  return this._findLeapLocation("breakLoc", label);
	};

	LMp.getContinueLoc = function (label) {
	  return this._findLeapLocation("continueLoc", label);
	};

/***/ },
/* 6638 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */

	"use strict";

	var _interopRequireDefault = __webpack_require__(58)["default"];

	var _interopRequireWildcard = __webpack_require__(32)["default"];

	var _assert = __webpack_require__(725);

	var _assert2 = _interopRequireDefault(_assert);

	var _babelTypes = __webpack_require__(36);

	var t = _interopRequireWildcard(_babelTypes);

	var m = __webpack_require__(2324).makeAccessor();

	var hasOwn = Object.prototype.hasOwnProperty;

	function makePredicate(propertyName, knownTypes) {
	  function onlyChildren(node) {
	    t.assertNode(node);

	    // Assume no side effects until we find out otherwise.
	    var result = false;

	    function check(child) {
	      if (result) {
	        // Do nothing.
	      } else if (Array.isArray(child)) {
	          child.some(check);
	        } else if (t.isNode(child)) {
	          _assert2["default"].strictEqual(result, false);
	          result = predicate(child);
	        }
	      return result;
	    }

	    var keys = t.VISITOR_KEYS[node.type];
	    if (keys) {
	      for (var i = 0; i < keys.length; i++) {
	        var key = keys[i];
	        var child = node[key];
	        check(child);
	      }
	    }

	    return result;
	  }

	  function predicate(node) {
	    t.assertNode(node);

	    var meta = m(node);
	    if (hasOwn.call(meta, propertyName)) return meta[propertyName];

	    // Certain types are "opaque," which means they have no side
	    // effects or leaps and we don't care about their subexpressions.
	    if (hasOwn.call(opaqueTypes, node.type)) return meta[propertyName] = false;

	    if (hasOwn.call(knownTypes, node.type)) return meta[propertyName] = true;

	    return meta[propertyName] = onlyChildren(node);
	  }

	  predicate.onlyChildren = onlyChildren;

	  return predicate;
	}

	var opaqueTypes = {
	  FunctionExpression: true
	};

	// These types potentially have side effects regardless of what side
	// effects their subexpressions have.
	var sideEffectTypes = {
	  CallExpression: true, // Anything could happen!
	  ForInStatement: true, // Modifies the key variable.
	  UnaryExpression: true, // Think delete.
	  BinaryExpression: true, // Might invoke .toString() or .valueOf().
	  AssignmentExpression: true, // Side-effecting by definition.
	  UpdateExpression: true, // Updates are essentially assignments.
	  NewExpression: true // Similar to CallExpression.
	};

	// These types are the direct cause of all leaps in control flow.
	var leapTypes = {
	  YieldExpression: true,
	  BreakStatement: true,
	  ContinueStatement: true,
	  ReturnStatement: true,
	  ThrowStatement: true
	};

	// All leap types are also side effect types.
	for (var type in leapTypes) {
	  if (hasOwn.call(leapTypes, type)) {
	    sideEffectTypes[type] = leapTypes[type];
	  }
	}

	exports.hasSideEffects = makePredicate("hasSideEffects", sideEffectTypes);
	exports.containsLeap = makePredicate("containsLeap", leapTypes);

/***/ },
/* 6639 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */

	"use strict";

	var _interopRequireDefault = __webpack_require__(58)["default"];

	var _interopRequireWildcard = __webpack_require__(32)["default"];

	var _assert = __webpack_require__(725);

	var _assert2 = _interopRequireDefault(_assert);

	var _babelTypes = __webpack_require__(36);

	var t = _interopRequireWildcard(_babelTypes);

	var _hoist = __webpack_require__(6636);

	var _emit = __webpack_require__(2284);

	var _util = __webpack_require__(2285);

	var util = _interopRequireWildcard(_util);

	var getMarkInfo = __webpack_require__(2324).makeAccessor();

	exports.visitor = {
	  Function: {
	    exit: function exit(path, state) {
	      var node = path.node;

	      if (node.generator) {
	        if (node.async) {
	          // Async generator
	          if (state.opts.asyncGenerators === false) return;
	        } else {
	          // Plain generator
	          if (state.opts.generators === false) return;
	        }
	      } else if (node.async) {
	        // Async function
	        if (state.opts.async === false) return;
	      } else {
	        // Not a generator or async function.
	        return;
	      }

	      var contextId = path.scope.generateUidIdentifier("context");
	      var argsId = path.scope.generateUidIdentifier("args");

	      path.ensureBlock();
	      var bodyBlockPath = path.get("body");

	      if (node.async) {
	        bodyBlockPath.traverse(awaitVisitor);
	      }

	      bodyBlockPath.traverse(functionSentVisitor, {
	        context: contextId
	      });

	      var outerBody = [];
	      var innerBody = [];

	      bodyBlockPath.get("body").forEach(function (childPath) {
	        var node = childPath.node;
	        if (node && node._blockHoist != null) {
	          outerBody.push(node);
	        } else {
	          innerBody.push(node);
	        }
	      });

	      if (outerBody.length > 0) {
	        // Only replace the inner body if we actually hoisted any statements
	        // to the outer body.
	        bodyBlockPath.node.body = innerBody;
	      }

	      var outerFnExpr = getOuterFnExpr(path);
	      // Note that getOuterFnExpr has the side-effect of ensuring that the
	      // function has a name (so node.id will always be an Identifier), even
	      // if a temporary name has to be synthesized.
	      t.assertIdentifier(node.id);
	      var innerFnId = t.identifier(node.id.name + "$");

	      // Turn all declarations into vars, and replace the original
	      // declarations with equivalent assignment expressions.
	      var vars = _hoist.hoist(path);

	      var didRenameArguments = renameArguments(path, argsId);
	      if (didRenameArguments) {
	        vars = vars || t.variableDeclaration("var", []);
	        vars.declarations.push(t.variableDeclarator(argsId, t.identifier("arguments")));
	      }

	      var emitter = new _emit.Emitter(contextId);
	      emitter.explode(path.get("body"));

	      if (vars && vars.declarations.length > 0) {
	        outerBody.push(vars);
	      }

	      var wrapArgs = [emitter.getContextFunction(innerFnId),
	      // Async functions that are not generators don't care about the
	      // outer function because they don't need it to be marked and don't
	      // inherit from its .prototype.
	      node.generator ? outerFnExpr : t.nullLiteral(), t.thisExpression()];

	      var tryLocsList = emitter.getTryLocsList();
	      if (tryLocsList) {
	        wrapArgs.push(tryLocsList);
	      }

	      var wrapCall = t.callExpression(util.runtimeProperty(node.async ? "async" : "wrap"), wrapArgs);

	      outerBody.push(t.returnStatement(wrapCall));
	      node.body = t.blockStatement(outerBody);

	      var wasGeneratorFunction = node.generator;
	      if (wasGeneratorFunction) {
	        node.generator = false;
	      }

	      if (node.async) {
	        node.async = false;
	      }

	      if (wasGeneratorFunction && t.isExpression(node)) {
	        path.replaceWith(t.callExpression(util.runtimeProperty("mark"), [node]));
	      }
	    }
	  }
	};

	// Given a NodePath for a Function, return an Expression node that can be
	// used to refer reliably to the function object from inside the function.
	// This expression is essentially a replacement for arguments.callee, with
	// the key advantage that it works in strict mode.
	function getOuterFnExpr(funPath) {
	  var node = funPath.node;
	  t.assertFunction(node);

	  if (!node.id) {
	    // Default-exported function declarations, and function expressions may not
	    // have a name to reference, so we explicitly add one.
	    node.id = funPath.scope.parent.generateUidIdentifier("callee");
	  }

	  if (node.generator && // Non-generator functions don't need to be marked.
	  t.isFunctionDeclaration(node)) {
	    var pp = funPath.findParent(function (path) {
	      return path.isProgram() || path.isBlockStatement();
	    });

	    if (!pp) {
	      return node.id;
	    }

	    var markDecl = getRuntimeMarkDecl(pp);
	    var markedArray = markDecl.declarations[0].id;
	    var funDeclIdArray = markDecl.declarations[0].init.callee.object;
	    t.assertArrayExpression(funDeclIdArray);

	    var index = funDeclIdArray.elements.length;
	    funDeclIdArray.elements.push(node.id);

	    return t.memberExpression(markedArray, t.numericLiteral(index), true);
	  }

	  return node.id;
	}

	function getRuntimeMarkDecl(blockPath) {
	  var block = blockPath.node;
	  _assert2["default"].ok(Array.isArray(block.body));

	  var info = getMarkInfo(block);
	  if (info.decl) {
	    return info.decl;
	  }

	  info.decl = t.variableDeclaration("var", [t.variableDeclarator(blockPath.scope.generateUidIdentifier("marked"), t.callExpression(t.memberExpression(t.arrayExpression([]), t.identifier("map"), false), [util.runtimeProperty("mark")]))]);

	  blockPath.unshiftContainer("body", info.decl);

	  return info.decl;
	}

	function renameArguments(funcPath, argsId) {
	  var state = {
	    didRenameArguments: false,
	    argsId: argsId
	  };

	  funcPath.traverse(argumentsVisitor, state);

	  // If the traversal replaced any arguments references, then we need to
	  // alias the outer function's arguments binding (be it the implicit
	  // arguments object or some other parameter or variable) to the variable
	  // named by argsId.
	  return state.didRenameArguments;
	}

	var argumentsVisitor = {
	  "FunctionExpression|FunctionDeclaration": function FunctionExpressionFunctionDeclaration(path) {
	    path.skip();
	  },

	  Identifier: function Identifier(path, state) {
	    if (path.node.name === "arguments" && util.isReference(path)) {
	      path.replaceWith(state.argsId);
	      state.didRenameArguments = true;
	    }
	  }
	};

	var functionSentVisitor = {
	  MetaProperty: function MetaProperty(path) {
	    var node = path.node;

	    if (node.meta.name === "function" && node.property.name === "sent") {
	      path.replaceWith(t.memberExpression(this.context, t.identifier("_sent")));
	    }
	  }
	};

	var awaitVisitor = {
	  Function: function Function(path) {
	    path.skip(); // Don't descend into nested function scopes.
	  },

	  AwaitExpression: function AwaitExpression(path) {
	    // Convert await expressions to yield expressions.
	    var argument = path.node.argument;

	    // Transforming `await x` to `yield regeneratorRuntime.awrap(x)`
	    // causes the argument to be wrapped in such a way that the runtime
	    // can distinguish between awaited and merely yielded values.
	    path.replaceWith(t.yieldExpression(t.callExpression(util.runtimeProperty("awrap"), [argument]), false));
	  }
	};

/***/ },
/* 6640 */
[7030, 6650],
/* 6641 */
[7032, 6652],
/* 6642 */
[7033, 6653],
/* 6643 */
[7034, 6654],
/* 6644 */
[7035, 6655],
/* 6645 */
[7038, 6658],
/* 6646 */
[7039, 6657],
/* 6647 */
[7040, 6643, 6642, 6641],
/* 6648 */
1821,
/* 6649 */
[7042, 6682, 6681, 6674],
/* 6650 */
[7043, 6676],
/* 6651 */
[7044, 128],
/* 6652 */
[7045, 128],
/* 6653 */
[7046, 128, 6677],
/* 6654 */
[7047, 128, 6678],
/* 6655 */
[7048, 1262, 276],
/* 6656 */
[7049, 6679, 276],
/* 6657 */
[7051, 1262, 276],
/* 6658 */
[7052, 1262, 6680, 276],
/* 6659 */
2441,
/* 6660 */
2442,
/* 6661 */
[7054, 1254, 413],
/* 6662 */
[7055, 6659],
/* 6663 */
[7057, 128],
/* 6664 */
[7061, 1254],
/* 6665 */
[7062, 1254],
/* 6666 */
514,
/* 6667 */
[7063, 128, 1260, 1261, 1258, 413],
/* 6668 */
1304,
/* 6669 */
[7065, 128, 504],
/* 6670 */
[7071, 6671, 1255],
/* 6671 */
1309,
/* 6672 */
[7073, 1255],
/* 6673 */
[7075, 6661, 413, 713, 276],
/* 6674 */
[7076, 2288, 6673, 276],
/* 6675 */
[7077, 6660, 6668, 713, 504, 2291],
/* 6676 */
[7078, 711],
/* 6677 */
[7079, 504, 1259],
/* 6678 */
[7080, 1259, 2290],
/* 6679 */
[7081, 6672, 1259],
/* 6680 */
345,
/* 6681 */
[7083, 6670, 2291],
/* 6682 */
[7085, 6675, 713],
/* 6683 */
[7087, 340, 97, 58, 32, 341, 36],
/* 6684 */
[7090, 97, 32, 58, 36, 341],
/* 6685 */
2469,
/* 6686 */
[7091, 97, 58, 505],
/* 6687 */
[7092, 32, 36],
/* 6688 */
[7093, 97],
/* 6689 */
[7094, 97, 58, 32, 341, 36],
/* 6690 */
[7096, 97, 32, 6692, 36],
/* 6691 */
[7097, 97, 32, 36],
/* 6692 */
[7098, 32, 2287, 36, 6691],
/* 6693 */
[7099, 97, 58, 32, 1265, 36],
/* 6694 */
[7100, 340, 97, 32, 36],
/* 6695 */
2479,
/* 6696 */
[7102, 97, 58, 32, 2297, 6694, 341, 36],
/* 6697 */
[7103, 97, 6695],
/* 6698 */
[7104, 97, 58, 32, 6701, 505, 341, 6817, 36],
/* 6699 */
[7107, 340, 58, 32, 2299, 36],
/* 6700 */
[7108, 97, 1253, 32, 58, 2298, 1264, 36, 6742],
/* 6701 */
[7019, 58, 6714, 2308, 6713, 6712, 6702],
/* 6702 */
[7020, 6704, 6703, 6707, 6705, 6709],
/* 6703 */
2377,
/* 6704 */
2378,
/* 6705 */
[7021, 6706],
/* 6706 */
2380,
/* 6707 */
[7022, 6708],
/* 6708 */
2380,
/* 6709 */
2383,
/* 6710 */
2384,
/* 6711 */
[7023, 2300],
/* 6712 */
[7024, 6710, 2300, 6711],
/* 6713 */
2387,
/* 6714 */
[7025, 6715],
/* 6715 */
2389,
/* 6716 */
[7125, 6717],
/* 6717 */
[7126, 6718],
/* 6718 */
2508,
/* 6719 */
[7109, 7008],
/* 6720 */
2486,
/* 6721 */
1324,
/* 6722 */
746,
/* 6723 */
2519,
/* 6724 */
[7132, 716],
/* 6725 */
[7135, 6721, 6722, 2302, 6728, 6737, 6738, 6739, 715, 414],
/* 6726 */
1327,
/* 6727 */
[7137, 6734],
/* 6728 */
[7139, 6727, 716],
/* 6729 */
[7141, 6736],
/* 6730 */
1334,
/* 6731 */
2532,
/* 6732 */
2533,
/* 6733 */
[7152, 2303, 1268, 2301],
/* 6734 */
[7154, 6741],
/* 6735 */
[7156, 2301],
/* 6736 */
2547,
/* 6737 */
2548,
/* 6738 */
[7163, 6732],
/* 6739 */
2550,
/* 6740 */
[7168, 2306, 715, 1267, 506, 6747],
/* 6741 */
[7169, 414],
/* 6742 */
[7171, 6725, 2303, 1268],
/* 6743 */
[7175, 414],
/* 6744 */
[7176, 6743, 714],
/* 6745 */
[7180, 714],
/* 6746 */
[7183, 2307, 6723, 6735],
/* 6747 */
[7186, 2306, 715, 1267, 506, 414],
/* 6748 */
[7188, 6731, 716],
/* 6749 */
1345,
/* 6750 */
[7027, 6751],
/* 6751 */
2392,
/* 6752 */
[7111, 97, 6640, 58, 32, 6810, 6809, 6811, 6812, 505, 36],
/* 6753 */
[7112, 32, 58, 36, 1269, 277],
/* 6754 */
[7113, 58, 277],
/* 6755 */
[7114, 58, 277],
/* 6756 */
[7115, 58, 277],
/* 6757 */
[7117, 277, 6753, 6754, 6756, 6758, 6759, 6755],
/* 6758 */
[7118, 58, 277],
/* 6759 */
[7119, 58, 277],
/* 6760 */
[7120, 32, 36],
/* 6761 */
[7122, 32, 36],
/* 6762 */
[7124, 97, 58, 32, 2309, 6765, 36, 1269],
/* 6763 */
2384,
/* 6764 */
[7023, 2310],
/* 6765 */
[7024, 6763, 2310, 6764],
/* 6766 */
2510,
/* 6767 */
1322,
/* 6768 */
[7127, 6775, 6788, 2318, 6805],
/* 6769 */
[7128, 6770],
/* 6770 */
[7129, 2311, 6778, 6795],
/* 6771 */
[7131, 6791, 717],
/* 6772 */
1324,
/* 6773 */
2518,
/* 6774 */
[7133, 6777, 718],
/* 6775 */
[7134, 6783, 6784, 1270, 2323, 6815],
/* 6776 */
[7135, 6772, 2311, 6774, 2313, 6801, 6802, 6803, 280, 151],
/* 6777 */
1327,
/* 6778 */
[7136, 2313, 6792],
/* 6779 */
[7138, 2312, 2322],
/* 6780 */
[7141, 6800],
/* 6781 */
[7143, 6796, 6797, 6798, 280, 6813],
/* 6782 */
[7144, 2315, 279],
/* 6783 */
[7145, 6782, 6799, 279],
/* 6784 */
[7146, 2314, 2315, 6786, 280, 2319, 2320, 6767, 279, 2321],
/* 6785 */
[7147, 2314, 2321],
/* 6786 */
1335,
/* 6787 */
749,
/* 6788 */
[7148, 6780, 6790, 6794],
/* 6789 */
2533,
/* 6790 */
[7150, 151],
/* 6791 */
[7151, 151],
/* 6792 */
[7153, 2317, 415, 279],
/* 6793 */
[7154, 279],
/* 6794 */
[7155, 6771, 717],
/* 6795 */
[7157, 1270, 280],
/* 6796 */
[7158, 6773],
/* 6797 */
2543,
/* 6798 */
[7159, 718],
/* 6799 */
[7161, 2320, 6814],
/* 6800 */
2547,
/* 6801 */
2548,
/* 6802 */
[7163, 6789],
/* 6803 */
2550,
/* 6804 */
[7168, 1273, 280, 1272, 415, 2322],
/* 6805 */
2552,
/* 6806 */
[7171, 6776, 1270, 2318],
/* 6807 */
[7175, 151],
/* 6808 */
[7176, 6807, 278],
/* 6809 */
[7177, 278],
/* 6810 */
[7178, 6779, 1273, 278],
/* 6811 */
[7179, 151],
/* 6812 */
[7180, 278],
/* 6813 */
[7181, 415, 278],
/* 6814 */
[7187, 718, 279],
/* 6815 */
[7189, 2316, 6785, 2319],
/* 6816 */
2504,
/* 6817 */
745,
/* 6818 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    visitor: {
	      CallExpression: function CallExpression(path) {
	        if (path.get("callee").matchesPattern("console", true)) {
	          path.remove();
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 6819 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    visitor: {
	      DebuggerStatement: function DebuggerStatement(path) {
	        path.remove();
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 6820 */
/***/ function(module, exports) {

	"use strict";

	module.exports = {
	  builtins: {
	    Symbol: "symbol",
	    Promise: "promise",
	    Map: "map",
	    WeakMap: "weak-map",
	    Set: "set",
	    WeakSet: "weak-set",
	    setImmediate: "set-immediate",
	    clearImmediate: "clear-immediate"
	  },

	  methods: {
	    Array: {
	      concat: "array/concat",
	      copyWithin: "array/copy-within",
	      entries: "array/entries",
	      every: "array/every",
	      fill: "array/fill",
	      filter: "array/filter",
	      findIndex: "array/find-index",
	      find: "array/find",
	      forEach: "array/for-each",
	      from: "array/from",
	      includes: "array/includes",
	      indexOf: "array/index-of",
	      join: "array/join",
	      keys: "array/keys",
	      lastIndexOf: "array/last-index-of",
	      map: "array/map",
	      of: "array/of",
	      pop: "array/pop",
	      push: "array/push",
	      reduceRight: "array/reduce-right",
	      reduce: "array/reduce",
	      reverse: "array/reverse",
	      shift: "array/shift",
	      slice: "array/slice",
	      some: "array/some",
	      sort: "array/sort",
	      splice: "array/splice",
	      unshift: "array/unshift",
	      values: "array/values"
	    },

	    JSON: {
	      stringify: "json/stringify"
	    },

	    Object: {
	      assign: "object/assign",
	      create: "object/create",
	      defineProperties: "object/define-properties",
	      defineProperty: "object/define-property",
	      entries: "object/entries",
	      freeze: "object/freeze",
	      getOwnPropertyDescriptor: "object/get-own-property-descriptor",
	      getOwnPropertyDescriptors: "object/get-own-property-descriptors",
	      getOwnPropertyNames: "object/get-own-property-names",
	      getOwnPropertySymbols: "object/get-own-property-symbols",
	      getPrototypeOf: "object/get-prototype-of",
	      isExtensible: "object/is-extensible",
	      isFrozen: "object/is-frozen",
	      isSealed: "object/is-sealed",
	      is: "object/is",
	      keys: "object/keys",
	      preventExtensions: "object/prevent-extensions",
	      seal: "object/seal",
	      setPrototypeOf: "object/set-prototype-of",
	      values: "object/values"
	    },

	    RegExp: {
	      escape: "regexp/escape"
	    },

	    Math: {
	      acosh: "math/acosh",
	      asinh: "math/asinh",
	      atanh: "math/atanh",
	      cbrt: "math/cbrt",
	      clz32: "math/clz32",
	      cosh: "math/cosh",
	      expm1: "math/expm1",
	      fround: "math/fround",
	      hypot: "math/hypot",
	      imul: "math/imul",
	      log10: "math/log10",
	      log1p: "math/log1p",
	      log2: "math/log2",
	      sign: "math/sign",
	      sinh: "math/sinh",
	      tanh: "math/tanh",
	      trunc: "math/trunc"
	    },

	    Symbol: {
	      "for": "symbol/for",
	      hasInstance: "symbol/has-instance",
	      isConcatSpreadable: "symbol/is-concat-spreadable",
	      iterator: "symbol/iterator",
	      keyFor: "symbol/key-for",
	      match: "symbol/match",
	      replace: "symbol/replace",
	      search: "symbol/search",
	      species: "symbol/species",
	      split: "symbol/split",
	      toPrimitive: "symbol/to-primitive",
	      toStringTag: "symbol/to-string-tag",
	      unscopables: "symbol/unscopables"
	    },

	    String: {
	      at: "string/at",
	      codePointAt: "string/code-point-at",
	      endsWith: "string/ends-with",
	      fromCodePoint: "string/from-code-point",
	      includes: "string/includes",
	      padLeft: "string/pad-left",
	      padRight: "string/pad-right",
	      raw: "string/raw",
	      repeat: "string/repeat",
	      startsWith: "string/starts-with",
	      trim: "string/trim",
	      trimLeft: "string/trim-left",
	      trimRight: "string/trim-right"
	    },

	    Number: {
	      EPSILON: "number/epsilon",
	      isFinite: "number/is-finite",
	      isInteger: "number/is-integer",
	      isNaN: "number/is-nan",
	      isSafeInteger: "number/is-safe-integer",
	      MAX_SAFE_INTEGER: "number/max-safe-integer",
	      MIN_SAFE_INTEGER: "number/min-safe-integer",
	      parseFloat: "number/parse-float",
	      parseInt: "number/parse-int"
	    },

	    Reflect: {
	      apply: "reflect/apply",
	      construct: "reflect/construct",
	      defineProperty: "reflect/define-property",
	      deleteProperty: "reflect/delete-property",
	      enumerate: "reflect/enumerate",
	      getOwnPropertyDescriptor: "reflect/get-own-property-descriptor",
	      getPrototypeOf: "reflect/get-prototype-of",
	      get: "reflect/get",
	      has: "reflect/has",
	      isExtensible: "reflect/is-extensible",
	      ownKeys: "reflect/own-keys",
	      preventExtensions: "reflect/prevent-extensions",
	      setPrototypeOf: "reflect/set-prototype-of",
	      set: "reflect/set"
	    }
	  }
	};

/***/ },
/* 6821 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(6822)["default"];

	exports.__esModule = true;

	var _definitions = __webpack_require__(6820);

	var _definitions2 = _interopRequireDefault(_definitions);

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  var RUNTIME_MODULE_NAME = "babel-runtime";

	  function has(obj, key) {
	    return Object.prototype.hasOwnProperty.call(obj, key);
	  }

	  var HELPER_BLACKLIST = ["interopRequireWildcard", "interopRequireDefault"];

	  return {
	    pre: function pre(file) {
	      file.set("helperGenerator", function (name) {
	        if (HELPER_BLACKLIST.indexOf(name) < 0) {
	          return file.addImport(RUNTIME_MODULE_NAME + "/helpers/" + name, "default", name);
	        }
	      });

	      this.setDynamic("regeneratorIdentifier", function () {
	        return file.addImport(RUNTIME_MODULE_NAME + "/regenerator", "default", "regeneratorRuntime");
	      });
	    },

	    visitor: {
	      ReferencedIdentifier: function ReferencedIdentifier(path, state) {
	        var node = path.node;
	        var parent = path.parent;
	        var scope = path.scope;

	        if (node.name === "regeneratorRuntime" && state.opts.regenerator !== false) {
	          path.replaceWith(state.get("regeneratorIdentifier"));
	          return;
	        }

	        if (state.opts.polyfill === false) return;

	        if (t.isMemberExpression(parent)) return;
	        if (!has(_definitions2["default"].builtins, node.name)) return;
	        if (scope.getBindingIdentifier(node.name)) return;

	        // Symbol() -> _core.Symbol(); new Promise -> new _core.Promise
	        path.replaceWith(state.addImport(RUNTIME_MODULE_NAME + "/core-js/" + _definitions2["default"].builtins[node.name], "default", node.name));
	      },

	      // arr[Symbol.iterator]() -> _core.$for.getIterator(arr)
	      CallExpression: function CallExpression(path, state) {
	        if (state.opts.polyfill === false) return;

	        // we can't compile this
	        if (path.node.arguments.length) return;

	        var callee = path.node.callee;
	        if (!t.isMemberExpression(callee)) return;
	        if (!callee.computed) return;
	        if (!path.get("callee.property").matchesPattern("Symbol.iterator")) return;

	        path.replaceWith(t.callExpression(state.addImport(RUNTIME_MODULE_NAME + "/core-js/get-iterator", "default", "getIterator"), [callee.object]));
	      },

	      // Symbol.iterator in arr -> core.$for.isIterable(arr)
	      BinaryExpression: function BinaryExpression(path, state) {
	        if (state.opts.polyfill === false) return;

	        if (path.node.operator !== "in") return;
	        if (!path.get("left").matchesPattern("Symbol.iterator")) return;

	        path.replaceWith(t.callExpression(state.addImport(RUNTIME_MODULE_NAME + "/core-js/is-iterable", "default", "isIterable"), [path.node.right]));
	      },

	      // Array.from -> _core.Array.from
	      MemberExpression: {
	        enter: function enter(path, state) {
	          if (state.opts.polyfill === false) return;
	          if (!path.isReferenced()) return;

	          var node = path.node;

	          var obj = node.object;
	          var prop = node.property;

	          if (!t.isReferenced(obj, node)) return;
	          if (node.computed) return;
	          if (!has(_definitions2["default"].methods, obj.name)) return;

	          var methods = _definitions2["default"].methods[obj.name];
	          if (!has(methods, prop.name)) return;

	          // doesn't reference the global
	          if (path.scope.getBindingIdentifier(obj.name)) return;

	          // special case Object.defineProperty to not use core-js when using string keys
	          if (obj.name === "Object" && prop.name === "defineProperty" && path.parentPath.isCallExpression()) {
	            var call = path.parentPath.node;
	            if (call.arguments.length === 3 && t.isLiteral(call.arguments[1])) return;
	          }

	          path.replaceWith(state.addImport(RUNTIME_MODULE_NAME + "/core-js/" + methods[prop.name], "default", obj.name + "$" + prop.name));
	        },

	        exit: function exit(path, state) {
	          if (state.opts.polyfill === false) return;
	          if (!path.isReferenced()) return;

	          var node = path.node;

	          var obj = node.object;

	          if (!has(_definitions2["default"].builtins, obj.name)) return;
	          if (path.scope.getBindingIdentifier(obj.name)) return;

	          path.replaceWith(t.memberExpression(state.addImport(RUNTIME_MODULE_NAME + "/core-js/" + _definitions2["default"].builtins[obj.name], "default", obj.name), node.property, node.computed));
	        }
	      }
	    }
	  };
	};

	exports.definitions = _definitions2["default"];

/***/ },
/* 6822 */
5,
/* 6823 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    visitor: {
	      BinaryExpression: function BinaryExpression(path) {
	        var node = path.node;

	        var op = node.operator;
	        if (op !== "===" && op !== "!==") return;

	        var left = path.get("left");
	        var right = path.get("right");
	        if (left.baseTypeStrictlyMatches(right)) {
	          node.operator = node.operator.slice(0, -1);
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 6824 */
[7030, 6834],
/* 6825 */
[7032, 6836],
/* 6826 */
[7033, 6837],
/* 6827 */
[7034, 6838],
/* 6828 */
[7035, 6839],
/* 6829 */
[7038, 6842],
/* 6830 */
[7039, 6841],
/* 6831 */
[7040, 6827, 6826, 6825],
/* 6832 */
1821,
/* 6833 */
[7042, 6866, 6865, 6858],
/* 6834 */
[7043, 6860],
/* 6835 */
[7044, 129],
/* 6836 */
[7045, 129],
/* 6837 */
[7046, 129, 6861],
/* 6838 */
[7047, 129, 6862],
/* 6839 */
[7048, 1283, 281],
/* 6840 */
[7049, 6863, 281],
/* 6841 */
[7051, 1283, 281],
/* 6842 */
[7052, 1283, 6864, 281],
/* 6843 */
2441,
/* 6844 */
2442,
/* 6845 */
[7054, 1275, 416],
/* 6846 */
[7055, 6843],
/* 6847 */
[7057, 129],
/* 6848 */
[7061, 1275],
/* 6849 */
[7062, 1275],
/* 6850 */
514,
/* 6851 */
[7063, 129, 1281, 1282, 1279, 416],
/* 6852 */
1304,
/* 6853 */
[7065, 129, 507],
/* 6854 */
[7071, 6855, 1276],
/* 6855 */
1309,
/* 6856 */
[7073, 1276],
/* 6857 */
[7075, 6845, 416, 721, 281],
/* 6858 */
[7076, 2328, 6857, 281],
/* 6859 */
[7077, 6844, 6852, 721, 507, 2331],
/* 6860 */
[7078, 719],
/* 6861 */
[7079, 507, 1280],
/* 6862 */
[7080, 1280, 2330],
/* 6863 */
[7081, 6856, 1280],
/* 6864 */
345,
/* 6865 */
[7083, 6854, 2331],
/* 6866 */
[7085, 6859, 721],
/* 6867 */
[7111, 87, 6824, 81, 52, 6964, 6963, 6965, 2357, 508, 68],
/* 6868 */
[7112, 52, 81, 68, 1284, 282],
/* 6869 */
[7113, 81, 282],
/* 6870 */
[7114, 81, 282],
/* 6871 */
[7115, 81, 282],
/* 6872 */
[7117, 282, 6868, 6869, 6871, 6873, 6874, 6870],
/* 6873 */
[7118, 81, 282],
/* 6874 */
[7119, 81, 282],
/* 6875 */
[7120, 52, 68],
/* 6876 */
[7122, 52, 68],
/* 6877 */
[7124, 87, 81, 52, 2336, 2343, 68, 1284],
/* 6878 */
[7087, 342, 87, 81, 52, 343, 68],
/* 6879 */
[7090, 87, 52, 81, 68, 343],
/* 6880 */
2469,
/* 6881 */
[7091, 87, 81, 508],
/* 6882 */
[7092, 52, 68],
/* 6883 */
[7093, 87],
/* 6884 */
[7094, 87, 81, 52, 343, 68],
/* 6885 */
[7096, 87, 52, 6887, 68],
/* 6886 */
[7097, 87, 52, 68],
/* 6887 */
[7098, 52, 2327, 68, 6886],
/* 6888 */
[7099, 87, 81, 52, 1287, 68],
/* 6889 */
[7100, 342, 87, 52, 68],
/* 6890 */
2479,
/* 6891 */
[7102, 87, 81, 52, 2338, 6889, 343, 68],
/* 6892 */
[7103, 87, 6890],
/* 6893 */
[7104, 87, 81, 52, 6896, 508, 343, 6908, 68],
/* 6894 */
[7107, 342, 81, 52, 2340, 68],
/* 6895 */
[7108, 87, 2326, 52, 81, 2339, 1286, 68, 2356],
/* 6896 */
[7019, 81, 6906, 2341, 6905, 2343, 6897],
/* 6897 */
[7020, 6899, 6898, 6902, 6900, 6904],
/* 6898 */
2377,
/* 6899 */
2378,
/* 6900 */
[7021, 6901],
/* 6901 */
2380,
/* 6902 */
[7022, 6903],
/* 6903 */
2380,
/* 6904 */
2383,
/* 6905 */
2387,
/* 6906 */
[7025, 6907],
/* 6907 */
2389,
/* 6908 */
745,
/* 6909 */
[7125, 6910],
/* 6910 */
[7126, 6911],
/* 6911 */
2508,
/* 6912 */
[7109, 7009],
/* 6913 */
2486,
/* 6914 */
[7027, 6915],
/* 6915 */
2392,
/* 6916 */
2384,
/* 6917 */
[7023, 2342],
/* 6918 */
2510,
/* 6919 */
1322,
/* 6920 */
[7127, 6928, 6940, 724, 6960],
/* 6921 */
[7128, 6922],
/* 6922 */
[7129, 2345, 6931, 6950],
/* 6923 */
[7131, 6944, 723],
/* 6924 */
1324,
/* 6925 */
2518,
/* 6926 */
2519,
/* 6927 */
[7132, 417],
/* 6928 */
[7134, 6935, 6936, 722, 2360, 6970],
/* 6929 */
[7135, 6924, 2345, 2346, 2348, 6956, 6957, 6958, 174, 152],
/* 6930 */
1327,
/* 6931 */
[7136, 2348, 6946],
/* 6932 */
[7138, 2347, 2359],
/* 6933 */
[7143, 6951, 6952, 6953, 174, 6966],
/* 6934 */
[7144, 2351, 284],
/* 6935 */
[7145, 6934, 6954, 284],
/* 6936 */
[7146, 2349, 2351, 6938, 174, 2353, 2354, 6919, 284, 2355],
/* 6937 */
[7147, 2349, 2355],
/* 6938 */
1335,
/* 6939 */
749,
/* 6940 */
[7148, 2350, 6943, 6948],
/* 6941 */
2532,
/* 6942 */
2533,
/* 6943 */
[7150, 152],
/* 6944 */
[7151, 152],
/* 6945 */
[7152, 722, 724, 2344],
/* 6946 */
[7153, 1288, 344, 284],
/* 6947 */
[7154, 284],
/* 6948 */
[7155, 6923, 723],
/* 6949 */
[7156, 2344],
/* 6950 */
[7157, 722, 174],
/* 6951 */
[7158, 6925],
/* 6952 */
2543,
/* 6953 */
[7159, 417],
/* 6954 */
[7161, 2354, 6968],
/* 6955 */
2547,
/* 6956 */
2548,
/* 6957 */
[7163, 6942],
/* 6958 */
2550,
/* 6959 */
[7168, 1291, 174, 1290, 344, 2359],
/* 6960 */
2552,
/* 6961 */
[7175, 152],
/* 6962 */
[7176, 6961, 283],
/* 6963 */
[7177, 283],
/* 6964 */
[7178, 6932, 1291, 283],
/* 6965 */
[7179, 152],
/* 6966 */
[7181, 344, 283],
/* 6967 */
[7183, 2358, 6926, 6949],
/* 6968 */
[7187, 417, 284],
/* 6969 */
[7188, 6941, 417],
/* 6970 */
[7189, 2352, 6937, 2353],
/* 6971 */
2504,
/* 6972 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  return {
	    visitor: {
	      ReferencedIdentifier: function ReferencedIdentifier(path) {
	        if (path.node.name === "undefined") {
	          path.replaceWith(t.unaryExpression("void", t.numericLiteral(0), true));
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 6973 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(6974)["default"];

	exports.__esModule = true;

	var _leven = __webpack_require__(6975);

	var _leven2 = _interopRequireDefault(_leven);

	exports["default"] = function (_ref) {
	  var messages = _ref.messages;

	  return {
	    visitor: {
	      ReferencedIdentifier: function ReferencedIdentifier(path) {
	        var node = path.node;
	        var scope = path.scope;

	        var binding = scope.getBinding(node.name);
	        if (binding && binding.kind === "type" && !path.parentPath.isFlow()) {
	          throw path.buildCodeFrameError(messages.get("undeclaredVariableType", node.name), ReferenceError);
	        }

	        if (scope.hasBinding(node.name)) return;

	        // get the closest declaration to offer as a suggestion
	        // the variable name may have just been mistyped

	        var bindings = scope.getAllBindings();

	        var closest = undefined;
	        var shortest = -1;

	        for (var _name in bindings) {
	          var distance = _leven2["default"](node.name, _name);
	          if (distance <= 0 || distance > 3) continue;
	          if (distance <= shortest) continue;

	          closest = _name;
	          shortest = distance;
	        }

	        var msg = undefined;
	        if (closest) {
	          msg = messages.get("undeclaredVariableSuggestion", node.name, closest);
	        } else {
	          msg = messages.get("undeclaredVariable", node.name);
	        }

	        //

	        throw path.buildCodeFrameError(msg, ReferenceError);
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 6974 */
5,
/* 6975 */
/***/ function(module, exports) {

	'use strict';
	var arr = [];
	var charCodeCache = [];

	module.exports = function (a, b) {
		if (a === b) {
			return 0;
		}

		var aLen = a.length;
		var bLen = b.length;

		if (aLen === 0) {
			return bLen;
		}

		if (bLen === 0) {
			return aLen;
		}

		var bCharCode;
		var ret;
		var tmp;
		var tmp2;
		var i = 0;
		var j = 0;

		while (i < aLen) {
			charCodeCache[i] = a.charCodeAt(i);
			arr[i] = ++i;
		}

		while (j < bLen) {
			bCharCode = b.charCodeAt(j);
			tmp = j++;
			ret = j;

			for (i = 0; i < aLen; i++) {
				tmp2 = bCharCode === charCodeCache[i] ? tmp : tmp + 1;
				tmp = arr[i];
				ret = arr[i] = tmp > ret ? tmp2 > ret ? ret + 1 : tmp2 : tmp2 > tmp ? tmp + 1 : tmp2;
			}
		}

		return ret;
	};


/***/ },
/* 6976 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  plugins: [
	    __webpack_require__(1138),
	    __webpack_require__(962),
	    __webpack_require__(931),
	    __webpack_require__(865),
	    __webpack_require__(866),
	    __webpack_require__(892),
	    __webpack_require__(1052),
	    __webpack_require__(1098),
	    __webpack_require__(922),
	    __webpack_require__(930),
	    __webpack_require__(1120),
	    __webpack_require__(1144),
	    __webpack_require__(757),
	    __webpack_require__(1116),
	    __webpack_require__(1073),
	    __webpack_require__(926),
	    __webpack_require__(870),
	    __webpack_require__(1142),
	    __webpack_require__(982),
	    [__webpack_require__(1252), { async: false, asyncGenerators: false }],
	  ]
	};


/***/ },
/* 6977 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  plugins: [
	    __webpack_require__(2248),
	    __webpack_require__(2185),
	    __webpack_require__(761),
	    __webpack_require__(524),
	    __webpack_require__(2206),
	  ],
	  /*env: {
	    development: {
	      plugins: [
	        require("babel-plugin-transform-react-jsx-source")
	      ]
	    }
	  }*/
	};


/***/ },
/* 6978 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  presets: [
	    __webpack_require__(2361)
	  ],
	  plugins: [
	    __webpack_require__(1555),
	    __webpack_require__(2192)
	  ]
	};


/***/ },
/* 6979 */
/***/ function(module, exports) {

	module.exports = {
		"builtin": {
			"Array": false,
			"ArrayBuffer": false,
			"Boolean": false,
			"constructor": false,
			"DataView": false,
			"Date": false,
			"decodeURI": false,
			"decodeURIComponent": false,
			"encodeURI": false,
			"encodeURIComponent": false,
			"Error": false,
			"escape": false,
			"eval": false,
			"EvalError": false,
			"Float32Array": false,
			"Float64Array": false,
			"Function": false,
			"hasOwnProperty": false,
			"Infinity": false,
			"Int16Array": false,
			"Int32Array": false,
			"Int8Array": false,
			"isFinite": false,
			"isNaN": false,
			"isPrototypeOf": false,
			"JSON": false,
			"Map": false,
			"Math": false,
			"NaN": false,
			"Number": false,
			"Object": false,
			"parseFloat": false,
			"parseInt": false,
			"Promise": false,
			"propertyIsEnumerable": false,
			"Proxy": false,
			"RangeError": false,
			"ReferenceError": false,
			"Reflect": false,
			"RegExp": false,
			"Set": false,
			"String": false,
			"Symbol": false,
			"SyntaxError": false,
			"System": false,
			"toLocaleString": false,
			"toString": false,
			"TypeError": false,
			"Uint16Array": false,
			"Uint32Array": false,
			"Uint8Array": false,
			"Uint8ClampedArray": false,
			"undefined": false,
			"unescape": false,
			"URIError": false,
			"valueOf": false,
			"WeakMap": false,
			"WeakSet": false
		},
		"es5": {
			"Array": false,
			"Boolean": false,
			"constructor": false,
			"Date": false,
			"decodeURI": false,
			"decodeURIComponent": false,
			"encodeURI": false,
			"encodeURIComponent": false,
			"Error": false,
			"escape": false,
			"eval": false,
			"EvalError": false,
			"Float32Array": false,
			"Float64Array": false,
			"Function": false,
			"hasOwnProperty": false,
			"Infinity": false,
			"isFinite": false,
			"isNaN": false,
			"isPrototypeOf": false,
			"JSON": false,
			"Math": false,
			"NaN": false,
			"Number": false,
			"Object": false,
			"parseFloat": false,
			"parseInt": false,
			"propertyIsEnumerable": false,
			"RangeError": false,
			"ReferenceError": false,
			"RegExp": false,
			"String": false,
			"SyntaxError": false,
			"toLocaleString": false,
			"toString": false,
			"TypeError": false,
			"undefined": false,
			"unescape": false,
			"URIError": false,
			"valueOf": false
		},
		"es6": {
			"Array": false,
			"ArrayBuffer": false,
			"Boolean": false,
			"constructor": false,
			"DataView": false,
			"Date": false,
			"decodeURI": false,
			"decodeURIComponent": false,
			"encodeURI": false,
			"encodeURIComponent": false,
			"Error": false,
			"escape": false,
			"eval": false,
			"EvalError": false,
			"Float32Array": false,
			"Float64Array": false,
			"Function": false,
			"hasOwnProperty": false,
			"Infinity": false,
			"Int16Array": false,
			"Int32Array": false,
			"Int8Array": false,
			"isFinite": false,
			"isNaN": false,
			"isPrototypeOf": false,
			"JSON": false,
			"Map": false,
			"Math": false,
			"NaN": false,
			"Number": false,
			"Object": false,
			"parseFloat": false,
			"parseInt": false,
			"Promise": false,
			"propertyIsEnumerable": false,
			"Proxy": false,
			"RangeError": false,
			"ReferenceError": false,
			"Reflect": false,
			"RegExp": false,
			"Set": false,
			"String": false,
			"Symbol": false,
			"SyntaxError": false,
			"System": false,
			"toLocaleString": false,
			"toString": false,
			"TypeError": false,
			"Uint16Array": false,
			"Uint32Array": false,
			"Uint8Array": false,
			"Uint8ClampedArray": false,
			"undefined": false,
			"unescape": false,
			"URIError": false,
			"valueOf": false,
			"WeakMap": false,
			"WeakSet": false
		},
		"browser": {
			"addEventListener": false,
			"alert": false,
			"AnalyserNode": false,
			"AnimationEvent": false,
			"applicationCache": false,
			"ApplicationCache": false,
			"ApplicationCacheErrorEvent": false,
			"atob": false,
			"Attr": false,
			"Audio": false,
			"AudioBuffer": false,
			"AudioBufferSourceNode": false,
			"AudioContext": false,
			"AudioDestinationNode": false,
			"AudioListener": false,
			"AudioNode": false,
			"AudioParam": false,
			"AudioProcessingEvent": false,
			"AutocompleteErrorEvent": false,
			"BarProp": false,
			"BatteryManager": false,
			"BeforeUnloadEvent": false,
			"BiquadFilterNode": false,
			"Blob": false,
			"blur": false,
			"btoa": false,
			"Cache": false,
			"caches": false,
			"CacheStorage": false,
			"cancelAnimationFrame": false,
			"CanvasGradient": false,
			"CanvasPattern": false,
			"CanvasRenderingContext2D": false,
			"CDATASection": false,
			"ChannelMergerNode": false,
			"ChannelSplitterNode": false,
			"CharacterData": false,
			"clearInterval": false,
			"clearTimeout": false,
			"clientInformation": false,
			"ClientRect": false,
			"ClientRectList": false,
			"ClipboardEvent": false,
			"close": false,
			"closed": false,
			"CloseEvent": false,
			"Comment": false,
			"CompositionEvent": false,
			"confirm": false,
			"console": false,
			"ConvolverNode": false,
			"crypto": false,
			"Crypto": false,
			"CryptoKey": false,
			"CSS": false,
			"CSSFontFaceRule": false,
			"CSSImportRule": false,
			"CSSKeyframeRule": false,
			"CSSKeyframesRule": false,
			"CSSMediaRule": false,
			"CSSPageRule": false,
			"CSSRule": false,
			"CSSRuleList": false,
			"CSSStyleDeclaration": false,
			"CSSStyleRule": false,
			"CSSStyleSheet": false,
			"CSSSupportsRule": false,
			"CSSUnknownRule": false,
			"CSSViewportRule": false,
			"CustomEvent": false,
			"DataTransfer": false,
			"DataTransferItem": false,
			"DataTransferItemList": false,
			"Debug": false,
			"defaultStatus": false,
			"defaultstatus": false,
			"DelayNode": false,
			"DeviceMotionEvent": false,
			"DeviceOrientationEvent": false,
			"devicePixelRatio": false,
			"dispatchEvent": false,
			"document": false,
			"Document": false,
			"DocumentFragment": false,
			"DocumentType": false,
			"DOMError": false,
			"DOMException": false,
			"DOMImplementation": false,
			"DOMParser": false,
			"DOMSettableTokenList": false,
			"DOMStringList": false,
			"DOMStringMap": false,
			"DOMTokenList": false,
			"DragEvent": false,
			"DynamicsCompressorNode": false,
			"Element": false,
			"ElementTimeControl": false,
			"ErrorEvent": false,
			"event": false,
			"Event": false,
			"EventSource": false,
			"EventTarget": false,
			"external": false,
			"fetch": false,
			"File": false,
			"FileError": false,
			"FileList": false,
			"FileReader": false,
			"find": false,
			"focus": false,
			"FocusEvent": false,
			"FontFace": false,
			"FormData": false,
			"frameElement": false,
			"frames": false,
			"GainNode": false,
			"Gamepad": false,
			"GamepadButton": false,
			"GamepadEvent": false,
			"getComputedStyle": false,
			"getSelection": false,
			"HashChangeEvent": false,
			"Headers": false,
			"history": false,
			"History": false,
			"HTMLAllCollection": false,
			"HTMLAnchorElement": false,
			"HTMLAppletElement": false,
			"HTMLAreaElement": false,
			"HTMLAudioElement": false,
			"HTMLBaseElement": false,
			"HTMLBlockquoteElement": false,
			"HTMLBodyElement": false,
			"HTMLBRElement": false,
			"HTMLButtonElement": false,
			"HTMLCanvasElement": false,
			"HTMLCollection": false,
			"HTMLContentElement": false,
			"HTMLDataListElement": false,
			"HTMLDetailsElement": false,
			"HTMLDialogElement": false,
			"HTMLDirectoryElement": false,
			"HTMLDivElement": false,
			"HTMLDListElement": false,
			"HTMLDocument": false,
			"HTMLElement": false,
			"HTMLEmbedElement": false,
			"HTMLFieldSetElement": false,
			"HTMLFontElement": false,
			"HTMLFormControlsCollection": false,
			"HTMLFormElement": false,
			"HTMLFrameElement": false,
			"HTMLFrameSetElement": false,
			"HTMLHeadElement": false,
			"HTMLHeadingElement": false,
			"HTMLHRElement": false,
			"HTMLHtmlElement": false,
			"HTMLIFrameElement": false,
			"HTMLImageElement": false,
			"HTMLInputElement": false,
			"HTMLIsIndexElement": false,
			"HTMLKeygenElement": false,
			"HTMLLabelElement": false,
			"HTMLLayerElement": false,
			"HTMLLegendElement": false,
			"HTMLLIElement": false,
			"HTMLLinkElement": false,
			"HTMLMapElement": false,
			"HTMLMarqueeElement": false,
			"HTMLMediaElement": false,
			"HTMLMenuElement": false,
			"HTMLMetaElement": false,
			"HTMLMeterElement": false,
			"HTMLModElement": false,
			"HTMLObjectElement": false,
			"HTMLOListElement": false,
			"HTMLOptGroupElement": false,
			"HTMLOptionElement": false,
			"HTMLOptionsCollection": false,
			"HTMLOutputElement": false,
			"HTMLParagraphElement": false,
			"HTMLParamElement": false,
			"HTMLPictureElement": false,
			"HTMLPreElement": false,
			"HTMLProgressElement": false,
			"HTMLQuoteElement": false,
			"HTMLScriptElement": false,
			"HTMLSelectElement": false,
			"HTMLShadowElement": false,
			"HTMLSourceElement": false,
			"HTMLSpanElement": false,
			"HTMLStyleElement": false,
			"HTMLTableCaptionElement": false,
			"HTMLTableCellElement": false,
			"HTMLTableColElement": false,
			"HTMLTableElement": false,
			"HTMLTableRowElement": false,
			"HTMLTableSectionElement": false,
			"HTMLTemplateElement": false,
			"HTMLTextAreaElement": false,
			"HTMLTitleElement": false,
			"HTMLTrackElement": false,
			"HTMLUListElement": false,
			"HTMLUnknownElement": false,
			"HTMLVideoElement": false,
			"IDBCursor": false,
			"IDBCursorWithValue": false,
			"IDBDatabase": false,
			"IDBEnvironment": false,
			"IDBFactory": false,
			"IDBIndex": false,
			"IDBKeyRange": false,
			"IDBObjectStore": false,
			"IDBOpenDBRequest": false,
			"IDBRequest": false,
			"IDBTransaction": false,
			"IDBVersionChangeEvent": false,
			"Image": false,
			"ImageBitmap": false,
			"ImageData": false,
			"indexedDB": false,
			"innerHeight": false,
			"innerWidth": false,
			"InputEvent": false,
			"InputMethodContext": false,
			"Intl": false,
			"KeyboardEvent": false,
			"length": false,
			"localStorage": false,
			"location": false,
			"Location": false,
			"locationbar": false,
			"matchMedia": false,
			"MediaElementAudioSourceNode": false,
			"MediaEncryptedEvent": false,
			"MediaError": false,
			"MediaKeyError": false,
			"MediaKeyEvent": false,
			"MediaKeyMessageEvent": false,
			"MediaKeys": false,
			"MediaKeySession": false,
			"MediaKeyStatusMap": false,
			"MediaKeySystemAccess": false,
			"MediaList": false,
			"MediaQueryList": false,
			"MediaQueryListEvent": false,
			"MediaSource": false,
			"MediaStreamAudioDestinationNode": false,
			"MediaStreamAudioSourceNode": false,
			"MediaStreamEvent": false,
			"MediaStreamTrack": false,
			"menubar": false,
			"MessageChannel": false,
			"MessageEvent": false,
			"MessagePort": false,
			"MIDIAccess": false,
			"MIDIConnectionEvent": false,
			"MIDIInput": false,
			"MIDIInputMap": false,
			"MIDIMessageEvent": false,
			"MIDIOutput": false,
			"MIDIOutputMap": false,
			"MIDIPort": false,
			"MimeType": false,
			"MimeTypeArray": false,
			"MouseEvent": false,
			"moveBy": false,
			"moveTo": false,
			"MutationEvent": false,
			"MutationObserver": false,
			"MutationRecord": false,
			"name": false,
			"NamedNodeMap": false,
			"navigator": false,
			"Navigator": false,
			"Node": false,
			"NodeFilter": false,
			"NodeIterator": false,
			"NodeList": false,
			"Notification": false,
			"OfflineAudioCompletionEvent": false,
			"OfflineAudioContext": false,
			"offscreenBuffering": false,
			"onbeforeunload": true,
			"onblur": true,
			"onerror": true,
			"onfocus": true,
			"onload": true,
			"onresize": true,
			"onunload": true,
			"open": false,
			"openDatabase": false,
			"opener": false,
			"opera": false,
			"Option": false,
			"OscillatorNode": false,
			"outerHeight": false,
			"outerWidth": false,
			"PageTransitionEvent": false,
			"pageXOffset": false,
			"pageYOffset": false,
			"parent": false,
			"Path2D": false,
			"performance": false,
			"Performance": false,
			"PerformanceEntry": false,
			"PerformanceMark": false,
			"PerformanceMeasure": false,
			"PerformanceNavigation": false,
			"PerformanceResourceTiming": false,
			"PerformanceTiming": false,
			"PeriodicWave": false,
			"Permissions": false,
			"PermissionStatus": false,
			"personalbar": false,
			"Plugin": false,
			"PluginArray": false,
			"PopStateEvent": false,
			"postMessage": false,
			"print": false,
			"ProcessingInstruction": false,
			"ProgressEvent": false,
			"prompt": false,
			"PushManager": false,
			"PushSubscription": false,
			"RadioNodeList": false,
			"Range": false,
			"ReadableByteStream": false,
			"ReadableStream": false,
			"removeEventListener": false,
			"Request": false,
			"requestAnimationFrame": false,
			"resizeBy": false,
			"resizeTo": false,
			"Response": false,
			"RTCIceCandidate": false,
			"RTCSessionDescription": false,
			"screen": false,
			"Screen": false,
			"screenLeft": false,
			"ScreenOrientation": false,
			"screenTop": false,
			"screenX": false,
			"screenY": false,
			"ScriptProcessorNode": false,
			"scroll": false,
			"scrollbars": false,
			"scrollBy": false,
			"scrollTo": false,
			"scrollX": false,
			"scrollY": false,
			"SecurityPolicyViolationEvent": false,
			"Selection": false,
			"self": false,
			"ServiceWorker": false,
			"ServiceWorkerContainer": false,
			"ServiceWorkerRegistration": false,
			"sessionStorage": false,
			"setInterval": false,
			"setTimeout": false,
			"ShadowRoot": false,
			"SharedWorker": false,
			"showModalDialog": false,
			"speechSynthesis": false,
			"SpeechSynthesisEvent": false,
			"SpeechSynthesisUtterance": false,
			"status": false,
			"statusbar": false,
			"stop": false,
			"Storage": false,
			"StorageEvent": false,
			"styleMedia": false,
			"StyleSheet": false,
			"StyleSheetList": false,
			"SubtleCrypto": false,
			"SVGAElement": false,
			"SVGAltGlyphDefElement": false,
			"SVGAltGlyphElement": false,
			"SVGAltGlyphItemElement": false,
			"SVGAngle": false,
			"SVGAnimateColorElement": false,
			"SVGAnimatedAngle": false,
			"SVGAnimatedBoolean": false,
			"SVGAnimatedEnumeration": false,
			"SVGAnimatedInteger": false,
			"SVGAnimatedLength": false,
			"SVGAnimatedLengthList": false,
			"SVGAnimatedNumber": false,
			"SVGAnimatedNumberList": false,
			"SVGAnimatedPathData": false,
			"SVGAnimatedPoints": false,
			"SVGAnimatedPreserveAspectRatio": false,
			"SVGAnimatedRect": false,
			"SVGAnimatedString": false,
			"SVGAnimatedTransformList": false,
			"SVGAnimateElement": false,
			"SVGAnimateMotionElement": false,
			"SVGAnimateTransformElement": false,
			"SVGAnimationElement": false,
			"SVGCircleElement": false,
			"SVGClipPathElement": false,
			"SVGColor": false,
			"SVGColorProfileElement": false,
			"SVGColorProfileRule": false,
			"SVGComponentTransferFunctionElement": false,
			"SVGCSSRule": false,
			"SVGCursorElement": false,
			"SVGDefsElement": false,
			"SVGDescElement": false,
			"SVGDiscardElement": false,
			"SVGDocument": false,
			"SVGElement": false,
			"SVGElementInstance": false,
			"SVGElementInstanceList": false,
			"SVGEllipseElement": false,
			"SVGEvent": false,
			"SVGExternalResourcesRequired": false,
			"SVGFEBlendElement": false,
			"SVGFEColorMatrixElement": false,
			"SVGFEComponentTransferElement": false,
			"SVGFECompositeElement": false,
			"SVGFEConvolveMatrixElement": false,
			"SVGFEDiffuseLightingElement": false,
			"SVGFEDisplacementMapElement": false,
			"SVGFEDistantLightElement": false,
			"SVGFEDropShadowElement": false,
			"SVGFEFloodElement": false,
			"SVGFEFuncAElement": false,
			"SVGFEFuncBElement": false,
			"SVGFEFuncGElement": false,
			"SVGFEFuncRElement": false,
			"SVGFEGaussianBlurElement": false,
			"SVGFEImageElement": false,
			"SVGFEMergeElement": false,
			"SVGFEMergeNodeElement": false,
			"SVGFEMorphologyElement": false,
			"SVGFEOffsetElement": false,
			"SVGFEPointLightElement": false,
			"SVGFESpecularLightingElement": false,
			"SVGFESpotLightElement": false,
			"SVGFETileElement": false,
			"SVGFETurbulenceElement": false,
			"SVGFilterElement": false,
			"SVGFilterPrimitiveStandardAttributes": false,
			"SVGFitToViewBox": false,
			"SVGFontElement": false,
			"SVGFontFaceElement": false,
			"SVGFontFaceFormatElement": false,
			"SVGFontFaceNameElement": false,
			"SVGFontFaceSrcElement": false,
			"SVGFontFaceUriElement": false,
			"SVGForeignObjectElement": false,
			"SVGGElement": false,
			"SVGGeometryElement": false,
			"SVGGlyphElement": false,
			"SVGGlyphRefElement": false,
			"SVGGradientElement": false,
			"SVGGraphicsElement": false,
			"SVGHKernElement": false,
			"SVGICCColor": false,
			"SVGImageElement": false,
			"SVGLangSpace": false,
			"SVGLength": false,
			"SVGLengthList": false,
			"SVGLinearGradientElement": false,
			"SVGLineElement": false,
			"SVGLocatable": false,
			"SVGMarkerElement": false,
			"SVGMaskElement": false,
			"SVGMatrix": false,
			"SVGMetadataElement": false,
			"SVGMissingGlyphElement": false,
			"SVGMPathElement": false,
			"SVGNumber": false,
			"SVGNumberList": false,
			"SVGPaint": false,
			"SVGPathElement": false,
			"SVGPathSeg": false,
			"SVGPathSegArcAbs": false,
			"SVGPathSegArcRel": false,
			"SVGPathSegClosePath": false,
			"SVGPathSegCurvetoCubicAbs": false,
			"SVGPathSegCurvetoCubicRel": false,
			"SVGPathSegCurvetoCubicSmoothAbs": false,
			"SVGPathSegCurvetoCubicSmoothRel": false,
			"SVGPathSegCurvetoQuadraticAbs": false,
			"SVGPathSegCurvetoQuadraticRel": false,
			"SVGPathSegCurvetoQuadraticSmoothAbs": false,
			"SVGPathSegCurvetoQuadraticSmoothRel": false,
			"SVGPathSegLinetoAbs": false,
			"SVGPathSegLinetoHorizontalAbs": false,
			"SVGPathSegLinetoHorizontalRel": false,
			"SVGPathSegLinetoRel": false,
			"SVGPathSegLinetoVerticalAbs": false,
			"SVGPathSegLinetoVerticalRel": false,
			"SVGPathSegList": false,
			"SVGPathSegMovetoAbs": false,
			"SVGPathSegMovetoRel": false,
			"SVGPatternElement": false,
			"SVGPoint": false,
			"SVGPointList": false,
			"SVGPolygonElement": false,
			"SVGPolylineElement": false,
			"SVGPreserveAspectRatio": false,
			"SVGRadialGradientElement": false,
			"SVGRect": false,
			"SVGRectElement": false,
			"SVGRenderingIntent": false,
			"SVGScriptElement": false,
			"SVGSetElement": false,
			"SVGStopElement": false,
			"SVGStringList": false,
			"SVGStylable": false,
			"SVGStyleElement": false,
			"SVGSVGElement": false,
			"SVGSwitchElement": false,
			"SVGSymbolElement": false,
			"SVGTests": false,
			"SVGTextContentElement": false,
			"SVGTextElement": false,
			"SVGTextPathElement": false,
			"SVGTextPositioningElement": false,
			"SVGTitleElement": false,
			"SVGTransform": false,
			"SVGTransformable": false,
			"SVGTransformList": false,
			"SVGTRefElement": false,
			"SVGTSpanElement": false,
			"SVGUnitTypes": false,
			"SVGURIReference": false,
			"SVGUseElement": false,
			"SVGViewElement": false,
			"SVGViewSpec": false,
			"SVGVKernElement": false,
			"SVGZoomAndPan": false,
			"SVGZoomEvent": false,
			"Text": false,
			"TextDecoder": false,
			"TextEncoder": false,
			"TextEvent": false,
			"TextMetrics": false,
			"TextTrack": false,
			"TextTrackCue": false,
			"TextTrackCueList": false,
			"TextTrackList": false,
			"TimeEvent": false,
			"TimeRanges": false,
			"toolbar": false,
			"top": false,
			"Touch": false,
			"TouchEvent": false,
			"TouchList": false,
			"TrackEvent": false,
			"TransitionEvent": false,
			"TreeWalker": false,
			"UIEvent": false,
			"URL": false,
			"ValidityState": false,
			"VTTCue": false,
			"WaveShaperNode": false,
			"WebGLActiveInfo": false,
			"WebGLBuffer": false,
			"WebGLContextEvent": false,
			"WebGLFramebuffer": false,
			"WebGLProgram": false,
			"WebGLRenderbuffer": false,
			"WebGLRenderingContext": false,
			"WebGLShader": false,
			"WebGLShaderPrecisionFormat": false,
			"WebGLTexture": false,
			"WebGLUniformLocation": false,
			"WebSocket": false,
			"WheelEvent": false,
			"window": false,
			"Window": false,
			"Worker": false,
			"XDomainRequest": false,
			"XMLDocument": false,
			"XMLHttpRequest": false,
			"XMLHttpRequestEventTarget": false,
			"XMLHttpRequestProgressEvent": false,
			"XMLHttpRequestUpload": false,
			"XMLSerializer": false,
			"XPathEvaluator": false,
			"XPathException": false,
			"XPathExpression": false,
			"XPathNamespace": false,
			"XPathNSResolver": false,
			"XPathResult": false,
			"XSLTProcessor": false
		},
		"worker": {
			"applicationCache": false,
			"atob": false,
			"Blob": false,
			"BroadcastChannel": false,
			"btoa": false,
			"Cache": false,
			"caches": false,
			"clearInterval": false,
			"clearTimeout": false,
			"close": true,
			"console": false,
			"fetch": false,
			"FileReaderSync": false,
			"FormData": false,
			"Headers": false,
			"IDBCursor": false,
			"IDBCursorWithValue": false,
			"IDBDatabase": false,
			"IDBFactory": false,
			"IDBIndex": false,
			"IDBKeyRange": false,
			"IDBObjectStore": false,
			"IDBOpenDBRequest": false,
			"IDBRequest": false,
			"IDBTransaction": false,
			"IDBVersionChangeEvent": false,
			"ImageData": false,
			"importScripts": true,
			"indexedDB": false,
			"location": false,
			"MessageChannel": false,
			"MessagePort": false,
			"name": false,
			"navigator": false,
			"Notification": false,
			"onclose": true,
			"onconnect": true,
			"onerror": true,
			"onlanguagechange": true,
			"onmessage": true,
			"onoffline": true,
			"ononline": true,
			"onrejectionhandled": true,
			"onunhandledrejection": true,
			"performance": false,
			"Performance": false,
			"PerformanceEntry": false,
			"PerformanceMark": false,
			"PerformanceMeasure": false,
			"PerformanceNavigation": false,
			"PerformanceResourceTiming": false,
			"PerformanceTiming": false,
			"postMessage": true,
			"Promise": false,
			"Request": false,
			"Response": false,
			"self": true,
			"ServiceWorkerRegistration": false,
			"setInterval": false,
			"setTimeout": false,
			"TextDecoder": false,
			"TextEncoder": false,
			"URL": false,
			"WebSocket": false,
			"Worker": false,
			"XMLHttpRequest": false
		},
		"node": {
			"__dirname": false,
			"__filename": false,
			"arguments": false,
			"Buffer": false,
			"clearImmediate": false,
			"clearInterval": false,
			"clearTimeout": false,
			"console": false,
			"exports": true,
			"GLOBAL": false,
			"global": false,
			"module": false,
			"process": false,
			"require": false,
			"root": false,
			"setImmediate": false,
			"setInterval": false,
			"setTimeout": false
		},
		"commonjs": {
			"exports": true,
			"module": false,
			"require": false
		},
		"amd": {
			"define": false,
			"require": false
		},
		"mocha": {
			"after": false,
			"afterEach": false,
			"before": false,
			"beforeEach": false,
			"context": false,
			"describe": false,
			"it": false,
			"mocha": false,
			"setup": false,
			"specify": false,
			"suite": false,
			"suiteSetup": false,
			"suiteTeardown": false,
			"teardown": false,
			"test": false,
			"xcontext": false,
			"xdescribe": false,
			"xit": false,
			"xspecify": false
		},
		"jasmine": {
			"afterAll": false,
			"afterEach": false,
			"beforeAll": false,
			"beforeEach": false,
			"describe": false,
			"expect": false,
			"fail": false,
			"fdescribe": false,
			"fit": false,
			"it": false,
			"jasmine": false,
			"pending": false,
			"runs": false,
			"spyOn": false,
			"waits": false,
			"waitsFor": false,
			"xdescribe": false,
			"xit": false
		},
		"jest": {
			"afterEach": false,
			"beforeEach": false,
			"describe": false,
			"expect": false,
			"it": false,
			"jest": false,
			"pit": false,
			"require": false,
			"xdescribe": false,
			"xit": false
		},
		"qunit": {
			"asyncTest": false,
			"deepEqual": false,
			"equal": false,
			"expect": false,
			"module": false,
			"notDeepEqual": false,
			"notEqual": false,
			"notOk": false,
			"notPropEqual": false,
			"notStrictEqual": false,
			"ok": false,
			"propEqual": false,
			"QUnit": false,
			"raises": false,
			"start": false,
			"stop": false,
			"strictEqual": false,
			"test": false,
			"throws": false
		},
		"phantomjs": {
			"console": true,
			"exports": true,
			"phantom": true,
			"require": true,
			"WebPage": true
		},
		"couch": {
			"emit": false,
			"exports": false,
			"getRow": false,
			"log": false,
			"module": false,
			"provides": false,
			"require": false,
			"respond": false,
			"send": false,
			"start": false,
			"sum": false
		},
		"rhino": {
			"defineClass": false,
			"deserialize": false,
			"gc": false,
			"help": false,
			"importClass": false,
			"importPackage": false,
			"java": false,
			"load": false,
			"loadClass": false,
			"Packages": false,
			"print": false,
			"quit": false,
			"readFile": false,
			"readUrl": false,
			"runCommand": false,
			"seal": false,
			"serialize": false,
			"spawn": false,
			"sync": false,
			"toint32": false,
			"version": false
		},
		"nashorn": {
			"__DIR__": false,
			"__FILE__": false,
			"__LINE__": false,
			"com": false,
			"edu": false,
			"exit": false,
			"Java": false,
			"java": false,
			"javafx": false,
			"JavaImporter": false,
			"javax": false,
			"JSAdapter": false,
			"load": false,
			"loadWithNewGlobal": false,
			"org": false,
			"Packages": false,
			"print": false,
			"quit": false
		},
		"wsh": {
			"ActiveXObject": true,
			"Enumerator": true,
			"GetObject": true,
			"ScriptEngine": true,
			"ScriptEngineBuildVersion": true,
			"ScriptEngineMajorVersion": true,
			"ScriptEngineMinorVersion": true,
			"VBArray": true,
			"WScript": true,
			"WSH": true,
			"XDomainRequest": true
		},
		"jquery": {
			"$": false,
			"jQuery": false
		},
		"yui": {
			"Y": false,
			"YUI": false,
			"YUI_config": false
		},
		"shelljs": {
			"cat": false,
			"cd": false,
			"chmod": false,
			"config": false,
			"cp": false,
			"dirs": false,
			"echo": false,
			"env": false,
			"error": false,
			"exec": false,
			"exit": false,
			"find": false,
			"grep": false,
			"ls": false,
			"ln": false,
			"mkdir": false,
			"mv": false,
			"popd": false,
			"pushd": false,
			"pwd": false,
			"rm": false,
			"sed": false,
			"target": false,
			"tempdir": false,
			"test": false,
			"which": false
		},
		"prototypejs": {
			"$": false,
			"$$": false,
			"$A": false,
			"$break": false,
			"$continue": false,
			"$F": false,
			"$H": false,
			"$R": false,
			"$w": false,
			"Abstract": false,
			"Ajax": false,
			"Autocompleter": false,
			"Builder": false,
			"Class": false,
			"Control": false,
			"Draggable": false,
			"Draggables": false,
			"Droppables": false,
			"Effect": false,
			"Element": false,
			"Enumerable": false,
			"Event": false,
			"Field": false,
			"Form": false,
			"Hash": false,
			"Insertion": false,
			"ObjectRange": false,
			"PeriodicalExecuter": false,
			"Position": false,
			"Prototype": false,
			"Scriptaculous": false,
			"Selector": false,
			"Sortable": false,
			"SortableObserver": false,
			"Sound": false,
			"Template": false,
			"Toggle": false,
			"Try": false
		},
		"meteor": {
			"$": false,
			"_": false,
			"Accounts": false,
			"App": false,
			"Assets": false,
			"Blaze": false,
			"check": false,
			"Cordova": false,
			"DDP": false,
			"DDPServer": false,
			"Deps": false,
			"EJSON": false,
			"Email": false,
			"HTTP": false,
			"Log": false,
			"Match": false,
			"Meteor": false,
			"Mongo": false,
			"MongoInternals": false,
			"Npm": false,
			"Package": false,
			"Plugin": false,
			"process": false,
			"Random": false,
			"ReactiveDict": false,
			"ReactiveVar": false,
			"Router": false,
			"Session": false,
			"share": false,
			"Spacebars": false,
			"Template": false,
			"Tinytest": false,
			"Tracker": false,
			"UI": false,
			"Utils": false,
			"WebApp": false,
			"WebAppInternals": false
		},
		"mongo": {
			"_isWindows": false,
			"_rand": false,
			"BulkWriteResult": false,
			"cat": false,
			"cd": false,
			"connect": false,
			"db": false,
			"getHostName": false,
			"getMemInfo": false,
			"hostname": false,
			"listFiles": false,
			"load": false,
			"ls": false,
			"md5sumFile": false,
			"mkdir": false,
			"Mongo": false,
			"ObjectId": false,
			"PlanCache": false,
			"print": false,
			"printjson": false,
			"pwd": false,
			"quit": false,
			"removeFile": false,
			"rs": false,
			"sh": false,
			"UUID": false,
			"version": false,
			"WriteResult": false
		},
		"applescript": {
			"$": false,
			"Application": false,
			"Automation": false,
			"console": false,
			"delay": false,
			"Library": false,
			"ObjC": false,
			"ObjectSpecifier": false,
			"Path": false,
			"Progress": false,
			"Ref": false
		},
		"serviceworker": {
			"caches": false,
			"Cache": false,
			"CacheStorage": false,
			"Client": false,
			"clients": false,
			"Clients": false,
			"ExtendableEvent": false,
			"ExtendableMessageEvent": false,
			"FetchEvent": false,
			"importScripts": false,
			"registration": false,
			"self": false,
			"ServiceWorker": false,
			"ServiceWorkerContainer": false,
			"ServiceWorkerGlobalScope": false,
			"ServiceWorkerMessageEvent": false,
			"ServiceWorkerRegistration": false,
			"skipWaiting": false,
			"WindowClient": false
		},
		"atomtest": {
			"advanceClock": false,
			"fakeClearInterval": false,
			"fakeClearTimeout": false,
			"fakeSetInterval": false,
			"fakeSetTimeout": false,
			"resetTimeouts": false,
			"waitsForPromise": false
		},
		"embertest": {
			"andThen": false,
			"click": false,
			"currentPath": false,
			"currentRouteName": false,
			"currentURL": false,
			"fillIn": false,
			"find": false,
			"findWithAssert": false,
			"keyEvent": false,
			"pauseTest": false,
			"triggerEvent": false,
			"visit": false
		},
		"protractor": {
			"$": false,
			"$$": false,
			"browser": false,
			"By": false,
			"by": false,
			"DartObject": false,
			"element": false,
			"protractor": false
		},
		"shared-node-browser": {
			"clearInterval": false,
			"clearTimeout": false,
			"console": false,
			"setInterval": false,
			"setTimeout": false
		},
		"webextensions": {
			"browser": false,
			"chrome": false,
			"opr": false
		},
		"greasemonkey": {
			"GM_addStyle": false,
			"GM_deleteValue": false,
			"GM_getResourceText": false,
			"GM_getResourceURL": false,
			"GM_getValue": false,
			"GM_info": false,
			"GM_listValues": false,
			"GM_log": false,
			"GM_openInTab": false,
			"GM_registerMenuCommand": false,
			"GM_setClipboard": false,
			"GM_setValue": false,
			"GM_xmlhttpRequest": false,
			"unsafeWindow": false
		}
	};

/***/ },
/* 6980 */
/***/ function(module, exports) {

	module.exports = {
		"name": "babel-core",
		"version": "6.4.0",
		"description": "Babel compiler core.",
		"author": {
			"name": "Sebastian McKenzie",
			"email": "sebmck@gmail.com"
		},
		"homepage": "https://babeljs.io/",
		"license": "MIT",
		"repository": {
			"type": "git",
			"url": "https://github.com/babel/babel/tree/master/packages/babel-core"
		},
		"keywords": [
			"6to5",
			"babel",
			"classes",
			"const",
			"es6",
			"harmony",
			"let",
			"modules",
			"transpile",
			"transpiler",
			"var"
		],
		"scripts": {
			"bench": "make bench",
			"test": "make test"
		},
		"dependencies": {
			"babel-code-frame": "^6.3.13",
			"babel-generator": "^6.4.0",
			"babel-helpers": "^6.4.0",
			"babel-messages": "^6.3.13",
			"babel-template": "^6.3.13",
			"babel-runtime": "^5.0.0",
			"babel-register": "^6.3.13",
			"babel-traverse": "^6.3.26",
			"babel-types": "^6.4.0",
			"babylon": "^6.4.0",
			"convert-source-map": "^1.1.0",
			"debug": "^2.1.1",
			"json5": "^0.4.0",
			"lodash": "^3.10.0",
			"minimatch": "^2.0.3",
			"path-exists": "^1.0.0",
			"path-is-absolute": "^1.0.0",
			"private": "^0.1.6",
			"shebang-regex": "^1.0.0",
			"slash": "^1.0.0",
			"source-map": "^0.5.0"
		},
		"devDependencies": {
			"babel-helper-fixtures": "^6.3.13",
			"babel-helper-transform-fixture-test-runner": "^6.3.13",
			"babel-polyfill": "^6.3.13"
		},
		"_id": "babel-core@6.4.0",
		"_shasum": "648dfae98d2bc92ed57d4050d462a82c8c218474",
		"_from": "babel-core@>=6.3.13 <7.0.0",
		"_npmVersion": "3.5.2",
		"_nodeVersion": "5.1.0",
		"_npmUser": {
			"name": "hzoo",
			"email": "hi@henryzoo.com"
		},
		"dist": {
			"shasum": "648dfae98d2bc92ed57d4050d462a82c8c218474",
			"tarball": "http://registry.npmjs.org/babel-core/-/babel-core-6.4.0.tgz"
		},
		"maintainers": [
			{
				"name": "amasad",
				"email": "amjad.masad@gmail.com"
			},
			{
				"name": "hzoo",
				"email": "hi@henryzoo.com"
			},
			{
				"name": "jmm",
				"email": "npm-public@jessemccarthy.net"
			},
			{
				"name": "loganfsmyth",
				"email": "loganfsmyth@gmail.com"
			},
			{
				"name": "sebmck",
				"email": "sebmck@gmail.com"
			},
			{
				"name": "thejameskyle",
				"email": "me@thejameskyle.com"
			}
		],
		"directories": {},
		"_resolved": "https://registry.npmjs.org/babel-core/-/babel-core-6.4.0.tgz"
	};

/***/ },
/* 6981 */
6979,
/* 6982 */
6979,
/* 6983 */
6979,
/* 6984 */
6979,
/* 6985 */
6979,
/* 6986 */
6979,
/* 6987 */
6979,
/* 6988 */
6979,
/* 6989 */
6979,
/* 6990 */
6979,
/* 6991 */
6979,
/* 6992 */
6979,
/* 6993 */
6979,
/* 6994 */
6979,
/* 6995 */
6979,
/* 6996 */
6979,
/* 6997 */
6979,
/* 6998 */
6979,
/* 6999 */
6979,
/* 7000 */
6979,
/* 7001 */
6979,
/* 7002 */
/***/ function(module, exports) {

	module.exports = {
		"75": 8490,
		"83": 383,
		"107": 8490,
		"115": 383,
		"181": 924,
		"197": 8491,
		"383": 83,
		"452": 453,
		"453": 452,
		"455": 456,
		"456": 455,
		"458": 459,
		"459": 458,
		"497": 498,
		"498": 497,
		"837": 8126,
		"914": 976,
		"917": 1013,
		"920": 1012,
		"921": 8126,
		"922": 1008,
		"924": 181,
		"928": 982,
		"929": 1009,
		"931": 962,
		"934": 981,
		"937": 8486,
		"962": 931,
		"976": 914,
		"977": 1012,
		"981": 934,
		"982": 928,
		"1008": 922,
		"1009": 929,
		"1012": [
			920,
			977
		],
		"1013": 917,
		"7776": 7835,
		"7835": 7776,
		"8126": [
			837,
			921
		],
		"8486": 937,
		"8490": 75,
		"8491": 197,
		"66560": 66600,
		"66561": 66601,
		"66562": 66602,
		"66563": 66603,
		"66564": 66604,
		"66565": 66605,
		"66566": 66606,
		"66567": 66607,
		"66568": 66608,
		"66569": 66609,
		"66570": 66610,
		"66571": 66611,
		"66572": 66612,
		"66573": 66613,
		"66574": 66614,
		"66575": 66615,
		"66576": 66616,
		"66577": 66617,
		"66578": 66618,
		"66579": 66619,
		"66580": 66620,
		"66581": 66621,
		"66582": 66622,
		"66583": 66623,
		"66584": 66624,
		"66585": 66625,
		"66586": 66626,
		"66587": 66627,
		"66588": 66628,
		"66589": 66629,
		"66590": 66630,
		"66591": 66631,
		"66592": 66632,
		"66593": 66633,
		"66594": 66634,
		"66595": 66635,
		"66596": 66636,
		"66597": 66637,
		"66598": 66638,
		"66599": 66639,
		"66600": 66560,
		"66601": 66561,
		"66602": 66562,
		"66603": 66563,
		"66604": 66564,
		"66605": 66565,
		"66606": 66566,
		"66607": 66567,
		"66608": 66568,
		"66609": 66569,
		"66610": 66570,
		"66611": 66571,
		"66612": 66572,
		"66613": 66573,
		"66614": 66574,
		"66615": 66575,
		"66616": 66576,
		"66617": 66577,
		"66618": 66578,
		"66619": 66579,
		"66620": 66580,
		"66621": 66581,
		"66622": 66582,
		"66623": 66583,
		"66624": 66584,
		"66625": 66585,
		"66626": 66586,
		"66627": 66587,
		"66628": 66588,
		"66629": 66589,
		"66630": 66590,
		"66631": 66591,
		"66632": 66592,
		"66633": 66593,
		"66634": 66594,
		"66635": 66595,
		"66636": 66596,
		"66637": 66597,
		"66638": 66598,
		"66639": 66599,
		"68736": 68800,
		"68737": 68801,
		"68738": 68802,
		"68739": 68803,
		"68740": 68804,
		"68741": 68805,
		"68742": 68806,
		"68743": 68807,
		"68744": 68808,
		"68745": 68809,
		"68746": 68810,
		"68747": 68811,
		"68748": 68812,
		"68749": 68813,
		"68750": 68814,
		"68751": 68815,
		"68752": 68816,
		"68753": 68817,
		"68754": 68818,
		"68755": 68819,
		"68756": 68820,
		"68757": 68821,
		"68758": 68822,
		"68759": 68823,
		"68760": 68824,
		"68761": 68825,
		"68762": 68826,
		"68763": 68827,
		"68764": 68828,
		"68765": 68829,
		"68766": 68830,
		"68767": 68831,
		"68768": 68832,
		"68769": 68833,
		"68770": 68834,
		"68771": 68835,
		"68772": 68836,
		"68773": 68837,
		"68774": 68838,
		"68775": 68839,
		"68776": 68840,
		"68777": 68841,
		"68778": 68842,
		"68779": 68843,
		"68780": 68844,
		"68781": 68845,
		"68782": 68846,
		"68783": 68847,
		"68784": 68848,
		"68785": 68849,
		"68786": 68850,
		"68800": 68736,
		"68801": 68737,
		"68802": 68738,
		"68803": 68739,
		"68804": 68740,
		"68805": 68741,
		"68806": 68742,
		"68807": 68743,
		"68808": 68744,
		"68809": 68745,
		"68810": 68746,
		"68811": 68747,
		"68812": 68748,
		"68813": 68749,
		"68814": 68750,
		"68815": 68751,
		"68816": 68752,
		"68817": 68753,
		"68818": 68754,
		"68819": 68755,
		"68820": 68756,
		"68821": 68757,
		"68822": 68758,
		"68823": 68759,
		"68824": 68760,
		"68825": 68761,
		"68826": 68762,
		"68827": 68763,
		"68828": 68764,
		"68829": 68765,
		"68830": 68766,
		"68831": 68767,
		"68832": 68768,
		"68833": 68769,
		"68834": 68770,
		"68835": 68771,
		"68836": 68772,
		"68837": 68773,
		"68838": 68774,
		"68839": 68775,
		"68840": 68776,
		"68841": 68777,
		"68842": 68778,
		"68843": 68779,
		"68844": 68780,
		"68845": 68781,
		"68846": 68782,
		"68847": 68783,
		"68848": 68784,
		"68849": 68785,
		"68850": 68786,
		"71840": 71872,
		"71841": 71873,
		"71842": 71874,
		"71843": 71875,
		"71844": 71876,
		"71845": 71877,
		"71846": 71878,
		"71847": 71879,
		"71848": 71880,
		"71849": 71881,
		"71850": 71882,
		"71851": 71883,
		"71852": 71884,
		"71853": 71885,
		"71854": 71886,
		"71855": 71887,
		"71856": 71888,
		"71857": 71889,
		"71858": 71890,
		"71859": 71891,
		"71860": 71892,
		"71861": 71893,
		"71862": 71894,
		"71863": 71895,
		"71864": 71896,
		"71865": 71897,
		"71866": 71898,
		"71867": 71899,
		"71868": 71900,
		"71869": 71901,
		"71870": 71902,
		"71871": 71903,
		"71872": 71840,
		"71873": 71841,
		"71874": 71842,
		"71875": 71843,
		"71876": 71844,
		"71877": 71845,
		"71878": 71846,
		"71879": 71847,
		"71880": 71848,
		"71881": 71849,
		"71882": 71850,
		"71883": 71851,
		"71884": 71852,
		"71885": 71853,
		"71886": 71854,
		"71887": 71855,
		"71888": 71856,
		"71889": 71857,
		"71890": 71858,
		"71891": 71859,
		"71892": 71860,
		"71893": 71861,
		"71894": 71862,
		"71895": 71863,
		"71896": 71864,
		"71897": 71865,
		"71898": 71866,
		"71899": 71867,
		"71900": 71868,
		"71901": 71869,
		"71902": 71870,
		"71903": 71871
	};

/***/ },
/* 7003 */
6979,
/* 7004 */
6979,
/* 7005 */
6979,
/* 7006 */
6979,
/* 7007 */
6979,
/* 7008 */
6979,
/* 7009 */
6979,
/* 7010 */
/***/ function(module, exports, __webpack_require__) {

	var _ = __webpack_require__(7012);
	var errors = __webpack_require__(7011);

	module.exports = function (babel) {
	  var t = babel.types;

	  var nodeHandlers = {
	    'For': transformFor,
	    'If': transformIf
	  };

	  var visitor = {
	    JSXElement: function (path) {
	      var args = arguments;

	      var nodeName = path.node.openingElement.name ? path.node.openingElement.name.name : null;
	      var handler = nodeHandlers[nodeName];

	      if (handler) {
	        path.replaceWith(handler(path.node, path.hub.file));
	      }
	    }
	  };

	  return {
	    inherits: __webpack_require__(524),
	    visitor: visitor
	  };

	  function transformIf(node, file) {
	    var attributes = node.openingElement.attributes;

	    if (!attributes || !attributes.length) {
	      throwError(errors.IF_WITH_NO_CONDITION, node, file);
	    }

	    var condition = _.find(attributes, function (attr) {
	      return attr.name.name === 'condition';
	    });

	    if (!condition) {
	      throwError(errors.IF_WITH_NO_CONDITION, node, file);
	    }

	    var children = removeLiterals(node.children);

	    var notElseTag = function (child) {
	      return child.type !== 'JSXElement' || child.openingElement.name.name !== 'Else';
	    };

	    var ifBlock, elseBlock;
	    ifBlock = _.takeWhile(children, notElseTag);

	    if (ifBlock.length > 1) {
	      throwError(errors.MULTIPLE_CHILDREN, node, file);
	    } else if (ifBlock.length === 0) {
	      throwError(errors.NO_CHILDREN, node, file);
	    }

	    if (children.length > 1) {
	      elseBlock = _.takeRightWhile(children, notElseTag);
	    } else {
	      elseBlock = [t.NullLiteral()];
	    }

	    return t.ConditionalExpression(condition.value.expression, ifBlock[0], elseBlock[0]);
	  }

	  function transformFor(node, file) {
	    var attributes = node.openingElement.attributes;

	    if (!attributes || !attributes.length) {
	      throwError(errors.FOR_WITH_NO_ATTRIBUTES, node, file);
	    }

	    var each, of, index;
	    attributes.forEach(function (attr) {
	      if (attr.name.name === 'each') {
	        each = attr;
	      } else if (attr.name.name === 'of') {
	        of = attr;
	      } else if (attr.name.name === 'index') {
	        index = attr;
	      }
	    });

	    if (!each || !of) {
	      throwError(errors.FOR_WITH_NO_ATTRIBUTES, node, file);
	    }

	    var children = removeLiterals(node.children);
	    if (children.length > 1) {
	      throwError(errors.MULTIPLE_CHILDREN, node, file);
	    } else if (children.length === 0) {
	      throwError(errors.NO_CHILDREN, node, file);
	    }

	    var child = children[0];

	    var mapParams = [t.Identifier(each.value.value)];

	    if (index) {
	      mapParams.push(t.Identifier(index.value.value));
	    }

	    return t.callExpression(
	      t.memberExpression(
	        of.value.expression,
	        t.identifier('map')
	      ),
	      [
	        t.functionExpression(
	          null,
	          mapParams,
	          t.blockStatement([
	            t.returnStatement(child)
	          ])
	        ),
	        t.identifier('this')
	      ]
	    );
	  }

	  function removeLiterals(nodes) {
	    return _.filter(nodes, function (child) {
	      return child.type !== 'JSXText';
	    });
	  }

	  function throwError(message, node, file) {
	    throw new Error(message + ' at ' + file.opts.filename + ':' + node.loc.start.line + ',' + node.loc.start.column);
	  }
	};


/***/ },
/* 7011 */
/***/ function(module, exports) {

	exports.IF_WITH_NO_CONDITION = '<If> tag with no condition attribute';
	exports.FOR_WITH_NO_ATTRIBUTES = '<For> tag with no \'each\' or \'of\' attribute';
	exports.MULTIPLE_CHILDREN = 'Control statements cannot have multiple children';
	exports.NO_CHILDREN = 'Control statement must have a child!';

/***/ },
/* 7012 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/**
	 * @license
	 * lodash 3.10.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern -d -o ./index.js`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	;(function() {

	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined;

	  /** Used as the semantic version number. */
	  var VERSION = '3.10.1';

	  /** Used to compose bitmasks for wrapper metadata. */
	  var BIND_FLAG = 1,
	      BIND_KEY_FLAG = 2,
	      CURRY_BOUND_FLAG = 4,
	      CURRY_FLAG = 8,
	      CURRY_RIGHT_FLAG = 16,
	      PARTIAL_FLAG = 32,
	      PARTIAL_RIGHT_FLAG = 64,
	      ARY_FLAG = 128,
	      REARG_FLAG = 256;

	  /** Used as default options for `_.trunc`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';

	  /** Used to detect when a function becomes hot. */
	  var HOT_COUNT = 150,
	      HOT_SPAN = 16;

	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;

	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2;

	  /** Used as the `TypeError` message for "Functions" methods. */
	  var FUNC_ERROR_TEXT = 'Expected a function';

	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';

	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      objectTag = '[object Object]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      weakMapTag = '[object WeakMap]';

	  var arrayBufferTag = '[object ArrayBuffer]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';

	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
	      reUnescapedHtml = /[&<>"'`]/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;

	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

	  /**
	   * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)
	   * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
	   */
	  var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
	      reHasRegExpChars = RegExp(reRegExpChars.source);

	  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
	  var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;

	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;

	  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;

	  /** Used to detect hexadecimal string values. */
	  var reHasHexPrefix = /^0[xX]/;

	  /** Used to detect host constructors (Safari > 5). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;

	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^\d+$/;

	  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
	  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;

	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

	  /** Used to match words to create compound words. */
	  var reWords = (function() {
	    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
	        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

	    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
	  }());

	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
	    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'isFinite',
	    'parseFloat', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap'
	  ];

	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;

	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
	  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
	  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
	  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
	  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
	  cloneableTags[dateTag] = cloneableTags[float32Tag] =
	  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
	  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[stringTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[mapTag] = cloneableTags[setTag] =
	  cloneableTags[weakMapTag] = false;

	  /** Used to map latin-1 supplementary letters to basic latin letters. */
	  var deburredLetters = {
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss'
	  };

	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;',
	    '`': '&#96;'
	  };

	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'",
	    '&#96;': '`'
	  };

	  /** Used to determine if values are of the language type `Object`. */
	  var objectTypes = {
	    'function': true,
	    'object': true
	  };

	  /** Used to escape characters for inclusion in compiled regexes. */
	  var regexpEscapes = {
	    '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',
	    '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',
	    'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',
	    'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',
	    'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'
	  };

	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  /** Detect free variable `exports`. */
	  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

	  /** Detect free variable `module`. */
	  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

	  /** Detect free variable `self`. */
	  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

	  /** Detect free variable `window`. */
	  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

	  /**
	   * Used as a reference to the global object.
	   *
	   * The `this` value is used if it's the global object to avoid Greasemonkey's
	   * restricted `window` object, otherwise the `window` object is used.
	   */
	  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;

	  /*--------------------------------------------------------------------------*/

	  /**
	   * The base implementation of `compareAscending` which compares values and
	   * sorts them in ascending order without guaranteeing a stable sort.
	   *
	   * @private
	   * @param {*} value The value to compare.
	   * @param {*} other The other value to compare.
	   * @returns {number} Returns the sort order indicator for `value`.
	   */
	  function baseCompareAscending(value, other) {
	    if (value !== other) {
	      var valIsNull = value === null,
	          valIsUndef = value === undefined,
	          valIsReflexive = value === value;

	      var othIsNull = other === null,
	          othIsUndef = other === undefined,
	          othIsReflexive = other === other;

	      if ((value > other && !othIsNull) || !valIsReflexive ||
	          (valIsNull && !othIsUndef && othIsReflexive) ||
	          (valIsUndef && othIsReflexive)) {
	        return 1;
	      }
	      if ((value < other && !valIsNull) || !othIsReflexive ||
	          (othIsNull && !valIsUndef && valIsReflexive) ||
	          (othIsUndef && valIsReflexive)) {
	        return -1;
	      }
	    }
	    return 0;
	  }

	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for callback shorthands and `this` binding.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromRight) {
	    var length = array.length,
	        index = fromRight ? length : -1;

	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.indexOf` without support for binary searches.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    if (value !== value) {
	      return indexOfNaN(array, fromIndex);
	    }
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.isFunction` without support for environments
	   * with incorrect `typeof` results.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	   */
	  function baseIsFunction(value) {
	    // Avoid a Chakra JIT bug in compatibility modes of IE 11.
	    // See https://github.com/jashkenas/underscore/issues/1621 for more details.
	    return typeof value == 'function' || false;
	  }

	  /**
	   * Converts `value` to a string if it's not one. An empty string is returned
	   * for `null` or `undefined` values.
	   *
	   * @private
	   * @param {*} value The value to process.
	   * @returns {string} Returns the string.
	   */
	  function baseToString(value) {
	    return value == null ? '' : (value + '');
	  }

	  /**
	   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
	   * of `string` that is not found in `chars`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @param {string} chars The characters to find.
	   * @returns {number} Returns the index of the first character not found in `chars`.
	   */
	  function charsLeftIndex(string, chars) {
	    var index = -1,
	        length = string.length;

	    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimRight` to get the index of the last character
	   * of `string` that is not found in `chars`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @param {string} chars The characters to find.
	   * @returns {number} Returns the index of the last character not found in `chars`.
	   */
	  function charsRightIndex(string, chars) {
	    var index = string.length;

	    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.sortBy` to compare transformed elements of a collection and stable
	   * sort them in ascending order.
	   *
	   * @private
	   * @param {Object} object The object to compare.
	   * @param {Object} other The other object to compare.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareAscending(object, other) {
	    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
	  }

	  /**
	   * Used by `_.sortByOrder` to compare multiple properties of a value to another
	   * and stable sort them.
	   *
	   * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,
	   * a value is sorted in ascending order if its corresponding order is "asc", and
	   * descending if "desc".
	   *
	   * @private
	   * @param {Object} object The object to compare.
	   * @param {Object} other The other object to compare.
	   * @param {boolean[]} orders The order to sort by for each property.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareMultiple(object, other, orders) {
	    var index = -1,
	        objCriteria = object.criteria,
	        othCriteria = other.criteria,
	        length = objCriteria.length,
	        ordersLength = orders.length;

	    while (++index < length) {
	      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
	      if (result) {
	        if (index >= ordersLength) {
	          return result;
	        }
	        var order = orders[index];
	        return result * ((order === 'asc' || order === true) ? 1 : -1);
	      }
	    }
	    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	    // that causes it, under certain circumstances, to provide the same value for
	    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	    // for more details.
	    //
	    // This also ensures a stable sort in V8 and other engines.
	    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
	    return object.index - other.index;
	  }

	  /**
	   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  function deburrLetter(letter) {
	    return deburredLetters[letter];
	  }

	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeHtmlChar(chr) {
	    return htmlEscapes[chr];
	  }

	  /**
	   * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @param {string} leadingChar The capture group for a leading character.
	   * @param {string} whitespaceChar The capture group for a whitespace character.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
	    if (leadingChar) {
	      chr = regexpEscapes[chr];
	    } else if (whitespaceChar) {
	      chr = stringEscapes[chr];
	    }
	    return '\\' + chr;
	  }

	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }

	  /**
	   * Gets the index at which the first occurrence of `NaN` is found in `array`.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	   */
	  function indexOfNaN(array, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 0 : -1);

	    while ((fromRight ? index-- : ++index < length)) {
	      var other = array[index];
	      if (other !== other) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * Checks if `value` is object-like.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	   */
	  function isObjectLike(value) {
	    return !!value && typeof value == 'object';
	  }

	  /**
	   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
	   * character code is whitespace.
	   *
	   * @private
	   * @param {number} charCode The character code to inspect.
	   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
	   */
	  function isSpace(charCode) {
	    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
	      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
	  }

	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = -1,
	        result = [];

	    while (++index < length) {
	      if (array[index] === placeholder) {
	        array[index] = PLACEHOLDER;
	        result[++resIndex] = index;
	      }
	    }
	    return result;
	  }

	  /**
	   * An implementation of `_.uniq` optimized for sorted arrays without support
	   * for callback shorthands and `this` binding.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} [iteratee] The function invoked per iteration.
	   * @returns {Array} Returns the new duplicate-value-free array.
	   */
	  function sortedUniq(array, iteratee) {
	    var seen,
	        index = -1,
	        length = array.length,
	        resIndex = -1,
	        result = [];

	    while (++index < length) {
	      var value = array[index],
	          computed = iteratee ? iteratee(value, index, array) : value;

	      if (!index || seen !== computed) {
	        seen = computed;
	        result[++resIndex] = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the first non-whitespace character.
	   */
	  function trimmedLeftIndex(string) {
	    var index = -1,
	        length = string.length;

	    while (++index < length && isSpace(string.charCodeAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the last non-whitespace character.
	   */
	  function trimmedRightIndex(string) {
	    var index = string.length;

	    while (index-- && isSpace(string.charCodeAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  function unescapeHtmlChar(chr) {
	    return htmlUnescapes[chr];
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Create a new pristine `lodash` function using the given `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @category Utility
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // using `context` to mock `Date#getTime` use in `_.now`
	   * var mock = _.runInContext({
	   *   'Date': function() {
	   *     return { 'getTime': getTimeMock };
	   *   }
	   * });
	   *
	   * // or creating a suped-up `defer` in Node.js
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  function runInContext(context) {
	    // Avoid issues with some ES3 environments that attempt to use values, named
	    // after built-in constructors like `Object`, for the creation of literals.
	    // ES5 clears this up by stating that literals must use built-in constructors.
	    // See https://es5.github.io/#x11.1.5 for more details.
	    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

	    /** Native constructor references. */
	    var Array = context.Array,
	        Date = context.Date,
	        Error = context.Error,
	        Function = context.Function,
	        Math = context.Math,
	        Number = context.Number,
	        Object = context.Object,
	        RegExp = context.RegExp,
	        String = context.String,
	        TypeError = context.TypeError;

	    /** Used for native method references. */
	    var arrayProto = Array.prototype,
	        objectProto = Object.prototype,
	        stringProto = String.prototype;

	    /** Used to resolve the decompiled source of functions. */
	    var fnToString = Function.prototype.toString;

	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;

	    /** Used to generate unique IDs. */
	    var idCounter = 0;

	    /**
	     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	     * of values.
	     */
	    var objToString = objectProto.toString;

	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = root._;

	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );

	    /** Native method references. */
	    var ArrayBuffer = context.ArrayBuffer,
	        clearTimeout = context.clearTimeout,
	        parseFloat = context.parseFloat,
	        pow = Math.pow,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        Set = getNative(context, 'Set'),
	        setTimeout = context.setTimeout,
	        splice = arrayProto.splice,
	        Uint8Array = context.Uint8Array,
	        WeakMap = getNative(context, 'WeakMap');

	    /* Native method references for those with the same name as other `lodash` methods. */
	    var nativeCeil = Math.ceil,
	        nativeCreate = getNative(Object, 'create'),
	        nativeFloor = Math.floor,
	        nativeIsArray = getNative(Array, 'isArray'),
	        nativeIsFinite = context.isFinite,
	        nativeKeys = getNative(Object, 'keys'),
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeNow = getNative(Date, 'now'),
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random;

	    /** Used as references for `-Infinity` and `Infinity`. */
	    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
	        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

	    /** Used as references for the maximum length and index of an array. */
	    var MAX_ARRAY_LENGTH = 4294967295,
	        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
	        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

	    /**
	     * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	     * of an array-like value.
	     */
	    var MAX_SAFE_INTEGER = 9007199254740991;

	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;

	    /** Used to lookup unminified function names. */
	    var realNames = {};

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit chaining.
	     * Methods that operate on and return arrays, collections, and functions can
	     * be chained together. Methods that retrieve a single value or may return a
	     * primitive value will automatically end the chain returning the unwrapped
	     * value. Explicit chaining may be enabled using `_.chain`. The execution of
	     * chained methods is lazy, that is, execution is deferred until `_#value`
	     * is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
	     * fusion is an optimization strategy which merge iteratee calls; this can help
	     * to avoid the creation of intermediate data structures and greatly reduce the
	     * number of iteratee executions.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
	     * `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
	     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
	     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
	     * and `where`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
	     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
	     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,
	     * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,
	     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,
	     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
	     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
	     * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,
	     * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,
	     * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
	     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
	     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,
	     * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,
	     * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,
	     * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,
	     * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,
	     * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,
	     * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
	     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,
	     * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,
	     * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
	     * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,
	     * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,
	     * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,
	     * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,
	     * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,
	     * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,
	     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,
	     * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,
	     * `unescape`, `uniqueId`, `value`, and `words`
	     *
	     * The wrapper method `sample` will return a wrapped value when `n` is provided,
	     * otherwise an unwrapped value is returned.
	     *
	     * @name _
	     * @constructor
	     * @category Chain
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // returns an unwrapped value
	     * wrapped.reduce(function(total, n) {
	     *   return total + n;
	     * });
	     * // => 6
	     *
	     * // returns a wrapped value
	     * var squares = wrapped.map(function(n) {
	     *   return n * n;
	     * });
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }

	    /**
	     * The function whose prototype all chaining wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }

	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
	     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
	     */
	    function LodashWrapper(value, chainAll, actions) {
	      this.__wrapped__ = value;
	      this.__actions__ = actions || [];
	      this.__chain__ = !!chainAll;
	    }

	    /**
	     * An object environment feature flags.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    var support = lodash.support = {};

	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB). Change the following template settings to use
	     * alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    lodash.templateSettings = {

	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'escape': reEscape,

	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'evaluate': reEvaluate,

	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'interpolate': reInterpolate,

	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type string
	       */
	      'variable': '',

	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type Object
	       */
	      'imports': {

	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type Function
	         */
	        '_': lodash
	      }
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__dir__ = 1;
	      this.__filtered__ = false;
	      this.__iteratees__ = [];
	      this.__takeCount__ = POSITIVE_INFINITY;
	      this.__views__ = [];
	    }

	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var result = new LazyWrapper(this.__wrapped__);
	      result.__actions__ = arrayCopy(this.__actions__);
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = arrayCopy(this.__iteratees__);
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = arrayCopy(this.__views__);
	      return result;
	    }

	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }

	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value(),
	          dir = this.__dir__,
	          isArr = isArray(array),
	          isRight = dir < 0,
	          arrLength = isArr ? array.length : 0,
	          view = getView(0, arrLength, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees.length,
	          resIndex = 0,
	          takeCount = nativeMin(length, this.__takeCount__);

	      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {
	        return baseWrapperValue((isRight && isArr) ? array.reverse() : array, this.__actions__);
	      }
	      var result = [];

	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;

	        var iterIndex = -1,
	            value = array[index];

	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type,
	              computed = iteratee(value);

	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a cache object to store key/value pairs.
	     *
	     * @private
	     * @static
	     * @name Cache
	     * @memberOf _.memoize
	     */
	    function MapCache() {
	      this.__data__ = {};
	    }

	    /**
	     * Removes `key` and its value from the cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
	     */
	    function mapDelete(key) {
	      return this.has(key) && delete this.__data__[key];
	    }

	    /**
	     * Gets the cached value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the cached value.
	     */
	    function mapGet(key) {
	      return key == '__proto__' ? undefined : this.__data__[key];
	    }

	    /**
	     * Checks if a cached value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapHas(key) {
	      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
	    }

	    /**
	     * Sets `value` to `key` of the cache.
	     *
	     * @private
	     * @name set
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to cache.
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache object.
	     */
	    function mapSet(key, value) {
	      if (key != '__proto__') {
	        this.__data__[key] = value;
	      }
	      return this;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     *
	     * Creates a cache object to store unique values.
	     *
	     * @private
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var length = values ? values.length : 0;

	      this.data = { 'hash': nativeCreate(null), 'set': new Set };
	      while (length--) {
	        this.push(values[length]);
	      }
	    }

	    /**
	     * Checks if `value` is in `cache` mimicking the return signature of
	     * `_.indexOf` by returning `0` if the value is found, else `-1`.
	     *
	     * @private
	     * @param {Object} cache The cache to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `0` if `value` is found, else `-1`.
	     */
	    function cacheIndexOf(cache, value) {
	      var data = cache.data,
	          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

	      return result ? 0 : -1;
	    }

	    /**
	     * Adds `value` to the cache.
	     *
	     * @private
	     * @name push
	     * @memberOf SetCache
	     * @param {*} value The value to cache.
	     */
	    function cachePush(value) {
	      var data = this.data;
	      if (typeof value == 'string' || isObject(value)) {
	        data.set.add(value);
	      } else {
	        data.hash[value] = true;
	      }
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a new array joining `array` with `other`.
	     *
	     * @private
	     * @param {Array} array The array to join.
	     * @param {Array} other The other array to join.
	     * @returns {Array} Returns the new concatenated array.
	     */
	    function arrayConcat(array, other) {
	      var index = -1,
	          length = array.length,
	          othIndex = -1,
	          othLength = other.length,
	          result = Array(length + othLength);

	      while (++index < length) {
	        result[index] = array[index];
	      }
	      while (++othIndex < othLength) {
	        result[index++] = other[othIndex];
	      }
	      return result;
	    }

	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayCopy(source, array) {
	      var index = -1,
	          length = source.length;

	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.forEach` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayEach(array, iteratee) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (iteratee(array[index], index, array) === false) {
	          break;
	        }
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.forEachRight` for arrays without support for
	     * callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayEachRight(array, iteratee) {
	      var length = array.length;

	      while (length--) {
	        if (iteratee(array[length], length, array) === false) {
	          break;
	        }
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.every` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     */
	    function arrayEvery(array, predicate) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (!predicate(array[index], index, array)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * A specialized version of `baseExtremum` for arrays which invokes `iteratee`
	     * with one argument: (value).
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {*} Returns the extremum value.
	     */
	    function arrayExtremum(array, iteratee, comparator, exValue) {
	      var index = -1,
	          length = array.length,
	          computed = exValue,
	          result = computed;

	      while (++index < length) {
	        var value = array[index],
	            current = +iteratee(value);

	        if (comparator(current, computed)) {
	          computed = current;
	          result = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.filter` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function arrayFilter(array, predicate) {
	      var index = -1,
	          length = array.length,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.map` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function arrayMap(array, iteratee) {
	      var index = -1,
	          length = array.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = iteratee(array[index], index, array);
	      }
	      return result;
	    }

	    /**
	     * Appends the elements of `values` to `array`.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to append.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayPush(array, values) {
	      var index = -1,
	          length = values.length,
	          offset = array.length;

	      while (++index < length) {
	        array[offset + index] = values[index];
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.reduce` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {boolean} [initFromArray] Specify using the first element of `array`
	     *  as the initial value.
	     * @returns {*} Returns the accumulated value.
	     */
	    function arrayReduce(array, iteratee, accumulator, initFromArray) {
	      var index = -1,
	          length = array.length;

	      if (initFromArray && length) {
	        accumulator = array[++index];
	      }
	      while (++index < length) {
	        accumulator = iteratee(accumulator, array[index], index, array);
	      }
	      return accumulator;
	    }

	    /**
	     * A specialized version of `_.reduceRight` for arrays without support for
	     * callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {boolean} [initFromArray] Specify using the last element of `array`
	     *  as the initial value.
	     * @returns {*} Returns the accumulated value.
	     */
	    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
	      var length = array.length;
	      if (initFromArray && length) {
	        accumulator = array[--length];
	      }
	      while (length--) {
	        accumulator = iteratee(accumulator, array[length], length, array);
	      }
	      return accumulator;
	    }

	    /**
	     * A specialized version of `_.some` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function arraySome(array, predicate) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (predicate(array[index], index, array)) {
	          return true;
	        }
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `_.sum` for arrays without support for callback
	     * shorthands and `this` binding..
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {number} Returns the sum.
	     */
	    function arraySum(array, iteratee) {
	      var length = array.length,
	          result = 0;

	      while (length--) {
	        result += +iteratee(array[length]) || 0;
	      }
	      return result;
	    }

	    /**
	     * Used by `_.defaults` to customize its `_.assign` use.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function assignDefaults(objectValue, sourceValue) {
	      return objectValue === undefined ? sourceValue : objectValue;
	    }

	    /**
	     * Used by `_.template` to customize its `_.assign` use.
	     *
	     * **Note:** This function is like `assignDefaults` except that it ignores
	     * inherited property values when checking if a property is `undefined`.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @param {string} key The key associated with the object and source values.
	     * @param {Object} object The destination object.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function assignOwnDefaults(objectValue, sourceValue, key, object) {
	      return (objectValue === undefined || !hasOwnProperty.call(object, key))
	        ? sourceValue
	        : objectValue;
	    }

	    /**
	     * A specialized version of `_.assign` for customizing assigned values without
	     * support for argument juggling, multiple sources, and `this` binding `customizer`
	     * functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     */
	    function assignWith(object, source, customizer) {
	      var index = -1,
	          props = keys(source),
	          length = props.length;

	      while (++index < length) {
	        var key = props[index],
	            value = object[key],
	            result = customizer(value, source[key], key, object, source);

	        if ((result === result ? (result !== value) : (value === value)) ||
	            (value === undefined && !(key in object))) {
	          object[key] = result;
	        }
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `_.assign` without support for argument juggling,
	     * multiple sources, and `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssign(object, source) {
	      return source == null
	        ? object
	        : baseCopy(source, keys(source), object);
	    }

	    /**
	     * The base implementation of `_.at` without support for string collections
	     * and individual key arguments.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {number[]|string[]} props The property names or indexes of elements to pick.
	     * @returns {Array} Returns the new array of picked elements.
	     */
	    function baseAt(collection, props) {
	      var index = -1,
	          isNil = collection == null,
	          isArr = !isNil && isArrayLike(collection),
	          length = isArr ? collection.length : 0,
	          propsLength = props.length,
	          result = Array(propsLength);

	      while(++index < propsLength) {
	        var key = props[index];
	        if (isArr) {
	          result[index] = isIndex(key, length) ? collection[key] : undefined;
	        } else {
	          result[index] = isNil ? undefined : collection[key];
	        }
	      }
	      return result;
	    }

	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property names to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @returns {Object} Returns `object`.
	     */
	    function baseCopy(source, props, object) {
	      object || (object = {});

	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index];
	        object[key] = source[key];
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `_.callback` which supports specifying the
	     * number of arguments to provide to `func`.
	     *
	     * @private
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {number} [argCount] The number of arguments to provide to `func`.
	     * @returns {Function} Returns the callback.
	     */
	    function baseCallback(func, thisArg, argCount) {
	      var type = typeof func;
	      if (type == 'function') {
	        return thisArg === undefined
	          ? func
	          : bindCallback(func, thisArg, argCount);
	      }
	      if (func == null) {
	        return identity;
	      }
	      if (type == 'object') {
	        return baseMatches(func);
	      }
	      return thisArg === undefined
	        ? property(func)
	        : baseMatchesProperty(func, thisArg);
	    }

	    /**
	     * The base implementation of `_.clone` without support for argument juggling
	     * and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The object `value` belongs to.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates clones with source counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
	      var result;
	      if (customizer) {
	        result = object ? customizer(value, key, object) : customizer(value);
	      }
	      if (result !== undefined) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return arrayCopy(value, result);
	        }
	      } else {
	        var tag = objToString.call(value),
	            isFunc = tag == funcTag;

	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          result = initCloneObject(isFunc ? {} : value);
	          if (!isDeep) {
	            return baseAssign(result, value);
	          }
	        } else {
	          return cloneableTags[tag]
	            ? initCloneByTag(value, tag, isDeep)
	            : (object ? value : {});
	        }
	      }
	      // Check for circular references and return its corresponding clone.
	      stackA || (stackA = []);
	      stackB || (stackB = []);

	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == value) {
	          return stackB[length];
	        }
	      }
	      // Add the source value to the stack of traversed objects and associate it with its clone.
	      stackA.push(value);
	      stackB.push(result);

	      // Recursively populate clone (susceptible to call stack limits).
	      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
	        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} prototype The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    var baseCreate = (function() {
	      function object() {}
	      return function(prototype) {
	        if (isObject(prototype)) {
	          object.prototype = prototype;
	          var result = new object;
	          object.prototype = undefined;
	        }
	        return result || {};
	      };
	    }());

	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts an index
	     * of where to slice the arguments to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Object} args The arguments provide to `func`.
	     * @returns {number} Returns the timer id.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined, args); }, wait);
	    }

	    /**
	     * The base implementation of `_.difference` which accepts a single array
	     * of values to exclude.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values) {
	      var length = array ? array.length : 0,
	          result = [];

	      if (!length) {
	        return result;
	      }
	      var index = -1,
	          indexOf = getIndexOf(),
	          isCommon = indexOf == baseIndexOf,
	          cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
	          valuesLength = values.length;

	      if (cache) {
	        indexOf = cacheIndexOf;
	        isCommon = false;
	        values = cache;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index];

	        if (isCommon && value === value) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === value) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (indexOf(values, value, 0) < 0) {
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.forEach` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);

	    /**
	     * The base implementation of `_.forEachRight` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);

	    /**
	     * The base implementation of `_.every` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }

	    /**
	     * Gets the extremum value of `collection` invoking `iteratee` for each value
	     * in `collection` to generate the criterion by which the value is ranked.
	     * The `iteratee` is invoked with three arguments: (value, index|key, collection).
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {*} Returns the extremum value.
	     */
	    function baseExtremum(collection, iteratee, comparator, exValue) {
	      var computed = exValue,
	          result = computed;

	      baseEach(collection, function(value, index, collection) {
	        var current = +iteratee(value, index, collection);
	        if (comparator(current, computed) || (current === exValue && current === result)) {
	          computed = current;
	          result = value;
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;

	      start = start == null ? 0 : (+start || 0);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : (+end || 0);
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : (end >>> 0);
	      start >>>= 0;

	      while (start < length) {
	        array[start++] = value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.filter` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
	     * without support for callback shorthands and `this` binding, which iterates
	     * over `collection` using the provided `eachFunc`.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {Function} eachFunc The function to iterate over `collection`.
	     * @param {boolean} [retKey] Specify returning the key of the found element
	     *  instead of the element itself.
	     * @returns {*} Returns the found element or its key, else `undefined`.
	     */
	    function baseFind(collection, predicate, eachFunc, retKey) {
	      var result;
	      eachFunc(collection, function(value, key, collection) {
	        if (predicate(value, key, collection)) {
	          result = retKey ? key : value;
	          return false;
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.flatten` with added support for restricting
	     * flattening and specifying the start index.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {boolean} [isDeep] Specify a deep flatten.
	     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, isDeep, isStrict, result) {
	      result || (result = []);

	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        var value = array[index];
	        if (isObjectLike(value) && isArrayLike(value) &&
	            (isStrict || isArray(value) || isArguments(value))) {
	          if (isDeep) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            baseFlatten(value, isDeep, isStrict, result);
	          } else {
	            arrayPush(result, value);
	          }
	        } else if (!isStrict) {
	          result[result.length] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `baseForIn` and `baseForOwn` which iterates
	     * over `object` properties returned by `keysFunc` invoking `iteratee` for
	     * each property. Iteratee functions may exit iteration early by explicitly
	     * returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();

	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);

	    /**
	     * The base implementation of `_.forIn` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForIn(object, iteratee) {
	      return baseFor(object, iteratee, keysIn);
	    }

	    /**
	     * The base implementation of `_.forOwn` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return baseFor(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.forOwnRight` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return baseForRight(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from those provided.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the new array of filtered property names.
	     */
	    function baseFunctions(object, props) {
	      var index = -1,
	          length = props.length,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var key = props[index];
	        if (isFunction(object[key])) {
	          result[++resIndex] = key;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `get` without support for string paths
	     * and default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path of the property to get.
	     * @param {string} [pathKey] The key representation of path.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path, pathKey) {
	      if (object == null) {
	        return;
	      }
	      if (pathKey !== undefined && pathKey in toObject(object)) {
	        path = [pathKey];
	      }
	      var index = 0,
	          length = path.length;

	      while (object != null && index < length) {
	        object = object[path[index++]];
	      }
	      return (index && index == length) ? object : undefined;
	    }

	    /**
	     * The base implementation of `_.isEqual` without support for `this` binding
	     * `customizer` functions.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
	      if (value === other) {
	        return true;
	      }
	      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
	    }

	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing objects.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA=[]] Tracks traversed `value` objects.
	     * @param {Array} [stackB=[]] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = arrayTag,
	          othTag = arrayTag;

	      if (!objIsArr) {
	        objTag = objToString.call(object);
	        if (objTag == argsTag) {
	          objTag = objectTag;
	        } else if (objTag != objectTag) {
	          objIsArr = isTypedArray(object);
	        }
	      }
	      if (!othIsArr) {
	        othTag = objToString.call(other);
	        if (othTag == argsTag) {
	          othTag = objectTag;
	        } else if (othTag != objectTag) {
	          othIsArr = isTypedArray(other);
	        }
	      }
	      var objIsObj = objTag == objectTag,
	          othIsObj = othTag == objectTag,
	          isSameTag = objTag == othTag;

	      if (isSameTag && !(objIsArr || objIsObj)) {
	        return equalByTag(object, other, objTag);
	      }
	      if (!isLoose) {
	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	        if (objIsWrapped || othIsWrapped) {
	          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      // For more information on detecting circular references see https://es5.github.io/#JO.
	      stackA || (stackA = []);
	      stackB || (stackB = []);

	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == object) {
	          return stackB[length] == other;
	        }
	      }
	      // Add `object` and `other` to the stack of traversed objects.
	      stackA.push(object);
	      stackB.push(other);

	      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

	      stackA.pop();
	      stackB.pop();

	      return result;
	    }

	    /**
	     * The base implementation of `_.isMatch` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} matchData The propery names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparing objects.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, matchData, customizer) {
	      var index = matchData.length,
	          length = index,
	          noCustomizer = !customizer;

	      if (object == null) {
	        return !length;
	      }
	      object = toObject(object);
	      while (index--) {
	        var data = matchData[index];
	        if ((noCustomizer && data[2])
	              ? data[1] !== object[data[0]]
	              : !(data[0] in object)
	            ) {
	          return false;
	        }
	      }
	      while (++index < length) {
	        data = matchData[index];
	        var key = data[0],
	            objValue = object[key],
	            srcValue = data[1];

	        if (noCustomizer && data[2]) {
	          if (objValue === undefined && !(key in object)) {
	            return false;
	          }
	        } else {
	          var result = customizer ? customizer(objValue, srcValue, key) : undefined;
	          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.map` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.matches` which does not clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatches(source) {
	      var matchData = getMatchData(source);
	      if (matchData.length == 1 && matchData[0][2]) {
	        var key = matchData[0][0],
	            value = matchData[0][1];

	        return function(object) {
	          if (object == null) {
	            return false;
	          }
	          return object[key] === value && (value !== undefined || (key in toObject(object)));
	        };
	      }
	      return function(object) {
	        return baseIsMatch(object, matchData);
	      };
	    }

	    /**
	     * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to compare.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatchesProperty(path, srcValue) {
	      var isArr = isArray(path),
	          isCommon = isKey(path) && isStrictComparable(srcValue),
	          pathKey = (path + '');

	      path = toPath(path);
	      return function(object) {
	        if (object == null) {
	          return false;
	        }
	        var key = pathKey;
	        object = toObject(object);
	        if ((isArr || !isCommon) && !(key in object)) {
	          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	          if (object == null) {
	            return false;
	          }
	          key = last(path);
	          object = toObject(object);
	        }
	        return object[key] === srcValue
	          ? (srcValue !== undefined || (key in object))
	          : baseIsEqual(srcValue, object[key], undefined, true);
	      };
	    }

	    /**
	     * The base implementation of `_.merge` without support for argument juggling,
	     * multiple sources, and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     * @returns {Object} Returns `object`.
	     */
	    function baseMerge(object, source, customizer, stackA, stackB) {
	      if (!isObject(object)) {
	        return object;
	      }
	      var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
	          props = isSrcArr ? undefined : keys(source);

	      arrayEach(props || source, function(srcValue, key) {
	        if (props) {
	          key = srcValue;
	          srcValue = source[key];
	        }
	        if (isObjectLike(srcValue)) {
	          stackA || (stackA = []);
	          stackB || (stackB = []);
	          baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
	        }
	        else {
	          var value = object[key],
	              result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	              isCommon = result === undefined;

	          if (isCommon) {
	            result = srcValue;
	          }
	          if ((result !== undefined || (isSrcArr && !(key in object))) &&
	              (isCommon || (result === result ? (result !== value) : (value === value)))) {
	            object[key] = result;
	          }
	        }
	      });
	      return object;
	    }

	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
	      var length = stackA.length,
	          srcValue = source[key];

	      while (length--) {
	        if (stackA[length] == srcValue) {
	          object[key] = stackB[length];
	          return;
	        }
	      }
	      var value = object[key],
	          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	          isCommon = result === undefined;

	      if (isCommon) {
	        result = srcValue;
	        if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
	          result = isArray(value)
	            ? value
	            : (isArrayLike(value) ? arrayCopy(value) : []);
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          result = isArguments(value)
	            ? toPlainObject(value)
	            : (isPlainObject(value) ? value : {});
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      // Add the source value to the stack of traversed objects and associate
	      // it with its merged value.
	      stackA.push(srcValue);
	      stackB.push(result);

	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
	      } else if (result === result ? (result !== value) : (value === value)) {
	        object[key] = result;
	      }
	    }

	    /**
	     * The base implementation of `_.property` without support for deep paths.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function baseProperty(key) {
	      return function(object) {
	        return object == null ? undefined : object[key];
	      };
	    }

	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function basePropertyDeep(path) {
	      var pathKey = (path + '');
	      path = toPath(path);
	      return function(object) {
	        return baseGet(object, path, pathKey);
	      };
	    }

	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * index arguments and capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = array ? indexes.length : 0;
	      while (length--) {
	        var index = indexes[length];
	        if (index != previous && isIndex(index)) {
	          var previous = index;
	          splice.call(array, index, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.random` without support for argument juggling
	     * and returning floating-point numbers.
	     *
	     * @private
	     * @param {number} min The minimum possible value.
	     * @param {number} max The maximum possible value.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(min, max) {
	      return min + nativeFloor(nativeRandom() * (max - min + 1));
	    }

	    /**
	     * The base implementation of `_.reduce` and `_.reduceRight` without support
	     * for callback shorthands and `this` binding, which iterates over `collection`
	     * using the provided `eachFunc`.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} accumulator The initial value.
	     * @param {boolean} initFromCollection Specify using the first or last element
	     *  of `collection` as the initial value.
	     * @param {Function} eachFunc The function to iterate over `collection`.
	     * @returns {*} Returns the accumulated value.
	     */
	    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
	      eachFunc(collection, function(value, index, collection) {
	        accumulator = initFromCollection
	          ? (initFromCollection = false, value)
	          : iteratee(accumulator, value, index, collection);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `setData` without support for hot loop detection.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };

	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;

	      start = start == null ? 0 : (+start || 0);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : (+end || 0);
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;

	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.some` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;

	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }

	    /**
	     * The base implementation of `_.sortBy` which uses `comparer` to define
	     * the sort order of `array` and replaces criteria objects with their
	     * corresponding values.
	     *
	     * @private
	     * @param {Array} array The array to sort.
	     * @param {Function} comparer The function to define sort order.
	     * @returns {Array} Returns `array`.
	     */
	    function baseSortBy(array, comparer) {
	      var length = array.length;

	      array.sort(comparer);
	      while (length--) {
	        array[length] = array[length].value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.sortByOrder` without param guards.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {boolean[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseSortByOrder(collection, iteratees, orders) {
	      var callback = getCallback(),
	          index = -1;

	      iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });

	      var result = baseMap(collection, function(value) {
	        var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });

	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }

	    /**
	     * The base implementation of `_.sum` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {number} Returns the sum.
	     */
	    function baseSum(collection, iteratee) {
	      var result = 0;
	      baseEach(collection, function(value, index, collection) {
	        result += +iteratee(value, index, collection) || 0;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.uniq` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The function invoked per iteration.
	     * @returns {Array} Returns the new duplicate-value-free array.
	     */
	    function baseUniq(array, iteratee) {
	      var index = -1,
	          indexOf = getIndexOf(),
	          length = array.length,
	          isCommon = indexOf == baseIndexOf,
	          isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
	          seen = isLarge ? createCache() : null,
	          result = [];

	      if (seen) {
	        indexOf = cacheIndexOf;
	        isCommon = false;
	      } else {
	        isLarge = false;
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value, index, array) : value;

	        if (isCommon && value === value) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (indexOf(seen, computed, 0) < 0) {
	          if (iteratee || isLarge) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.values` and `_.valuesIn` which creates an
	     * array of `object` property values corresponding to the property names
	     * of `props`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} props The property names to get values for.
	     * @returns {Object} Returns the array of property values.
	     */
	    function baseValues(object, props) {
	      var index = -1,
	          length = props.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = object[props[index]];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
	     * and `_.takeWhile` without support for callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;

	      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }

	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to peform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      var index = -1,
	          length = actions.length;

	      while (++index < length) {
	        var action = actions[index];
	        result = action.func.apply(action.thisArg, arrayPush([result], action.args));
	      }
	      return result;
	    }

	    /**
	     * Performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function binaryIndex(array, value, retHighest) {
	      var low = 0,
	          high = array ? array.length : low;

	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];

	          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return binaryIndexBy(array, value, identity, retHighest);
	    }

	    /**
	     * This function is like `binaryIndex` except that it invokes `iteratee` for
	     * `value` and each element of `array` to compute their sort ranking. The
	     * iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function binaryIndexBy(array, value, iteratee, retHighest) {
	      value = iteratee(value);

	      var low = 0,
	          high = array ? array.length : 0,
	          valIsNaN = value !== value,
	          valIsNull = value === null,
	          valIsUndef = value === undefined;

	      while (low < high) {
	        var mid = nativeFloor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            isDef = computed !== undefined,
	            isReflexive = computed === computed;

	        if (valIsNaN) {
	          var setLow = isReflexive || retHighest;
	        } else if (valIsNull) {
	          setLow = isReflexive && isDef && (retHighest || computed != null);
	        } else if (valIsUndef) {
	          setLow = isReflexive && (retHighest || isDef);
	        } else if (computed == null) {
	          setLow = false;
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }

	    /**
	     * A specialized version of `baseCallback` which only supports `this` binding
	     * and specifying the number of arguments to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {number} [argCount] The number of arguments to provide to `func`.
	     * @returns {Function} Returns the callback.
	     */
	    function bindCallback(func, thisArg, argCount) {
	      if (typeof func != 'function') {
	        return identity;
	      }
	      if (thisArg === undefined) {
	        return func;
	      }
	      switch (argCount) {
	        case 1: return function(value) {
	          return func.call(thisArg, value);
	        };
	        case 3: return function(value, index, collection) {
	          return func.call(thisArg, value, index, collection);
	        };
	        case 4: return function(accumulator, value, index, collection) {
	          return func.call(thisArg, accumulator, value, index, collection);
	        };
	        case 5: return function(value, other, key, object, source) {
	          return func.call(thisArg, value, other, key, object, source);
	        };
	      }
	      return function() {
	        return func.apply(thisArg, arguments);
	      };
	    }

	    /**
	     * Creates a clone of the given array buffer.
	     *
	     * @private
	     * @param {ArrayBuffer} buffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function bufferClone(buffer) {
	      var result = new ArrayBuffer(buffer.byteLength),
	          view = new Uint8Array(result);

	      view.set(new Uint8Array(buffer));
	      return result;
	    }

	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders) {
	      var holdersLength = holders.length,
	          argsIndex = -1,
	          argsLength = nativeMax(args.length - holdersLength, 0),
	          leftIndex = -1,
	          leftLength = partials.length,
	          result = Array(leftLength + argsLength);

	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        result[holders[argsIndex]] = args[argsIndex];
	      }
	      while (argsLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders) {
	      var holdersIndex = -1,
	          holdersLength = holders.length,
	          argsIndex = -1,
	          argsLength = nativeMax(args.length - holdersLength, 0),
	          rightIndex = -1,
	          rightLength = partials.length,
	          result = Array(argsLength + rightLength);

	      while (++argsIndex < argsLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var offset = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[offset + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        result[offset + holders[holdersIndex]] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.
	     *
	     * @private
	     * @param {Function} setter The function to set keys and values of the accumulator object.
	     * @param {Function} [initializer] The function to initialize the accumulator object.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee, thisArg) {
	        var result = initializer ? initializer() : {};
	        iteratee = getCallback(iteratee, thisArg, 3);

	        if (isArray(collection)) {
	          var index = -1,
	              length = collection.length;

	          while (++index < length) {
	            var value = collection[index];
	            setter(result, value, iteratee(value, index, collection), collection);
	          }
	        } else {
	          baseEach(collection, function(value, key, collection) {
	            setter(result, value, iteratee(value, key, collection), collection);
	          });
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return restParam(function(object, sources) {
	        var index = -1,
	            length = object == null ? 0 : sources.length,
	            customizer = length > 2 ? sources[length - 2] : undefined,
	            guard = length > 2 ? sources[2] : undefined,
	            thisArg = length > 1 ? sources[length - 1] : undefined;

	        if (typeof customizer == 'function') {
	          customizer = bindCallback(customizer, thisArg, 5);
	          length -= 2;
	        } else {
	          customizer = typeof thisArg == 'function' ? thisArg : undefined;
	          length -= (customizer ? 1 : 0);
	        }
	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? undefined : customizer;
	          length = 1;
	        }
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, customizer);
	          }
	        }
	        return object;
	      });
	    }

	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        var length = collection ? getLength(collection) : 0;
	        if (!isLength(length)) {
	          return eachFunc(collection, iteratee);
	        }
	        var index = fromRight ? length : -1,
	            iterable = toObject(collection);

	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }

	    /**
	     * Creates a base function for `_.forIn` or `_.forInRight`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var iterable = toObject(object),
	            props = keysFunc(object),
	            length = props.length,
	            index = fromRight ? length : -1;

	        while ((fromRight ? index-- : ++index < length)) {
	          var key = props[index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with the `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to bind.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new bound function.
	     */
	    function createBindWrapper(func, thisArg) {
	      var Ctor = createCtorWrapper(func);

	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(thisArg, arguments);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `Set` cache object to optimize linear searches of large arrays.
	     *
	     * @private
	     * @param {Array} [values] The values to cache.
	     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
	     */
	    function createCache(values) {
	      return (nativeCreate && Set) ? new SetCache(values) : null;
	    }

	    /**
	     * Creates a function that produces compound words out of the words in a
	     * given string.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        var index = -1,
	            array = words(deburr(string)),
	            length = array.length,
	            result = '';

	        while (++index < length) {
	          result = callback(result, array[index], index);
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtorWrapper(Ctor) {
	      return function() {
	        // Use a `switch` statement to work with class constructors.
	        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	        // for more details.
	        var args = arguments;
	        switch (args.length) {
	          case 0: return new Ctor;
	          case 1: return new Ctor(args[0]);
	          case 2: return new Ctor(args[0], args[1]);
	          case 3: return new Ctor(args[0], args[1], args[2]);
	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	        }
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, args);

	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }

	    /**
	     * Creates a `_.curry` or `_.curryRight` function.
	     *
	     * @private
	     * @param {boolean} flag The curry bit flag.
	     * @returns {Function} Returns the new curry function.
	     */
	    function createCurry(flag) {
	      function curryFunc(func, arity, guard) {
	        if (guard && isIterateeCall(func, arity, guard)) {
	          arity = undefined;
	        }
	        var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);
	        result.placeholder = curryFunc.placeholder;
	        return result;
	      }
	      return curryFunc;
	    }

	    /**
	     * Creates a `_.defaults` or `_.defaultsDeep` function.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Function} Returns the new defaults function.
	     */
	    function createDefaults(assigner, customizer) {
	      return restParam(function(args) {
	        var object = args[0];
	        if (object == null) {
	          return object;
	        }
	        args.push(customizer);
	        return assigner.apply(undefined, args);
	      });
	    }

	    /**
	     * Creates a `_.max` or `_.min` function.
	     *
	     * @private
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {Function} Returns the new extremum function.
	     */
	    function createExtremum(comparator, exValue) {
	      return function(collection, iteratee, thisArg) {
	        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	          iteratee = undefined;
	        }
	        iteratee = getCallback(iteratee, thisArg, 3);
	        if (iteratee.length == 1) {
	          collection = isArray(collection) ? collection : toIterable(collection);
	          var result = arrayExtremum(collection, iteratee, comparator, exValue);
	          if (!(collection.length && result === exValue)) {
	            return result;
	          }
	        }
	        return baseExtremum(collection, iteratee, comparator, exValue);
	      };
	    }

	    /**
	     * Creates a `_.find` or `_.findLast` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFind(eachFunc, fromRight) {
	      return function(collection, predicate, thisArg) {
	        predicate = getCallback(predicate, thisArg, 3);
	        if (isArray(collection)) {
	          var index = baseFindIndex(collection, predicate, fromRight);
	          return index > -1 ? collection[index] : undefined;
	        }
	        return baseFind(collection, predicate, eachFunc);
	      };
	    }

	    /**
	     * Creates a `_.findIndex` or `_.findLastIndex` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFindIndex(fromRight) {
	      return function(array, predicate, thisArg) {
	        if (!(array && array.length)) {
	          return -1;
	        }
	        predicate = getCallback(predicate, thisArg, 3);
	        return baseFindIndex(array, predicate, fromRight);
	      };
	    }

	    /**
	     * Creates a `_.findKey` or `_.findLastKey` function.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFindKey(objectFunc) {
	      return function(object, predicate, thisArg) {
	        predicate = getCallback(predicate, thisArg, 3);
	        return baseFind(object, predicate, objectFunc, true);
	      };
	    }

	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return function() {
	        var wrapper,
	            length = arguments.length,
	            index = fromRight ? length : -1,
	            leftIndex = 0,
	            funcs = Array(length);

	        while ((fromRight ? index-- : ++index < length)) {
	          var func = funcs[leftIndex++] = arguments[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {
	            wrapper = new LodashWrapper([], true);
	          }
	        }
	        index = wrapper ? -1 : length;
	        while (++index < length) {
	          func = funcs[index];

	          var funcName = getFuncName(func),
	              data = funcName == 'wrapper' ? getData(func) : undefined;

	          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments,
	              value = args[0];

	          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
	            return wrapper.plant(value).value();
	          }
	          var index = 0,
	              result = length ? funcs[index].apply(this, args) : value;

	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      };
	    }

	    /**
	     * Creates a function for `_.forEach` or `_.forEachRight`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over an array.
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForEach(arrayFunc, eachFunc) {
	      return function(collection, iteratee, thisArg) {
	        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	          ? arrayFunc(collection, iteratee)
	          : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
	      };
	    }

	    /**
	     * Creates a function for `_.forIn` or `_.forInRight`.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForIn(objectFunc) {
	      return function(object, iteratee, thisArg) {
	        if (typeof iteratee != 'function' || thisArg !== undefined) {
	          iteratee = bindCallback(iteratee, thisArg, 3);
	        }
	        return objectFunc(object, iteratee, keysIn);
	      };
	    }

	    /**
	     * Creates a function for `_.forOwn` or `_.forOwnRight`.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForOwn(objectFunc) {
	      return function(object, iteratee, thisArg) {
	        if (typeof iteratee != 'function' || thisArg !== undefined) {
	          iteratee = bindCallback(iteratee, thisArg, 3);
	        }
	        return objectFunc(object, iteratee);
	      };
	    }

	    /**
	     * Creates a function for `_.mapKeys` or `_.mapValues`.
	     *
	     * @private
	     * @param {boolean} [isMapKeys] Specify mapping keys instead of values.
	     * @returns {Function} Returns the new map function.
	     */
	    function createObjectMapper(isMapKeys) {
	      return function(object, iteratee, thisArg) {
	        var result = {};
	        iteratee = getCallback(iteratee, thisArg, 3);

	        baseForOwn(object, function(value, key, object) {
	          var mapped = iteratee(value, key, object);
	          key = isMapKeys ? mapped : key;
	          value = isMapKeys ? value : mapped;
	          result[key] = value;
	        });
	        return result;
	      };
	    }

	    /**
	     * Creates a function for `_.padLeft` or `_.padRight`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify padding from the right.
	     * @returns {Function} Returns the new pad function.
	     */
	    function createPadDir(fromRight) {
	      return function(string, length, chars) {
	        string = baseToString(string);
	        return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);
	      };
	    }

	    /**
	     * Creates a `_.partial` or `_.partialRight` function.
	     *
	     * @private
	     * @param {boolean} flag The partial bit flag.
	     * @returns {Function} Returns the new partial function.
	     */
	    function createPartial(flag) {
	      var partialFunc = restParam(function(func, partials) {
	        var holders = replaceHolders(partials, partialFunc.placeholder);
	        return createWrapper(func, flag, undefined, partials, holders);
	      });
	      return partialFunc;
	    }

	    /**
	     * Creates a function for `_.reduce` or `_.reduceRight`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over an array.
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @returns {Function} Returns the new each function.
	     */
	    function createReduce(arrayFunc, eachFunc) {
	      return function(collection, iteratee, accumulator, thisArg) {
	        var initFromArray = arguments.length < 3;
	        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	          ? arrayFunc(collection, iteratee, accumulator, initFromArray)
	          : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
	      };
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with optional `this`
	     * binding of, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & ARY_FLAG,
	          isBind = bitmask & BIND_FLAG,
	          isBindKey = bitmask & BIND_KEY_FLAG,
	          isCurry = bitmask & CURRY_FLAG,
	          isCurryBound = bitmask & CURRY_BOUND_FLAG,
	          isCurryRight = bitmask & CURRY_RIGHT_FLAG,
	          Ctor = isBindKey ? undefined : createCtorWrapper(func);

	      function wrapper() {
	        // Avoid `arguments` object use disqualifying optimizations by
	        // converting it to an array before providing it to other functions.
	        var length = arguments.length,
	            index = length,
	            args = Array(length);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight);
	        }
	        if (isCurry || isCurryRight) {
	          var placeholder = wrapper.placeholder,
	              argsHolders = replaceHolders(args, placeholder);

	          length -= argsHolders.length;
	          if (length < arity) {
	            var newArgPos = argPos ? arrayCopy(argPos) : undefined,
	                newArity = nativeMax(arity - length, 0),
	                newsHolders = isCurry ? argsHolders : undefined,
	                newHoldersRight = isCurry ? undefined : argsHolders,
	                newPartials = isCurry ? args : undefined,
	                newPartialsRight = isCurry ? undefined : args;

	            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
	            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

	            if (!isCurryBound) {
	              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
	            }
	            var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
	                result = createHybridWrapper.apply(undefined, newData);

	            if (isLaziable(func)) {
	              setData(result, newData);
	            }
	            result.placeholder = placeholder;
	            return result;
	          }
	        }
	        var thisBinding = isBind ? thisArg : this,
	            fn = isBindKey ? thisBinding[func] : func;

	        if (argPos) {
	          args = reorder(args, argPos);
	        }
	        if (isAry && ary < args.length) {
	          args.length = ary;
	        }
	        if (this && this !== root && this instanceof wrapper) {
	          fn = Ctor || createCtorWrapper(func);
	        }
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates the padding required for `string` based on the given `length`.
	     * The `chars` string is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {string} string The string to create padding for.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the pad for `string`.
	     */
	    function createPadding(string, length, chars) {
	      var strLength = string.length;
	      length = +length;

	      if (strLength >= length || !nativeIsFinite(length)) {
	        return '';
	      }
	      var padLength = length - strLength;
	      chars = chars == null ? ' ' : (chars + '');
	      return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with the optional `this`
	     * binding of `thisArg` and the `partials` prepended to those provided to
	     * the wrapper.
	     *
	     * @private
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to the new function.
	     * @returns {Function} Returns the new bound function.
	     */
	    function createPartialWrapper(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & BIND_FLAG,
	          Ctor = createCtorWrapper(func);

	      function wrapper() {
	        // Avoid `arguments` object use disqualifying optimizations by
	        // converting it to an array before providing it `func`.
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(leftLength + argsLength);

	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.ceil`, `_.floor`, or `_.round` function.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
	    function createRound(methodName) {
	      var func = Math[methodName];
	      return function(number, precision) {
	        precision = precision === undefined ? 0 : (+precision || 0);
	        if (precision) {
	          precision = pow(10, precision);
	          return func(number * precision) / precision;
	        }
	        return func(number);
	      };
	    }

	    /**
	     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
	     *
	     * @private
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {Function} Returns the new index function.
	     */
	    function createSortedIndex(retHighest) {
	      return function(array, value, iteratee, thisArg) {
	        var callback = getCallback(iteratee);
	        return (iteratee == null && callback === baseCallback)
	          ? binaryIndex(array, value, retHighest)
	          : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);
	      };
	    }

	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - `_.bind`
	     *     2 - `_.bindKey`
	     *     4 - `_.curry` or `_.curryRight` of a bound function
	     *     8 - `_.curry`
	     *    16 - `_.curryRight`
	     *    32 - `_.partial`
	     *    64 - `_.partialRight`
	     *   128 - `_.rearg`
	     *   256 - `_.ary`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
	        partials = holders = undefined;
	      }
	      length -= (holders ? holders.length : 0);
	      if (bitmask & PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;

	        partials = holders = undefined;
	      }
	      var data = isBindKey ? undefined : getData(func),
	          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

	      if (data) {
	        mergeData(newData, data);
	        bitmask = newData[1];
	        arity = newData[9];
	      }
	      newData[9] = arity == null
	        ? (isBindKey ? 0 : func.length)
	        : (nativeMax(arity - length, 0) || 0);

	      if (bitmask == BIND_FLAG) {
	        var result = createBindWrapper(newData[0], newData[2]);
	      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
	        result = createPartialWrapper.apply(undefined, newData);
	      } else {
	        result = createHybridWrapper.apply(undefined, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setter(result, newData);
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing arrays.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var index = -1,
	          arrLength = array.length,
	          othLength = other.length;

	      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
	        return false;
	      }
	      // Ignore non-index properties.
	      while (++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index],
	            result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

	        if (result !== undefined) {
	          if (result) {
	            continue;
	          }
	          return false;
	        }
	        // Recursively compare arrays (susceptible to call stack limits).
	        if (isLoose) {
	          if (!arraySome(other, function(othValue) {
	                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
	              })) {
	            return false;
	          }
	        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag) {
	      switch (tag) {
	        case boolTag:
	        case dateTag:
	          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
	          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
	          return +object == +other;

	        case errorTag:
	          return object.name == other.name && object.message == other.message;

	        case numberTag:
	          // Treat `NaN` vs. `NaN` as equal.
	          return (object != +object)
	            ? other != +other
	            : object == +other;

	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings primitives and string
	          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
	          return object == (other + '');
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var objProps = keys(object),
	          objLength = objProps.length,
	          othProps = keys(other),
	          othLength = othProps.length;

	      if (objLength != othLength && !isLoose) {
	        return false;
	      }
	      var index = objLength;
	      while (index--) {
	        var key = objProps[index];
	        if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
	          return false;
	        }
	      }
	      var skipCtor = isLoose;
	      while (++index < objLength) {
	        key = objProps[index];
	        var objValue = object[key],
	            othValue = other[key],
	            result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

	        // Recursively compare objects (susceptible to call stack limits).
	        if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
	          return false;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (!skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;

	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * Gets the appropriate "callback" function. If the `_.callback` method is
	     * customized this function returns the custom method, otherwise it returns
	     * the `baseCallback` function. If arguments are provided the chosen function
	     * is invoked with them and its result is returned.
	     *
	     * @private
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getCallback(func, thisArg, argCount) {
	      var result = lodash.callback || callback;
	      result = result === callback ? baseCallback : result;
	      return argCount ? result(func, thisArg, argCount) : result;
	    }

	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };

	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    function getFuncName(func) {
	      var result = func.name,
	          array = realNames[result],
	          length = array ? array.length : 0;

	      while (length--) {
	        var data = array[length],
	            otherFunc = data.func;
	        if (otherFunc == null || otherFunc == func) {
	          return data.name;
	        }
	      }
	      return result;
	    }

	    /**
	     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
	     * customized this function returns the custom method, otherwise it returns
	     * the `baseIndexOf` function. If arguments are provided the chosen function
	     * is invoked with them and its result is returned.
	     *
	     * @private
	     * @returns {Function|number} Returns the chosen function or its result.
	     */
	    function getIndexOf(collection, target, fromIndex) {
	      var result = lodash.indexOf || indexOf;
	      result = result === indexOf ? baseIndexOf : result;
	      return collection ? result(collection, target, fromIndex) : result;
	    }

	    /**
	     * Gets the "length" property value of `object`.
	     *
	     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	     * that affects Safari on at least iOS 8.1-8.3 ARM64.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {*} Returns the "length" value.
	     */
	    var getLength = baseProperty('length');

	    /**
	     * Gets the propery names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
	    function getMatchData(object) {
	      var result = pairs(object),
	          length = result.length;

	      while (length--) {
	        result[length][2] = isStrictComparable(result[length][1]);
	      }
	      return result;
	    }

	    /**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
	    function getNative(object, key) {
	      var value = object == null ? undefined : object[key];
	      return isNative(value) ? value : undefined;
	    }

	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms.length;

	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;

	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }

	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = new array.constructor(length);

	      // Add array properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }

	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      var Ctor = object.constructor;
	      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
	        Ctor = Object;
	      }
	      return new Ctor;
	    }

	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return bufferClone(object);

	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);

	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          var buffer = object.buffer;
	          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

	        case numberTag:
	        case stringTag:
	          return new Ctor(object);

	        case regexpTag:
	          var result = new Ctor(object.source, reFlags.exec(object));
	          result.lastIndex = object.lastIndex;
	      }
	      return result;
	    }

	    /**
	     * Invokes the method at `path` on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function invokePath(object, path, args) {
	      if (object != null && !isKey(path, object)) {
	        path = toPath(path);
	        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	        path = last(path);
	      }
	      var func = object == null ? object : object[path];
	      return func == null ? undefined : func.apply(object, args);
	    }

	    /**
	     * Checks if `value` is array-like.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     */
	    function isArrayLike(value) {
	      return value != null && isLength(getLength(value));
	    }

	    /**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
	    function isIndex(value, length) {
	      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	      length = length == null ? MAX_SAFE_INTEGER : length;
	      return value > -1 && value % 1 == 0 && value < length;
	    }

	    /**
	     * Checks if the provided arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number'
	          ? (isArrayLike(object) && isIndex(index, object.length))
	          : (type == 'string' && index in object)) {
	        var other = object[index];
	        return value === value ? (value === other) : (other !== other);
	      }
	      return false;
	    }

	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      var type = typeof value;
	      if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
	        return true;
	      }
	      if (isArray(value)) {
	        return false;
	      }
	      var result = !reIsDeepProp.test(value);
	      return result || (object != null && value in toObject(object));
	    }

	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func);
	      if (!(funcName in LazyWrapper.prototype)) {
	        return false;
	      }
	      var other = lodash[funcName];
	      if (func === other) {
	        return true;
	      }
	      var data = getData(other);
	      return !!data && func === data[0];
	    }

	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     */
	    function isLength(value) {
	      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && !isObject(value);
	    }

	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers required to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
	     * augment function arguments, making the order in which they are executed important,
	     * preventing the merging of metadata. However, we make an exception for a safe
	     * common case where curried functions have `_.ary` and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < ARY_FLAG;

	      var isCombo =
	        (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||
	        (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||
	        (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);

	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = arrayCopy(value);
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;

	      return data;
	    }

	    /**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function mergeDefaults(objectValue, sourceValue) {
	      return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);
	    }

	    /**
	     * A specialized version of `_.pick` which picks `object` properties specified
	     * by `props`.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} props The property names to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function pickByArray(object, props) {
	      object = toObject(object);

	      var index = -1,
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index];
	        if (key in object) {
	          result[key] = object[key];
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.pick` which picks `object` properties `predicate`
	     * returns truthy for.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Object} Returns the new object.
	     */
	    function pickByCallback(object, predicate) {
	      var result = {};
	      baseForIn(object, function(value, key, object) {
	        if (predicate(value, key, object)) {
	          result[key] = value;
	        }
	      });
	      return result;
	    }

	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = arrayCopy(array);

	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	      }
	      return array;
	    }

	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity function
	     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = (function() {
	      var count = 0,
	          lastCalled = 0;

	      return function(key, value) {
	        var stamp = now(),
	            remaining = HOT_SPAN - (stamp - lastCalled);

	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return key;
	          }
	        } else {
	          count = 0;
	        }
	        return baseSetData(key, value);
	      };
	    }());

	    /**
	     * A fallback implementation of `Object.keys` which creates an array of the
	     * own enumerable property names of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function shimKeys(object) {
	      var props = keysIn(object),
	          propsLength = props.length,
	          length = propsLength && object.length;

	      var allowIndexes = !!length && isLength(length) &&
	        (isArray(object) || isArguments(object));

	      var index = -1,
	          result = [];

	      while (++index < propsLength) {
	        var key = props[index];
	        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to an array-like object if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Array|Object} Returns the array-like object.
	     */
	    function toIterable(value) {
	      if (value == null) {
	        return [];
	      }
	      if (!isArrayLike(value)) {
	        return values(value);
	      }
	      return isObject(value) ? value : Object(value);
	    }

	    /**
	     * Converts `value` to an object if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Object} Returns the object.
	     */
	    function toObject(value) {
	      return isObject(value) ? value : Object(value);
	    }

	    /**
	     * Converts `value` to property path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Array} Returns the property path array.
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return value;
	      }
	      var result = [];
	      baseToString(value).replace(rePropName, function(match, number, quote, string) {
	        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    }

	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      return wrapper instanceof LazyWrapper
	        ? wrapper.clone()
	        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `collection` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the new array containing chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if (guard ? isIterateeCall(array, size, guard) : size == null) {
	        size = 1;
	      } else {
	        size = nativeMax(nativeFloor(size) || 1, 1);
	      }
	      var index = 0,
	          length = array ? array.length : 0,
	          resIndex = -1,
	          result = Array(nativeCeil(length / size));

	      while (index < length) {
	        result[++resIndex] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }

	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array ? array.length : 0,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of unique `array` values not included in the other
	     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The arrays of values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.difference([1, 2, 3], [4, 2]);
	     * // => [1, 3]
	     */
	    var difference = restParam(function(array, values) {
	      return (isObjectLike(array) && isArrayLike(array))
	        ? baseDifference(array, baseFlatten(values, false, true))
	        : [];
	    });

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      return baseSlice(array, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      n = length - (+n || 0);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that match the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRightWhile([1, 2, 3], function(n) {
	     *   return n > 1;
	     * });
	     * // => [1]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
	     * // => ['barney', 'fred']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.dropRightWhile(users, 'active'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropWhile([1, 2, 3], function(n) {
	     *   return n < 3;
	     * });
	     * // => [3]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
	     * // => ['fred', 'pebbles']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.dropWhile(users, 'active', false), 'user');
	     * // => ['pebbles']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.dropWhile(users, 'active'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), true)
	        : [];
	    }

	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8], '*', 1, 2);
	     * // => [4, '*', 8]
	     */
	    function fill(array, value, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }

	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(chr) {
	     *   return chr.user == 'barney';
	     * });
	     * // => 0
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findIndex(users, 'active', false);
	     * // => 0
	     *
	     * // using the `_.property` callback shorthand
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    var findIndex = createFindIndex();

	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(chr) {
	     *   return chr.user == 'pebbles';
	     * });
	     * // => 2
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findLastIndex(users, 'active', false);
	     * // => 2
	     *
	     * // using the `_.property` callback shorthand
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    var findLastIndex = createFindIndex(true);

	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias head
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.first([1, 2, 3]);
	     * // => 1
	     *
	     * _.first([]);
	     * // => undefined
	     */
	    function first(array) {
	      return array ? array[0] : undefined;
	    }

	    /**
	     * Flattens a nested array. If `isDeep` is `true` the array is recursively
	     * flattened, otherwise it is only flattened a single level.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {boolean} [isDeep] Specify a deep flatten.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, 3, [4]]]);
	     * // => [1, 2, 3, [4]]
	     *
	     * // using `isDeep`
	     * _.flatten([1, [2, 3, [4]]], true);
	     * // => [1, 2, 3, 4]
	     */
	    function flatten(array, isDeep, guard) {
	      var length = array ? array.length : 0;
	      if (guard && isIterateeCall(array, isDeep, guard)) {
	        isDeep = false;
	      }
	      return length ? baseFlatten(array, isDeep) : [];
	    }

	    /**
	     * Recursively flattens a nested array.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to recursively flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, 3, [4]]]);
	     * // => [1, 2, 3, 4]
	     */
	    function flattenDeep(array) {
	      var length = array ? array.length : 0;
	      return length ? baseFlatten(array, true) : [];
	    }

	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
	     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
	     * performs a faster binary search.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
	     *  to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // using `fromIndex`
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     *
	     * // performing a binary search
	     * _.indexOf([1, 1, 2, 2], 2, true);
	     * // => 2
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      if (typeof fromIndex == 'number') {
	        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
	      } else if (fromIndex) {
	        var index = binaryIndex(array, value);
	        if (index < length &&
	            (value === value ? (value === array[index]) : (array[index] !== array[index]))) {
	          return index;
	        }
	        return -1;
	      }
	      return baseIndexOf(array, value, fromIndex || 0);
	    }

	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      return dropRight(array, 1);
	    }

	    /**
	     * Creates an array of unique values that are included in all of the provided
	     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of shared values.
	     * @example
	     * _.intersection([1, 2], [4, 2], [2, 1]);
	     * // => [2]
	     */
	    var intersection = restParam(function(arrays) {
	      var othLength = arrays.length,
	          othIndex = othLength,
	          caches = Array(length),
	          indexOf = getIndexOf(),
	          isCommon = indexOf == baseIndexOf,
	          result = [];

	      while (othIndex--) {
	        var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];
	        caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;
	      }
	      var array = arrays[0],
	          index = -1,
	          length = array ? array.length : 0,
	          seen = caches[0];

	      outer:
	      while (++index < length) {
	        value = array[index];
	        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
	          var othIndex = othLength;
	          while (--othIndex) {
	            var cache = caches[othIndex];
	            if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(value);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    });

	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array ? array.length : 0;
	      return length ? array[length - 1] : undefined;
	    }

	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=array.length-1] The index to search from
	     *  or `true` to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // using `fromIndex`
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     *
	     * // performing a binary search
	     * _.lastIndexOf([1, 1, 2, 2], 2, true);
	     * // => 3
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (typeof fromIndex == 'number') {
	        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
	      } else if (fromIndex) {
	        index = binaryIndex(array, value, true) - 1;
	        var other = array[index];
	        if (value === value ? (value === other) : (other !== other)) {
	          return index;
	        }
	        return -1;
	      }
	      if (value !== value) {
	        return indexOfNaN(array, index, true);
	      }
	      while (index--) {
	        if (array[index] === value) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Removes all provided values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3, 1, 2, 3];
	     *
	     * _.pull(array, 2, 3);
	     * console.log(array);
	     * // => [1, 1]
	     */
	    function pull() {
	      var args = arguments,
	          array = args[0];

	      if (!(array && array.length)) {
	        return array;
	      }
	      var index = 0,
	          indexOf = getIndexOf(),
	          length = args.length;

	      while (++index < length) {
	        var fromIndex = 0,
	            value = args[index];

	        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * Removes elements from `array` corresponding to the given indexes and returns
	     * an array of the removed elements. Indexes may be specified as an array of
	     * indexes or as individual arguments.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
	     *  specified as individual indexes or arrays of indexes.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [5, 10, 15, 20];
	     * var evens = _.pullAt(array, 1, 3);
	     *
	     * console.log(array);
	     * // => [5, 15]
	     *
	     * console.log(evens);
	     * // => [10, 20]
	     */
	    var pullAt = restParam(function(array, indexes) {
	      indexes = baseFlatten(indexes);

	      var result = baseAt(array, indexes);
	      basePullAt(array, indexes.sort(baseCompareAscending));
	      return result;
	    });

	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is bound to
	     * `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate, thisArg) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;

	      predicate = getCallback(predicate, thisArg, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }

	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias tail
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.rest([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function rest(array) {
	      return drop(array, 1);
	    }

	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of `Array#slice` to support node
	     * lists in IE < 9 and to ensure dense arrays are returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      return baseSlice(array, start, end);
	    }

	    /**
	     * Uses a binary search to determine the lowest index at which `value` should
	     * be inserted into `array` in order to maintain its sort order. If an iteratee
	     * function is provided it is invoked for `value` and each element of `array`
	     * to compute their sort ranking. The iteratee is bound to `thisArg` and
	     * invoked with one argument; (value).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     *
	     * _.sortedIndex([4, 4, 5, 5], 5);
	     * // => 2
	     *
	     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
	     *
	     * // using an iteratee function
	     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
	     *   return this.data[word];
	     * }, dict);
	     * // => 1
	     *
	     * // using the `_.property` callback shorthand
	     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
	     * // => 1
	     */
	    var sortedIndex = createSortedIndex();

	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 4, 5, 5], 5);
	     * // => 4
	     */
	    var sortedLastIndex = createSortedIndex(true);

	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      n = length - (+n || 0);
	      return baseSlice(array, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
	     * and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRightWhile([1, 2, 3], function(n) {
	     *   return n > 1;
	     * });
	     * // => [2, 3]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
	     * // => ['pebbles']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
	     * // => ['fred', 'pebbles']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.takeRightWhile(users, 'active'), 'user');
	     * // => []
	     */
	    function takeRightWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is bound to
	     * `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeWhile([1, 2, 3], function(n) {
	     *   return n < 3;
	     * });
	     * // => [1, 2]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false},
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.takeWhile(users, 'active', false), 'user');
	     * // => ['barney', 'fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.takeWhile(users, 'active'), 'user');
	     * // => []
	     */
	    function takeWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3))
	        : [];
	    }

	    /**
	     * Creates an array of unique values, in order, from all of the provided arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([1, 2], [4, 2], [2, 1]);
	     * // => [1, 2, 4]
	     */
	    var union = restParam(function(arrays) {
	      return baseUniq(baseFlatten(arrays, false, true));
	    });

	    /**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurence of each element
	     * is kept. Providing `true` for `isSorted` performs a faster search algorithm
	     * for sorted arrays. If an iteratee function is provided it is invoked for
	     * each element in the array to generate the criterion by which uniqueness
	     * is computed. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, array).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias unique
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {boolean} [isSorted] Specify the array is sorted.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new duplicate-value-free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     *
	     * // using `isSorted`
	     * _.uniq([1, 1, 2], true);
	     * // => [1, 2]
	     *
	     * // using an iteratee function
	     * _.uniq([1, 2.5, 1.5, 2], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => [1, 2.5]
	     *
	     * // using the `_.property` callback shorthand
	     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniq(array, isSorted, iteratee, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (isSorted != null && typeof isSorted != 'boolean') {
	        thisArg = iteratee;
	        iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
	        isSorted = false;
	      }
	      var callback = getCallback();
	      if (!(iteratee == null && callback === baseCallback)) {
	        iteratee = callback(iteratee, thisArg, 3);
	      }
	      return (isSorted && getIndexOf() == baseIndexOf)
	        ? sortedUniq(array, iteratee)
	        : baseUniq(array, iteratee);
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['fred', 'barney'], [30, 40], [true, false]]
	     */
	    function unzip(array) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var index = -1,
	          length = 0;

	      array = arrayFilter(array, function(group) {
	        if (isArrayLike(group)) {
	          length = nativeMax(group.length, length);
	          return true;
	        }
	      });
	      var result = Array(length);
	      while (++index < length) {
	        result[index] = arrayMap(array, baseProperty(index));
	      }
	      return result;
	    }

	    /**
	     * This method is like `_.unzip` except that it accepts an iteratee to specify
	     * how regrouped values should be combined. The `iteratee` is bound to `thisArg`
	     * and invoked with four arguments: (accumulator, value, index, group).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee] The function to combine regrouped values.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
	    function unzipWith(array, iteratee, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      var result = unzip(array);
	      if (iteratee == null) {
	        return result;
	      }
	      iteratee = bindCallback(iteratee, thisArg, 4);
	      return arrayMap(result, function(group) {
	        return arrayReduce(group, iteratee, undefined, true);
	      });
	    }

	    /**
	     * Creates an array excluding all provided values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to filter.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.without([1, 2, 1, 3], 1, 2);
	     * // => [3]
	     */
	    var without = restParam(function(array, values) {
	      return isArrayLike(array)
	        ? baseDifference(array, values)
	        : [];
	    });

	    /**
	     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the provided arrays.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of values.
	     * @example
	     *
	     * _.xor([1, 2], [4, 2]);
	     * // => [1, 4]
	     */
	    function xor() {
	      var index = -1,
	          length = arguments.length;

	      while (++index < length) {
	        var array = arguments[index];
	        if (isArrayLike(array)) {
	          var result = result
	            ? arrayPush(baseDifference(result, array), baseDifference(array, result))
	            : array;
	        }
	      }
	      return result ? baseUniq(result) : [];
	    }

	    /**
	     * Creates an array of grouped elements, the first of which contains the first
	     * elements of the given arrays, the second of which contains the second elements
	     * of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     */
	    var zip = restParam(unzip);

	    /**
	     * The inverse of `_.pairs`; this method returns an object composed from arrays
	     * of property names and values. Provide either a single two dimensional array,
	     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
	     * and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @alias object
	     * @category Array
	     * @param {Array} props The property names.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject([['fred', 30], ['barney', 40]]);
	     * // => { 'fred': 30, 'barney': 40 }
	     *
	     * _.zipObject(['fred', 'barney'], [30, 40]);
	     * // => { 'fred': 30, 'barney': 40 }
	     */
	    function zipObject(props, values) {
	      var index = -1,
	          length = props ? props.length : 0,
	          result = {};

	      if (length && !values && !isArray(props[0])) {
	        values = [];
	      }
	      while (++index < length) {
	        var key = props[index];
	        if (values) {
	          result[key] = values[index];
	        } else if (key) {
	          result[key[0]] = key[1];
	        }
	      }
	      return result;
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an iteratee to specify
	     * how grouped values should be combined. The `iteratee` is bound to `thisArg`
	     * and invoked with four arguments: (accumulator, value, index, group).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee] The function to combine grouped values.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], _.add);
	     * // => [111, 222]
	     */
	    var zipWith = restParam(function(arrays) {
	      var length = arrays.length,
	          iteratee = length > 2 ? arrays[length - 2] : undefined,
	          thisArg = length > 1 ? arrays[length - 1] : undefined;

	      if (length > 2 && typeof iteratee == 'function') {
	        length -= 2;
	      } else {
	        iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;
	        thisArg = undefined;
	      }
	      arrays.length = length;
	      return unzipWith(arrays, iteratee, thisArg);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object that wraps `value` with explicit method
	     * chaining enabled.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _.chain(users)
	     *   .sortBy('age')
	     *   .map(function(chr) {
	     *     return chr.user + ' is ' + chr.age;
	     *   })
	     *   .first()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }

	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor is
	     * bound to `thisArg` and invoked with one argument; (value). The purpose of
	     * this method is to "tap into" a method chain in order to perform operations
	     * on intermediate results within the chain.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @param {*} [thisArg] The `this` binding of `interceptor`.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor, thisArg) {
	      interceptor.call(thisArg, value);
	      return value;
	    }

	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @param {*} [thisArg] The `this` binding of `interceptor`.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor, thisArg) {
	      return interceptor.call(thisArg, value);
	    }

	    /**
	     * Enables explicit method chaining on the wrapper object.
	     *
	     * @name chain
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // without explicit chaining
	     * _(users).first();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // with explicit chaining
	     * _(users).chain()
	     *   .first()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }

	    /**
	     * Executes the chained sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }

	    /**
	     * Creates a new array joining a wrapped array with any additional arrays
	     * and/or values.
	     *
	     * @name concat
	     * @memberOf _
	     * @category Chain
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var wrapped = _(array).concat(2, [3], [[4]]);
	     *
	     * console.log(wrapped.value());
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
	    var wrapperConcat = restParam(function(values) {
	      values = baseFlatten(values);
	      return this.thru(function(array) {
	        return arrayConcat(isArray(array) ? array : [toObject(array)], values);
	      });
	    });

	    /**
	     * Creates a clone of the chained sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).map(function(value) {
	     *   return Math.pow(value, 2);
	     * });
	     *
	     * var other = [3, 4];
	     * var otherWrapped = wrapped.plant(other);
	     *
	     * otherWrapped.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;

	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }

	    /**
	     * Reverses the wrapped array so the first element becomes the last, the
	     * second element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new reversed `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;

	      var interceptor = function(value) {
	        return (wrapped && wrapped.__dir__ < 0) ? value : value.reverse();
	      };
	      if (value instanceof LazyWrapper) {
	        var wrapped = value;
	        if (this.__actions__.length) {
	          wrapped = new LazyWrapper(this);
	        }
	        wrapped = wrapped.reverse();
	        wrapped.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
	        return new LodashWrapper(wrapped, this.__chain__);
	      }
	      return this.thru(interceptor);
	    }

	    /**
	     * Produces the result of coercing the unwrapped value to a string.
	     *
	     * @name toString
	     * @memberOf _
	     * @category Chain
	     * @returns {string} Returns the coerced string value.
	     * @example
	     *
	     * _([1, 2, 3]).toString();
	     * // => '1,2,3'
	     */
	    function wrapperToString() {
	      return (this.value() + '');
	    }

	    /**
	     * Executes the chained sequence to extract the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @alias run, toJSON, valueOf
	     * @category Chain
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements corresponding to the given keys, or indexes,
	     * of `collection`. Keys may be specified as individual arguments or as arrays
	     * of keys.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(number|number[]|string|string[])} [props] The property names
	     *  or indexes of elements to pick, specified individually or in arrays.
	     * @returns {Array} Returns the new array of picked elements.
	     * @example
	     *
	     * _.at(['a', 'b', 'c'], [0, 2]);
	     * // => ['a', 'c']
	     *
	     * _.at(['barney', 'fred', 'pebbles'], 0, 2);
	     * // => ['barney', 'pebbles']
	     */
	    var at = restParam(function(collection, props) {
	      return baseAt(collection, baseFlatten(props));
	    });

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the number of times the key was returned by `iteratee`.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(n) {
	     *   return Math.floor(n);
	     * });
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
	    });

	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * The predicate is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias all
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': false },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.every(users, 'active', false);
	     * // => true
	     *
	     * // using the `_.property` callback shorthand
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
	        predicate = undefined;
	      }
	      if (typeof predicate != 'function' || thisArg !== undefined) {
	        predicate = getCallback(predicate, thisArg, 3);
	      }
	      return func(collection, predicate);
	    }

	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias select
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * _.filter([4, 5, 6], function(n) {
	     *   return n % 2 == 0;
	     * });
	     * // => [4, 6]
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.filter(users, 'active', false), 'user');
	     * // => ['fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.filter(users, 'active'), 'user');
	     * // => ['barney']
	     */
	    function filter(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getCallback(predicate, thisArg, 3);
	      return func(collection, predicate);
	    }

	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias detect
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.result(_.find(users, function(chr) {
	     *   return chr.age < 40;
	     * }), 'user');
	     * // => 'barney'
	     *
	     * // using the `_.matches` callback shorthand
	     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
	     * // => 'pebbles'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.result(_.find(users, 'active', false), 'user');
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.result(_.find(users, 'active'), 'user');
	     * // => 'barney'
	     */
	    var find = createFind(baseEach);

	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    var findLast = createFind(baseEachRight, true);

	    /**
	     * Performs a deep comparison between each element in `collection` and the
	     * source object, returning the first element that has equivalent property
	     * values.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Object} source The object of property values to match.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
	     * // => 'barney'
	     *
	     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
	     * // => 'fred'
	     */
	    function findWhere(collection, source) {
	      return find(collection, baseMatches(source));
	    }

	    /**
	     * Iterates over elements of `collection` invoking `iteratee` for each element.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection). Iteratee functions may exit iteration early
	     * by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length" property
	     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
	     * may be used for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @alias each
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEach(function(n) {
	     *   console.log(n);
	     * }).value();
	     * // => logs each value from left to right and returns the array
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
	     *   console.log(n, key);
	     * });
	     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
	     */
	    var forEach = createForEach(arrayEach, baseEach);

	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEachRight(function(n) {
	     *   console.log(n);
	     * }).value();
	     * // => logs each value from right to left and returns the array
	     */
	    var forEachRight = createForEach(arrayEachRight, baseEachRight);

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is an array of the elements responsible for generating the key.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(n) {
	     *   return Math.floor(n);
	     * });
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * // using the `_.property` callback shorthand
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        result[key] = [value];
	      }
	    });

	    /**
	     * Checks if `value` is in `collection` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
	     * from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @alias contains, include
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {*} target The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	     * @returns {boolean} Returns `true` if a matching element is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
	     * // => true
	     *
	     * _.includes('pebbles', 'eb');
	     * // => true
	     */
	    function includes(collection, target, fromIndex, guard) {
	      var length = collection ? getLength(collection) : 0;
	      if (!isLength(length)) {
	        collection = values(collection);
	        length = collection.length;
	      }
	      if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
	        fromIndex = 0;
	      } else {
	        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
	      }
	      return (typeof collection == 'string' || !isArray(collection) && isString(collection))
	        ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)
	        : (!!length && getIndexOf(collection, target, fromIndex) > -1);
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the last element responsible for generating the key. The
	     * iteratee function is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var keyData = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.indexBy(keyData, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keyData, function(object) {
	     *   return String.fromCharCode(object.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keyData, function(object) {
	     *   return this.fromCharCode(object.code);
	     * }, String);
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     */
	    var indexBy = createAggregator(function(result, value, key) {
	      result[key] = value;
	    });

	    /**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `methodName` is a function it is
	     * invoked for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invoke([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invoke = restParam(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          isProp = isKey(path),
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value) {
	        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
	        result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);
	      });
	      return result;
	    });

	    /**
	     * Creates an array of values by running each element in `collection` through
	     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
	     * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
	     * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
	     * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
	     * `sum`, `uniq`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @alias collect
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function timesThree(n) {
	     *   return n * 3;
	     * }
	     *
	     * _.map([1, 2], timesThree);
	     * // => [3, 6]
	     *
	     * _.map({ 'a': 1, 'b': 2 }, timesThree);
	     * // => [3, 6] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // using the `_.property` callback shorthand
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee, thisArg) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      iteratee = getCallback(iteratee, thisArg, 3);
	      return func(collection, iteratee);
	    }

	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, while the second of which
	     * contains elements `predicate` returns falsey for. The predicate is bound
	     * to `thisArg` and invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * _.partition([1, 2, 3], function(n) {
	     *   return n % 2;
	     * });
	     * // => [[1, 3], [2]]
	     *
	     * _.partition([1.2, 2.3, 3.4], function(n) {
	     *   return this.floor(n) % 2;
	     * }, Math);
	     * // => [[1.2, 3.4], [2.3]]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * var mapper = function(array) {
	     *   return _.pluck(array, 'user');
	     * };
	     *
	     * // using the `_.matches` callback shorthand
	     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
	     * // => [['pebbles'], ['barney', 'fred']]
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.map(_.partition(users, 'active', false), mapper);
	     * // => [['barney', 'pebbles'], ['fred']]
	     *
	     * // using the `_.property` callback shorthand
	     * _.map(_.partition(users, 'active'), mapper);
	     * // => [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });

	    /**
	     * Gets the property value of `path` from all elements in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Array|string} path The path of the property to pluck.
	     * @returns {Array} Returns the property values.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.pluck(users, 'user');
	     * // => ['barney', 'fred']
	     *
	     * var userIndex = _.indexBy(users, 'user');
	     * _.pluck(userIndex, 'age');
	     * // => [36, 40] (iteration order is not guaranteed)
	     */
	    function pluck(collection, path) {
	      return map(collection, property(path));
	    }

	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` through `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not provided the first element of `collection` is used as the initial
	     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,
	     * and `sortByOrder`
	     *
	     * @static
	     * @memberOf _
	     * @alias foldl, inject
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.reduce([1, 2], function(total, n) {
	     *   return total + n;
	     * });
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     *   return result;
	     * }, {});
	     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
	     */
	    var reduce = createReduce(arrayReduce, baseEach);

	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias foldr
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    var reduceRight = createReduce(arrayReduceRight, baseEachRight);

	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * _.reject([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 0;
	     * });
	     * // => [1, 3]
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.reject(users, 'active', false), 'user');
	     * // => ['fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.reject(users, 'active'), 'user');
	     * // => ['barney']
	     */
	    function reject(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getCallback(predicate, thisArg, 3);
	      return func(collection, function(value, index, collection) {
	        return !predicate(value, index, collection);
	      });
	    }

	    /**
	     * Gets a random element or `n` random elements from a collection.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to sample.
	     * @param {number} [n] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {*} Returns the random sample(s).
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     *
	     * _.sample([1, 2, 3, 4], 2);
	     * // => [3, 1]
	     */
	    function sample(collection, n, guard) {
	      if (guard ? isIterateeCall(collection, n, guard) : n == null) {
	        collection = toIterable(collection);
	        var length = collection.length;
	        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
	      }
	      var index = -1,
	          result = toArray(collection),
	          length = result.length,
	          lastIndex = length - 1;

	      n = nativeMin(n < 0 ? 0 : (+n || 0), length);
	      while (++index < n) {
	        var rand = baseRandom(index, lastIndex),
	            value = result[rand];

	        result[rand] = result[index];
	        result[index] = value;
	      }
	      result.length = n;
	      return result;
	    }

	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      return sample(collection, POSITIVE_INFINITY);
	    }

	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns the size of `collection`.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      var length = collection ? getLength(collection) : 0;
	      return isLength(length) ? length : keys(collection).length;
	    }

	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * The function returns as soon as it finds a passing value and does not iterate
	     * over the entire collection. The predicate is bound to `thisArg` and invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias any
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.some(users, 'active', false);
	     * // => true
	     *
	     * // using the `_.property` callback shorthand
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
	        predicate = undefined;
	      }
	      if (typeof predicate != 'function' || thisArg !== undefined) {
	        predicate = getCallback(predicate, thisArg, 3);
	      }
	      return func(collection, predicate);
	    }

	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection through `iteratee`. This method performs
	     * a stable sort, that is, it preserves the original sort order of equal elements.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * _.sortBy([1, 2, 3], function(n) {
	     *   return Math.sin(n);
	     * });
	     * // => [3, 1, 2]
	     *
	     * _.sortBy([1, 2, 3], function(n) {
	     *   return this.sin(n);
	     * }, Math);
	     * // => [3, 1, 2]
	     *
	     * var users = [
	     *   { 'user': 'fred' },
	     *   { 'user': 'pebbles' },
	     *   { 'user': 'barney' }
	     * ];
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.sortBy(users, 'user'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function sortBy(collection, iteratee, thisArg) {
	      if (collection == null) {
	        return [];
	      }
	      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	        iteratee = undefined;
	      }
	      var index = -1;
	      iteratee = getCallback(iteratee, thisArg, 3);

	      var result = baseMap(collection, function(value, key, collection) {
	        return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
	      });
	      return baseSortBy(result, compareAscending);
	    }

	    /**
	     * This method is like `_.sortBy` except that it can sort by multiple iteratees
	     * or property names.
	     *
	     * If a property name is provided for an iteratee the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for an iteratee the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees
	     *  The iteratees to sort by, specified as individual values or arrays of values.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 42 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.map(_.sortByAll(users, ['user', 'age']), _.values);
	     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
	     *
	     * _.map(_.sortByAll(users, 'user', function(chr) {
	     *   return Math.floor(chr.age / 10);
	     * }), _.values);
	     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	     */
	    var sortByAll = restParam(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var guard = iteratees[2];
	      if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {
	        iteratees.length = 1;
	      }
	      return baseSortByOrder(collection, baseFlatten(iteratees), []);
	    });

	    /**
	     * This method is like `_.sortByAll` except that it allows specifying the
	     * sort orders of the iteratees to sort by. If `orders` is unspecified, all
	     * values are sorted in ascending order. Otherwise, a value is sorted in
	     * ascending order if its corresponding order is "asc", and descending if "desc".
	     *
	     * If a property name is provided for an iteratee the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for an iteratee the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {boolean[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 42 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // sort by `user` in ascending order and by `age` in descending order
	     * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);
	     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	     */
	    function sortByOrder(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (guard && isIterateeCall(iteratees, orders, guard)) {
	        orders = undefined;
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseSortByOrder(collection, iteratees, orders);
	    }

	    /**
	     * Performs a deep comparison between each element in `collection` and the
	     * source object, returning an array of all elements that have equivalent
	     * property values.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Object} source The object of property values to match.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
	     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
	     * ];
	     *
	     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
	     * // => ['barney']
	     *
	     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
	     * // => ['fred']
	     */
	    function where(collection, source) {
	      return filter(collection, baseMatches(source));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Gets the number of milliseconds that have elapsed since the Unix epoch
	     * (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @category Date
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => logs the number of milliseconds it took for the deferred function to be invoked
	     */
	    var now = nativeNow || function() {
	      return new Date().getTime();
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it is called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => logs 'done saving!' after the two async saves have completed
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        if (typeof n == 'function') {
	          var temp = n;
	          n = func;
	          func = temp;
	        } else {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	      }
	      n = nativeIsFinite(n = +n) ? n : 0;
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }

	    /**
	     * Creates a function that accepts up to `n` arguments ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      if (guard && isIterateeCall(func, n, guard)) {
	        n = undefined;
	      }
	      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
	      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
	    }

	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it is called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery('#add').on('click', _.before(5, addContactToList));
	     * // => allows adding up to 4 contacts to the list
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        if (typeof n == 'function') {
	          var temp = n;
	          n = func;
	          func = temp;
	        } else {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	      }
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = undefined;
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and prepends any additional `_.bind` arguments to those provided to the
	     * bound function.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind` this method does not set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var greet = function(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * };
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // using placeholders
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = restParam(function(func, thisArg, partials) {
	      var bitmask = BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, bind.placeholder);
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(func, bitmask, thisArg, partials, holders);
	    });

	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method. Method names may be specified as individual arguments or as arrays
	     * of method names. If no method names are provided all enumerable function
	     * properties, own and inherited, of `object` are bound.
	     *
	     * **Note:** This method does not set the "length" property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} [methodNames] The object method names to bind,
	     *  specified as individual method names or arrays of method names.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'onClick': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view);
	     * jQuery('#docs').on('click', view.onClick);
	     * // => logs 'clicked docs' when the element is clicked
	     */
	    var bindAll = restParam(function(object, methodNames) {
	      methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);

	      var index = -1,
	          length = methodNames.length;

	      while (++index < length) {
	        var key = methodNames[index];
	        object[key] = createWrapper(object[key], BIND_FLAG, object);
	      }
	      return object;
	    });

	    /**
	     * Creates a function that invokes the method at `object[key]` and prepends
	     * any additional `_.bindKey` arguments to those provided to the bound function.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist.
	     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object the method belongs to.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // using placeholders
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = restParam(function(object, key, partials) {
	      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, bindKey.placeholder);
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(key, bitmask, object, partials, holders);
	    });

	    /**
	     * Creates a function that accepts one or more arguments of `func` that when
	     * called either invokes `func` returning its result, if all `func` arguments
	     * have been provided, or returns a function that accepts one or more of the
	     * remaining `func` arguments, and so on. The arity of `func` may be specified
	     * if `func.length` is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method does not set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // using placeholders
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    var curry = createCurry(CURRY_FLAG);

	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method does not set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // using placeholders
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    var curryRight = createCurry(CURRY_RIGHT_FLAG);

	    /**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed invocations. Provide an options object to indicate that `func`
	     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
	     * Subsequent calls to the debounced function return the result of the last
	     * `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the the debounced function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=false] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
	     *  delayed before it is invoked.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // avoid costly calculations while the window size is in flux
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
	     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // ensure `batchLog` is invoked once after 1 second of debounced calls
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', _.debounce(batchLog, 250, {
	     *   'maxWait': 1000
	     * }));
	     *
	     * // cancel a debounced call
	     * var todoChanges = _.debounce(batchLog, 1000);
	     * Object.observe(models.todo, todoChanges);
	     *
	     * Object.observe(models, function(changes) {
	     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
	     *     todoChanges.cancel();
	     *   }
	     * }, ['delete']);
	     *
	     * // ...at some point `models.todo` is changed
	     * models.todo.completed = true;
	     *
	     * // ...before 1 second has passed `models.todo` is deleted
	     * // which cancels the debounced `todoChanges` call
	     * delete models.todo;
	     */
	    function debounce(func, wait, options) {
	      var args,
	          maxTimeoutId,
	          result,
	          stamp,
	          thisArg,
	          timeoutId,
	          trailingCall,
	          lastCalled = 0,
	          maxWait = false,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = wait < 0 ? 0 : (+wait || 0);
	      if (options === true) {
	        var leading = true;
	        trailing = false;
	      } else if (isObject(options)) {
	        leading = !!options.leading;
	        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }

	      function cancel() {
	        if (timeoutId) {
	          clearTimeout(timeoutId);
	        }
	        if (maxTimeoutId) {
	          clearTimeout(maxTimeoutId);
	        }
	        lastCalled = 0;
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	      }

	      function complete(isCalled, id) {
	        if (id) {
	          clearTimeout(id);
	        }
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	        if (isCalled) {
	          lastCalled = now();
	          result = func.apply(thisArg, args);
	          if (!timeoutId && !maxTimeoutId) {
	            args = thisArg = undefined;
	          }
	        }
	      }

	      function delayed() {
	        var remaining = wait - (now() - stamp);
	        if (remaining <= 0 || remaining > wait) {
	          complete(trailingCall, maxTimeoutId);
	        } else {
	          timeoutId = setTimeout(delayed, remaining);
	        }
	      }

	      function maxDelayed() {
	        complete(trailing, timeoutId);
	      }

	      function debounced() {
	        args = arguments;
	        stamp = now();
	        thisArg = this;
	        trailingCall = trailing && (timeoutId || !leading);

	        if (maxWait === false) {
	          var leadingCall = leading && !timeoutId;
	        } else {
	          if (!maxTimeoutId && !leading) {
	            lastCalled = stamp;
	          }
	          var remaining = maxWait - (stamp - lastCalled),
	              isCalled = remaining <= 0 || remaining > maxWait;

	          if (isCalled) {
	            if (maxTimeoutId) {
	              maxTimeoutId = clearTimeout(maxTimeoutId);
	            }
	            lastCalled = stamp;
	            result = func.apply(thisArg, args);
	          }
	          else if (!maxTimeoutId) {
	            maxTimeoutId = setTimeout(maxDelayed, remaining);
	          }
	        }
	        if (isCalled && timeoutId) {
	          timeoutId = clearTimeout(timeoutId);
	        }
	        else if (!timeoutId && wait !== maxWait) {
	          timeoutId = setTimeout(delayed, wait);
	        }
	        if (leadingCall) {
	          isCalled = true;
	          result = func.apply(thisArg, args);
	        }
	        if (isCalled && !timeoutId && !maxTimeoutId) {
	          args = thisArg = undefined;
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      return debounced;
	    }

	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // logs 'deferred' after one or more milliseconds
	     */
	    var defer = restParam(function(func, args) {
	      return baseDelay(func, 1, args);
	    });

	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => logs 'later' after one second
	     */
	    var delay = restParam(function(func, wait, args) {
	      return baseDelay(func, wait, args);
	    });

	    /**
	     * Creates a function that returns the result of invoking the provided
	     * functions with the `this` binding of the created function, where each
	     * successive invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {...Function} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow(_.add, square);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();

	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the provided functions from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias backflow, compose
	     * @category Function
	     * @param {...Function} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight(square, _.add);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);

	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is coerced to a string and used as the
	     * cache key. The `func` is invoked with the `this` binding of the memoized
	     * function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoizing function.
	     * @example
	     *
	     * var upperCase = _.memoize(function(string) {
	     *   return string.toUpperCase();
	     * });
	     *
	     * upperCase('fred');
	     * // => 'FRED'
	     *
	     * // modifying the result cache
	     * upperCase.cache.set('fred', 'BARNEY');
	     * upperCase('fred');
	     * // => 'BARNEY'
	     *
	     * // replacing `_.memoize.Cache`
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'barney' };
	     * var identity = _.memoize(_.identity);
	     *
	     * identity(object);
	     * // => { 'user': 'fred' }
	     * identity(other);
	     * // => { 'user': 'fred' }
	     *
	     * _.memoize.Cache = WeakMap;
	     * var identity = _.memoize(_.identity);
	     *
	     * identity(object);
	     * // => { 'user': 'fred' }
	     * identity(other);
	     * // => { 'user': 'barney' }
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            key = resolver ? resolver.apply(this, args) : args[0],
	            cache = memoized.cache;

	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        memoized.cache = cache.set(key, result);
	        return result;
	      };
	      memoized.cache = new memoize.Cache;
	      return memoized;
	    }

	    /**
	     * Creates a function that runs each argument through a corresponding
	     * transform function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Function|Function[])} [transforms] The functions to transform
	     * arguments, specified as individual functions or arrays of functions.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var modded = _.modArgs(function(x, y) {
	     *   return [x, y];
	     * }, square, doubled);
	     *
	     * modded(1, 2);
	     * // => [1, 4]
	     *
	     * modded(5, 10);
	     * // => [25, 20]
	     */
	    var modArgs = restParam(function(func, transforms) {
	      transforms = baseFlatten(transforms);
	      if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = transforms.length;
	      return restParam(function(args) {
	        var index = nativeMin(args.length, length);
	        while (index--) {
	          args[index] = transforms[index](args[index]);
	        }
	        return func.apply(this, args);
	      });
	    });

	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        return !predicate.apply(this, arguments);
	      };
	    }

	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first call. The `func` is invoked
	     * with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // `initialize` invokes `createApplication` once
	     */
	    function once(func) {
	      return before(2, func);
	    }

	    /**
	     * Creates a function that invokes `func` with `partial` arguments prepended
	     * to those provided to the new function. This method is like `_.bind` except
	     * it does **not** alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method does not set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // using placeholders
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = createPartial(PARTIAL_FLAG);

	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to those provided to the new function.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method does not set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // using placeholders
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);

	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified indexes where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes,
	     *  specified as individual indexes or arrays of indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, 2, 0, 1);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     *
	     * var map = _.rearg(_.map, [1, 0]);
	     * map(function(n) {
	     *   return n * 3;
	     * }, [1, 2, 3]);
	     * // => [3, 6, 9]
	     */
	    var rearg = restParam(function(func, indexes) {
	      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as an array.
	     *
	     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.restParam(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function restParam(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            rest = Array(length);

	        while (++index < length) {
	          rest[index] = args[start + index];
	        }
	        switch (start) {
	          case 0: return func.call(this, rest);
	          case 1: return func.call(this, args[0], rest);
	          case 2: return func.call(this, args[0], args[1], rest);
	        }
	        var otherArgs = Array(start + 1);
	        index = -1;
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = rest;
	        return func.apply(this, otherArgs);
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the created
	     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
	     *
	     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * // with a Promise
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function(array) {
	        return func.apply(this, array);
	      };
	    }

	    /**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed invocations. Provide an options object to indicate
	     * that `func` should be invoked on the leading and/or trailing edge of the
	     * `wait` timeout. Subsequent calls to the throttled function return the
	     * result of the last `func` call.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the the throttled function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=true] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // avoid excessively updating the position while scrolling
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
	     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
	     *   'trailing': false
	     * }));
	     *
	     * // cancel a trailing throttled call
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (options === false) {
	        leading = false;
	      } else if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });
	    }

	    /**
	     * Creates a function that provides `value` to the wrapper function as its
	     * first argument. Any additional arguments provided to the function are
	     * appended to those provided to the wrapper function. The wrapper is invoked
	     * with the `this` binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} wrapper The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      wrapper = wrapper == null ? identity : wrapper;
	      return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], []);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
	     * otherwise they are assigned by reference. If `customizer` is provided it is
	     * invoked to produce the cloned values. If `customizer` returns `undefined`
	     * cloning is handled by the method instead. The `customizer` is bound to
	     * `thisArg` and invoked with two argument; (value [, index|key, object]).
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	     * The enumerable properties of `arguments` objects and objects created by
	     * constructors other than `Object` are cloned to plain `Object` objects. An
	     * empty object is returned for uncloneable values such as functions, DOM nodes,
	     * Maps, Sets, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {*} Returns the cloned value.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * var shallow = _.clone(users);
	     * shallow[0] === users[0];
	     * // => true
	     *
	     * var deep = _.clone(users, true);
	     * deep[0] === users[0];
	     * // => false
	     *
	     * // using a customizer callback
	     * var el = _.clone(document.body, function(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * });
	     *
	     * el === document.body
	     * // => false
	     * el.nodeName
	     * // => BODY
	     * el.childNodes.length;
	     * // => 0
	     */
	    function clone(value, isDeep, customizer, thisArg) {
	      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
	        isDeep = false;
	      }
	      else if (typeof isDeep == 'function') {
	        thisArg = customizer;
	        customizer = isDeep;
	        isDeep = false;
	      }
	      return typeof customizer == 'function'
	        ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 1))
	        : baseClone(value, isDeep);
	    }

	    /**
	     * Creates a deep clone of `value`. If `customizer` is provided it is invoked
	     * to produce the cloned values. If `customizer` returns `undefined` cloning
	     * is handled by the method instead. The `customizer` is bound to `thisArg`
	     * and invoked with two argument; (value [, index|key, object]).
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	     * The enumerable properties of `arguments` objects and objects created by
	     * constructors other than `Object` are cloned to plain `Object` objects. An
	     * empty object is returned for uncloneable values such as functions, DOM nodes,
	     * Maps, Sets, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {*} Returns the deep cloned value.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * var deep = _.cloneDeep(users);
	     * deep[0] === users[0];
	     * // => false
	     *
	     * // using a customizer callback
	     * var el = _.cloneDeep(document.body, function(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * });
	     *
	     * el === document.body
	     * // => false
	     * el.nodeName
	     * // => BODY
	     * el.childNodes.length;
	     * // => 20
	     */
	    function cloneDeep(value, customizer, thisArg) {
	      return typeof customizer == 'function'
	        ? baseClone(value, true, bindCallback(customizer, thisArg, 1))
	        : baseClone(value, true);
	    }

	    /**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */
	    function gt(value, other) {
	      return value > other;
	    }

	    /**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */
	    function gte(value, other) {
	      return value >= other;
	    }

	    /**
	     * Checks if `value` is classified as an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    function isArguments(value) {
	      return isObjectLike(value) && isArrayLike(value) &&
	        hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
	    }

	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(function() { return arguments; }());
	     * // => false
	     */
	    var isArray = nativeIsArray || function(value) {
	      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
	    };

	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
	    }

	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    function isDate(value) {
	      return isObjectLike(value) && objToString.call(value) == dateTag;
	    }

	    /**
	     * Checks if `value` is a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
	    }

	    /**
	     * Checks if `value` is empty. A value is considered empty unless it is an
	     * `arguments` object, array, string, or jQuery-like collection with a length
	     * greater than `0` or an object with own enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Array|Object|string} value The value to inspect.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (value == null) {
	        return true;
	      }
	      if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||
	          (isObjectLike(value) && isFunction(value.splice)))) {
	        return !value.length;
	      }
	      return !keys(value).length;
	    }

	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent. If `customizer` is provided it is invoked to compare values.
	     * If `customizer` returns `undefined` comparisons are handled by the method
	     * instead. The `customizer` is bound to `thisArg` and invoked with three
	     * arguments: (value, other [, index|key]).
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. Functions and DOM nodes
	     * are **not** supported. Provide a customizer function to extend support
	     * for comparing other values.
	     *
	     * @static
	     * @memberOf _
	     * @alias eq
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize value comparisons.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'fred' };
	     *
	     * object == other;
	     * // => false
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * // using a customizer callback
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqual(array, other, function(value, other) {
	     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
	     *     return true;
	     *   }
	     * });
	     * // => true
	     */
	    function isEqual(value, other, customizer, thisArg) {
	      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
	      var result = customizer ? customizer(value, other) : undefined;
	      return  result === undefined ? baseIsEqual(value, other, customizer) : !!result;
	    }

	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
	    }

	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(10);
	     * // => true
	     *
	     * _.isFinite('10');
	     * // => false
	     *
	     * _.isFinite(true);
	     * // => false
	     *
	     * _.isFinite(Object(10));
	     * // => false
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     */
	    function isFinite(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    }

	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in older versions of Chrome and Safari which return 'function' for regexes
	      // and Safari 8 equivalents which return 'object' for typed array constructors.
	      return isObject(value) && objToString.call(value) == funcTag;
	    }

	    /**
	     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(1);
	     * // => false
	     */
	    function isObject(value) {
	      // Avoid a V8 JIT bug in Chrome 19-20.
	      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	      var type = typeof value;
	      return !!value && (type == 'object' || type == 'function');
	    }

	    /**
	     * Performs a deep comparison between `object` and `source` to determine if
	     * `object` contains equivalent property values. If `customizer` is provided
	     * it is invoked to compare values. If `customizer` returns `undefined`
	     * comparisons are handled by the method instead. The `customizer` is bound
	     * to `thisArg` and invoked with three arguments: (value, other, index|key).
	     *
	     * **Note:** This method supports comparing properties of arrays, booleans,
	     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
	     * and DOM nodes are **not** supported. Provide a customizer function to extend
	     * support for comparing other values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize value comparisons.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.isMatch(object, { 'age': 40 });
	     * // => true
	     *
	     * _.isMatch(object, { 'age': 36 });
	     * // => false
	     *
	     * // using a customizer callback
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatch(object, source, function(value, other) {
	     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
	     * });
	     * // => true
	     */
	    function isMatch(object, source, customizer, thisArg) {
	      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
	      return baseIsMatch(object, getMatchData(source), customizer);
	    }

	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
	     * which returns `true` for `undefined` and other non-numeric values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
	      return isNumber(value) && value != +value;
	    }

	    /**
	     * Checks if `value` is a native function.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (value == null) {
	        return false;
	      }
	      if (isFunction(value)) {
	        return reIsNative.test(fnToString.call(value));
	      }
	      return isObjectLike(value) && reIsHostCtor.test(value);
	    }

	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }

	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
	     * as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isNumber(8.4);
	     * // => true
	     *
	     * _.isNumber(NaN);
	     * // => true
	     *
	     * _.isNumber('8.4');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
	    }

	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * **Note:** This method assumes objects created by the `Object` constructor
	     * have no inherited enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    function isPlainObject(value) {
	      var Ctor;

	      // Exit early for non `Object` objects.
	      if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||
	          (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
	        return false;
	      }
	      // IE < 9 iterates inherited properties before own properties. If the first
	      // iterated property is an object's own property then there are no inherited
	      // enumerable properties.
	      var result;
	      // In most environments an object's own properties are iterated before
	      // its inherited properties. If the last iterated property is an object's
	      // own property then there are no inherited enumerable properties.
	      baseForIn(value, function(subValue, key) {
	        result = key;
	      });
	      return result === undefined || hasOwnProperty.call(value, result);
	    }

	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    function isRegExp(value) {
	      return isObject(value) && objToString.call(value) == regexpTag;
	    }

	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
	    }

	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    function isTypedArray(value) {
	      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
	    }

	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined;
	    }

	    /**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */
	    function lt(value, other) {
	      return value < other;
	    }

	    /**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */
	    function lte(value, other) {
	      return value <= other;
	    }

	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * (function() {
	     *   return _.toArray(arguments).slice(1);
	     * }(1, 2, 3));
	     * // => [2, 3]
	     */
	    function toArray(value) {
	      var length = value ? getLength(value) : 0;
	      if (!isLength(length)) {
	        return values(value);
	      }
	      if (!length) {
	        return [];
	      }
	      return arrayCopy(value);
	    }

	    /**
	     * Converts `value` to a plain object flattening inherited enumerable
	     * properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return baseCopy(value, keysIn(value));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Recursively merges own enumerable properties of the source object(s), that
	     * don't resolve to `undefined` into the destination object. Subsequent sources
	     * overwrite property assignments of previous sources. If `customizer` is
	     * provided it is invoked to produce the merged values of the destination and
	     * source properties. If `customizer` returns `undefined` merging is handled
	     * by the method instead. The `customizer` is bound to `thisArg` and invoked
	     * with five arguments: (objectValue, sourceValue, key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var users = {
	     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
	     * };
	     *
	     * var ages = {
	     *   'data': [{ 'age': 36 }, { 'age': 40 }]
	     * };
	     *
	     * _.merge(users, ages);
	     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
	     *
	     * // using a customizer callback
	     * var object = {
	     *   'fruits': ['apple'],
	     *   'vegetables': ['beet']
	     * };
	     *
	     * var other = {
	     *   'fruits': ['banana'],
	     *   'vegetables': ['carrot']
	     * };
	     *
	     * _.merge(object, other, function(a, b) {
	     *   if (_.isArray(a)) {
	     *     return a.concat(b);
	     *   }
	     * });
	     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
	     */
	    var merge = createAssigner(baseMerge);

	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object. Subsequent sources overwrite property assignments of previous sources.
	     * If `customizer` is provided it is invoked to produce the assigned values.
	     * The `customizer` is bound to `thisArg` and invoked with five arguments:
	     * (objectValue, sourceValue, key, object, source).
	     *
	     * **Note:** This method mutates `object` and is based on
	     * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
	     *
	     * @static
	     * @memberOf _
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
	     * // => { 'user': 'fred', 'age': 40 }
	     *
	     * // using a customizer callback
	     * var defaults = _.partialRight(_.assign, function(value, other) {
	     *   return _.isUndefined(value) ? other : value;
	     * });
	     *
	     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var assign = createAssigner(function(object, source, customizer) {
	      return customizer
	        ? assignWith(object, source, customizer)
	        : baseAssign(object, source);
	    });

	    /**
	     * Creates an object that inherits from the given `prototype` object. If a
	     * `properties` object is provided its own enumerable properties are assigned
	     * to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties, guard) {
	      var result = baseCreate(prototype);
	      if (guard && isIterateeCall(prototype, properties, guard)) {
	        properties = undefined;
	      }
	      return properties ? baseAssign(result, properties) : result;
	    }

	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object for all destination properties that resolve to `undefined`. Once a
	     * property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var defaults = createDefaults(assign, assignDefaults);

	    /**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
	     * // => { 'user': { 'name': 'barney', 'age': 36 } }
	     *
	     */
	    var defaultsDeep = createDefaults(merge, mergeDefaults);

	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findKey(users, 'active', false);
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    var findKey = createFindKey(baseForOwn);

	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => returns `pebbles` assuming `_.findKey` returns `barney`
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findLastKey(users, 'active', false);
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    var findLastKey = createFindKey(baseForOwnRight);

	    /**
	     * Iterates over own and inherited enumerable properties of an object invoking
	     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
	     */
	    var forIn = createForIn(baseFor);

	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
	     */
	    var forInRight = createForIn(baseForRight);

	    /**
	     * Iterates over own enumerable properties of an object invoking `iteratee`
	     * for each property. The `iteratee` is bound to `thisArg` and invoked with
	     * three arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a' and 'b' (iteration order is not guaranteed)
	     */
	    var forOwn = createForOwn(baseForOwn);

	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
	     */
	    var forOwnRight = createForOwn(baseForOwnRight);

	    /**
	     * Creates an array of function property names from all enumerable properties,
	     * own and inherited, of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @alias methods
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the new array of property names.
	     * @example
	     *
	     * _.functions(_);
	     * // => ['after', 'ary', 'assign', ...]
	     */
	    function functions(object) {
	      return baseFunctions(object, keysIn(object));
	    }

	    /**
	     * Gets the property value at `path` of `object`. If the resolved value is
	     * `undefined` the `defaultValue` is used in its place.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined : baseGet(object, toPath(path), path + '');
	      return result === undefined ? defaultValue : result;
	    }

	    /**
	     * Checks if `path` is a direct property.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': { 'c': 3 } } };
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b.c');
	     * // => true
	     *
	     * _.has(object, ['a', 'b', 'c']);
	     * // => true
	     */
	    function has(object, path) {
	      if (object == null) {
	        return false;
	      }
	      var result = hasOwnProperty.call(object, path);
	      if (!result && !isKey(path)) {
	        path = toPath(path);
	        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	        if (object == null) {
	          return false;
	        }
	        path = last(path);
	        result = hasOwnProperty.call(object, path);
	      }
	      return result || (isLength(object.length) && isIndex(path, object.length) &&
	        (isArray(object) || isArguments(object)));
	    }

	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite property
	     * assignments of previous values unless `multiValue` is `true`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {boolean} [multiValue] Allow multiple values per key.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     *
	     * // with `multiValue`
	     * _.invert(object, true);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function invert(object, multiValue, guard) {
	      if (guard && isIterateeCall(object, multiValue, guard)) {
	        multiValue = undefined;
	      }
	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index],
	            value = object[key];

	        if (multiValue) {
	          if (hasOwnProperty.call(result, value)) {
	            result[value].push(key);
	          } else {
	            result[value] = [key];
	          }
	        }
	        else {
	          result[value] = key;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    var keys = !nativeKeys ? shimKeys : function(object) {
	      var Ctor = object == null ? undefined : object.constructor;
	      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
	          (typeof object != 'function' && isArrayLike(object))) {
	        return shimKeys(object);
	      }
	      return isObject(object) ? nativeKeys(object) : [];
	    };

	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      if (object == null) {
	        return [];
	      }
	      if (!isObject(object)) {
	        object = Object(object);
	      }
	      var length = object.length;
	      length = (length && isLength(length) &&
	        (isArray(object) || isArguments(object)) && length) || 0;

	      var Ctor = object.constructor,
	          index = -1,
	          isProto = typeof Ctor == 'function' && Ctor.prototype === object,
	          result = Array(length),
	          skipIndexes = length > 0;

	      while (++index < length) {
	        result[index] = (index + '');
	      }
	      for (var key in object) {
	        if (!(skipIndexes && isIndex(key, length)) &&
	            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * property of `object` through `iteratee`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
	    var mapKeys = createObjectMapper(true);

	    /**
	     * Creates an object with the same keys as `object` and values generated by
	     * running each own enumerable property of `object` through `iteratee`. The
	     * iteratee function is bound to `thisArg` and invoked with three arguments:
	     * (value, key, object).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
	     *   return n * 3;
	     * });
	     * // => { 'a': 3, 'b': 6 }
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * // using the `_.property` callback shorthand
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    var mapValues = createObjectMapper();

	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable properties of `object` that are not omitted.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|...(string|string[])} [predicate] The function invoked per
	     *  iteration or property names to omit, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.omit(object, 'age');
	     * // => { 'user': 'fred' }
	     *
	     * _.omit(object, _.isNumber);
	     * // => { 'user': 'fred' }
	     */
	    var omit = restParam(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      if (typeof props[0] != 'function') {
	        var props = arrayMap(baseFlatten(props), String);
	        return pickByArray(object, baseDifference(keysIn(object), props));
	      }
	      var predicate = bindCallback(props[0], props[1], 3);
	      return pickByCallback(object, function(value, key, object) {
	        return !predicate(value, key, object);
	      });
	    });

	    /**
	     * Creates a two dimensional array of the key-value pairs for `object`,
	     * e.g. `[[key1, value1], [key2, value2]]`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the new array of key-value pairs.
	     * @example
	     *
	     * _.pairs({ 'barney': 36, 'fred': 40 });
	     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
	     */
	    function pairs(object) {
	      object = toObject(object);

	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = Array(length);

	      while (++index < length) {
	        var key = props[index];
	        result[index] = [key, object[key]];
	      }
	      return result;
	    }

	    /**
	     * Creates an object composed of the picked `object` properties. Property
	     * names may be specified as individual arguments or as arrays of property
	     * names. If `predicate` is provided it is invoked for each property of `object`
	     * picking the properties `predicate` returns truthy for. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|...(string|string[])} [predicate] The function invoked per
	     *  iteration or property names to pick, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.pick(object, 'user');
	     * // => { 'user': 'fred' }
	     *
	     * _.pick(object, _.isString);
	     * // => { 'user': 'fred' }
	     */
	    var pick = restParam(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      return typeof props[0] == 'function'
	        ? pickByCallback(object, bindCallback(props[0], props[1], 3))
	        : pickByArray(object, baseFlatten(props));
	    });

	    /**
	     * This method is like `_.get` except that if the resolved value is a function
	     * it is invoked with the `this` binding of its parent object and its result
	     * is returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a.b.c', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a.b.c', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      var result = object == null ? undefined : object[path];
	      if (result === undefined) {
	        if (object != null && !isKey(path, object)) {
	          path = toPath(path);
	          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	          result = object == null ? undefined : object[last(path)];
	        }
	        result = result === undefined ? defaultValue : result;
	      }
	      return isFunction(result) ? result.call(object) : result;
	    }

	    /**
	     * Sets the property value of `path` on `object`. If a portion of `path`
	     * does not exist it is created.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to augment.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, 'x[0].y.z', 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      if (object == null) {
	        return object;
	      }
	      var pathKey = (path + '');
	      path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);

	      var index = -1,
	          length = path.length,
	          lastIndex = length - 1,
	          nested = object;

	      while (nested != null && ++index < length) {
	        var key = path[index];
	        if (isObject(nested)) {
	          if (index == lastIndex) {
	            nested[key] = value;
	          } else if (nested[key] == null) {
	            nested[key] = isIndex(path[index + 1]) ? [] : {};
	          }
	        }
	        nested = nested[key];
	      }
	      return object;
	    }

	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own enumerable
	     * properties through `iteratee`, with each invocation potentially mutating
	     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
	     * with four arguments: (accumulator, value, key, object). Iteratee functions
	     * may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Array|Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * });
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     * });
	     * // => { 'a': 3, 'b': 6 }
	     */
	    function transform(object, iteratee, accumulator, thisArg) {
	      var isArr = isArray(object) || isTypedArray(object);
	      iteratee = getCallback(iteratee, thisArg, 4);

	      if (accumulator == null) {
	        if (isArr || isObject(object)) {
	          var Ctor = object.constructor;
	          if (isArr) {
	            accumulator = isArray(object) ? new Ctor : [];
	          } else {
	            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
	          }
	        } else {
	          accumulator = {};
	        }
	      }
	      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }

	    /**
	     * Creates an array of the own enumerable property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return baseValues(object, keys(object));
	    }

	    /**
	     * Creates an array of the own and inherited enumerable property values
	     * of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return baseValues(object, keysIn(object));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Checks if `n` is between `start` and up to but not including, `end`. If
	     * `end` is not specified it is set to `start` with `start` then set to `0`.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} n The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     */
	    function inRange(value, start, end) {
	      start = +start || 0;
	      if (end === undefined) {
	        end = start;
	        start = 0;
	      } else {
	        end = +end || 0;
	      }
	      return value >= nativeMin(start, end) && value < nativeMax(start, end);
	    }

	    /**
	     * Produces a random number between `min` and `max` (inclusive). If only one
	     * argument is provided a number between `0` and the given number is returned.
	     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
	     * number is returned instead of an integer.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} [min=0] The minimum possible value.
	     * @param {number} [max=1] The maximum possible value.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(min, max, floating) {
	      if (floating && isIterateeCall(min, max, floating)) {
	        max = floating = undefined;
	      }
	      var noMin = min == null,
	          noMax = max == null;

	      if (floating == null) {
	        if (noMax && typeof min == 'boolean') {
	          floating = min;
	          min = 1;
	        }
	        else if (typeof max == 'boolean') {
	          floating = max;
	          noMax = true;
	        }
	      }
	      if (noMin && noMax) {
	        max = 1;
	        noMax = false;
	      }
	      min = +min || 0;
	      if (noMax) {
	        max = min;
	        min = 0;
	      } else {
	        max = +max || 0;
	      }
	      if (floating || min % 1 || max % 1) {
	        var rand = nativeRandom();
	        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
	      }
	      return baseRandom(min, max);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__foo_bar__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
	    });

	    /**
	     * Capitalizes the first character of `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('fred');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      string = baseToString(string);
	      return string && (string.charAt(0).toUpperCase() + string.slice(1));
	    }

	    /**
	     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = baseToString(string);
	      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
	    }

	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search from.
	     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = baseToString(string);
	      target = (target + '');

	      var length = string.length;
	      position = position === undefined
	        ? length
	        : nativeMin(position < 0 ? 0 : (+position || 0), length);

	      position -= target.length;
	      return position >= 0 && string.indexOf(target, position) == position;
	    }

	    /**
	     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
	     * their corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional characters
	     * use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value.
	     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * Backticks are escaped because in Internet Explorer < 9, they can break out
	     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
	     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
	     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
	     * for more details.
	     *
	     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
	     * to reduce XSS vectors.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      // Reset `lastIndex` because in IE < 9 `String#replace` does not.
	      string = baseToString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }

	    /**
	     * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
	     * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
	     */
	    function escapeRegExp(string) {
	      string = baseToString(string);
	      return (string && reHasRegExpChars.test(string))
	        ? string.replace(reRegExpChars, escapeRegExpChar)
	        : (string || '(?:)');
	    }

	    /**
	     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__foo_bar__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });

	    /**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = baseToString(string);
	      length = +length;

	      var strLength = string.length;
	      if (strLength >= length || !nativeIsFinite(length)) {
	        return string;
	      }
	      var mid = (length - strLength) / 2,
	          leftLength = nativeFloor(mid),
	          rightLength = nativeCeil(mid);

	      chars = createPadding('', rightLength, chars);
	      return chars.slice(0, leftLength) + string + chars;
	    }

	    /**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padLeft('abc', 6);
	     * // => '   abc'
	     *
	     * _.padLeft('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padLeft('abc', 3);
	     * // => 'abc'
	     */
	    var padLeft = createPadDir();

	    /**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padRight('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padRight('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padRight('abc', 3);
	     * // => 'abc'
	     */
	    var padRight = createPadDir(true);

	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
	     * in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
	     * of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
	      // Chrome fails to trim leading <BOM> whitespace characters.
	      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
	      if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
	        radix = 0;
	      } else if (radix) {
	        radix = +radix;
	      }
	      string = trim(string);
	      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
	    }

	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=0] The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n) {
	      var result = '';
	      string = baseToString(string);
	      n = +n;
	      if (n < 1 || !string || !nativeIsFinite(n)) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = nativeFloor(n / 2);
	        string += string;
	      } while (n);

	      return result;
	    }

	    /**
	     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--foo-bar');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__foo_bar__');
	     * // => 'Foo Bar'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
	    });

	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = baseToString(string);
	      position = position == null
	        ? 0
	        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);

	      return string.lastIndexOf(target, position) == position;
	    }

	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is provided it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options] The options object.
	     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
	     * @param {Object} [options.imports] An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
	     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
	     * @param {string} [options.variable] The data object variable name.
	     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // using the "interpolate" delimiter to create a compiled template
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // using the HTML "escape" delimiter to escape data property values
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the internal `print` function in "evaluate" delimiters
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // using custom template delimiters
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // using backslashes to treat delimiters as plain text
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // using the `imports` option to import `jQuery` as `jq`
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the `sourceURL` option to specify a custom sourceURL for the template
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
	     *
	     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // using the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and a stack trace
	     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, otherOptions) {
	      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;

	      if (otherOptions && isIterateeCall(string, options, otherOptions)) {
	        options = otherOptions = undefined;
	      }
	      string = baseToString(string);
	      options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);

	      var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);

	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";

	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');

	      // Use a sourceURL for easier debugging.
	      var sourceURL = '//# sourceURL=' +
	        ('sourceURL' in options
	          ? options.sourceURL
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';

	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);

	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;

	        // The JS engine embedded in Adobe products requires returning the `match`
	        // string in order to produce the correct `offset` value.
	        return match;
	      });

	      source += "';\n";

	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');

	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';

	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
	      });

	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }

	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
	      }
	      chars = (chars + '');
	      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
	    }

	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimLeft('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimLeft('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimLeft(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(trimmedLeftIndex(string));
	      }
	      return string.slice(charsLeftIndex(string, (chars + '')));
	    }

	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimRight('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimRight('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimRight(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(0, trimmedRightIndex(string) + 1);
	      }
	      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
	    }

	    /**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object|number} [options] The options object or maximum string length.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.trunc('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', 24);
	     * // => 'hi-diddly-ho there, n...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function trunc(string, options, guard) {
	      if (guard && isIterateeCall(string, options, guard)) {
	        options = undefined;
	      }
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;

	      if (options != null) {
	        if (isObject(options)) {
	          var separator = 'separator' in options ? options.separator : separator;
	          length = 'length' in options ? (+options.length || 0) : length;
	          omission = 'omission' in options ? baseToString(options.omission) : omission;
	        } else {
	          length = +options || 0;
	        }
	      }
	      string = baseToString(string);
	      if (length >= string.length) {
	        return string;
	      }
	      var end = length - omission.length;
	      if (end < 1) {
	        return omission;
	      }
	      var result = string.slice(0, end);
	      if (separator == null) {
	        return result + omission;
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              newEnd,
	              substring = string.slice(0, end);

	          if (!separator.global) {
	            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            newEnd = match.index;
	          }
	          result = result.slice(0, newEnd == null ? end : newEnd);
	        }
	      } else if (string.indexOf(separator, end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }

	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
	     * corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
	     * entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = baseToString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }

	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      if (guard && isIterateeCall(string, pattern, guard)) {
	        pattern = undefined;
	      }
	      string = baseToString(string);
	      return string.match(pattern || reWords) || [];
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Function} func The function to attempt.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // avoid throwing errors for invalid selectors
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = restParam(function(func, args) {
	      try {
	        return func.apply(undefined, args);
	      } catch(e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and arguments of the created function. If `func` is a property name the
	     * created callback returns the property value for a given element. If `func`
	     * is an object the created callback returns `true` for elements that contain
	     * the equivalent object properties, otherwise it returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias iteratee
	     * @category Utility
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // wrap to create custom callback shorthands
	     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
	     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
	     *   if (!match) {
	     *     return callback(func, thisArg);
	     *   }
	     *   return function(object) {
	     *     return match[2] == 'gt'
	     *       ? object[match[1]] > match[3]
	     *       : object[match[1]] < match[3];
	     *   };
	     * });
	     *
	     * _.filter(users, 'age__gt36');
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     */
	    function callback(func, thisArg, guard) {
	      if (guard && isIterateeCall(func, thisArg, guard)) {
	        thisArg = undefined;
	      }
	      return isObjectLike(func)
	        ? matches(func)
	        : baseCallback(func, thisArg);
	    }

	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var getter = _.constant(object);
	     *
	     * getter() === object;
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }

	    /**
	     * This method returns the first argument provided to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.identity(object) === object;
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }

	    /**
	     * Creates a function that performs a deep comparison between a given object
	     * and `source`, returning `true` if the given object has equivalent property
	     * values, else `false`.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
	     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, true));
	    }

	    /**
	     * Creates a function that compares the property value of `path` on a given
	     * object to `value`.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * _.find(users, _.matchesProperty('user', 'fred'));
	     * // => { 'user': 'fred' }
	     */
	    function matchesProperty(path, srcValue) {
	      return baseMatchesProperty(path, baseClone(srcValue, true));
	    }

	    /**
	     * Creates a function that invokes the method at `path` on a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': { 'c': _.constant(2) } } },
	     *   { 'a': { 'b': { 'c': _.constant(1) } } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b.c'));
	     * // => [2, 1]
	     *
	     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
	     * // => [1, 2]
	     */
	    var method = restParam(function(path, args) {
	      return function(object) {
	        return invokePath(object, path, args);
	      };
	    });

	    /**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path on `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = restParam(function(object, args) {
	      return function(path) {
	        return invokePath(object, path, args);
	      };
	    });

	    /**
	     * Adds all own enumerable function properties of a source object to the
	     * destination object. If `object` is a function then methods are added to
	     * its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.chain=true] Specify whether the functions added
	     *  are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      if (options == null) {
	        var isObj = isObject(source),
	            props = isObj ? keys(source) : undefined,
	            methodNames = (props && props.length) ? baseFunctions(source, props) : undefined;

	        if (!(methodNames ? methodNames.length : isObj)) {
	          methodNames = false;
	          options = source;
	          source = object;
	          object = this;
	        }
	      }
	      if (!methodNames) {
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = true,
	          index = -1,
	          isFunc = isFunction(object),
	          length = methodNames.length;

	      if (options === false) {
	        chain = false;
	      } else if (isObject(options) && 'chain' in options) {
	        chain = options.chain;
	      }
	      while (++index < length) {
	        var methodName = methodNames[index],
	            func = source[methodName];

	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = (function(func) {
	            return function() {
	              var chainAll = this.__chain__;
	              if (chain || chainAll) {
	                var result = object(this.__wrapped__),
	                    actions = result.__actions__ = arrayCopy(this.__actions__);

	                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	                result.__chain__ = chainAll;
	                return result;
	              }
	              return func.apply(object, arrayPush([this.value()], arguments));
	            };
	          }(func));
	        }
	      }
	      return object;
	    }

	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      root._ = oldDash;
	      return this;
	    }

	    /**
	     * A no-operation function that returns `undefined` regardless of the
	     * arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.noop(object) === undefined;
	     * // => true
	     */
	    function noop() {
	      // No operation performed.
	    }

	    /**
	     * Creates a function that returns the property value at `path` on a
	     * given object.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': { 'c': 2 } } },
	     *   { 'a': { 'b': { 'c': 1 } } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b.c'));
	     * // => [2, 1]
	     *
	     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
	    }

	    /**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the property value at a given path on `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return baseGet(object, toPath(path), path + '');
	      };
	    }

	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. If `end` is not specified it is
	     * set to `start` with `start` then set to `0`. If `end` is less than `start`
	     * a zero-length range is created unless a negative `step` is specified.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the new array of numbers.
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    function range(start, end, step) {
	      if (step && isIterateeCall(start, end, step)) {
	        end = step = undefined;
	      }
	      start = +start || 0;
	      step = step == null ? 1 : (+step || 0);

	      if (end == null) {
	        end = start;
	        start = 0;
	      } else {
	        end = +end || 0;
	      }
	      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
	      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
	      var index = -1,
	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	          result = Array(length);

	      while (++index < length) {
	        result[index] = start;
	        start += step;
	      }
	      return result;
	    }

	    /**
	     * Invokes the iteratee function `n` times, returning an array of the results
	     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
	     * one argument; (index).
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
	     * // => [3, 6, 4]
	     *
	     * _.times(3, function(n) {
	     *   mage.castSpell(n);
	     * });
	     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
	     *
	     * _.times(3, function(n) {
	     *   this.cast(n);
	     * }, mage);
	     * // => also invokes `mage.castSpell(n)` three times
	     */
	    function times(n, iteratee, thisArg) {
	      n = nativeFloor(n);

	      // Exit early to avoid a JSC JIT bug in Safari 8
	      // where `Array(0)` is treated as `Array(1)`.
	      if (n < 1 || !nativeIsFinite(n)) {
	        return [];
	      }
	      var index = -1,
	          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));

	      iteratee = bindCallback(iteratee, thisArg, 1);
	      while (++index < n) {
	        if (index < MAX_ARRAY_LENGTH) {
	          result[index] = iteratee(index);
	        } else {
	          iteratee(index);
	        }
	      }
	      return result;
	    }

	    /**
	     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {string} [prefix] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return baseToString(prefix) + id;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} augend The first number to add.
	     * @param {number} addend The second number to add.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    function add(augend, addend) {
	      return (+augend || 0) + (+addend || 0);
	    }

	    /**
	     * Calculates `n` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */
	    var ceil = createRound('ceil');

	    /**
	     * Calculates `n` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */
	    var floor = createRound('floor');

	    /**
	     * Gets the maximum value of `collection`. If `collection` is empty or falsey
	     * `-Infinity` is returned. If an iteratee function is provided it is invoked
	     * for each value in `collection` to generate the criterion by which the value
	     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => -Infinity
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.max(users, function(chr) {
	     *   return chr.age;
	     * });
	     * // => { 'user': 'fred', 'age': 40 }
	     *
	     * // using the `_.property` callback shorthand
	     * _.max(users, 'age');
	     * // => { 'user': 'fred', 'age': 40 }
	     */
	    var max = createExtremum(gt, NEGATIVE_INFINITY);

	    /**
	     * Gets the minimum value of `collection`. If `collection` is empty or falsey
	     * `Infinity` is returned. If an iteratee function is provided it is invoked
	     * for each value in `collection` to generate the criterion by which the value
	     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => Infinity
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.min(users, function(chr) {
	     *   return chr.age;
	     * });
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // using the `_.property` callback shorthand
	     * _.min(users, 'age');
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var min = createExtremum(lt, POSITIVE_INFINITY);

	    /**
	     * Calculates `n` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */
	    var round = createRound('round');

	    /**
	     * Gets the sum of the values in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 6]);
	     * // => 10
	     *
	     * _.sum({ 'a': 4, 'b': 6 });
	     * // => 10
	     *
	     * var objects = [
	     *   { 'n': 4 },
	     *   { 'n': 6 }
	     * ];
	     *
	     * _.sum(objects, function(object) {
	     *   return object.n;
	     * });
	     * // => 10
	     *
	     * // using the `_.property` callback shorthand
	     * _.sum(objects, 'n');
	     * // => 10
	     */
	    function sum(collection, iteratee, thisArg) {
	      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	        iteratee = undefined;
	      }
	      iteratee = getCallback(iteratee, thisArg, 3);
	      return iteratee.length == 1
	        ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)
	        : baseSum(collection, iteratee);
	    }

	    /*------------------------------------------------------------------------*/

	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;

	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;

	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;

	    // Add functions to the `Map` cache.
	    MapCache.prototype['delete'] = mapDelete;
	    MapCache.prototype.get = mapGet;
	    MapCache.prototype.has = mapHas;
	    MapCache.prototype.set = mapSet;

	    // Add functions to the `Set` cache.
	    SetCache.prototype.push = cachePush;

	    // Assign cache to `_.memoize`.
	    memoize.Cache = MapCache;

	    // Add functions that return wrapped values when chaining.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.callback = callback;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defaultsDeep = defaultsDeep;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.functions = functions;
	    lodash.groupBy = groupBy;
	    lodash.indexBy = indexBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.invert = invert;
	    lodash.invoke = invoke;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapKeys = mapKeys;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.modArgs = modArgs;
	    lodash.negate = negate;
	    lodash.omit = omit;
	    lodash.once = once;
	    lodash.pairs = pairs;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pluck = pluck;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.restParam = restParam;
	    lodash.set = set;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortByAll = sortByAll;
	    lodash.sortByOrder = sortByOrder;
	    lodash.spread = spread;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.times = times;
	    lodash.toArray = toArray;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.union = union;
	    lodash.uniq = uniq;
	    lodash.unzip = unzip;
	    lodash.unzipWith = unzipWith;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.where = where;
	    lodash.without = without;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;
	    lodash.zipWith = zipWith;

	    // Add aliases.
	    lodash.backflow = flowRight;
	    lodash.collect = map;
	    lodash.compose = flowRight;
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.extend = assign;
	    lodash.iteratee = callback;
	    lodash.methods = functions;
	    lodash.object = zipObject;
	    lodash.select = filter;
	    lodash.tail = rest;
	    lodash.unique = uniq;

	    // Add functions to `lodash.prototype`.
	    mixin(lodash, lodash);

	    /*------------------------------------------------------------------------*/

	    // Add functions that return unwrapped values when chaining.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.ceil = ceil;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.deburr = deburr;
	    lodash.endsWith = endsWith;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.findWhere = findWhere;
	    lodash.first = first;
	    lodash.floor = floor;
	    lodash.get = get;
	    lodash.gt = gt;
	    lodash.gte = gte;
	    lodash.has = has;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isBoolean = isBoolean;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isMatch = isMatch;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isString = isString;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.lt = lt;
	    lodash.lte = lte;
	    lodash.max = max;
	    lodash.min = min;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padLeft = padLeft;
	    lodash.padRight = padRight;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.result = result;
	    lodash.round = round;
	    lodash.runInContext = runInContext;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.sum = sum;
	    lodash.template = template;
	    lodash.trim = trim;
	    lodash.trimLeft = trimLeft;
	    lodash.trimRight = trimRight;
	    lodash.trunc = trunc;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.words = words;

	    // Add aliases.
	    lodash.all = every;
	    lodash.any = some;
	    lodash.contains = includes;
	    lodash.eq = isEqual;
	    lodash.detect = find;
	    lodash.foldl = reduce;
	    lodash.foldr = reduceRight;
	    lodash.head = first;
	    lodash.include = includes;
	    lodash.inject = reduce;

	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!lodash.prototype[methodName]) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), false);

	    /*------------------------------------------------------------------------*/

	    // Add functions capable of returning wrapped and unwrapped values when chaining.
	    lodash.sample = sample;

	    lodash.prototype.sample = function(n) {
	      if (!this.__chain__ && n == null) {
	        return sample(this.value());
	      }
	      return this.thru(function(value) {
	        return sample(value, n);
	      });
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type string
	     */
	    lodash.VERSION = VERSION;

	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });

	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      LazyWrapper.prototype[methodName] = function(n) {
	        var filtered = this.__filtered__;
	        if (filtered && !index) {
	          return new LazyWrapper(this);
	        }
	        n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);

	        var result = this.clone();
	        if (filtered) {
	          result.__takeCount__ = nativeMin(result.__takeCount__, n);
	        } else {
	          result.__views__.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
	        }
	        return result;
	      };

	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };
	    });

	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var type = index + 1,
	          isFilter = type != LAZY_MAP_FLAG;

	      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
	        var result = this.clone();
	        result.__iteratees__.push({ 'iteratee': getCallback(iteratee, thisArg, 1), 'type': type });
	        result.__filtered__ = result.__filtered__ || isFilter;
	        return result;
	      };
	    });

	    // Add `LazyWrapper` methods for `_.first` and `_.last`.
	    arrayEach(['first', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });

	    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
	    arrayEach(['initial', 'rest'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');

	      LazyWrapper.prototype[methodName] = function() {
	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	      };
	    });

	    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
	    arrayEach(['pluck', 'where'], function(methodName, index) {
	      var operationName = index ? 'filter' : 'map',
	          createCallback = index ? baseMatches : property;

	      LazyWrapper.prototype[methodName] = function(value) {
	        return this[operationName](createCallback(value));
	      };
	    });

	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };

	    LazyWrapper.prototype.reject = function(predicate, thisArg) {
	      predicate = getCallback(predicate, thisArg, 1);
	      return this.filter(function(value) {
	        return !predicate(value);
	      });
	    };

	    LazyWrapper.prototype.slice = function(start, end) {
	      start = start == null ? 0 : (+start || 0);

	      var result = this;
	      if (result.__filtered__ && (start > 0 || end < 0)) {
	        return new LazyWrapper(result);
	      }
	      if (start < 0) {
	        result = result.takeRight(-start);
	      } else if (start) {
	        result = result.drop(start);
	      }
	      if (end !== undefined) {
	        end = (+end || 0);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };

	    LazyWrapper.prototype.takeRightWhile = function(predicate, thisArg) {
	      return this.reverse().takeWhile(predicate, thisArg).reverse();
	    };

	    LazyWrapper.prototype.toArray = function() {
	      return this.take(POSITIVE_INFINITY);
	    };

	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
	          retUnwrapped = /^(?:first|last)$/.test(methodName),
	          lodashFunc = lodash[retUnwrapped ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName];

	      if (!lodashFunc) {
	        return;
	      }
	      lodash.prototype[methodName] = function() {
	        var args = retUnwrapped ? [1] : arguments,
	            chainAll = this.__chain__,
	            value = this.__wrapped__,
	            isHybrid = !!this.__actions__.length,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);

	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
	          isLazy = useLazy = false;
	        }
	        var interceptor = function(value) {
	          return (retUnwrapped && chainAll)
	            ? lodashFunc(value, 1)[0]
	            : lodashFunc.apply(undefined, arrayPush([value], args));
	        };

	        var action = { 'func': thru, 'args': [interceptor], 'thisArg': undefined },
	            onlyLazy = isLazy && !isHybrid;

	        if (retUnwrapped && !chainAll) {
	          if (onlyLazy) {
	            value = value.clone();
	            value.__actions__.push(action);
	            return func.call(value);
	          }
	          return lodashFunc.call(undefined, this.value())[0];
	        }
	        if (!retUnwrapped && useLazy) {
	          value = onlyLazy ? value : new LazyWrapper(this);
	          var result = func.apply(value, args);
	          result.__actions__.push(action);
	          return new LodashWrapper(result, chainAll);
	        }
	        return this.thru(interceptor);
	      };
	    });

	    // Add `Array` and `String` methods to `lodash.prototype`.
	    arrayEach(['join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {
	      var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          return func.apply(this.value(), args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(value, args);
	        });
	      };
	    });

	    // Map minified function names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = lodashFunc.name,
	            names = realNames[key] || (realNames[key] = []);

	        names.push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });

	    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];

	    // Add functions to the lazy wrapper.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;

	    // Add chaining functions to the `lodash` wrapper.
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.concat = wrapperConcat;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toString = wrapperToString;
	    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

	    // Add function aliases to the `lodash` wrapper.
	    lodash.prototype.collect = lodash.prototype.map;
	    lodash.prototype.head = lodash.prototype.first;
	    lodash.prototype.select = lodash.prototype.filter;
	    lodash.prototype.tail = lodash.prototype.rest;

	    return lodash;
	  }

	  /*--------------------------------------------------------------------------*/

	  // Export lodash.
	  var _ = runInContext();

	  // Some AMD build optimizers like r.js check for condition patterns like the following:
	  if (true) {
	    // Expose lodash to the global object when an AMD loader is present to avoid
	    // errors in cases where lodash is loaded by a script tag and not intended
	    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
	    // more details.
	    root._ = _;

	    // Define as an anonymous module so, through path mapping, it can be
	    // referenced as the "underscore" module.
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
	  else if (freeExports && freeModule) {
	    // Export for Node.js or RingoJS.
	    if (moduleExports) {
	      (freeModule.exports = _)._ = _;
	    }
	    // Export for Rhino with CommonJS support.
	    else {
	      freeExports._ = _;
	    }
	  }
	  else {
	    // Export for a browser or Rhino.
	    root._ = _;
	  }
	}.call(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(33)(module), (function() { return this; }())))

/***/ },
/* 7013 */
/***/ function(module, exports, __webpack_require__) {

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	;(function (exports) {
		'use strict';

	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array

		var PLUS   = '+'.charCodeAt(0)
		var SLASH  = '/'.charCodeAt(0)
		var NUMBER = '0'.charCodeAt(0)
		var LOWER  = 'a'.charCodeAt(0)
		var UPPER  = 'A'.charCodeAt(0)
		var PLUS_URL_SAFE = '-'.charCodeAt(0)
		var SLASH_URL_SAFE = '_'.charCodeAt(0)

		function decode (elt) {
			var code = elt.charCodeAt(0)
			if (code === PLUS ||
			    code === PLUS_URL_SAFE)
				return 62 // '+'
			if (code === SLASH ||
			    code === SLASH_URL_SAFE)
				return 63 // '/'
			if (code < NUMBER)
				return -1 //no match
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}

		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr

			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}

			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders)

			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length

			var L = 0

			function push (v) {
				arr[L++] = v
			}

			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
				push((tmp & 0xFF0000) >> 16)
				push((tmp & 0xFF00) >> 8)
				push(tmp & 0xFF)
			}

			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
				push(tmp & 0xFF)
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
				push((tmp >> 8) & 0xFF)
				push(tmp & 0xFF)
			}

			return arr
		}

		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
				output = "",
				temp, length

			function encode (num) {
				return lookup.charAt(num)
			}

			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}

			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
				output += tripletToBase64(temp)
			}

			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1]
					output += encode(temp >> 2)
					output += encode((temp << 4) & 0x3F)
					output += '=='
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
					output += encode(temp >> 10)
					output += encode((temp >> 4) & 0x3F)
					output += encode((temp << 2) & 0x3F)
					output += '='
					break
			}

			return output
		}

		exports.toByteArray = b64ToByteArray
		exports.fromByteArray = uint8ToBase64
	}( false ? (this.base64js = {}) : exports))


/***/ },
/* 7014 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 7015 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 7016 */
/***/ function(module, exports) {

	exports.isatty = function () { return false; };

	function ReadStream() {
	  throw new Error('tty.ReadStream is not implemented');
	}
	exports.ReadStream = ReadStream;

	function WriteStream() {
	  throw new Error('tty.ReadStream is not implemented');
	}
	exports.WriteStream = WriteStream;


/***/ },
/* 7017 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 7018 */
/***/ function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 7019 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__) {

	/* @flow */

	"use strict";

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;

	var _lineNumbers = __webpack_require__(__webpack_module_template_argument_1__);

	var _lineNumbers2 = _interopRequireDefault(_lineNumbers);

	var _repeating = __webpack_require__(__webpack_module_template_argument_2__);

	var _repeating2 = _interopRequireDefault(_repeating);

	var _jsTokens = __webpack_require__(__webpack_module_template_argument_3__);

	var _jsTokens2 = _interopRequireDefault(_jsTokens);

	var _esutils = __webpack_require__(__webpack_module_template_argument_4__);

	var _esutils2 = _interopRequireDefault(_esutils);

	var _chalk = __webpack_require__(__webpack_module_template_argument_5__);

	var _chalk2 = _interopRequireDefault(_chalk);

	/**
	 * Chalk styles for token types.
	 */

	var defs = {
	  string: _chalk2["default"].red,
	  punctuator: _chalk2["default"].bold,
	  curly: _chalk2["default"].green,
	  parens: _chalk2["default"].blue.bold,
	  square: _chalk2["default"].yellow,
	  keyword: _chalk2["default"].cyan,
	  number: _chalk2["default"].magenta,
	  regex: _chalk2["default"].magenta,
	  comment: _chalk2["default"].grey,
	  invalid: _chalk2["default"].inverse
	};

	/**
	 * RegExp to test for newlines in terminal.
	 */

	var NEWLINE = /\r\n|[\n\r\u2028\u2029]/;

	/**
	 * Get the type of token, specifying punctuator type.
	 */

	function getTokenType(match) {
	  var token = _jsTokens2["default"].matchToToken(match);
	  if (token.type === "name" && _esutils2["default"].keyword.isReservedWordES6(token.value)) {
	    return "keyword";
	  }

	  if (token.type === "punctuator") {
	    switch (token.value) {
	      case "{":
	      case "}":
	        return "curly";
	      case "(":
	      case ")":
	        return "parens";
	      case "[":
	      case "]":
	        return "square";
	    }
	  }

	  return token.type;
	}

	/**
	 * Highlight `text`.
	 */

	function highlight(text /*: string*/) {
	  return text.replace(_jsTokens2["default"], function () {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    var type = getTokenType(args);
	    var colorize = defs[type];
	    if (colorize) {
	      return args[0].split(NEWLINE).map(function (str) {
	        return colorize(str);
	      }).join("\n");
	    } else {
	      return args[0];
	    }
	  });
	}

	/**
	 * Create a code frame, adding line numbers, code highlighting, and pointing to a given position.
	 */

	exports["default"] = function (rawLines /*: string*/, lineNumber /*: number*/, colNumber /*: number*/) /*: string*/ {
	  var opts /*: Object*/ = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

	  colNumber = Math.max(colNumber, 0);

	  var highlighted = opts.highlightCode && _chalk2["default"].supportsColor;
	  if (highlighted) rawLines = highlight(rawLines);

	  var lines = rawLines.split(NEWLINE);
	  var start = Math.max(lineNumber - 3, 0);
	  var end = Math.min(lines.length, lineNumber + 3);

	  if (!lineNumber && !colNumber) {
	    start = 0;
	    end = lines.length;
	  }

	  var frame = _lineNumbers2["default"](lines.slice(start, end), {
	    start: start + 1,
	    before: "  ",
	    after: " | ",
	    transform: function transform(params) {
	      if (params.number !== lineNumber) {
	        return;
	      }

	      if (colNumber) {
	        params.line += "\n" + params.before + _repeating2["default"](" ", params.width) + params.after + _repeating2["default"](" ", colNumber - 1) + "^";
	      }

	      params.before = params.before.replace(/^./, ">");
	    }
	  }).join("\n");

	  if (highlighted) {
	    return _chalk2["default"].reset(frame);
	  } else {
	    return frame;
	  }
	};

	module.exports = exports["default"];

/***/ },
/* 7020 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	var escapeStringRegexp = __webpack_require__(__webpack_module_template_argument_0__);
	var ansiStyles = __webpack_require__(__webpack_module_template_argument_1__);
	var stripAnsi = __webpack_require__(__webpack_module_template_argument_2__);
	var hasAnsi = __webpack_require__(__webpack_module_template_argument_3__);
	var supportsColor = __webpack_require__(__webpack_module_template_argument_4__);
	var defineProps = Object.defineProperties;
	var isSimpleWindowsTerm = process.platform === 'win32' && !/^xterm/i.test(process.env.TERM);

	function Chalk(options) {
		// detect mode if not set manually
		this.enabled = !options || options.enabled === undefined ? supportsColor : options.enabled;
	}

	// use bright blue on Windows as the normal blue color is illegible
	if (isSimpleWindowsTerm) {
		ansiStyles.blue.open = '\u001b[94m';
	}

	var styles = (function () {
		var ret = {};

		Object.keys(ansiStyles).forEach(function (key) {
			ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');

			ret[key] = {
				get: function () {
					return build.call(this, this._styles.concat(key));
				}
			};
		});

		return ret;
	})();

	var proto = defineProps(function chalk() {}, styles);

	function build(_styles) {
		var builder = function () {
			return applyStyle.apply(builder, arguments);
		};

		builder._styles = _styles;
		builder.enabled = this.enabled;
		// __proto__ is used because we must return a function, but there is
		// no way to create a function with a different prototype.
		/* eslint-disable no-proto */
		builder.__proto__ = proto;

		return builder;
	}

	function applyStyle() {
		// support varags, but simply cast to string in case there's only one arg
		var args = arguments;
		var argsLen = args.length;
		var str = argsLen !== 0 && String(arguments[0]);

		if (argsLen > 1) {
			// don't slice `arguments`, it prevents v8 optimizations
			for (var a = 1; a < argsLen; a++) {
				str += ' ' + args[a];
			}
		}

		if (!this.enabled || !str) {
			return str;
		}

		var nestedStyles = this._styles;
		var i = nestedStyles.length;

		// Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,
		// see https://github.com/chalk/chalk/issues/58
		// If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.
		var originalDim = ansiStyles.dim.open;
		if (isSimpleWindowsTerm && (nestedStyles.indexOf('gray') !== -1 || nestedStyles.indexOf('grey') !== -1)) {
			ansiStyles.dim.open = '';
		}

		while (i--) {
			var code = ansiStyles[nestedStyles[i]];

			// Replace any instances already present with a re-opening code
			// otherwise only the part of the string until said closing code
			// will be colored, and the rest will simply be 'plain'.
			str = code.open + str.replace(code.closeRe, code.open) + code.close;
		}

		// Reset the original 'dim' if we changed it to work around the Windows dimmed gray issue.
		ansiStyles.dim.open = originalDim;

		return str;
	}

	function init() {
		var ret = {};

		Object.keys(styles).forEach(function (name) {
			ret[name] = {
				get: function () {
					return build.call(this, [name]);
				}
			};
		});

		return ret;
	}

	defineProps(Chalk.prototype, init());

	module.exports = new Chalk();
	module.exports.styles = ansiStyles;
	module.exports.hasColor = hasAnsi;
	module.exports.stripColor = stripAnsi;
	module.exports.supportsColor = supportsColor;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ },
/* 7021 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';
	var ansiRegex = __webpack_require__(__webpack_module_template_argument_0__);
	var re = new RegExp(ansiRegex().source); // remove the `g` flag
	module.exports = re.test.bind(re);


/***/ },
/* 7022 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';
	var ansiRegex = __webpack_require__(__webpack_module_template_argument_0__)();

	module.exports = function (str) {
		return typeof str === 'string' ? str.replace(ansiRegex, '') : str;
	};


/***/ },
/* 7023 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	/*
	  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:

	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.

	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	(function () {
	    'use strict';

	    var code = __webpack_require__(__webpack_module_template_argument_0__);

	    function isStrictModeReservedWordES6(id) {
	        switch (id) {
	        case 'implements':
	        case 'interface':
	        case 'package':
	        case 'private':
	        case 'protected':
	        case 'public':
	        case 'static':
	        case 'let':
	            return true;
	        default:
	            return false;
	        }
	    }

	    function isKeywordES5(id, strict) {
	        // yield should not be treated as keyword under non-strict mode.
	        if (!strict && id === 'yield') {
	            return false;
	        }
	        return isKeywordES6(id, strict);
	    }

	    function isKeywordES6(id, strict) {
	        if (strict && isStrictModeReservedWordES6(id)) {
	            return true;
	        }

	        switch (id.length) {
	        case 2:
	            return (id === 'if') || (id === 'in') || (id === 'do');
	        case 3:
	            return (id === 'var') || (id === 'for') || (id === 'new') || (id === 'try');
	        case 4:
	            return (id === 'this') || (id === 'else') || (id === 'case') ||
	                (id === 'void') || (id === 'with') || (id === 'enum');
	        case 5:
	            return (id === 'while') || (id === 'break') || (id === 'catch') ||
	                (id === 'throw') || (id === 'const') || (id === 'yield') ||
	                (id === 'class') || (id === 'super');
	        case 6:
	            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
	                (id === 'switch') || (id === 'export') || (id === 'import');
	        case 7:
	            return (id === 'default') || (id === 'finally') || (id === 'extends');
	        case 8:
	            return (id === 'function') || (id === 'continue') || (id === 'debugger');
	        case 10:
	            return (id === 'instanceof');
	        default:
	            return false;
	        }
	    }

	    function isReservedWordES5(id, strict) {
	        return id === 'null' || id === 'true' || id === 'false' || isKeywordES5(id, strict);
	    }

	    function isReservedWordES6(id, strict) {
	        return id === 'null' || id === 'true' || id === 'false' || isKeywordES6(id, strict);
	    }

	    function isRestrictedWord(id) {
	        return id === 'eval' || id === 'arguments';
	    }

	    function isIdentifierNameES5(id) {
	        var i, iz, ch;

	        if (id.length === 0) { return false; }

	        ch = id.charCodeAt(0);
	        if (!code.isIdentifierStartES5(ch)) {
	            return false;
	        }

	        for (i = 1, iz = id.length; i < iz; ++i) {
	            ch = id.charCodeAt(i);
	            if (!code.isIdentifierPartES5(ch)) {
	                return false;
	            }
	        }
	        return true;
	    }

	    function decodeUtf16(lead, trail) {
	        return (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
	    }

	    function isIdentifierNameES6(id) {
	        var i, iz, ch, lowCh, check;

	        if (id.length === 0) { return false; }

	        check = code.isIdentifierStartES6;
	        for (i = 0, iz = id.length; i < iz; ++i) {
	            ch = id.charCodeAt(i);
	            if (0xD800 <= ch && ch <= 0xDBFF) {
	                ++i;
	                if (i >= iz) { return false; }
	                lowCh = id.charCodeAt(i);
	                if (!(0xDC00 <= lowCh && lowCh <= 0xDFFF)) {
	                    return false;
	                }
	                ch = decodeUtf16(ch, lowCh);
	            }
	            if (!check(ch)) {
	                return false;
	            }
	            check = code.isIdentifierPartES6;
	        }
	        return true;
	    }

	    function isIdentifierES5(id, strict) {
	        return isIdentifierNameES5(id) && !isReservedWordES5(id, strict);
	    }

	    function isIdentifierES6(id, strict) {
	        return isIdentifierNameES6(id) && !isReservedWordES6(id, strict);
	    }

	    module.exports = {
	        isKeywordES5: isKeywordES5,
	        isKeywordES6: isKeywordES6,
	        isReservedWordES5: isReservedWordES5,
	        isReservedWordES6: isReservedWordES6,
	        isRestrictedWord: isRestrictedWord,
	        isIdentifierNameES5: isIdentifierNameES5,
	        isIdentifierNameES6: isIdentifierNameES6,
	        isIdentifierES5: isIdentifierES5,
	        isIdentifierES6: isIdentifierES6
	    };
	}());
	/* vim: set sw=4 ts=4 et tw=80 : */


/***/ },
/* 7024 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	/*
	  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:

	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.

	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/


	(function () {
	    'use strict';

	    exports.ast = __webpack_require__(__webpack_module_template_argument_0__);
	    exports.code = __webpack_require__(__webpack_module_template_argument_1__);
	    exports.keyword = __webpack_require__(__webpack_module_template_argument_2__);
	}());
	/* vim: set sw=4 ts=4 et tw=80 : */


/***/ },
/* 7025 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	// Copyright 2014, 2015 Simon Lydell
	// X11 (“MIT”) Licensed. (See LICENSE.)

	var leftPad = __webpack_require__(__webpack_module_template_argument_0__)

	function get(options, key, defaultValue) {
	  return (key in options ? options[key] : defaultValue)
	}

	function lineNumbers(code, options) {
	  var getOption = get.bind(null, options || {})
	  var transform = getOption("transform", Function.prototype)
	  var padding   = getOption("padding", " ")
	  var before    = getOption("before", " ")
	  var after     = getOption("after", " | ")
	  var start     = getOption("start", 1)
	  var isArray   = Array.isArray(code)
	  var lines     = (isArray ? code : code.split("\n"))
	  var end       = start + lines.length - 1
	  var width     = String(end).length
	  var numbered  = lines.map(function(line, index) {
	    var number  = start + index
	    var params  = {before: before, number: number, width: width, after: after,
	                   line: line}
	    transform(params)
	    return params.before + leftPad(params.number, width, padding) +
	           params.after + params.line
	  })
	  return (isArray ? numbered : numbered.join("\n"))
	}

	module.exports = lineNumbers


/***/ },
/* 7026 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';
	var isFinite = __webpack_require__(__webpack_module_template_argument_0__);

	module.exports = function (str, n) {
		if (typeof str !== 'string') {
			throw new TypeError('Expected a string as the first argument');
		}

		if (n < 0 || !isFinite(n)) {
			throw new TypeError('Expected a finite positive number');
		}

		var ret = '';

		do {
			if (n & 1) {
				ret += str;
			}

			str += str;
		} while (n = n >> 1);

		return ret;
	};


/***/ },
/* 7027 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';
	var numberIsNan = __webpack_require__(__webpack_module_template_argument_0__);

	module.exports = Number.isFinite || function (val) {
		return !(typeof val !== 'number' || numberIsNan(val) || val === Infinity || val === -Infinity);
	};


/***/ },
/* 7028 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	/* @flow */

	"use strict";

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;
	exports.get = get;
	exports.parseArgs = parseArgs;

	var _util = __webpack_require__(30);

	var util = _interopRequireWildcard(_util);

	/**
	 * Mapping of messages to be used in Babel.
	 * Messages can include $0-style placeholders.
	 */

	var MESSAGES = {
	  tailCallReassignmentDeopt: "Function reference has been reassigned, so it will probably be dereferenced, therefore we can't optimise this with confidence",
	  classesIllegalBareSuper: "Illegal use of bare super",
	  classesIllegalSuperCall: "Direct super call is illegal in non-constructor, use super.$1() instead",
	  scopeDuplicateDeclaration: "Duplicate declaration $1",
	  settersNoRest: "Setters aren't allowed to have a rest",
	  noAssignmentsInForHead: "No assignments allowed in for-in/of head",
	  expectedMemberExpressionOrIdentifier: "Expected type MemberExpression or Identifier",
	  invalidParentForThisNode: "We don't know how to handle this node within the current parent - please open an issue",
	  readOnly: "$1 is read-only",
	  unknownForHead: "Unknown node type $1 in ForStatement",
	  didYouMean: "Did you mean $1?",
	  codeGeneratorDeopt: "Note: The code generator has deoptimised the styling of $1 as it exceeds the max of $2.",
	  missingTemplatesDirectory: "no templates directory - this is most likely the result of a broken `npm publish`. Please report to https://github.com/babel/babel/issues",
	  unsupportedOutputType: "Unsupported output type $1",
	  illegalMethodName: "Illegal method name $1",
	  lostTrackNodePath: "We lost track of this node's position, likely because the AST was directly manipulated",

	  modulesIllegalExportName: "Illegal export $1",
	  modulesDuplicateDeclarations: "Duplicate module declarations with the same source but in different scopes",

	  undeclaredVariable: "Reference to undeclared variable $1",
	  undeclaredVariableType: "Referencing a type alias outside of a type annotation",
	  undeclaredVariableSuggestion: "Reference to undeclared variable $1 - did you mean $2?",

	  traverseNeedsParent: "You must pass a scope and parentPath unless traversing a Program/File. Instead of that you tried to traverse a $1 node without passing scope and parentPath.",
	  traverseVerifyRootFunction: "You passed `traverse()` a function when it expected a visitor object, are you sure you didn't mean `{ enter: Function }`?",
	  traverseVerifyVisitorProperty: "You passed `traverse()` a visitor object with the property $1 that has the invalid property $2",
	  traverseVerifyNodeType: "You gave us a visitor for the node type $1 but it's not a valid type",

	  pluginNotObject: "Plugin $2 specified in $1 was expected to return an object when invoked but returned $3",
	  pluginNotFunction: "Plugin $2 specified in $1 was expected to return a function but returned $3",
	  pluginUnknown: "Unknown plugin $1 specified in $2 at $3, attempted to resolve relative to $4",
	  pluginInvalidProperty: "Plugin $2 specified in $1 provided an invalid property of $3"
	};

	exports.MESSAGES = MESSAGES;
	/**
	 * Get a message with $0 placeholders replaced by arguments.
	 */

	function get(key /*: string*/) /*: string*/ {
	  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    args[_key - 1] = arguments[_key];
	  }

	  var msg = MESSAGES[key];
	  if (!msg) throw new ReferenceError("Unknown message " + JSON.stringify(key));

	  // stringify args
	  args = parseArgs(args);

	  // replace $0 placeholders with args
	  return msg.replace(/\$(\d+)/g, function (str, i) {
	    return args[i - 1];
	  });
	}

	/**
	 * Stingify arguments to be used inside messages.
	 */

	function parseArgs(args /*: Array<any>*/) /*: Array<string>*/ {
	  return args.map(function (val) {
	    if (val != null && val.inspect) {
	      return val.inspect();
	    } else {
	      try {
	        return JSON.stringify(val) || val + "";
	      } catch (e) {
	        return util.inspect(val);
	      }
	    }
	  });
	}

/***/ },
/* 7029 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	module.exports = { "default": __webpack_require__(__webpack_module_template_argument_0__), __esModule: true };

/***/ },
/* 7030 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	module.exports = { "default": __webpack_require__(__webpack_module_template_argument_0__), __esModule: true };

/***/ },
/* 7031 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	module.exports = { "default": __webpack_require__(__webpack_module_template_argument_0__), __esModule: true };

/***/ },
/* 7032 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	module.exports = { "default": __webpack_require__(__webpack_module_template_argument_0__), __esModule: true };

/***/ },
/* 7033 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	module.exports = { "default": __webpack_require__(__webpack_module_template_argument_0__), __esModule: true };

/***/ },
/* 7034 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	module.exports = { "default": __webpack_require__(__webpack_module_template_argument_0__), __esModule: true };

/***/ },
/* 7035 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	module.exports = { "default": __webpack_require__(__webpack_module_template_argument_0__), __esModule: true };

/***/ },
/* 7036 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	module.exports = { "default": __webpack_require__(__webpack_module_template_argument_0__), __esModule: true };

/***/ },
/* 7037 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	module.exports = { "default": __webpack_require__(__webpack_module_template_argument_0__), __esModule: true };

/***/ },
/* 7038 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	module.exports = { "default": __webpack_require__(__webpack_module_template_argument_0__), __esModule: true };

/***/ },
/* 7039 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	module.exports = { "default": __webpack_require__(__webpack_module_template_argument_0__), __esModule: true };

/***/ },
/* 7040 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	"use strict";

	var _Object$getOwnPropertyNames = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _Object$getOwnPropertyDescriptor = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _Object$defineProperty = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	exports["default"] = function (obj, defaults) {
	  var keys = _Object$getOwnPropertyNames(defaults);

	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];

	    var value = _Object$getOwnPropertyDescriptor(defaults, key);

	    if (value && value.configurable && obj[key] === undefined) {
	      _Object$defineProperty(obj, key, value);
	    }
	  }

	  return obj;
	};

	exports.__esModule = true;

/***/ },
/* 7041 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	"use strict";

	var _Object$create = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _Object$setPrototypeOf = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	exports["default"] = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	  }

	  subClass.prototype = _Object$create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _Object$setPrototypeOf ? _Object$setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	};

	exports.__esModule = true;

/***/ },
/* 7042 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	__webpack_require__(__webpack_module_template_argument_0__);
	__webpack_require__(__webpack_module_template_argument_1__);
	module.exports = __webpack_require__(__webpack_module_template_argument_2__);

/***/ },
/* 7043 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	__webpack_require__(__webpack_module_template_argument_0__);
	module.exports = 0x1fffffffffffff;

/***/ },
/* 7044 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var $ = __webpack_require__(__webpack_module_template_argument_0__);
	module.exports = function create(P, D){
	  return $.create(P, D);
	};

/***/ },
/* 7045 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var $ = __webpack_require__(__webpack_module_template_argument_0__);
	module.exports = function defineProperty(it, key, desc){
	  return $.setDesc(it, key, desc);
	};

/***/ },
/* 7046 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var $ = __webpack_require__(__webpack_module_template_argument_0__);
	__webpack_require__(__webpack_module_template_argument_1__);
	module.exports = function getOwnPropertyDescriptor(it, key){
	  return $.getDesc(it, key);
	};

/***/ },
/* 7047 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var $ = __webpack_require__(__webpack_module_template_argument_0__);
	__webpack_require__(__webpack_module_template_argument_1__);
	module.exports = function getOwnPropertyNames(it){
	  return $.getNames(it);
	};

/***/ },
/* 7048 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	__webpack_require__(__webpack_module_template_argument_0__);
	module.exports = __webpack_require__(__webpack_module_template_argument_1__).Object.getOwnPropertySymbols;

/***/ },
/* 7049 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	__webpack_require__(__webpack_module_template_argument_0__);
	module.exports = __webpack_require__(__webpack_module_template_argument_1__).Object.keys;

/***/ },
/* 7050 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	__webpack_require__(__webpack_module_template_argument_0__);
	module.exports = __webpack_require__(__webpack_module_template_argument_1__).Object.setPrototypeOf;

/***/ },
/* 7051 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	__webpack_require__(__webpack_module_template_argument_0__);
	module.exports = __webpack_require__(__webpack_module_template_argument_1__).Symbol['for'];

/***/ },
/* 7052 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	__webpack_require__(__webpack_module_template_argument_0__);
	__webpack_require__(__webpack_module_template_argument_1__);
	module.exports = __webpack_require__(__webpack_module_template_argument_2__).Symbol;

/***/ },
/* 7053 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var isObject = __webpack_require__(__webpack_module_template_argument_0__);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 7054 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(__webpack_module_template_argument_0__)
	  , TAG = __webpack_require__(__webpack_module_template_argument_1__)('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = (O = Object(it))[TAG]) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

/***/ },
/* 7055 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(__webpack_module_template_argument_0__);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 7056 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(__webpack_module_template_argument_0__)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 7057 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	// all enumerable object keys, includes symbols
	var $ = __webpack_require__(__webpack_module_template_argument_0__);
	module.exports = function(it){
	  var keys       = $.getKeys(it)
	    , getSymbols = $.getSymbols;
	  if(getSymbols){
	    var symbols = getSymbols(it)
	      , isEnum  = $.isEnum
	      , i       = 0
	      , key;
	    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))keys.push(key);
	  }
	  return keys;
	};

/***/ },
/* 7058 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var global    = __webpack_require__(__webpack_module_template_argument_0__)
	  , core      = __webpack_require__(__webpack_module_template_argument_1__)
	  , ctx       = __webpack_require__(__webpack_module_template_argument_2__)
	  , PROTOTYPE = 'prototype';

	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && key in target;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(param){
	        return this instanceof C ? new C(param) : C(param);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
	  }
	};
	// type bitmap
	$export.F = 1;  // forced
	$export.G = 2;  // global
	$export.S = 4;  // static
	$export.P = 8;  // proto
	$export.B = 16; // bind
	$export.W = 32; // wrap
	module.exports = $export;

/***/ },
/* 7059 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(__webpack_module_template_argument_0__)
	  , getNames  = __webpack_require__(__webpack_module_template_argument_1__).getNames
	  , toString  = {}.toString;

	var windowNames = typeof window == 'object' && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function(it){
	  try {
	    return getNames(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	};

	module.exports.get = function getOwnPropertyNames(it){
	  if(windowNames && toString.call(it) == '[object Window]')return getWindowNames(it);
	  return getNames(toIObject(it));
	};

/***/ },
/* 7060 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var $          = __webpack_require__(__webpack_module_template_argument_0__)
	  , createDesc = __webpack_require__(__webpack_module_template_argument_1__);
	module.exports = __webpack_require__(__webpack_module_template_argument_2__) ? function(object, key, value){
	  return $.setDesc(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};

/***/ },
/* 7061 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(__webpack_module_template_argument_0__);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 7062 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(__webpack_module_template_argument_0__);
	module.exports = Array.isArray || function(arg){
	  return cof(arg) == 'Array';
	};

/***/ },
/* 7063 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	'use strict';
	var $              = __webpack_require__(__webpack_module_template_argument_0__)
	  , descriptor     = __webpack_require__(__webpack_module_template_argument_1__)
	  , setToStringTag = __webpack_require__(__webpack_module_template_argument_2__)
	  , IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(__webpack_module_template_argument_3__)(IteratorPrototype, __webpack_require__(__webpack_module_template_argument_4__)('iterator'), function(){ return this; });

	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = $.create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 7064 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__, __webpack_module_template_argument_7__, __webpack_module_template_argument_8__, __webpack_module_template_argument_9__) {

	'use strict';
	var LIBRARY        = __webpack_require__(__webpack_module_template_argument_0__)
	  , $export        = __webpack_require__(__webpack_module_template_argument_1__)
	  , redefine       = __webpack_require__(__webpack_module_template_argument_2__)
	  , hide           = __webpack_require__(__webpack_module_template_argument_3__)
	  , has            = __webpack_require__(__webpack_module_template_argument_4__)
	  , Iterators      = __webpack_require__(__webpack_module_template_argument_5__)
	  , $iterCreate    = __webpack_require__(__webpack_module_template_argument_6__)
	  , setToStringTag = __webpack_require__(__webpack_module_template_argument_7__)
	  , getProto       = __webpack_require__(__webpack_module_template_argument_8__).getProto
	  , ITERATOR       = __webpack_require__(__webpack_module_template_argument_9__)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';

	var returnThis = function(){ return this; };

	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , methods, key;
	  // Fix native
	  if($native){
	    var IteratorPrototype = getProto($default.call(new Base));
	    // Set @@toStringTag to native iterators
	    setToStringTag(IteratorPrototype, TAG, true);
	    // FF fix
	    if(!LIBRARY && has(proto, FF_ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    // fix Array#{values, @@iterator}.name in V8 / FF
	    if(DEF_VALUES && $native.name !== VALUES){
	      VALUES_BUG = true;
	      $default = function values(){ return $native.call(this); };
	    }
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES  ? $default : getMethod(VALUES),
	      keys:    IS_SET      ? $default : getMethod(KEYS),
	      entries: !DEF_VALUES ? $default : getMethod('entries')
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 7065 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var $         = __webpack_require__(__webpack_module_template_argument_0__)
	  , toIObject = __webpack_require__(__webpack_module_template_argument_1__);
	module.exports = function(object, el){
	  var O      = toIObject(object)
	    , keys   = $.getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};

/***/ },
/* 7066 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(__webpack_module_template_argument_0__)
	  , core    = __webpack_require__(__webpack_module_template_argument_1__)
	  , fails   = __webpack_require__(__webpack_module_template_argument_2__);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ },
/* 7067 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	module.exports = __webpack_require__(__webpack_module_template_argument_0__);

/***/ },
/* 7068 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var getDesc  = __webpack_require__(__webpack_module_template_argument_0__).getDesc
	  , isObject = __webpack_require__(__webpack_module_template_argument_1__)
	  , anObject = __webpack_require__(__webpack_module_template_argument_2__);
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = __webpack_require__(__webpack_module_template_argument_3__)(Function.call, getDesc(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 7069 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var def = __webpack_require__(__webpack_module_template_argument_0__).setDesc
	  , has = __webpack_require__(__webpack_module_template_argument_1__)
	  , TAG = __webpack_require__(__webpack_module_template_argument_2__)('toStringTag');

	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};

/***/ },
/* 7070 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var global = __webpack_require__(__webpack_module_template_argument_0__)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 7071 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var toInteger = __webpack_require__(__webpack_module_template_argument_0__)
	  , defined   = __webpack_require__(__webpack_module_template_argument_1__);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 7072 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(__webpack_module_template_argument_0__)
	  , defined = __webpack_require__(__webpack_module_template_argument_1__);
	module.exports = function(it){
	  return IObject(defined(it));
	};

/***/ },
/* 7073 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(__webpack_module_template_argument_0__);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ },
/* 7074 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var store  = __webpack_require__(__webpack_module_template_argument_0__)('wks')
	  , uid    = __webpack_require__(__webpack_module_template_argument_1__)
	  , Symbol = __webpack_require__(__webpack_module_template_argument_2__).Symbol;
	module.exports = function(name){
	  return store[name] || (store[name] =
	    Symbol && Symbol[name] || (Symbol || uid)('Symbol.' + name));
	};

/***/ },
/* 7075 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__) {

	var classof   = __webpack_require__(__webpack_module_template_argument_0__)
	  , ITERATOR  = __webpack_require__(__webpack_module_template_argument_1__)('iterator')
	  , Iterators = __webpack_require__(__webpack_module_template_argument_2__);
	module.exports = __webpack_require__(__webpack_module_template_argument_3__).getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};

/***/ },
/* 7076 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var anObject = __webpack_require__(__webpack_module_template_argument_0__)
	  , get      = __webpack_require__(__webpack_module_template_argument_1__);
	module.exports = __webpack_require__(__webpack_module_template_argument_2__).getIterator = function(it){
	  var iterFn = get(it);
	  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');
	  return anObject(iterFn.call(it));
	};

/***/ },
/* 7077 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	'use strict';
	var addToUnscopables = __webpack_require__(__webpack_module_template_argument_0__)
	  , step             = __webpack_require__(__webpack_module_template_argument_1__)
	  , Iterators        = __webpack_require__(__webpack_module_template_argument_2__)
	  , toIObject        = __webpack_require__(__webpack_module_template_argument_3__);

	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(__webpack_module_template_argument_4__)(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;

	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

/***/ },
/* 7078 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	// 20.1.2.6 Number.MAX_SAFE_INTEGER
	var $export = __webpack_require__(__webpack_module_template_argument_0__);

	$export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});

/***/ },
/* 7079 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	var toIObject = __webpack_require__(__webpack_module_template_argument_0__);

	__webpack_require__(__webpack_module_template_argument_1__)('getOwnPropertyDescriptor', function($getOwnPropertyDescriptor){
	  return function getOwnPropertyDescriptor(it, key){
	    return $getOwnPropertyDescriptor(toIObject(it), key);
	  };
	});

/***/ },
/* 7080 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	// 19.1.2.7 Object.getOwnPropertyNames(O)
	__webpack_require__(__webpack_module_template_argument_0__)('getOwnPropertyNames', function(){
	  return __webpack_require__(__webpack_module_template_argument_1__).get;
	});

/***/ },
/* 7081 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(__webpack_module_template_argument_0__);

	__webpack_require__(__webpack_module_template_argument_1__)('keys', function($keys){
	  return function keys(it){
	    return $keys(toObject(it));
	  };
	});

/***/ },
/* 7082 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(__webpack_module_template_argument_0__);
	$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(__webpack_module_template_argument_1__).set});

/***/ },
/* 7083 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	'use strict';
	var $at  = __webpack_require__(__webpack_module_template_argument_0__)(true);

	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(__webpack_module_template_argument_1__)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});

/***/ },
/* 7084 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__, __webpack_module_template_argument_7__, __webpack_module_template_argument_8__, __webpack_module_template_argument_9__, __webpack_module_template_argument_10__, __webpack_module_template_argument_11__, __webpack_module_template_argument_12__, __webpack_module_template_argument_13__, __webpack_module_template_argument_14__, __webpack_module_template_argument_15__, __webpack_module_template_argument_16__, __webpack_module_template_argument_17__, __webpack_module_template_argument_18__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var $              = __webpack_require__(__webpack_module_template_argument_0__)
	  , global         = __webpack_require__(__webpack_module_template_argument_1__)
	  , has            = __webpack_require__(__webpack_module_template_argument_2__)
	  , DESCRIPTORS    = __webpack_require__(__webpack_module_template_argument_3__)
	  , $export        = __webpack_require__(__webpack_module_template_argument_4__)
	  , redefine       = __webpack_require__(__webpack_module_template_argument_5__)
	  , $fails         = __webpack_require__(__webpack_module_template_argument_6__)
	  , shared         = __webpack_require__(__webpack_module_template_argument_7__)
	  , setToStringTag = __webpack_require__(__webpack_module_template_argument_8__)
	  , uid            = __webpack_require__(__webpack_module_template_argument_9__)
	  , wks            = __webpack_require__(__webpack_module_template_argument_10__)
	  , keyOf          = __webpack_require__(__webpack_module_template_argument_11__)
	  , $names         = __webpack_require__(__webpack_module_template_argument_12__)
	  , enumKeys       = __webpack_require__(__webpack_module_template_argument_13__)
	  , isArray        = __webpack_require__(__webpack_module_template_argument_14__)
	  , anObject       = __webpack_require__(__webpack_module_template_argument_15__)
	  , toIObject      = __webpack_require__(__webpack_module_template_argument_16__)
	  , createDesc     = __webpack_require__(__webpack_module_template_argument_17__)
	  , getDesc        = $.getDesc
	  , setDesc        = $.setDesc
	  , _create        = $.create
	  , getNames       = $names.get
	  , $Symbol        = global.Symbol
	  , $JSON          = global.JSON
	  , _stringify     = $JSON && $JSON.stringify
	  , setter         = false
	  , HIDDEN         = wks('_hidden')
	  , isEnum         = $.isEnum
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols     = shared('symbols')
	  , useNative      = typeof $Symbol == 'function'
	  , ObjectProto    = Object.prototype;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function(){
	  return _create(setDesc({}, 'a', {
	    get: function(){ return setDesc(this, 'a', {value: 7}).a; }
	  })).a != 7;
	}) ? function(it, key, D){
	  var protoDesc = getDesc(ObjectProto, key);
	  if(protoDesc)delete ObjectProto[key];
	  setDesc(it, key, D);
	  if(protoDesc && it !== ObjectProto)setDesc(ObjectProto, key, protoDesc);
	} : setDesc;

	var wrap = function(tag){
	  var sym = AllSymbols[tag] = _create($Symbol.prototype);
	  sym._k = tag;
	  DESCRIPTORS && setter && setSymbolDesc(ObjectProto, tag, {
	    configurable: true,
	    set: function(value){
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    }
	  });
	  return sym;
	};

	var isSymbol = function(it){
	  return typeof it == 'symbol';
	};

	var $defineProperty = function defineProperty(it, key, D){
	  if(D && has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))setDesc(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = _create(D, {enumerable: createDesc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return setDesc(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P){
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P){
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key){
	  var E = isEnum.call(this, key);
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key]
	    ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
	  var D = getDesc(it = toIObject(it), key);
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it){
	  var names  = getNames(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i)if(!has(AllSymbols, key = names[i++]) && key != HIDDEN)result.push(key);
	  return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
	  var names  = getNames(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i)if(has(AllSymbols, key = names[i++]))result.push(AllSymbols[key]);
	  return result;
	};
	var $stringify = function stringify(it){
	  if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
	  var args = [it]
	    , i    = 1
	    , $$   = arguments
	    , replacer, $replacer;
	  while($$.length > i)args.push($$[i++]);
	  replacer = args[1];
	  if(typeof replacer == 'function')$replacer = replacer;
	  if($replacer || !isArray(replacer))replacer = function(key, value){
	    if($replacer)value = $replacer.call(this, key, value);
	    if(!isSymbol(value))return value;
	  };
	  args[1] = replacer;
	  return _stringify.apply($JSON, args);
	};
	var buggyJSON = $fails(function(){
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
	});

	// 19.4.1.1 Symbol([description])
	if(!useNative){
	  $Symbol = function Symbol(){
	    if(isSymbol(this))throw TypeError('Symbol is not a constructor');
	    return wrap(uid(arguments.length > 0 ? arguments[0] : undefined));
	  };
	  redefine($Symbol.prototype, 'toString', function toString(){
	    return this._k;
	  });

	  isSymbol = function(it){
	    return it instanceof $Symbol;
	  };

	  $.create     = $create;
	  $.isEnum     = $propertyIsEnumerable;
	  $.getDesc    = $getOwnPropertyDescriptor;
	  $.setDesc    = $defineProperty;
	  $.setDescs   = $defineProperties;
	  $.getNames   = $names.get = $getOwnPropertyNames;
	  $.getSymbols = $getOwnPropertySymbols;

	  if(DESCRIPTORS && !__webpack_require__(__webpack_module_template_argument_18__)){
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	}

	var symbolStatics = {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    return keyOf(SymbolRegistry, key);
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	};
	// 19.4.2.2 Symbol.hasInstance
	// 19.4.2.3 Symbol.isConcatSpreadable
	// 19.4.2.4 Symbol.iterator
	// 19.4.2.6 Symbol.match
	// 19.4.2.8 Symbol.replace
	// 19.4.2.9 Symbol.search
	// 19.4.2.10 Symbol.species
	// 19.4.2.11 Symbol.split
	// 19.4.2.12 Symbol.toPrimitive
	// 19.4.2.13 Symbol.toStringTag
	// 19.4.2.14 Symbol.unscopables
	$.each.call((
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,' +
	  'species,split,toPrimitive,toStringTag,unscopables'
	).split(','), function(it){
	  var sym = wks(it);
	  symbolStatics[it] = useNative ? sym : wrap(sym);
	});

	setter = true;

	$export($export.G + $export.W, {Symbol: $Symbol});

	$export($export.S, 'Symbol', symbolStatics);

	$export($export.S + $export.F * !useNative, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});

	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!useNative || buggyJSON), 'JSON', {stringify: $stringify});

	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 7085 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	__webpack_require__(__webpack_module_template_argument_0__);
	var Iterators = __webpack_require__(__webpack_module_template_argument_1__);
	Iterators.NodeList = Iterators.HTMLCollection = Iterators.Array;

/***/ },
/* 7086 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__, __webpack_module_template_argument_7__) {

	"use strict";

	var _Symbol = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	exports.__esModule = true;

	var _lodashLangCloneDeep = __webpack_require__(__webpack_module_template_argument_3__);

	var _lodashLangCloneDeep2 = _interopRequireDefault(_lodashLangCloneDeep);

	var _lodashObjectHas = __webpack_require__(__webpack_module_template_argument_4__);

	var _lodashObjectHas2 = _interopRequireDefault(_lodashObjectHas);

	var _babelTraverse = __webpack_require__(__webpack_module_template_argument_5__);

	var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

	var _babylon = __webpack_require__(__webpack_module_template_argument_6__);

	var babylon = _interopRequireWildcard(_babylon);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_7__);

	var t = _interopRequireWildcard(_babelTypes);

	var FROM_TEMPLATE = "_fromTemplate"; //Symbol(); // todo: probably wont get copied over
	var TEMPLATE_SKIP = _Symbol();

	exports["default"] = function (code /*: string*/) /*: Function*/ {
	  // since we lazy parse the template, we get the current stack so we have the
	  // original stack to append if it errors when parsing
	  var stack = undefined;
	  try {
	    // error stack gets populated in IE only on throw (https://msdn.microsoft.com/en-us/library/hh699850(v=vs.94).aspx)
	    throw new Error();
	  } catch (error) {
	    stack = error.stack.split("\n").slice(1).join("\n");
	  }

	  var _getAst = function getAst() {
	    var ast = undefined;

	    try {
	      ast = babylon.parse(code, {
	        allowReturnOutsideFunction: true,
	        allowSuperOutsideMethod: true
	      });

	      ast = _babelTraverse2["default"].removeProperties(ast);

	      _babelTraverse2["default"].cheap(ast, function (node) {
	        node[FROM_TEMPLATE] = true;
	      });
	    } catch (err) {
	      err.stack = err.stack + "from\n" + stack;
	      throw err;
	    }

	    _getAst = function () {
	      return ast;
	    };

	    return ast;
	  };

	  return function () {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return useTemplate(_getAst(), args);
	  };
	};

	function useTemplate(ast, nodes /*:: ?: Array<Object>*/) {
	  ast = _lodashLangCloneDeep2["default"](ast);
	  var _ast = ast;
	  var program = _ast.program;

	  if (nodes.length) {
	    _babelTraverse2["default"](ast, templateVisitor, null, nodes);
	  }

	  if (program.body.length > 1) {
	    return program.body;
	  } else {
	    return program.body[0];
	  }
	}

	var templateVisitor = {
	  // 360
	  noScope: true,

	  enter: function enter(path, args) {
	    var node = path.node;

	    if (node[TEMPLATE_SKIP]) return path.skip();

	    if (t.isExpressionStatement(node)) {
	      node = node.expression;
	    }

	    var replacement = undefined;

	    if (t.isIdentifier(node) && node[FROM_TEMPLATE]) {
	      if (_lodashObjectHas2["default"](args[0], node.name)) {
	        replacement = args[0][node.name];
	      } else if (node.name[0] === "$") {
	        var i = +node.name.slice(1);
	        if (args[i]) replacement = args[i];
	      }
	    }

	    if (replacement === null) {
	      path.remove();
	    }

	    if (replacement) {
	      replacement[TEMPLATE_SKIP] = true;
	      path.replaceInline(replacement);
	    }
	  },

	  exit: function exit(_ref) {
	    var node = _ref.node;

	    _babelTraverse2["default"].clearNode(node);
	  }
	};
	module.exports = exports["default"];

/***/ },
/* 7087 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__) {

	"use strict";

	var _classCallCheck = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _getIterator = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_3__)["default"];

	exports.__esModule = true;

	var _path = __webpack_require__(__webpack_module_template_argument_4__);

	var _path2 = _interopRequireDefault(_path);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_5__);

	var t = _interopRequireWildcard(_babelTypes);

	var testing = ("production") === "test";

	var TraversalContext = (function () {
	  function TraversalContext(scope, opts, state, parentPath) {
	    _classCallCheck(this, TraversalContext);

	    this.parentPath = parentPath;
	    this.scope = scope;
	    this.state = state;
	    this.opts = opts;
	  }

	  /**
	   * This method does a simple check to determine whether or not we really need to attempt
	   * visit a node. This will prevent us from constructing a NodePath.
	   */

	  TraversalContext.prototype.shouldVisit = function shouldVisit(node) /*: boolean*/ {
	    var opts = this.opts;
	    if (opts.enter || opts.exit) return true;

	    // check if we have a visitor for this node
	    if (opts[node.type]) return true;

	    // check if we're going to traverse into this node
	    var keys /*: ?Array<string>*/ = t.VISITOR_KEYS[node.type];
	    if (!keys || !keys.length) return false;

	    // we need to traverse into this node so ensure that it has children to traverse into!
	    for (var _iterator = keys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var key = _ref;

	      if (node[key]) return true;
	    }

	    return false;
	  };

	  TraversalContext.prototype.create = function create(node, obj, key, listKey) /*: NodePath*/ {
	    return _path2["default"].get({
	      parentPath: this.parentPath,
	      parent: node,
	      container: obj,
	      key: key,
	      listKey: listKey
	    });
	  };

	  TraversalContext.prototype.maybeQueue = function maybeQueue(path, notPriority /*:: ?: boolean*/) {
	    if (this.trap) {
	      throw new Error("Infinite cycle detected");
	    }

	    if (this.queue) {
	      if (notPriority) {
	        this.queue.push(path);
	      } else {
	        this.priorityQueue.push(path);
	      }
	    }
	  };

	  TraversalContext.prototype.visitMultiple = function visitMultiple(container, parent, listKey) {
	    // nothing to traverse!
	    if (container.length === 0) return false;

	    var queue = [];

	    // build up initial queue
	    for (var key = 0; key < container.length; key++) {
	      var node = container[key];
	      if (node && this.shouldVisit(node)) {
	        queue.push(this.create(parent, container, key, listKey));
	      }
	    }

	    return this.visitQueue(queue);
	  };

	  TraversalContext.prototype.visitSingle = function visitSingle(node, key) /*: boolean*/ {
	    if (this.shouldVisit(node[key])) {
	      return this.visitQueue([this.create(node, node, key)]);
	    } else {
	      return false;
	    }
	  };

	  TraversalContext.prototype.visitQueue = function visitQueue(queue /*: Array<NodePath>*/) {
	    // set queue
	    this.queue = queue;
	    this.priorityQueue = [];

	    var visited = [];
	    var stop = false;

	    // visit the queue
	    for (var _iterator2 = queue, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var path = _ref2;

	      path.resync();
	      path.pushContext(this);

	      if (testing && queue.length >= 1000) {
	        this.trap = true;
	      }

	      // ensure we don't visit the same node twice
	      if (visited.indexOf(path.node) >= 0) continue;
	      visited.push(path.node);

	      if (path.visit()) {
	        stop = true;
	        break;
	      }

	      if (this.priorityQueue.length) {
	        stop = this.visitQueue(this.priorityQueue);
	        this.priorityQueue = [];
	        this.queue = queue;
	        if (stop) break;
	      }
	    }

	    // clear queue
	    for (var _iterator3 = queue, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	      var _ref3;

	      if (_isArray3) {
	        if (_i3 >= _iterator3.length) break;
	        _ref3 = _iterator3[_i3++];
	      } else {
	        _i3 = _iterator3.next();
	        if (_i3.done) break;
	        _ref3 = _i3.value;
	      }

	      var path = _ref3;

	      path.popContext();
	    }

	    // clear queue
	    this.queue = null;

	    return stop;
	  };

	  TraversalContext.prototype.visit = function visit(node, key) {
	    var nodes = node[key];
	    if (!nodes) return false;

	    if (Array.isArray(nodes)) {
	      return this.visitMultiple(nodes, node, key);
	    } else {
	      return this.visitSingle(node, key);
	    }
	  };

	  return TraversalContext;
	})();

	exports["default"] = TraversalContext;
	module.exports = exports["default"];

/***/ },
/* 7088 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	"use strict";

	var _classCallCheck = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;

	var Hub = function Hub(file, options) {
	  _classCallCheck(this, Hub);

	  this.file = file;
	  this.options = options;
	};

	exports["default"] = Hub;
	module.exports = exports["default"];

/***/ },
/* 7089 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__, __webpack_module_template_argument_7__, __webpack_module_template_argument_8__, __webpack_module_template_argument_9__, __webpack_module_template_argument_10__, __webpack_module_template_argument_11__, __webpack_module_template_argument_12__, __webpack_module_template_argument_13__, __webpack_module_template_argument_14__, __webpack_module_template_argument_15__) {

	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _Object$getOwnPropertySymbols = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_3__)["default"];

	var _interopRequire = __webpack_require__(__webpack_module_template_argument_4__)["default"];

	exports.__esModule = true;
	exports["default"] = traverse;

	var _context = __webpack_require__(__webpack_module_template_argument_5__);

	var _context2 = _interopRequireDefault(_context);

	var _visitors = __webpack_require__(__webpack_module_template_argument_6__);

	var visitors = _interopRequireWildcard(_visitors);

	var _babelMessages = __webpack_require__(__webpack_module_template_argument_7__);

	var messages = _interopRequireWildcard(_babelMessages);

	var _lodashCollectionIncludes = __webpack_require__(__webpack_module_template_argument_8__);

	var _lodashCollectionIncludes2 = _interopRequireDefault(_lodashCollectionIncludes);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_9__);

	var t = _interopRequireWildcard(_babelTypes);

	var _path = __webpack_require__(__webpack_module_template_argument_10__);

	exports.NodePath = _interopRequire(_path);

	var _scope = __webpack_require__(__webpack_module_template_argument_11__);

	exports.Scope = _interopRequire(_scope);

	var _hub = __webpack_require__(__webpack_module_template_argument_12__);

	exports.Hub = _interopRequire(_hub);
	exports.visitors = visitors;

	function traverse(parent /*: Object | Array<Object>*/, opts /*:: ?: Object*/, scope /*:: ?: Object*/, state /*: Object*/, parentPath /*: Object*/) {
	  if (!parent) return;
	  if (!opts) opts = {};

	  if (!opts.noScope && !scope) {
	    if (parent.type !== "Program" && parent.type !== "File") {
	      throw new Error(messages.get("traverseNeedsParent", parent.type));
	    }
	  }

	  visitors.explode(opts);

	  traverse.node(parent, opts, scope, state, parentPath);
	}

	traverse.visitors = visitors;
	traverse.verify = visitors.verify;
	traverse.explode = visitors.explode;

	traverse.NodePath = __webpack_require__(__webpack_module_template_argument_13__);
	traverse.Scope = __webpack_require__(__webpack_module_template_argument_14__);
	traverse.Hub = __webpack_require__(__webpack_module_template_argument_15__);

	traverse.cheap = function (node, enter) {
	  if (!node) return;

	  var keys = t.VISITOR_KEYS[node.type];
	  if (!keys) return;

	  enter(node);

	  for (var _iterator = keys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var key = _ref;

	    var subNode = node[key];

	    if (Array.isArray(subNode)) {
	      for (var _iterator2 = subNode, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	        var _ref2;

	        if (_isArray2) {
	          if (_i2 >= _iterator2.length) break;
	          _ref2 = _iterator2[_i2++];
	        } else {
	          _i2 = _iterator2.next();
	          if (_i2.done) break;
	          _ref2 = _i2.value;
	        }

	        var _node = _ref2;

	        traverse.cheap(_node, enter);
	      }
	    } else {
	      traverse.cheap(subNode, enter);
	    }
	  }
	};

	traverse.node = function (node /*: Object*/, opts /*: Object*/, scope /*: Object*/, state /*: Object*/, parentPath /*: Object*/, skipKeys /*:: ?*/) {
	  var keys /*: Array*/ = t.VISITOR_KEYS[node.type];
	  if (!keys) return;

	  var context = new _context2["default"](scope, opts, state, parentPath);
	  for (var _iterator3 = keys, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	    var _ref3;

	    if (_isArray3) {
	      if (_i3 >= _iterator3.length) break;
	      _ref3 = _iterator3[_i3++];
	    } else {
	      _i3 = _iterator3.next();
	      if (_i3.done) break;
	      _ref3 = _i3.value;
	    }

	    var key = _ref3;

	    if (skipKeys && skipKeys[key]) continue;
	    if (context.visit(node, key)) return;
	  }
	};

	var CLEAR_KEYS /*: Array*/ = t.COMMENT_KEYS.concat(["tokens", "comments", "start", "end", "loc", "raw", "rawValue"]);

	traverse.clearNode = function (node) {
	  for (var _iterator4 = CLEAR_KEYS, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	    var _ref4;

	    if (_isArray4) {
	      if (_i4 >= _iterator4.length) break;
	      _ref4 = _iterator4[_i4++];
	    } else {
	      _i4 = _iterator4.next();
	      if (_i4.done) break;
	      _ref4 = _i4.value;
	    }

	    var key = _ref4;

	    if (node[key] != null) node[key] = undefined;
	  }

	  for (var key in node) {
	    if (key[0] === "_" && node[key] != null) node[key] = undefined;
	  }

	  var syms /*: Array<Symbol>*/ = _Object$getOwnPropertySymbols(node);
	  for (var _iterator5 = syms, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
	    var _ref5;

	    if (_isArray5) {
	      if (_i5 >= _iterator5.length) break;
	      _ref5 = _iterator5[_i5++];
	    } else {
	      _i5 = _iterator5.next();
	      if (_i5.done) break;
	      _ref5 = _i5.value;
	    }

	    var sym = _ref5;

	    node[sym] = null;
	  }
	};

	traverse.removeProperties = function (tree) {
	  traverse.cheap(tree, traverse.clearNode);
	  return tree;
	};

	function hasBlacklistedType(path, state) {
	  if (path.node.type === state.type) {
	    state.has = true;
	    path.skip();
	  }
	}

	traverse.hasType = function (tree /*: Object*/, scope /*: Object*/, type /*: Object*/, blacklistTypes /*: Array<string>*/) /*: boolean*/ {
	  // the node we're searching in is blacklisted
	  if (_lodashCollectionIncludes2["default"](blacklistTypes, tree.type)) return false;

	  // the type we're looking for is the same as the passed node
	  if (tree.type === type) return true;

	  var state = {
	    has: false,
	    type: type
	  };

	  traverse(tree, {
	    blacklist: blacklistTypes,
	    enter: hasBlacklistedType
	  }, scope, state);

	  return state.has;
	};

/***/ },
/* 7090 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	// This file contains that retrieve or validate anything related to the current paths ancestry.

	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	exports.__esModule = true;
	exports.findParent = findParent;
	exports.find = find;
	exports.getFunctionParent = getFunctionParent;
	exports.getStatementParent = getStatementParent;
	exports.getEarliestCommonAncestorFrom = getEarliestCommonAncestorFrom;
	exports.getDeepestCommonAncestorFrom = getDeepestCommonAncestorFrom;
	exports.getAncestry = getAncestry;
	exports.inType = inType;
	exports.inShadow = inShadow;

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_3__);

	var t = _interopRequireWildcard(_babelTypes);

	var _index = __webpack_require__(__webpack_module_template_argument_4__);

	var _index2 = _interopRequireDefault(_index);

	/**
	 * Call the provided `callback` with the `NodePath`s of all the parents.
	 * When the `callback` returns a truthy value, we return that node path.
	 */

	function findParent(callback) {
	  var path = this;
	  while (path = path.parentPath) {
	    if (callback(path)) return path;
	  }
	  return null;
	}

	/**
	 * Description
	 */

	function find(callback) {
	  var path = this;
	  do {
	    if (callback(path)) return path;
	  } while (path = path.parentPath);
	  return null;
	}

	/**
	 * Get the parent function of the current path.
	 */

	function getFunctionParent() {
	  return this.findParent(function (path) {
	    return path.isFunction() || path.isProgram();
	  });
	}

	/**
	 * Walk up the tree until we hit a parent node path in a list.
	 */

	function getStatementParent() {
	  var path = this;
	  do {
	    if (Array.isArray(path.container)) {
	      return path;
	    }
	  } while (path = path.parentPath);
	}

	/**
	 * Get the deepest common ancestor and then from it, get the earliest relationship path
	 * to that ancestor.
	 *
	 * Earliest is defined as being "before" all the other nodes in terms of list container
	 * position and visiting key.
	 */

	function getEarliestCommonAncestorFrom(paths /*: Array<NodePath>*/) /*: NodePath*/ {
	  return this.getDeepestCommonAncestorFrom(paths, function (deepest, i, ancestries) {
	    var earliest = undefined;
	    var keys = t.VISITOR_KEYS[deepest.type];

	    for (var _iterator = (ancestries /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var ancestry = _ref;

	      var path = ancestry[i + 1];

	      // first path
	      if (!earliest) {
	        earliest = path;
	        continue;
	      }

	      // handle containers
	      if (path.listKey && earliest.listKey === path.listKey) {
	        // we're in the same container so check if we're earlier
	        if (path.key < earliest.key) {
	          earliest = path;
	          continue;
	        }
	      }

	      // handle keys
	      var earliestKeyIndex = keys.indexOf(earliest.parentKey);
	      var currentKeyIndex = keys.indexOf(path.parentKey);
	      if (earliestKeyIndex > currentKeyIndex) {
	        // key appears before so it's earlier
	        earliest = path;
	      }
	    }

	    return earliest;
	  });
	}

	/**
	 * Get the earliest path in the tree where the provided `paths` intersect.
	 *
	 * TODO: Possible optimisation target.
	 */

	function getDeepestCommonAncestorFrom(paths /*: Array<NodePath>*/, filter /*:: ?: Function*/) /*: NodePath*/ {
	  // istanbul ignore next

	  var _this = this;

	  if (!paths.length) {
	    return this;
	  }

	  if (paths.length === 1) {
	    return paths[0];
	  }

	  // minimum depth of the tree so we know the highest node
	  var minDepth = Infinity;

	  // last common ancestor
	  var lastCommonIndex = undefined,
	      lastCommon = undefined;

	  // get the ancestors of the path, breaking when the parent exceeds ourselves
	  var ancestries = paths.map(function (path) {
	    var ancestry = [];

	    do {
	      ancestry.unshift(path);
	    } while ((path = path.parentPath) && path !== _this);

	    // save min depth to avoid going too far in
	    if (ancestry.length < minDepth) {
	      minDepth = ancestry.length;
	    }

	    return ancestry;
	  });

	  // get the first ancestry so we have a seed to assess all other ancestries with
	  var first = ancestries[0];

	  // check ancestor equality
	  depthLoop: for (var i = 0; i < minDepth; i++) {
	    var shouldMatch = first[i];

	    for (var _iterator2 = (ancestries /*: Array*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var ancestry = _ref2;

	      if (ancestry[i] !== shouldMatch) {
	        // we've hit a snag
	        break depthLoop;
	      }
	    }

	    // next iteration may break so store these so they can be returned
	    lastCommonIndex = i;
	    lastCommon = shouldMatch;
	  }

	  if (lastCommon) {
	    if (filter) {
	      return filter(lastCommon, lastCommonIndex, ancestries);
	    } else {
	      return lastCommon;
	    }
	  } else {
	    throw new Error("Couldn't find intersection");
	  }
	}

	/**
	 * Build an array of node paths containing the entire ancestry of the current node path.
	 *
	 * NOTE: The current node path is included in this.
	 */

	function getAncestry() {
	  var path = this;
	  var paths = [];
	  do {
	    paths.push(path);
	  } while (path = path.parentPath);
	  return paths;
	}

	function inType() {
	  var path = this;
	  while (path) {
	    for (var _iterator3 = (arguments /*: Array*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	      var _ref3;

	      if (_isArray3) {
	        if (_i3 >= _iterator3.length) break;
	        _ref3 = _iterator3[_i3++];
	      } else {
	        _i3 = _iterator3.next();
	        if (_i3.done) break;
	        _ref3 = _i3.value;
	      }

	      var type = _ref3;

	      if (path.node.type === type) return true;
	    }
	    path = path.parentPath;
	  }

	  return false;
	}

	/**
	 * Check if we're inside a shadowed function.
	 */

	function inShadow(key /*:: ?*/) {
	  var path = this;
	  do {
	    if (path.isFunction()) {
	      var shadow = path.node.shadow;
	      if (shadow) {
	        // this is because sometimes we may have a `shadow` value of:
	        //
	        //   { this: false }
	        //
	        // we need to catch this case if `inShadow` has been passed a `key`
	        if (!key || shadow[key] !== false) {
	          return path;
	        }
	      } else if (path.isArrowFunctionExpression()) {
	        return path;
	      }

	      // normal function, we've found our function context
	      return null;
	    }
	  } while (path = path.parentPath);
	  return null;
	}

/***/ },
/* 7091 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	// This file contains methods responsible for maintaining a TraversalContext.

	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	exports.__esModule = true;
	exports.call = call;
	exports._call = _call;
	exports.isBlacklisted = isBlacklisted;
	exports.visit = visit;
	exports.skip = skip;
	exports.skipKey = skipKey;
	exports.stop = stop;
	exports.setScope = setScope;
	exports.setContext = setContext;
	exports.resync = resync;
	exports._resyncParent = _resyncParent;
	exports._resyncKey = _resyncKey;
	exports._resyncList = _resyncList;
	exports._resyncRemoved = _resyncRemoved;
	exports.popContext = popContext;
	exports.pushContext = pushContext;
	exports.setup = setup;
	exports.setKey = setKey;
	exports.requeue = requeue;

	var _index = __webpack_require__(__webpack_module_template_argument_2__);

	var _index2 = _interopRequireDefault(_index);

	function call(key) /*: boolean*/ {
	  var opts = this.opts;

	  this.debug(function () {
	    return key;
	  });

	  if (this.node) {
	    if (this._call(opts[key])) return true;
	  }

	  if (this.node) {
	    return this._call(opts[this.node.type] && opts[this.node.type][key]);
	  }

	  return false;
	}

	function _call(fns /*:: ?: Array<Function>*/) /*: boolean*/ {
	  if (!fns) return false;

	  for (var _iterator = fns, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var fn = _ref;

	    if (!fn) continue;

	    var node = this.node;
	    if (!node) return true;

	    var ret = fn.call(this.state, this, this.state);
	    if (ret) throw new Error("Unexpected return value from visitor method " + fn);

	    // node has been replaced, it will have been requeued
	    if (this.node !== node) return true;

	    if (this.shouldStop || this.shouldSkip || this.removed) return true;
	  }

	  return false;
	}

	function isBlacklisted() /*: boolean*/ {
	  var blacklist = this.opts.blacklist;
	  return blacklist && blacklist.indexOf(this.node.type) > -1;
	}

	function visit() /*: boolean*/ {
	  if (!this.node) {
	    return false;
	  }

	  if (this.isBlacklisted()) {
	    return false;
	  }

	  if (this.opts.shouldSkip && this.opts.shouldSkip(this)) {
	    return false;
	  }

	  if (this.call("enter") || this.shouldSkip) {
	    this.debug(function () {
	      return "Skip...";
	    });
	    return this.shouldStop;
	  }

	  this.debug(function () {
	    return "Recursing into...";
	  });
	  _index2["default"].node(this.node, this.opts, this.scope, this.state, this, this.skipKeys);

	  this.call("exit");

	  return this.shouldStop;
	}

	function skip() {
	  this.shouldSkip = true;
	}

	function skipKey(key) {
	  this.skipKeys[key] = true;
	}

	function stop() {
	  this.shouldStop = true;
	  this.shouldSkip = true;
	}

	function setScope() {
	  if (this.opts && this.opts.noScope) return;

	  var target = this.context && this.context.scope;

	  if (!target) {
	    var path = this.parentPath;
	    while (path && !target) {
	      if (path.opts && path.opts.noScope) return;

	      target = path.scope;
	      path = path.parentPath;
	    }
	  }

	  this.scope = this.getScope(target);
	  if (this.scope) this.scope.init();
	}

	function setContext(context) {
	  this.shouldSkip = false;
	  this.shouldStop = false;
	  this.removed = false;
	  this.skipKeys = {};

	  if (context) {
	    this.context = context;
	    this.state = context.state;
	    this.opts = context.opts;
	  }

	  this.setScope();

	  return this;
	}

	/**
	 * Here we resync the node paths `key` and `container`. If they've changed according
	 * to what we have stored internally then we attempt to resync by crawling and looking
	 * for the new values.
	 */

	function resync() {
	  if (this.removed) return;

	  this._resyncParent();
	  this._resyncList();
	  this._resyncKey();
	  //this._resyncRemoved();
	}

	function _resyncParent() {
	  if (this.parentPath) {
	    this.parent = this.parentPath.node;
	  }
	}

	function _resyncKey() {
	  if (!this.container) return;

	  if (this.node === this.container[this.key]) return;

	  // grrr, path key is out of sync. this is likely due to a modification to the AST
	  // not done through our path APIs

	  if (Array.isArray(this.container)) {
	    for (var i = 0; i < this.container.length; i++) {
	      if (this.container[i] === this.node) {
	        return this.setKey(i);
	      }
	    }
	  } else {
	    for (var key in this.container) {
	      if (this.container[key] === this.node) {
	        return this.setKey(key);
	      }
	    }
	  }

	  // ¯\_(ツ)_/¯ who knows where it's gone lol
	  this.key = null;
	}

	function _resyncList() {
	  if (!this.parent || !this.inList) return;

	  var newContainer = this.parent[this.listKey];
	  if (this.container === newContainer) return;

	  // container is out of sync. this is likely the result of it being reassigned
	  this.container = newContainer || null;
	}

	function _resyncRemoved() {
	  if (this.key == null || !this.container || this.container[this.key] !== this.node) {
	    this._markRemoved();
	  }
	}

	function popContext() {
	  this.contexts.pop();
	  this.setContext(this.contexts[this.contexts.length - 1]);
	}

	function pushContext(context) {
	  this.contexts.push(context);
	  this.setContext(context);
	}

	function setup(parentPath, container, listKey, key) {
	  this.inList = !!listKey;
	  this.listKey = listKey;
	  this.parentKey = listKey || key;
	  this.container = container;

	  this.parentPath = parentPath || this.parentPath;
	  this.setKey(key);
	}

	function setKey(key) {
	  this.key = key;
	  this.node = this.container[this.key];
	  this.type = this.node && this.node.type;
	}

	function requeue() {
	  var path = arguments.length <= 0 || arguments[0] === undefined ? this : arguments[0];

	  if (path.removed) return;

	  for (var _iterator2 = this.contexts, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	    var _ref2;

	    if (_isArray2) {
	      if (_i2 >= _iterator2.length) break;
	      _ref2 = _iterator2[_i2++];
	    } else {
	      _i2 = _iterator2.next();
	      if (_i2.done) break;
	      _ref2 = _i2.value;
	    }

	    var context = _ref2;

	    context.maybeQueue(path);
	  }
	}

/***/ },
/* 7092 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	// This file contains methods that convert the path node into another node or some other type of data.

	"use strict";

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;
	exports.toComputedKey = toComputedKey;
	exports.ensureBlock = ensureBlock;
	exports.arrowFunctionToShadowed = arrowFunctionToShadowed;

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_1__);

	var t = _interopRequireWildcard(_babelTypes);

	function toComputedKey() /*: Object*/ {
	  var node = this.node;

	  var key = undefined;
	  if (this.isMemberExpression()) {
	    key = node.property;
	  } else if (this.isProperty() || this.isMethod()) {
	    key = node.key;
	  } else {
	    throw new ReferenceError("todo");
	  }

	  if (!node.computed) {
	    if (t.isIdentifier(key)) key = t.stringLiteral(key.name);
	  }

	  return key;
	}

	function ensureBlock() {
	  return t.ensureBlock(this.node);
	}

	function arrowFunctionToShadowed() {
	  // todo: maybe error
	  if (!this.isArrowFunctionExpression()) return;

	  this.ensureBlock();

	  var node = this.node;

	  node.expression = false;
	  node.type = "FunctionExpression";
	  node.shadow = node.shadow || true;
	}

/***/ },
/* 7093 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;
	exports.evaluateTruthy = evaluateTruthy;
	exports.evaluate = evaluate;

	// This file contains Babels metainterpreter that can evaluate static code.

	/* eslint eqeqeq: 0 */

	/*:: import type NodePath from "./index";*/var VALID_CALLEES = ["String", "Number", "Math"];
	var INVALID_METHODS = ["random"];

	/**
	 * Walk the input `node` and statically evaluate if it's truthy.
	 *
	 * Returning `true` when we're sure that the expression will evaluate to a
	 * truthy value, `false` if we're sure that it will evaluate to a falsy
	 * value and `undefined` if we aren't sure. Because of this please do not
	 * rely on coercion when using this method and check with === if it's false.
	 *
	 * For example do:
	 *
	 *   if (t.evaluateTruthy(node) === false) falsyLogic();
	 *
	 * **AND NOT**
	 *
	 *   if (!t.evaluateTruthy(node)) falsyLogic();
	 *
	 */

	function evaluateTruthy() /*: boolean*/ {
	  var res = this.evaluate();
	  if (res.confident) return !!res.value;
	}

	/**
	 * Walk the input `node` and statically evaluate it.
	 *
	 * Returns an object in the form `{ confident, value }`. `confident` indicates
	 * whether or not we had to drop out of evaluating the expression because of
	 * hitting an unknown node that we couldn't confidently find the value of.
	 *
	 * Example:
	 *
	 *   t.evaluate(parse("5 + 5")) // { confident: true, value: 10 }
	 *   t.evaluate(parse("!true")) // { confident: true, value: false }
	 *   t.evaluate(parse("foo + foo")) // { confident: false, value: undefined }
	 *
	 */

	function evaluate() /*: { confident: boolean; value: any }*/ {
	  var confident = true;
	  var deoptPath /*: ?NodePath*/ = undefined;

	  function deopt(path) {
	    if (!confident) return;
	    deoptPath = path;
	    confident = false;
	  }

	  var value = evaluate(this);
	  if (!confident) value = undefined;
	  return {
	    confident: confident,
	    deopt: deoptPath,
	    value: value
	  };

	  function evaluate(path) {
	    if (!confident) return;

	    var node = path.node;

	    if (path.isSequenceExpression()) {
	      var exprs = path.get("expressions");
	      return evaluate(exprs[exprs.length - 1]);
	    }

	    if (path.isStringLiteral() || path.isNumericLiteral() || path.isBooleanLiteral()) {
	      return node.value;
	    }

	    if (path.isNullLiteral()) {
	      return null;
	    }

	    if (path.isTemplateLiteral()) {
	      var str = "";

	      var i = 0;
	      var exprs = path.get("expressions");

	      for (var _iterator = (node.quasis /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	        var _ref;

	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }

	        var elem = _ref;

	        // not confident, evaluated an expression we don't like
	        if (!confident) break;

	        // add on cooked element
	        str += elem.value.cooked;

	        // add on interpolated expression if it's present
	        var expr = exprs[i++];
	        if (expr) str += String(evaluate(expr));
	      }

	      if (!confident) return;
	      return str;
	    }

	    if (path.isConditionalExpression()) {
	      var testResult = evaluate(path.get("test"));
	      if (!confident) return;
	      if (testResult) {
	        return evaluate(path.get("consequent"));
	      } else {
	        return evaluate(path.get("alternate"));
	      }
	    }

	    if (path.isExpressionWrapper()) {
	      // TypeCastExpression, ExpressionStatement etc
	      return evaluate(path.get("expression"));
	    }

	    // "foo".length
	    if (path.isMemberExpression() && !path.parentPath.isCallExpression({ callee: node })) {
	      var property = path.get("property");
	      var object = path.get("object");

	      if (object.isLiteral() && property.isIdentifier()) {
	        var _value = object.node.value;
	        var type = typeof _value;
	        if (type === "number" || type === "string") {
	          return _value[property.node.name];
	        }
	      }
	    }

	    if (path.isReferencedIdentifier()) {
	      var binding = path.scope.getBinding(node.name);
	      if (binding && binding.hasValue) {
	        return binding.value;
	      } else {
	        if (node.name === "undefined") {
	          return undefined;
	        } else if (node.name === "Infinity") {
	          return Infinity;
	        } else if (node.name === "NaN") {
	          return NaN;
	        }

	        var resolved = path.resolve();
	        if (resolved === path) {
	          return deopt(path);
	        } else {
	          return evaluate(resolved);
	        }
	      }
	    }

	    if (path.isUnaryExpression({ prefix: true })) {
	      if (node.operator === "void") {
	        // we don't need to evaluate the argument to know what this will return
	        return undefined;
	      }

	      var argument = path.get("argument");
	      if (node.operator === "typeof" && (argument.isFunction() || argument.isClass())) {
	        return "function";
	      }

	      var arg = evaluate(argument);
	      if (!confident) return;
	      switch (node.operator) {
	        case "!":
	          return !arg;
	        case "+":
	          return +arg;
	        case "-":
	          return -arg;
	        case "~":
	          return ~arg;
	        case "typeof":
	          return typeof arg;
	      }
	    }

	    if (path.isArrayExpression()) {
	      var arr = [];
	      var elems /*: Array<NodePath>*/ = path.get("elements");
	      for (var _iterator2 = elems, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	        var _ref2;

	        if (_isArray2) {
	          if (_i2 >= _iterator2.length) break;
	          _ref2 = _iterator2[_i2++];
	        } else {
	          _i2 = _iterator2.next();
	          if (_i2.done) break;
	          _ref2 = _i2.value;
	        }

	        var elem = _ref2;

	        elem = elem.evaluate();

	        if (elem.confident) {
	          arr.push(elem.value);
	        } else {
	          return deopt(elem);
	        }
	      }
	      return arr;
	    }

	    if (path.isObjectExpression()) {
	      // todo
	    }

	    if (path.isLogicalExpression()) {
	      // If we are confident that one side of an && is false, or the left
	      // side of an || is true, we can be confident about the entire expression
	      var wasConfident = confident;
	      var left = evaluate(path.get("left"));
	      var leftConfident = confident;
	      confident = wasConfident;
	      var right = evaluate(path.get("right"));
	      var rightConfident = confident;
	      confident = leftConfident && rightConfident;

	      switch (node.operator) {
	        case "||":
	          // TODO consider having a "truthy type" that doesn't bail on
	          // left uncertainity but can still evaluate to truthy.
	          if (left && leftConfident) {
	            confident = true;
	            return left;
	          }

	          if (!confident) return;

	          return left || right;
	        case "&&":
	          if (!left && leftConfident || !right && rightConfident) {
	            confident = true;
	          }

	          if (!confident) return;

	          return left && right;
	      }
	    }

	    if (path.isBinaryExpression()) {
	      var left = evaluate(path.get("left"));
	      if (!confident) return;
	      var right = evaluate(path.get("right"));
	      if (!confident) return;

	      switch (node.operator) {
	        case "-":
	          return left - right;
	        case "+":
	          return left + right;
	        case "/":
	          return left / right;
	        case "*":
	          return left * right;
	        case "%":
	          return left % right;
	        case "**":
	          return Math.pow(left, right);
	        case "<":
	          return left < right;
	        case ">":
	          return left > right;
	        case "<=":
	          return left <= right;
	        case ">=":
	          return left >= right;
	        case "==":
	          return left == right;
	        case "!=":
	          return left != right;
	        case "===":
	          return left === right;
	        case "!==":
	          return left !== right;
	        case "|":
	          return left | right;
	        case "&":
	          return left & right;
	        case "^":
	          return left ^ right;
	        case "<<":
	          return left << right;
	        case ">>":
	          return left >> right;
	        case ">>>":
	          return left >>> right;
	      }
	    }

	    if (path.isCallExpression()) {
	      var callee = path.get("callee");
	      var context = undefined;
	      var func = undefined;

	      // Number(1);
	      if (callee.isIdentifier() && !path.scope.getBinding(callee.node.name, true) && VALID_CALLEES.indexOf(callee.node.name) >= 0) {
	        func = global[node.callee.name];
	      }

	      if (callee.isMemberExpression()) {
	        var object = callee.get("object");
	        var property = callee.get("property");

	        // Math.min(1, 2)
	        if (object.isIdentifier() && property.isIdentifier() && VALID_CALLEES.indexOf(object.node.name) >= 0 && INVALID_METHODS.indexOf(property.node.name) < 0) {
	          context = global[object.node.name];
	          func = context[property.node.name];
	        }

	        // "abc".charCodeAt(4)
	        if (object.isLiteral() && property.isIdentifier()) {
	          var type = typeof object.node.value;
	          if (type === "string" || type === "number") {
	            context = object.node.value;
	            func = context[property.node.name];
	          }
	        }
	      }

	      if (func) {
	        var args = path.get("arguments").map(evaluate);
	        if (!confident) return;

	        return func.apply(context, args);
	      }
	    }

	    deopt(path);
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 7094 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	// This file contains methods responsible for dealing with/retrieving children or siblings.

	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	exports.__esModule = true;
	exports.getStatementParent = getStatementParent;
	exports.getOpposite = getOpposite;
	exports.getCompletionRecords = getCompletionRecords;
	exports.getSibling = getSibling;
	exports.get = get;
	exports._getKey = _getKey;
	exports._getPattern = _getPattern;
	exports.getBindingIdentifiers = getBindingIdentifiers;
	exports.getOuterBindingIdentifiers = getOuterBindingIdentifiers;

	var _index = __webpack_require__(__webpack_module_template_argument_3__);

	var _index2 = _interopRequireDefault(_index);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_4__);

	var t = _interopRequireWildcard(_babelTypes);

	/*:: import type TraversalContext from "../index";*/
	function getStatementParent() /*: ?NodePath*/ {
	  var path = this;

	  do {
	    if (!path.parentPath || Array.isArray(path.container) && path.isStatement()) {
	      break;
	    } else {
	      path = path.parentPath;
	    }
	  } while (path);

	  if (path && (path.isProgram() || path.isFile())) {
	    throw new Error("File/Program node, we can't possibly find a statement parent to this");
	  }

	  return path;
	}

	function getOpposite() {
	  if (this.key === "left") {
	    return this.getSibling("right");
	  } else if (this.key === "right") {
	    return this.getSibling("left");
	  }
	}

	function getCompletionRecords() /*: Array*/ {
	  var paths = [];

	  var add = function add(path) {
	    if (path) paths = paths.concat(path.getCompletionRecords());
	  };

	  if (this.isIfStatement()) {
	    add(this.get("consequent"));
	    add(this.get("alternate"));
	  } else if (this.isDoExpression() || this.isFor() || this.isWhile()) {
	    add(this.get("body"));
	  } else if (this.isProgram() || this.isBlockStatement()) {
	    add(this.get("body").pop());
	  } else if (this.isFunction()) {
	    return this.get("body").getCompletionRecords();
	  } else if (this.isTryStatement()) {
	    add(this.get("block"));
	    add(this.get("handler"));
	    add(this.get("finalizer"));
	  } else {
	    paths.push(this);
	  }

	  return paths;
	}

	function getSibling(key) {
	  return _index2["default"].get({
	    parentPath: this.parentPath,
	    parent: this.parent,
	    container: this.container,
	    listKey: this.listKey,
	    key: key
	  });
	}

	function get(key /*: string*/, context /*:: ?: boolean | TraversalContext*/) /*: NodePath*/ {
	  if (context === true) context = this.context;
	  var parts = key.split(".");
	  if (parts.length === 1) {
	    // "foo"
	    return this._getKey(key, context);
	  } else {
	    // "foo.bar"
	    return this._getPattern(parts, context);
	  }
	}

	function _getKey(key, context /*:: ?*/) {
	  // istanbul ignore next

	  var _this = this;

	  var node = this.node;
	  var container = node[key];

	  if (Array.isArray(container)) {
	    // requested a container so give them all the paths
	    return container.map(function (_, i) {
	      return _index2["default"].get({
	        listKey: key,
	        parentPath: _this,
	        parent: node,
	        container: container,
	        key: i
	      }).setContext(context);
	    });
	  } else {
	    return _index2["default"].get({
	      parentPath: this,
	      parent: node,
	      container: node,
	      key: key
	    }).setContext(context);
	  }
	}

	function _getPattern(parts, context) {
	  var path = this;
	  for (var _iterator = (parts /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var part = _ref;

	    if (part === ".") {
	      path = path.parentPath;
	    } else {
	      if (Array.isArray(path)) {
	        path = path[part];
	      } else {
	        path = path.get(part, context);
	      }
	    }
	  }
	  return path;
	}

	function getBindingIdentifiers(duplicates /*:: ?*/) {
	  return t.getBindingIdentifiers(this.node, duplicates);
	}

	function getOuterBindingIdentifiers(duplicates /*:: ?*/) {
	  return t.getOuterBindingIdentifiers(this.node, duplicates);
	}

/***/ },
/* 7095 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__, __webpack_module_template_argument_7__, __webpack_module_template_argument_8__, __webpack_module_template_argument_9__, __webpack_module_template_argument_10__, __webpack_module_template_argument_11__, __webpack_module_template_argument_12__, __webpack_module_template_argument_13__, __webpack_module_template_argument_14__, __webpack_module_template_argument_15__, __webpack_module_template_argument_16__, __webpack_module_template_argument_17__, __webpack_module_template_argument_18__, __webpack_module_template_argument_19__, __webpack_module_template_argument_20__, __webpack_module_template_argument_21__, __webpack_module_template_argument_22__) {

	"use strict";

	var _classCallCheck = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _getIterator = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_3__)["default"];

	exports.__esModule = true;

	var _libVirtualTypes = __webpack_require__(__webpack_module_template_argument_4__);

	var virtualTypes = _interopRequireWildcard(_libVirtualTypes);

	var _debug2 = __webpack_require__(__webpack_module_template_argument_5__);

	var _debug3 = _interopRequireDefault(_debug2);

	var _constants = __webpack_require__(__webpack_module_template_argument_6__);

	var _invariant = __webpack_require__(__webpack_module_template_argument_7__);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _index = __webpack_require__(__webpack_module_template_argument_8__);

	var _index2 = _interopRequireDefault(_index);

	var _lodashObjectAssign = __webpack_require__(__webpack_module_template_argument_9__);

	var _lodashObjectAssign2 = _interopRequireDefault(_lodashObjectAssign);

	var _scope = __webpack_require__(__webpack_module_template_argument_10__);

	var _scope2 = _interopRequireDefault(_scope);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_11__);

	var t = _interopRequireWildcard(_babelTypes);

	/*:: import type Hub from "../hub";*/
	/*:: import type TraversalContext from "../context";*/

	var _debug = _debug3["default"]("babel");

	var NodePath = (function () {
	  function NodePath(hub /*: Hub*/, parent /*: Object*/) {
	    _classCallCheck(this, NodePath);

	    this.parent = parent;
	    this.hub = hub;
	    this.contexts = [];
	    this.data = {};
	    this.shouldSkip = false;
	    this.shouldStop = false;
	    this.removed = false;
	    this.state = null;
	    this.opts = null;
	    this.skipKeys = null;
	    this.parentPath = null;
	    this.context = null;
	    this.container = null;
	    this.listKey = null;
	    this.inList = false;
	    this.parentKey = null;
	    this.key = null;
	    this.node = null;
	    this.scope = null;
	    this.type = null;
	    this.typeAnnotation = null;
	  }

	  NodePath.get = function get(_ref2) /*: NodePath*/ {
	    var hub = _ref2.hub;
	    var parentPath = _ref2.parentPath;
	    var parent = _ref2.parent;
	    var container = _ref2.container;
	    var listKey = _ref2.listKey;
	    var key = _ref2.key;

	    if (!hub && parentPath) {
	      hub = parentPath.hub;
	    }

	    _invariant2["default"](parent, "To get a node path the parent needs to exist");

	    var targetNode = container[key];

	    var paths = parent[_constants.PATH_CACHE_KEY] = parent[_constants.PATH_CACHE_KEY] || [];
	    var path = undefined;

	    for (var i = 0; i < paths.length; i++) {
	      var pathCheck = paths[i];
	      if (pathCheck.node === targetNode) {
	        path = pathCheck;
	        break;
	      }
	    }

	    if (path && !(path instanceof NodePath)) {
	      if (path.constructor.name === "NodePath") {
	        // we're going to absolutley thrash the tree and allocate way too many node paths
	        // than is necessary but there's no way around this as the node module resolution
	        // algorithm is ridiculous
	        path = null;
	      } else {
	        // badly deserialised probably
	        throw new Error("We found a path that isn't a NodePath instance. Possiblly due to bad serialisation.");
	      }
	    }

	    if (!path) {
	      path = new NodePath(hub, parent);
	      paths.push(path);
	    }

	    path.setup(parentPath, container, listKey, key);

	    return path;
	  };

	  NodePath.prototype.getScope = function getScope(scope /*: Scope*/) {
	    var ourScope = scope;

	    // we're entering a new scope so let's construct it!
	    if (this.isScope()) {
	      ourScope = new _scope2["default"](this, scope);
	    }

	    return ourScope;
	  };

	  NodePath.prototype.setData = function setData(key /*: string*/, val /*: any*/) /*: any*/ {
	    return this.data[key] = val;
	  };

	  NodePath.prototype.getData = function getData(key /*: string*/, def /*:: ?: any*/) /*: any*/ {
	    var val = this.data[key];
	    if (!val && def) val = this.data[key] = def;
	    return val;
	  };

	  NodePath.prototype.buildCodeFrameError = function buildCodeFrameError(msg /*: string*/) /*: Error*/ {
	    var Error /*: typeof Error*/ = arguments.length <= 1 || arguments[1] === undefined ? SyntaxError : arguments[1];

	    return this.hub.file.buildCodeFrameError(this.node, msg, Error);
	  };

	  NodePath.prototype.traverse = function traverse(visitor /*: Object*/, state /*:: ?: any*/) {
	    _index2["default"](this.node, visitor, this.scope, state, this);
	  };

	  NodePath.prototype.mark = function mark(type /*: string*/, message /*: string*/) {
	    this.hub.file.metadata.marked.push({
	      type: type,
	      message: message,
	      loc: this.node.loc
	    });
	  };

	  NodePath.prototype.set = function set(key /*: string*/, node /*: Object*/) {
	    t.validate(this.node, key, node);
	    this.node[key] = node;
	  };

	  NodePath.prototype.getPathLocation = function getPathLocation() /*: string*/ {
	    var parts = [];
	    var path = this;
	    do {
	      var key = path.key;
	      if (path.inList) key = path.listKey + "[" + key + "]";
	      parts.unshift(key);
	    } while (path = path.parentPath);
	    return parts.join(".");
	  };

	  NodePath.prototype.debug = function debug(buildMessage /*: Function*/) {
	    if (!_debug.enabled) return;
	    _debug(this.getPathLocation() + " " + this.type + ": " + buildMessage());
	  };

	  return NodePath;
	})();

	exports["default"] = NodePath;

	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__(__webpack_module_template_argument_12__));
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__(__webpack_module_template_argument_13__));
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__(__webpack_module_template_argument_14__));
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__(__webpack_module_template_argument_15__));
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__(__webpack_module_template_argument_16__));
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__(__webpack_module_template_argument_17__));
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__(__webpack_module_template_argument_18__));
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__(__webpack_module_template_argument_19__));
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__(__webpack_module_template_argument_20__));
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__(__webpack_module_template_argument_21__));
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__(__webpack_module_template_argument_22__));

	var _loop = function () {
	  if (_isArray) {
	    if (_i >= _iterator.length) return "break";
	    _ref = _iterator[_i++];
	  } else {
	    _i = _iterator.next();
	    if (_i.done) return "break";
	    _ref = _i.value;
	  }

	  var type = _ref;

	  var typeKey = "is" + type;
	  NodePath.prototype[typeKey] = function (opts) {
	    return t[typeKey](this.node, opts);
	  };

	  NodePath.prototype["assert" + type] = function (opts) {
	    if (!this[typeKey](opts)) {
	      throw new TypeError("Expected node path of type " + type);
	    }
	  };
	};

	for (var _iterator = (t.TYPES /*: Array<string>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	  var _ref;

	  var _ret = _loop();

	  // istanbul ignore next
	  if (_ret === "break") break;
	}

	var _loop2 = function (type) {
	  if (type[0] === "_") return "continue";
	  if (t.TYPES.indexOf(type) < 0) t.TYPES.push(type);

	  var virtualType = virtualTypes[type];

	  NodePath.prototype["is" + type] = function (opts) {
	    return virtualType.checkPath(this, opts);
	  };
	};

	for (var type in virtualTypes) {
	  var _ret2 = _loop2(type);

	  // istanbul ignore next
	  if (_ret2 === "continue") continue;
	}
	module.exports = exports["default"];

/***/ },
/* 7096 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__) {

	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	exports.__esModule = true;
	exports.getTypeAnnotation = getTypeAnnotation;
	exports._getTypeAnnotation = _getTypeAnnotation;
	exports.isBaseType = isBaseType;
	exports.couldBeBaseType = couldBeBaseType;
	exports.baseTypeStrictlyMatches = baseTypeStrictlyMatches;
	exports.isGenericType = isGenericType;

	var _inferers = __webpack_require__(__webpack_module_template_argument_2__);

	var inferers = _interopRequireWildcard(_inferers);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_3__);

	var t = _interopRequireWildcard(_babelTypes);

	/**
	 * Infer the type of the current `NodePath`.
	 */

	/*:: import type NodePath from "./index";*/
	function getTypeAnnotation() /*: Object*/ {
	  if (this.typeAnnotation) return this.typeAnnotation;

	  var type = this._getTypeAnnotation() || t.anyTypeAnnotation();
	  if (t.isTypeAnnotation(type)) type = type.typeAnnotation;
	  return this.typeAnnotation = type;
	}

	/**
	 * todo: split up this method
	 */

	function _getTypeAnnotation() /*: ?Object*/ {
	  var node = this.node;

	  if (!node) {
	    // handle initializerless variables, add in checks for loop initializers too
	    if (this.key === "init" && this.parentPath.isVariableDeclarator()) {
	      var declar = this.parentPath.parentPath;
	      var declarParent = declar.parentPath;

	      // for (let NODE in bar) {}
	      if (declar.key === "left" && declarParent.isForInStatement()) {
	        return t.stringTypeAnnotation();
	      }

	      // for (let NODE of bar) {}
	      if (declar.key === "left" && declarParent.isForOfStatement()) {
	        return t.anyTypeAnnotation();
	      }

	      return t.voidTypeAnnotation();
	    } else {
	      return;
	    }
	  }

	  if (node.typeAnnotation) {
	    return node.typeAnnotation;
	  }

	  var inferer = inferers[node.type];
	  if (inferer) {
	    return inferer.call(this, node);
	  }

	  inferer = inferers[this.parentPath.type];
	  if (inferer && inferer.validParent) {
	    return this.parentPath.getTypeAnnotation();
	  }
	}

	function isBaseType(baseName /*: string*/, soft /*:: ?: boolean*/) /*: boolean*/ {
	  return _isBaseType(baseName, this.getTypeAnnotation(), soft);
	}

	function _isBaseType(baseName /*: string*/, type, /*:: ?*/soft /*:: ?*/) /*: boolean*/ {
	  if (baseName === "string") {
	    return t.isStringTypeAnnotation(type);
	  } else if (baseName === "number") {
	    return t.isNumberTypeAnnotation(type);
	  } else if (baseName === "boolean") {
	    return t.isBooleanTypeAnnotation(type);
	  } else if (baseName === "any") {
	    return t.isAnyTypeAnnotation(type);
	  } else if (baseName === "mixed") {
	    return t.isMixedTypeAnnotation(type);
	  } else if (baseName === "void") {
	    return t.isVoidTypeAnnotation(type);
	  } else {
	    if (soft) {
	      return false;
	    } else {
	      throw new Error("Unknown base type " + baseName);
	    }
	  }
	}

	function couldBeBaseType(name /*: string*/) /*: boolean*/ {
	  var type = this.getTypeAnnotation();
	  if (t.isAnyTypeAnnotation(type)) return true;

	  if (t.isUnionTypeAnnotation(type)) {
	    for (var _iterator = (type.types /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var type2 = _ref;

	      if (t.isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {
	        return true;
	      }
	    }
	    return false;
	  } else {
	    return _isBaseType(name, type, true);
	  }
	}

	function baseTypeStrictlyMatches(right /*: NodePath*/) {
	  var left = this.getTypeAnnotation();
	  right = right.getTypeAnnotation();

	  if (!t.isAnyTypeAnnotation(left) && t.isFlowBaseAnnotation(left)) {
	    return right.type === left.type;
	  }
	}

	function isGenericType(genericName /*: string*/) /*: boolean*/ {
	  var type = this.getTypeAnnotation();
	  return t.isGenericTypeAnnotation(type) && t.isIdentifier(type.id, { name: genericName });
	}

/***/ },
/* 7097 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	exports.__esModule = true;

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_2__);

	var t = _interopRequireWildcard(_babelTypes);

	/*:: import type NodePath from "../index";*/
	exports["default"] = function (node /*: Object*/) {
	  if (!this.isReferenced()) return;

	  // check if a binding exists of this value and if so then return a union type of all
	  // possible types that the binding could be
	  var binding = this.scope.getBinding(node.name);
	  if (binding) {
	    if (binding.identifier.typeAnnotation) {
	      return binding.identifier.typeAnnotation;
	    } else {
	      return getTypeAnnotationBindingConstantViolations(this, node.name);
	    }
	  }

	  // built-in values
	  if (node.name === "undefined") {
	    return t.voidTypeAnnotation();
	  } else if (node.name === "NaN" || node.name === "Infinity") {
	    return t.numberTypeAnnotation();
	  } else if (node.name === "arguments") {
	    // todo
	  }
	};

	function getTypeAnnotationBindingConstantViolations(path, name) {
	  var binding = path.scope.getBinding(name);

	  var types = [];
	  path.typeAnnotation = t.unionTypeAnnotation(types);

	  var functionConstantViolations = [];
	  var constantViolations = getConstantViolationsBefore(binding, path, functionConstantViolations);

	  var testType = getConditionalAnnotation(path, name);
	  if (testType) {
	    (function () {
	      var testConstantViolations = getConstantViolationsBefore(binding, testType.ifStatement);

	      // remove constant violations observed before the IfStatement
	      constantViolations = constantViolations.filter(function (path) {
	        return testConstantViolations.indexOf(path) < 0;
	      });

	      // clear current types and add in observed test type
	      types.push(testType.typeAnnotation);
	    })();
	  }

	  if (constantViolations.length) {
	    // pick one constant from each scope which will represent the last possible
	    // control flow path that it could've taken/been
	    /* This code is broken for the following problems:
	     * It thinks that assignments can only happen in scopes.
	     * What about conditionals, if statements without block,
	     * or guarded assignments.
	     * It also checks to see if one of the assignments is in the
	     * same scope and uses that as the only "violation". However,
	     * the binding is returned by `getConstantViolationsBefore` so we for
	     * sure always going to return that as the only "violation".
	    let rawConstantViolations = constantViolations.reverse();
	    let visitedScopes = [];
	    constantViolations = [];
	    for (let violation of (rawConstantViolations: Array<NodePath>)) {
	      let violationScope = violation.scope;
	      if (visitedScopes.indexOf(violationScope) >= 0) continue;
	       visitedScopes.push(violationScope);
	      constantViolations.push(violation);
	       if (violationScope === path.scope) {
	        constantViolations = [violation];
	        break;
	      }
	    }*/

	    // add back on function constant violations since we can't track calls
	    constantViolations = constantViolations.concat(functionConstantViolations);

	    // push on inferred types of violated paths
	    for (var _iterator = (constantViolations /*: Array<NodePath>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var violation = _ref;

	      types.push(violation.getTypeAnnotation());
	    }
	  }

	  if (types.length) {
	    return t.createUnionTypeAnnotation(types);
	  }
	}

	function getConstantViolationsBefore(binding, path, functions) {
	  var violations = binding.constantViolations.slice();
	  violations.unshift(binding.path);
	  return violations.filter(function (violation) {
	    violation = violation.resolve();
	    var status = violation._guessExecutionStatusRelativeTo(path);
	    if (functions && status === "function") functions.push(violation);
	    return status === "before";
	  });
	}

	function inferAnnotationFromBinaryExpression(name, path) {
	  var operator = path.node.operator;

	  var right = path.get("right").resolve();
	  var left = path.get("left").resolve();

	  var target = undefined;
	  if (left.isIdentifier({ name: name })) {
	    target = right;
	  } else if (right.isIdentifier({ name: name })) {
	    target = left;
	  }
	  if (target) {
	    if (operator === "===") {
	      return target.getTypeAnnotation();
	    } else if (t.BOOLEAN_NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {
	      return t.numberTypeAnnotation();
	    } else {
	      return;
	    }
	  } else {
	    if (operator !== "===") return;
	  }

	  //
	  var typeofPath = undefined;
	  var typePath = undefined;
	  if (left.isUnaryExpression({ operator: "typeof" })) {
	    typeofPath = left;
	    typePath = right;
	  } else if (right.isUnaryExpression({ operator: "typeof" })) {
	    typeofPath = right;
	    typePath = left;
	  }
	  if (!typePath && !typeofPath) return;

	  // ensure that the type path is a Literal
	  typePath = typePath.resolve();
	  if (!typePath.isLiteral()) return;

	  // and that it's a string so we can infer it
	  var typeValue = typePath.node.value;
	  if (typeof typeValue !== "string") return;

	  // and that the argument of the typeof path references us!
	  if (!typeofPath.get("argument").isIdentifier({ name: name })) return;

	  // turn type value into a type annotation
	  return t.createTypeAnnotationBasedOnTypeof(typePath.node.value);
	}

	function getParentConditionalPath(path) {
	  var parentPath = undefined;
	  while (parentPath = path.parentPath) {
	    if (parentPath.isIfStatement() || parentPath.isConditionalExpression()) {
	      if (path.key === "test") {
	        return;
	      } else {
	        return parentPath;
	      }
	    } else {
	      path = parentPath;
	    }
	  }
	}

	function getConditionalAnnotation(path, name) {
	  var ifStatement = getParentConditionalPath(path);
	  if (!ifStatement) return;

	  var test = ifStatement.get("test");
	  var paths = [test];
	  var types = [];

	  do {
	    var _path = paths.shift().resolve();

	    if (_path.isLogicalExpression()) {
	      paths.push(_path.get("left"));
	      paths.push(_path.get("right"));
	    }

	    if (_path.isBinaryExpression()) {
	      var type = inferAnnotationFromBinaryExpression(name, _path);
	      if (type) types.push(type);
	    }
	  } while (paths.length);

	  if (types.length) {
	    return {
	      typeAnnotation: t.createUnionTypeAnnotation(types),
	      ifStatement: ifStatement
	    };
	  } else {
	    return getConditionalAnnotation(ifStatement, name);
	  }
	}
	module.exports = exports["default"];

/***/ },
/* 7098 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__) {

	"use strict";

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequire = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	exports.__esModule = true;
	exports.VariableDeclarator = VariableDeclarator;
	exports.TypeCastExpression = TypeCastExpression;
	exports.NewExpression = NewExpression;
	exports.TemplateLiteral = TemplateLiteral;
	exports.UnaryExpression = UnaryExpression;
	exports.BinaryExpression = BinaryExpression;
	exports.LogicalExpression = LogicalExpression;
	exports.ConditionalExpression = ConditionalExpression;
	exports.SequenceExpression = SequenceExpression;
	exports.AssignmentExpression = AssignmentExpression;
	exports.UpdateExpression = UpdateExpression;
	exports.StringLiteral = StringLiteral;
	exports.NumericLiteral = NumericLiteral;
	exports.BooleanLiteral = BooleanLiteral;
	exports.NullLiteral = NullLiteral;
	exports.RegExpLiteral = RegExpLiteral;
	exports.ObjectExpression = ObjectExpression;
	exports.ArrayExpression = ArrayExpression;
	exports.RestElement = RestElement;
	exports.CallExpression = CallExpression;
	exports.TaggedTemplateExpression = TaggedTemplateExpression;

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_2__);

	var t = _interopRequireWildcard(_babelTypes);

	var _infererReference = __webpack_require__(__webpack_module_template_argument_3__);

	exports.Identifier = _interopRequire(_infererReference);

	function VariableDeclarator() {
	  var id = this.get("id");

	  if (id.isIdentifier()) {
	    return this.get("init").getTypeAnnotation();
	  } else {
	    return;
	  }
	}

	function TypeCastExpression(node) {
	  return node.typeAnnotation;
	}

	TypeCastExpression.validParent = true;

	function NewExpression(node) {
	  if (this.get("callee").isIdentifier()) {
	    // only resolve identifier callee
	    return t.genericTypeAnnotation(node.callee);
	  }
	}

	function TemplateLiteral() {
	  return t.stringTypeAnnotation();
	}

	function UnaryExpression(node) {
	  var operator = node.operator;

	  if (operator === "void") {
	    return t.voidTypeAnnotation();
	  } else if (t.NUMBER_UNARY_OPERATORS.indexOf(operator) >= 0) {
	    return t.numberTypeAnnotation();
	  } else if (t.STRING_UNARY_OPERATORS.indexOf(operator) >= 0) {
	    return t.stringTypeAnnotation();
	  } else if (t.BOOLEAN_UNARY_OPERATORS.indexOf(operator) >= 0) {
	    return t.booleanTypeAnnotation();
	  }
	}

	function BinaryExpression(node) {
	  var operator = node.operator;

	  if (t.NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {
	    return t.numberTypeAnnotation();
	  } else if (t.BOOLEAN_BINARY_OPERATORS.indexOf(operator) >= 0) {
	    return t.booleanTypeAnnotation();
	  } else if (operator === "+") {
	    var right = this.get("right");
	    var left = this.get("left");

	    if (left.isBaseType("number") && right.isBaseType("number")) {
	      // both numbers so this will be a number
	      return t.numberTypeAnnotation();
	    } else if (left.isBaseType("string") || right.isBaseType("string")) {
	      // one is a string so the result will be a string
	      return t.stringTypeAnnotation();
	    }

	    // unsure if left and right are strings or numbers so stay on the safe side
	    return t.unionTypeAnnotation([t.stringTypeAnnotation(), t.numberTypeAnnotation()]);
	  }
	}

	function LogicalExpression() {
	  return t.createUnionTypeAnnotation([this.get("left").getTypeAnnotation(), this.get("right").getTypeAnnotation()]);
	}

	function ConditionalExpression() {
	  return t.createUnionTypeAnnotation([this.get("consequent").getTypeAnnotation(), this.get("alternate").getTypeAnnotation()]);
	}

	function SequenceExpression() {
	  return this.get("expressions").pop().getTypeAnnotation();
	}

	function AssignmentExpression() {
	  return this.get("right").getTypeAnnotation();
	}

	function UpdateExpression(node) {
	  var operator = node.operator;
	  if (operator === "++" || operator === "--") {
	    return t.numberTypeAnnotation();
	  }
	}

	function StringLiteral() {
	  return t.stringTypeAnnotation();
	}

	function NumericLiteral() {
	  return t.numberTypeAnnotation();
	}

	function BooleanLiteral() {
	  return t.booleanTypeAnnotation();
	}

	function NullLiteral() {
	  return t.nullLiteralTypeAnnotation();
	}

	function RegExpLiteral() {
	  return t.genericTypeAnnotation(t.identifier("RegExp"));
	}

	function ObjectExpression() {
	  return t.genericTypeAnnotation(t.identifier("Object"));
	}

	function ArrayExpression() {
	  return t.genericTypeAnnotation(t.identifier("Array"));
	}

	function RestElement() {
	  return ArrayExpression();
	}

	RestElement.validParent = true;

	function Func() {
	  return t.genericTypeAnnotation(t.identifier("Function"));
	}

	exports.Function = Func;
	exports.Class = Func;

	function CallExpression() {
	  return resolveCall(this.get("callee"));
	}

	function TaggedTemplateExpression() {
	  return resolveCall(this.get("tag"));
	}

	function resolveCall(callee) {
	  callee = callee.resolve();

	  if (callee.isFunction()) {
	    if (callee.is("async")) {
	      if (callee.is("generator")) {
	        return t.genericTypeAnnotation(t.identifier("AsyncIterator"));
	      } else {
	        return t.genericTypeAnnotation(t.identifier("Promise"));
	      }
	    } else {
	      if (callee.node.returnType) {
	        return callee.node.returnType;
	      } else {
	        // todo: get union type of all return arguments
	      }
	    }
	  }
	}

/***/ },
/* 7099 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	// This file contains methods responsible for introspecting the current path for certain values.

	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	exports.__esModule = true;
	exports.matchesPattern = matchesPattern;
	exports.has = has;
	exports.isStatic = isStatic;
	exports.isnt = isnt;
	exports.equals = equals;
	exports.isNodeType = isNodeType;
	exports.canHaveVariableDeclarationOrExpression = canHaveVariableDeclarationOrExpression;
	exports.isCompletionRecord = isCompletionRecord;
	exports.isStatementOrBlock = isStatementOrBlock;
	exports.referencesImport = referencesImport;
	exports.getSource = getSource;
	exports.willIMaybeExecuteBefore = willIMaybeExecuteBefore;
	exports._guessExecutionStatusRelativeTo = _guessExecutionStatusRelativeTo;
	exports._guessExecutionStatusRelativeToDifferentFunctions = _guessExecutionStatusRelativeToDifferentFunctions;
	exports.resolve = resolve;
	exports._resolve = _resolve;

	var _lodashCollectionIncludes = __webpack_require__(__webpack_module_template_argument_3__);

	var _lodashCollectionIncludes2 = _interopRequireDefault(_lodashCollectionIncludes);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_4__);

	var t = _interopRequireWildcard(_babelTypes);

	/**
	 * Match the current node if it matches the provided `pattern`.
	 *
	 * For example, given the match `React.createClass` it would match the
	 * parsed nodes of `React.createClass` and `React["createClass"]`.
	 */

	/*:: import type NodePath from "./index";*/
	function matchesPattern(pattern /*: string*/, allowPartial /*:: ?: boolean*/) /*: boolean*/ {
	  // not a member expression
	  if (!this.isMemberExpression()) return false;

	  var parts = pattern.split(".");
	  var search = [this.node];
	  var i = 0;

	  function matches(name) {
	    var part = parts[i];
	    return part === "*" || name === part;
	  }

	  while (search.length) {
	    var node = search.shift();

	    if (allowPartial && i === parts.length) {
	      return true;
	    }

	    if (t.isIdentifier(node)) {
	      // this part doesn't match
	      if (!matches(node.name)) return false;
	    } else if (t.isLiteral(node)) {
	      // this part doesn't match
	      if (!matches(node.value)) return false;
	    } else if (t.isMemberExpression(node)) {
	      if (node.computed && !t.isLiteral(node.property)) {
	        // we can't deal with this
	        return false;
	      } else {
	        search.unshift(node.property);
	        search.unshift(node.object);
	        continue;
	      }
	    } else if (t.isThisExpression(node)) {
	      if (!matches("this")) return false;
	    } else {
	      // we can't deal with this
	      return false;
	    }

	    // too many parts
	    if (++i > parts.length) {
	      return false;
	    }
	  }

	  return i === parts.length;
	}

	/**
	 * Check whether we have the input `key`. If the `key` references an array then we check
	 * if the array has any items, otherwise we just check if it's falsy.
	 */

	function has(key) /*: boolean*/ {
	  var val = this.node && this.node[key];
	  if (val && Array.isArray(val)) {
	    return !!val.length;
	  } else {
	    return !!val;
	  }
	}

	/**
	 * Description
	 */

	function isStatic() {
	  return this.scope.isStatic(this.node);
	}

	/**
	 * Alias of `has`.
	 */

	var is = has;

	exports.is = is;
	/**
	 * Opposite of `has`.
	 */

	function isnt(key) /*: boolean*/ {
	  return !this.has(key);
	}

	/**
	 * Check whether the path node `key` strict equals `value`.
	 */

	function equals(key, value) /*: boolean*/ {
	  return this.node[key] === value;
	}

	/**
	 * Check the type against our stored internal type of the node. This is handy when a node has
	 * been removed yet we still internally know the type and need it to calculate node replacement.
	 */

	function isNodeType(type /*: string*/) /*: boolean*/ {
	  return t.isType(this.type, type);
	}

	/**
	 * This checks whether or now we're in one of the following positions:
	 *
	 *   for (KEY in right);
	 *   for (KEY;;);
	 *
	 * This is because these spots allow VariableDeclarations AND normal expressions so we need
	 * to tell the path replacement that it's ok to replace this with an expression.
	 */

	function canHaveVariableDeclarationOrExpression() {
	  return (this.key === "init" || this.key === "left") && this.parentPath.isFor();
	}

	/**
	 * Check whether the current path references a completion record
	 */

	function isCompletionRecord(allowInsideFunction /*:: ?*/) {
	  var path = this;
	  var first = true;

	  do {
	    var container = path.container;

	    // we're in a function so can't be a completion record
	    if (path.isFunction() && !first) {
	      return !!allowInsideFunction;
	    }

	    first = false;

	    // check to see if we're the last item in the container and if we are
	    // we're a completion record!
	    if (Array.isArray(container) && path.key !== container.length - 1) {
	      return false;
	    }
	  } while ((path = path.parentPath) && !path.isProgram());

	  return true;
	}

	/**
	 * Check whether or not the current `key` allows either a single statement or block statement
	 * so we can explode it if necessary.
	 */

	function isStatementOrBlock() {
	  if (this.parentPath.isLabeledStatement() || t.isBlockStatement(this.container)) {
	    return false;
	  } else {
	    return _lodashCollectionIncludes2["default"](t.STATEMENT_OR_BLOCK_KEYS, this.key);
	  }
	}

	/**
	 * Check if the currently assigned path references the `importName` of `moduleSource`.
	 */

	function referencesImport(moduleSource, importName) {
	  if (!this.isReferencedIdentifier()) return false;

	  var binding = this.scope.getBinding(this.node.name);
	  if (!binding || binding.kind !== "module") return false;

	  var path = binding.path;
	  var parent = path.parentPath;
	  if (!parent.isImportDeclaration()) return false;

	  // check moduleSource
	  if (parent.node.source.value === moduleSource) {
	    if (!importName) return true;
	  } else {
	    return false;
	  }

	  if (path.isImportDefaultSpecifier() && importName === "default") {
	    return true;
	  }

	  if (path.isImportNamespaceSpecifier() && importName === "*") {
	    return true;
	  }

	  if (path.isImportSpecifier() && path.node.imported.name === importName) {
	    return true;
	  }

	  return false;
	}

	/**
	 * Get the source code associated with this node.
	 */

	function getSource() {
	  var node = this.node;
	  if (node.end) {
	    return this.hub.file.code.slice(node.start, node.end);
	  } else {
	    return "";
	  }
	}

	function willIMaybeExecuteBefore(target) {
	  return this._guessExecutionStatusRelativeTo(target) !== "after";
	}

	/**
	 * Given a `target` check the execution status of it relative to the current path.
	 *
	 * "Execution status" simply refers to where or not we **think** this will execuete
	 * before or after the input `target` element.
	 */

	function _guessExecutionStatusRelativeTo(target) {
	  // check if the two paths are in different functions, we can't track execution of these
	  var targetFuncParent = target.scope.getFunctionParent();
	  var selfFuncParent = this.scope.getFunctionParent();

	  // here we check the `node` equality as sometimes we may have different paths for the
	  // same node due to path thrashing
	  if (targetFuncParent.node !== selfFuncParent.node) {
	    var _status = this._guessExecutionStatusRelativeToDifferentFunctions(targetFuncParent);
	    if (_status) {
	      return _status;
	    } else {
	      target = targetFuncParent.path;
	    }
	  }

	  var targetPaths = target.getAncestry();
	  if (targetPaths.indexOf(this) >= 0) return "after";

	  var selfPaths = this.getAncestry();

	  // get ancestor where the branches intersect
	  var commonPath = undefined;
	  var targetIndex = undefined;
	  var selfIndex = undefined;
	  for (selfIndex = 0; selfIndex < selfPaths.length; selfIndex++) {
	    var selfPath = selfPaths[selfIndex];
	    targetIndex = targetPaths.indexOf(selfPath);
	    if (targetIndex >= 0) {
	      commonPath = selfPath;
	      break;
	    }
	  }
	  if (!commonPath) {
	    return "before";
	  }

	  // get the relationship paths that associate these nodes to their common ancestor
	  var targetRelationship = targetPaths[targetIndex - 1];
	  var selfRelationship = selfPaths[selfIndex - 1];
	  if (!targetRelationship || !selfRelationship) {
	    return "before";
	  }

	  // container list so let's see which one is after the other
	  if (targetRelationship.listKey && targetRelationship.container === selfRelationship.container) {
	    return targetRelationship.key > selfRelationship.key ? "before" : "after";
	  }

	  // otherwise we're associated by a parent node, check which key comes before the other
	  var targetKeyPosition = t.VISITOR_KEYS[targetRelationship.type].indexOf(targetRelationship.key);
	  var selfKeyPosition = t.VISITOR_KEYS[selfRelationship.type].indexOf(selfRelationship.key);
	  return targetKeyPosition > selfKeyPosition ? "before" : "after";
	}

	function _guessExecutionStatusRelativeToDifferentFunctions(targetFuncParent) {
	  var targetFuncPath = targetFuncParent.path;
	  if (!targetFuncPath.isFunctionDeclaration()) return;

	  // so we're in a completely different function, if this is a function declaration
	  // then we can be a bit smarter and handle cases where the function is either
	  // a. not called at all (part of an export)
	  // b. called directly
	  var binding = targetFuncPath.scope.getBinding(targetFuncPath.node.id.name);

	  // no references!
	  if (!binding.references) return "before";

	  var referencePaths /*: Array<NodePath>*/ = binding.referencePaths;

	  // verify that all of the references are calls
	  for (var _iterator = referencePaths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var path = _ref;

	    if (path.key !== "callee" || !path.parentPath.isCallExpression()) {
	      return;
	    }
	  }

	  var allStatus = undefined;

	  // verify that all the calls have the same execution status
	  for (var _iterator2 = referencePaths, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	    var _ref2;

	    if (_isArray2) {
	      if (_i2 >= _iterator2.length) break;
	      _ref2 = _iterator2[_i2++];
	    } else {
	      _i2 = _iterator2.next();
	      if (_i2.done) break;
	      _ref2 = _i2.value;
	    }

	    var path = _ref2;

	    // if a reference is a child of the function we're checking against then we can
	    // safelty ignore it
	    var childOfFunction = !!path.find(function (path) {
	      return path.node === targetFuncPath.node;
	    });
	    if (childOfFunction) continue;

	    var _status2 = this._guessExecutionStatusRelativeTo(path);

	    if (allStatus) {
	      if (allStatus !== _status2) return;
	    } else {
	      allStatus = _status2;
	    }
	  }

	  return allStatus;
	}

	/**
	 * Resolve a "pointer" `NodePath` to it's absolute path.
	 */

	function resolve(dangerous, resolved) {
	  return this._resolve(dangerous, resolved) || this;
	}

	function _resolve(dangerous, /*:: ?*/resolved /*:: ?*/) /*: ?NodePath*/ {
	  // istanbul ignore next

	  var _this = this;

	  // detect infinite recursion
	  // todo: possibly have a max length on this just to be safe
	  if (resolved && resolved.indexOf(this) >= 0) return;

	  // we store all the paths we've "resolved" in this array to prevent infinite recursion
	  resolved = resolved || [];
	  resolved.push(this);

	  if (this.isVariableDeclarator()) {
	    if (this.get("id").isIdentifier()) {
	      return this.get("init").resolve(dangerous, resolved);
	    } else {
	      // otherwise it's a request for a pattern and that's a bit more tricky
	    }
	  } else if (this.isReferencedIdentifier()) {
	      var binding = this.scope.getBinding(this.node.name);
	      if (!binding) return;

	      // reassigned so we can't really resolve it
	      if (!binding.constant) return;

	      // todo - lookup module in dependency graph
	      if (binding.kind === "module") return;

	      if (binding.path !== this) {
	        var _ret = (function () {
	          var ret = binding.path.resolve(dangerous, resolved);
	          // If the identifier resolves to parent node then we can't really resolve it.
	          if (_this.find(function (parent) {
	            return parent.node === ret.node;
	          })) return {
	              v: undefined
	            };
	          return {
	            v: ret
	          };
	        })();

	        // istanbul ignore next
	        if (typeof _ret === "object") return _ret.v;
	      }
	    } else if (this.isTypeCastExpression()) {
	      return this.get("expression").resolve(dangerous, resolved);
	    } else if (dangerous && this.isMemberExpression()) {
	      // this is dangerous, as non-direct target assignments will mutate it's state
	      // making this resolution inaccurate

	      var targetKey = this.toComputedKey();
	      if (!t.isLiteral(targetKey)) return;

	      var targetName = targetKey.value;

	      var target = this.get("object").resolve(dangerous, resolved);

	      if (target.isObjectExpression()) {
	        var props = target.get("properties");
	        for (var _iterator3 = (props /*: Array*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	          var _ref3;

	          if (_isArray3) {
	            if (_i3 >= _iterator3.length) break;
	            _ref3 = _iterator3[_i3++];
	          } else {
	            _i3 = _iterator3.next();
	            if (_i3.done) break;
	            _ref3 = _i3.value;
	          }

	          var prop = _ref3;

	          if (!prop.isProperty()) continue;

	          var key = prop.get("key");

	          // { foo: obj }
	          var match = prop.isnt("computed") && key.isIdentifier({ name: targetName });

	          // { "foo": "obj" } or { ["foo"]: "obj" }
	          match = match || key.isLiteral({ value: targetName });

	          if (match) return prop.get("value").resolve(dangerous, resolved);
	        }
	      } else if (target.isArrayExpression() && !isNaN(+targetName)) {
	        var elems = target.get("elements");
	        var elem = elems[targetName];
	        if (elem) return elem.resolve(dangerous, resolved);
	      }
	    }
	}

/***/ },
/* 7100 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__) {

	"use strict";

	var _classCallCheck = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _getIterator = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	exports.__esModule = true;

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_3__);

	var t = _interopRequireWildcard(_babelTypes);

	var referenceVisitor = {
	  ReferencedIdentifier: function ReferencedIdentifier(path, state) {
	    if (path.isJSXIdentifier() && _babelTypes.react.isCompatTag(path.node.name)) {
	      return;
	    }

	    // direct references that we need to track to hoist this to the highest scope we can
	    var binding = path.scope.getBinding(path.node.name);
	    if (!binding) return;

	    // this binding isn't accessible from the parent scope so we can safely ignore it
	    // eg. it's in a closure etc
	    if (binding !== state.scope.getBinding(path.node.name)) return;

	    if (binding.constant) {
	      state.bindings[path.node.name] = binding;
	    } else {
	      for (var _iterator = (binding.constantViolations /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	        var _ref;

	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }

	        var violationPath = _ref;

	        state.breakOnScopePaths = state.breakOnScopePaths.concat(violationPath.getAncestry());
	      }
	    }
	  }
	};

	var PathHoister = (function () {
	  function PathHoister(path, scope) {
	    _classCallCheck(this, PathHoister);

	    this.breakOnScopePaths = [];
	    this.bindings = {};
	    this.scopes = [];
	    this.scope = scope;
	    this.path = path;
	  }

	  PathHoister.prototype.isCompatibleScope = function isCompatibleScope(scope) {
	    for (var key in this.bindings) {
	      var binding = this.bindings[key];
	      if (!scope.bindingIdentifierEquals(key, binding.identifier)) {
	        return false;
	      }
	    }

	    return true;
	  };

	  PathHoister.prototype.getCompatibleScopes = function getCompatibleScopes() {
	    var scope = this.path.scope;
	    do {
	      if (this.isCompatibleScope(scope)) {
	        this.scopes.push(scope);
	      } else {
	        break;
	      }

	      if (this.breakOnScopePaths.indexOf(scope.path) >= 0) {
	        break;
	      }
	    } while (scope = scope.parent);
	  };

	  PathHoister.prototype.getAttachmentPath = function getAttachmentPath() {
	    var scopes = this.scopes;

	    var scope = scopes.pop();
	    if (!scope) return;

	    if (scope.path.isFunction()) {
	      if (this.hasOwnParamBindings(scope)) {
	        // should ignore this scope since it's ourselves
	        if (this.scope === scope) return;

	        // needs to be attached to the body
	        return scope.path.get("body").get("body")[0];
	      } else {
	        // doesn't need to be be attached to this scope
	        return this.getNextScopeStatementParent();
	      }
	    } else if (scope.path.isProgram()) {
	      return this.getNextScopeStatementParent();
	    }
	  };

	  PathHoister.prototype.getNextScopeStatementParent = function getNextScopeStatementParent() {
	    var scope = this.scopes.pop();
	    if (scope) return scope.path.getStatementParent();
	  };

	  PathHoister.prototype.hasOwnParamBindings = function hasOwnParamBindings(scope) {
	    for (var _name in this.bindings) {
	      if (!scope.hasOwnBinding(_name)) continue;

	      var binding = this.bindings[_name];
	      if (binding.kind === "param") return true;
	    }
	    return false;
	  };

	  PathHoister.prototype.run = function run() {
	    var node = this.path.node;
	    if (node._hoisted) return;
	    node._hoisted = true;

	    this.path.traverse(referenceVisitor, this);

	    this.getCompatibleScopes();

	    var attachTo = this.getAttachmentPath();
	    if (!attachTo) return;

	    // don't bother hoisting to the same function as this will cause multiple branches to be evaluated more than once leading to a bad optimisation
	    if (attachTo.getFunctionParent() === this.path.getFunctionParent()) return;

	    var uid = attachTo.scope.generateUidIdentifier("ref");

	    attachTo.insertBefore([t.variableDeclaration("var", [t.variableDeclarator(uid, this.path.node)])]);

	    var parent = this.path.parentPath;

	    if (parent.isJSXElement() && this.path.container === parent.node.children) {
	      // turning the `span` in `<div><span /></div>` to an expression so we need to wrap it with
	      // an expression container
	      uid = t.JSXExpressionContainer(uid);
	    }

	    this.path.replaceWith(uid);
	  };

	  return PathHoister;
	})();

	exports["default"] = PathHoister;
	module.exports = exports["default"];

/***/ },
/* 7101 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	"use strict";

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_1__);

	var t = _interopRequireWildcard(_babelTypes);

	/*:: import type NodePath from "../index";*/var ReferencedIdentifier = {
	  types: ["Identifier", "JSXIdentifier"],
	  checkPath: function checkPath(_ref /*: NodePath*/, opts /*:: ?: Object*/) /*: boolean*/ {
	    var node = _ref.node;
	    var parent = _ref.parent;

	    if (!t.isIdentifier(node, opts)) {
	      if (t.isJSXIdentifier(node, opts)) {
	        if (_babelTypes.react.isCompatTag(node.name)) return false;
	      } else {
	        // not a JSXIdentifier or an Identifier
	        return false;
	      }
	    }

	    // check if node is referenced
	    return t.isReferenced(node, parent);
	  }
	};

	exports.ReferencedIdentifier = ReferencedIdentifier;
	var ReferencedMemberExpression = {
	  types: ["MemberExpression"],
	  checkPath: function checkPath(_ref2) {
	    var node = _ref2.node;
	    var parent = _ref2.parent;

	    return t.isMemberExpression(node) && t.isReferenced(node, parent);
	  }
	};

	exports.ReferencedMemberExpression = ReferencedMemberExpression;
	var BindingIdentifier = {
	  types: ["Identifier"],
	  checkPath: function checkPath(_ref3 /*: NodePath*/) /*: boolean*/ {
	    var node = _ref3.node;
	    var parent = _ref3.parent;

	    return t.isIdentifier(node) && t.isBinding(node, parent);
	  }
	};

	exports.BindingIdentifier = BindingIdentifier;
	var Statement = {
	  types: ["Statement"],
	  checkPath: function checkPath(_ref4 /*: NodePath*/) /*: boolean*/ {
	    var node = _ref4.node;
	    var parent = _ref4.parent;

	    if (t.isStatement(node)) {
	      if (t.isVariableDeclaration(node)) {
	        if (t.isForXStatement(parent, { left: node })) return false;
	        if (t.isForStatement(parent, { init: node })) return false;
	      }

	      return true;
	    } else {
	      return false;
	    }
	  }
	};

	exports.Statement = Statement;
	var Expression = {
	  types: ["Expression"],
	  checkPath: function checkPath(path /*: NodePath*/) /*: boolean*/ {
	    if (path.isIdentifier()) {
	      return path.isReferencedIdentifier();
	    } else {
	      return t.isExpression(path.node);
	    }
	  }
	};

	exports.Expression = Expression;
	var Scope = {
	  types: ["Scopable"],
	  checkPath: function checkPath(path) {
	    return t.isScope(path.node, path.parent);
	  }
	};

	exports.Scope = Scope;
	var Referenced = {
	  checkPath: function checkPath(path /*: NodePath*/) /*: boolean*/ {
	    return t.isReferenced(path.node, path.parent);
	  }
	};

	exports.Referenced = Referenced;
	var BlockScoped = {
	  checkPath: function checkPath(path /*: NodePath*/) /*: boolean*/ {
	    return t.isBlockScoped(path.node);
	  }
	};

	exports.BlockScoped = BlockScoped;
	var Var = {
	  types: ["VariableDeclaration"],
	  checkPath: function checkPath(path /*: NodePath*/) /*: boolean*/ {
	    return t.isVar(path.node);
	  }
	};

	exports.Var = Var;
	var User = {
	  checkPath: function checkPath(path /*: NodePath*/) /*: boolean*/ {
	    return path.node && !!path.node.loc;
	  }
	};

	exports.User = User;
	var Generated = {
	  checkPath: function checkPath(path /*: NodePath*/) /*: boolean*/ {
	    return !path.isUser();
	  }
	};

	exports.Generated = Generated;
	var Pure = {
	  checkPath: function checkPath(path /*: NodePath*/, opts /*:: ?*/) /*: boolean*/ {
	    return path.scope.isPure(path.node, opts);
	  }
	};

	exports.Pure = Pure;
	var Flow = {
	  types: ["Flow", "ImportDeclaration", "ExportDeclaration"],
	  checkPath: function checkPath(_ref5 /*: NodePath*/) /*: boolean*/ {
	    var node = _ref5.node;

	    if (t.isFlow(node)) {
	      return true;
	    } else if (t.isImportDeclaration(node)) {
	      return node.importKind === "type" || node.importKind === "typeof";
	    } else if (t.isExportDeclaration(node)) {
	      return node.exportKind === "type";
	    } else {
	      return false;
	    }
	  }
	};
	exports.Flow = Flow;

/***/ },
/* 7102 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__) {

	// This file contains methods that modify the path/node in some ways.

	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	exports.__esModule = true;
	exports.insertBefore = insertBefore;
	exports._containerInsert = _containerInsert;
	exports._containerInsertBefore = _containerInsertBefore;
	exports._containerInsertAfter = _containerInsertAfter;
	exports._maybePopFromStatements = _maybePopFromStatements;
	exports.insertAfter = insertAfter;
	exports.updateSiblingKeys = updateSiblingKeys;
	exports._verifyNodeList = _verifyNodeList;
	exports.unshiftContainer = unshiftContainer;
	exports.pushContainer = pushContainer;
	exports.hoist = hoist;

	var _constants = __webpack_require__(__webpack_module_template_argument_3__);

	var _libHoister = __webpack_require__(__webpack_module_template_argument_4__);

	var _libHoister2 = _interopRequireDefault(_libHoister);

	var _index = __webpack_require__(__webpack_module_template_argument_5__);

	var _index2 = _interopRequireDefault(_index);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_6__);

	var t = _interopRequireWildcard(_babelTypes);

	/**
	 * Insert the provided nodes before the current one.
	 */

	function insertBefore(nodes) {
	  this._assertUnremoved();

	  nodes = this._verifyNodeList(nodes);

	  if (this.parentPath.isExpressionStatement() || this.parentPath.isLabeledStatement()) {
	    return this.parentPath.insertBefore(nodes);
	  } else if (this.isNodeType("Expression") || this.parentPath.isForStatement() && this.key === "init") {
	    if (this.node) nodes.push(this.node);
	    this.replaceExpressionWithStatements(nodes);
	  } else {
	    this._maybePopFromStatements(nodes);
	    if (Array.isArray(this.container)) {
	      return this._containerInsertBefore(nodes);
	    } else if (this.isStatementOrBlock()) {
	      if (this.node) nodes.push(this.node);
	      this._replaceWith(t.blockStatement(nodes));
	    } else {
	      throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
	    }
	  }

	  return [this];
	}

	function _containerInsert(from, nodes) {
	  this.updateSiblingKeys(from, nodes.length);

	  var paths = [];

	  for (var i = 0; i < nodes.length; i++) {
	    var to = from + i;
	    var node = nodes[i];
	    this.container.splice(to, 0, node);

	    if (this.context) {
	      var _path = this.context.create(this.parent, this.container, to, this.listKey);
	      paths.push(_path);
	    } else {
	      paths.push(_index2["default"].get({
	        parentPath: this.parentPath,
	        parent: this.parent,
	        container: this.container,
	        listKey: this.listKey,
	        key: to
	      }));
	    }
	  }

	  var contexts = this.contexts;
	  var path = this;
	  while (!contexts.length) {
	    path = path.parentPath;
	    contexts = path.contexts;
	  }

	  for (var _iterator = paths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var _path2 = _ref;

	    _path2.setScope();
	    _path2.debug(function () {
	      return "Inserted.";
	    });

	    for (var _iterator2 = contexts, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var context = _ref2;

	      context.maybeQueue(_path2, true);
	    }
	  }

	  return paths;
	}

	function _containerInsertBefore(nodes) {
	  return this._containerInsert(this.key, nodes);
	}

	function _containerInsertAfter(nodes) {
	  return this._containerInsert(this.key + 1, nodes);
	}

	function _maybePopFromStatements(nodes) {
	  var last = nodes[nodes.length - 1];
	  var isIdentifier = t.isIdentifier(last) || t.isExpressionStatement(last) && t.isIdentifier(last.expression);

	  if (isIdentifier && !this.isCompletionRecord()) {
	    nodes.pop();
	  }
	}

	/**
	 * Insert the provided nodes after the current one. When inserting nodes after an
	 * expression, ensure that the completion record is correct by pushing the current node.
	 */

	function insertAfter(nodes) {
	  this._assertUnremoved();

	  nodes = this._verifyNodeList(nodes);

	  if (this.parentPath.isExpressionStatement() || this.parentPath.isLabeledStatement()) {
	    return this.parentPath.insertAfter(nodes);
	  } else if (this.isNodeType("Expression") || this.parentPath.isForStatement() && this.key === "init") {
	    if (this.node) {
	      var temp = this.scope.generateDeclaredUidIdentifier();
	      nodes.unshift(t.expressionStatement(t.assignmentExpression("=", temp, this.node)));
	      nodes.push(t.expressionStatement(temp));
	    }
	    this.replaceExpressionWithStatements(nodes);
	  } else {
	    this._maybePopFromStatements(nodes);
	    if (Array.isArray(this.container)) {
	      return this._containerInsertAfter(nodes);
	    } else if (this.isStatementOrBlock()) {
	      if (this.node) nodes.unshift(this.node);
	      this._replaceWith(t.blockStatement(nodes));
	    } else {
	      throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
	    }
	  }

	  return [this];
	}

	/**
	 * Update all sibling node paths after `fromIndex` by `incrementBy`.
	 */

	function updateSiblingKeys(fromIndex, incrementBy) {
	  if (!this.parent) return;

	  var paths = this.parent[_constants.PATH_CACHE_KEY];
	  for (var i = 0; i < paths.length; i++) {
	    var path = paths[i];
	    if (path.key >= fromIndex) {
	      path.key += incrementBy;
	    }
	  }
	}

	function _verifyNodeList(nodes) {
	  if (!nodes) {
	    return [];
	  }

	  if (nodes.constructor !== Array) {
	    nodes = [nodes];
	  }

	  for (var i = 0; i < nodes.length; i++) {
	    var node = nodes[i];
	    var msg = undefined;

	    if (!node) {
	      msg = "has falsy node";
	    } else if (typeof node !== "object") {
	      msg = "contains a non-object node";
	    } else if (!node.type) {
	      msg = "without a type";
	    } else if (node instanceof _index2["default"]) {
	      msg = "has a NodePath when it expected a raw object";
	    }

	    if (msg) {
	      var type = Array.isArray(node) ? "array" : typeof node;
	      throw new Error("Node list " + msg + " with the index of " + i + " and type of " + type);
	    }
	  }

	  return nodes;
	}

	function unshiftContainer(listKey, nodes) {
	  this._assertUnremoved();

	  nodes = this._verifyNodeList(nodes);

	  // get the first path and insert our nodes before it, if it doesn't exist then it
	  // doesn't matter, our nodes will be inserted anyway
	  var path = _index2["default"].get({
	    parentPath: this,
	    parent: this.node,
	    container: this.node[listKey],
	    listKey: listKey,
	    key: 0
	  });

	  return path.insertBefore(nodes);
	}

	function pushContainer(listKey, nodes) {
	  this._assertUnremoved();

	  nodes = this._verifyNodeList(nodes);

	  // get an invisible path that represents the last node + 1 and replace it with our
	  // nodes, effectively inlining it

	  var container = this.node[listKey];
	  var path = _index2["default"].get({
	    parentPath: this,
	    parent: this.node,
	    container: container,
	    listKey: listKey,
	    key: container.length
	  });

	  return path.replaceWithMultiple(nodes);
	}

	/**
	 * Hoist the current node to the highest scope possible and return a UID
	 * referencing it.
	 */

	function hoist() {
	  var scope = arguments.length <= 0 || arguments[0] === undefined ? this.scope : arguments[0];

	  var hoister = new _libHoister2["default"](this, scope);
	  return hoister.run();
	}

/***/ },
/* 7103 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	// This file contains methods responsible for removing a node.

	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;
	exports.remove = remove;
	exports._callRemovalHooks = _callRemovalHooks;
	exports._remove = _remove;
	exports._markRemoved = _markRemoved;
	exports._assertUnremoved = _assertUnremoved;

	var _libRemovalHooks = __webpack_require__(__webpack_module_template_argument_1__);

	function remove() {
	  this._assertUnremoved();

	  this.resync();

	  if (this._callRemovalHooks()) {
	    this._markRemoved();
	    return;
	  }

	  this.shareCommentsWithSiblings();
	  this._remove();
	  this._markRemoved();
	}

	function _callRemovalHooks() {
	  for (var _iterator = (_libRemovalHooks.hooks /*: Array<Function>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var fn = _ref;

	    if (fn(this, this.parentPath)) return true;
	  }
	}

	function _remove() {
	  if (Array.isArray(this.container)) {
	    this.container.splice(this.key, 1);
	    this.updateSiblingKeys(this.key, -1);
	  } else {
	    this._replaceWith(null);
	  }
	}

	function _markRemoved() {
	  this.shouldSkip = true;
	  this.removed = true;
	  this.node = null;
	}

	function _assertUnremoved() {
	  if (this.removed) {
	    throw this.buildCodeFrameError("NodePath has been removed so is read-only.");
	  }
	}

/***/ },
/* 7104 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__, __webpack_module_template_argument_7__) {

	// This file contains methods responsible for replacing a node with another.

	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	exports.__esModule = true;
	exports.replaceWithMultiple = replaceWithMultiple;
	exports.replaceWithSourceString = replaceWithSourceString;
	exports.replaceWith = replaceWith;
	exports._replaceWith = _replaceWith;
	exports.replaceExpressionWithStatements = replaceExpressionWithStatements;
	exports.replaceInline = replaceInline;

	var _babelCodeFrame = __webpack_require__(__webpack_module_template_argument_3__);

	var _babelCodeFrame2 = _interopRequireDefault(_babelCodeFrame);

	var _index = __webpack_require__(__webpack_module_template_argument_4__);

	var _index2 = _interopRequireDefault(_index);

	var _index3 = __webpack_require__(__webpack_module_template_argument_5__);

	var _index4 = _interopRequireDefault(_index3);

	var _babylon = __webpack_require__(__webpack_module_template_argument_6__);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_7__);

	var t = _interopRequireWildcard(_babelTypes);

	var hoistVariablesVisitor = {
	  Function: function Function(path) {
	    path.skip();
	  },

	  VariableDeclaration: function VariableDeclaration(path) {
	    if (path.node.kind !== "var") return;

	    var bindings = path.getBindingIdentifiers();
	    for (var key in bindings) {
	      path.scope.push({ id: bindings[key] });
	    }

	    var exprs = [];

	    for (var _iterator = (path.node.declarations /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var declar = _ref;

	      if (declar.init) {
	        exprs.push(t.expressionStatement(t.assignmentExpression("=", declar.id, declar.init)));
	      }
	    }

	    path.replaceWithMultiple(exprs);
	  }
	};

	/**
	 * Replace a node with an array of multiple. This method performs the following steps:
	 *
	 *  - Inherit the comments of first provided node with that of the current node.
	 *  - Insert the provided nodes after the current node.
	 *  - Remove the current node.
	 */

	function replaceWithMultiple(nodes /*: Array<Object>*/) {
	  this.resync();

	  nodes = this._verifyNodeList(nodes);
	  t.inheritLeadingComments(nodes[0], this.node);
	  t.inheritTrailingComments(nodes[nodes.length - 1], this.node);
	  this.node = this.container[this.key] = null;
	  this.insertAfter(nodes);

	  if (this.node) {
	    this.requeue();
	  } else {
	    this.remove();
	  }
	}

	/**
	 * Parse a string as an expression and replace the current node with the result.
	 *
	 * NOTE: This is typically not a good idea to use. Building source strings when
	 * transforming ASTs is an antipattern and SHOULD NOT be encouraged. Even if it's
	 * easier to use, your transforms will be extremely brittle.
	 */

	function replaceWithSourceString(replacement) {
	  this.resync();

	  try {
	    replacement = "(" + replacement + ")";
	    replacement = _babylon.parse(replacement);
	  } catch (err) {
	    var loc = err.loc;
	    if (loc) {
	      err.message += " - make sure this is an expression.";
	      err.message += "\n" + _babelCodeFrame2["default"](replacement, loc.line, loc.column + 1);
	    }
	    throw err;
	  }

	  replacement = replacement.program.body[0].expression;
	  _index2["default"].removeProperties(replacement);
	  return this.replaceWith(replacement);
	}

	/**
	 * Replace the current node with another.
	 */

	function replaceWith(replacement) {
	  this.resync();

	  if (this.removed) {
	    throw new Error("You can't replace this node, we've already removed it");
	  }

	  if (replacement instanceof _index4["default"]) {
	    replacement = replacement.node;
	  }

	  if (!replacement) {
	    throw new Error("You passed `path.replaceWith()` a falsy node, use `path.remove()` instead");
	  }

	  if (this.node === replacement) {
	    return;
	  }

	  if (this.isProgram() && !t.isProgram(replacement)) {
	    throw new Error("You can only replace a Program root node with another Program node");
	  }

	  if (Array.isArray(replacement)) {
	    throw new Error("Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`");
	  }

	  if (typeof replacement === "string") {
	    throw new Error("Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`");
	  }

	  // replacing a statement with an expression so wrap it in an expression statement
	  if (this.isNodeType("Statement") && t.isExpression(replacement) && !this.canHaveVariableDeclarationOrExpression()) {
	    replacement = t.expressionStatement(replacement);
	  }

	  // replacing an expression with a statement so let's explode it
	  if (this.isNodeType("Expression") && t.isStatement(replacement)) {
	    return this.replaceExpressionWithStatements([replacement]);
	  }

	  var oldNode = this.node;
	  if (oldNode) {
	    t.inheritsComments(replacement, oldNode);
	    t.removeComments(oldNode);
	  }

	  // replace the node
	  this._replaceWith(replacement);
	  this.type = replacement.type;

	  // potentially create new scope
	  this.setScope();

	  // requeue for visiting
	  this.requeue();
	}

	/**
	 * Description
	 */

	function _replaceWith(node) {
	  if (!this.container) {
	    throw new ReferenceError("Container is falsy");
	  }

	  if (this.inList) {
	    t.validate(this.parent, this.key, [node]);
	  } else {
	    t.validate(this.parent, this.key, node);
	  }

	  this.debug(function () {
	    return "Replace with " + (node && node.type);
	  });

	  this.node = this.container[this.key] = node;
	}

	/**
	 * This method takes an array of statements nodes and then explodes it
	 * into expressions. This method retains completion records which is
	 * extremely important to retain original semantics.
	 */

	function replaceExpressionWithStatements(nodes /*: Array<Object>*/) {
	  this.resync();

	  var toSequenceExpression = t.toSequenceExpression(nodes, this.scope);

	  if (t.isSequenceExpression(toSequenceExpression)) {
	    var exprs = toSequenceExpression.expressions;

	    if (exprs.length >= 2 && this.parentPath.isExpressionStatement()) {
	      this._maybePopFromStatements(exprs);
	    }

	    // could be just one element due to the previous maybe popping
	    if (exprs.length === 1) {
	      this.replaceWith(exprs[0]);
	    } else {
	      this.replaceWith(toSequenceExpression);
	    }
	  } else if (toSequenceExpression) {
	    this.replaceWith(toSequenceExpression);
	  } else {
	    var container = t.functionExpression(null, [], t.blockStatement(nodes));
	    container.shadow = true;

	    this.replaceWith(t.callExpression(container, []));
	    this.traverse(hoistVariablesVisitor);

	    // add implicit returns to all ending expression statements
	    var completionRecords /*: Array<NodePath>*/ = this.get("callee").getCompletionRecords();
	    for (var _iterator2 = completionRecords, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var path = _ref2;

	      if (!path.isExpressionStatement()) continue;

	      var loop = path.findParent(function (path) {
	        return path.isLoop();
	      });
	      if (loop) {
	        var callee = this.get("callee");

	        var uid = callee.scope.generateDeclaredUidIdentifier("ret");
	        callee.get("body").pushContainer("body", t.returnStatement(uid));

	        path.get("expression").replaceWith(t.assignmentExpression("=", uid, path.node.expression));
	      } else {
	        path.replaceWith(t.returnStatement(path.node.expression));
	      }
	    }

	    return this.node;
	  }
	}

	function replaceInline(nodes /*: Object | Array<Object>*/) {
	  this.resync();

	  if (Array.isArray(nodes)) {
	    if (Array.isArray(this.container)) {
	      nodes = this._verifyNodeList(nodes);
	      this._containerInsertAfter(nodes);
	      return this.remove();
	    } else {
	      return this.replaceWithMultiple(nodes);
	    }
	  } else {
	    return this.replaceWith(nodes);
	  }
	}

/***/ },
/* 7105 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	"use strict";

	var _classCallCheck = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;

	/**
	 * This class is responsible for a binding inside of a scope.
	 *
	 * It tracks the following:
	 *
	 *  * Node path.
	 *  * Amount of times referenced by other nodes.
	 *  * Paths to nodes that reassign or modify this binding.
	 *  * The kind of binding. (Is it a parameter, declaration etc)
	 */

	/*:: import type NodePath from "../path";*/
	var Binding = (function () {
	  function Binding(_ref) {
	    var existing = _ref.existing;
	    var identifier = _ref.identifier;
	    var scope = _ref.scope;
	    var path = _ref.path;
	    var kind = _ref.kind;

	    _classCallCheck(this, Binding);

	    this.identifier = identifier;
	    this.scope = scope;
	    this.path = path;
	    this.kind = kind;

	    this.constantViolations = [];
	    this.constant = true;

	    this.referencePaths = [];
	    this.referenced = false;
	    this.references = 0;

	    this.clearValue();

	    if (existing) {
	      this.constantViolations = [].concat(existing.path, existing.constantViolations, this.constantViolations);
	    }
	  }

	  Binding.prototype.deoptValue = function deoptValue() {
	    this.clearValue();
	    this.hasDeoptedValue = true;
	  };

	  Binding.prototype.setValue = function setValue(value /*: any*/) {
	    if (this.hasDeoptedValue) return;
	    this.hasValue = true;
	    this.value = value;
	  };

	  Binding.prototype.clearValue = function clearValue() {
	    this.hasDeoptedValue = false;
	    this.hasValue = false;
	    this.value = null;
	  };

	  /**
	   * Register a constant violation with the provided `path`.
	   */

	  Binding.prototype.reassign = function reassign(path /*: Object*/) {
	    this.constant = false;
	    this.constantViolations.push(path);
	  };

	  /**
	   * Increment the amount of references to this binding.
	   */

	  Binding.prototype.reference = function reference(path /*: NodePath*/) {
	    this.referenced = true;
	    this.references++;
	    this.referencePaths.push(path);
	  };

	  /**
	   * Decrement the amount of references to this binding.
	   */

	  Binding.prototype.dereference = function dereference() {
	    this.references--;
	    this.referenced = !!this.references;
	  };

	  return Binding;
	})();

	exports["default"] = Binding;
	module.exports = exports["default"];

/***/ },
/* 7106 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__, __webpack_module_template_argument_7__, __webpack_module_template_argument_8__, __webpack_module_template_argument_9__, __webpack_module_template_argument_10__, __webpack_module_template_argument_11__, __webpack_module_template_argument_12__, __webpack_module_template_argument_13__, __webpack_module_template_argument_14__) {

	"use strict";

	var _classCallCheck = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _Symbol = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _getIterator = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	var _Object$create = __webpack_require__(__webpack_module_template_argument_3__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_4__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_5__)["default"];

	exports.__esModule = true;

	var _lodashCollectionIncludes = __webpack_require__(__webpack_module_template_argument_6__);

	var _lodashCollectionIncludes2 = _interopRequireDefault(_lodashCollectionIncludes);

	var _repeating = __webpack_require__(__webpack_module_template_argument_7__);

	var _repeating2 = _interopRequireDefault(_repeating);

	var _libRenamer = __webpack_require__(__webpack_module_template_argument_8__);

	var _libRenamer2 = _interopRequireDefault(_libRenamer);

	var _index = __webpack_require__(__webpack_module_template_argument_9__);

	var _index2 = _interopRequireDefault(_index);

	var _lodashObjectDefaults = __webpack_require__(__webpack_module_template_argument_10__);

	var _lodashObjectDefaults2 = _interopRequireDefault(_lodashObjectDefaults);

	var _babelMessages = __webpack_require__(__webpack_module_template_argument_11__);

	var messages = _interopRequireWildcard(_babelMessages);

	var _binding = __webpack_require__(__webpack_module_template_argument_12__);

	var _binding2 = _interopRequireDefault(_binding);

	var _globals = __webpack_require__(__webpack_module_template_argument_13__);

	var _globals2 = _interopRequireDefault(_globals);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_14__);

	var t = _interopRequireWildcard(_babelTypes);

	//

	/*:: import type NodePath from "../path";*/var CACHE_SINGLE_KEY = _Symbol();
	var CACHE_MULTIPLE_KEY = _Symbol();

	/**
	 * To avoid creating a new Scope instance for each traversal, we maintain a cache on the
	 * node itself containing all scopes it has been associated with.
	 *
	 * We also optimise for the case of there being only a single scope associated with a node.
	 */

	function getCache(node, parentScope, self) {
	  var singleCache = node[CACHE_SINGLE_KEY];

	  if (singleCache) {
	    // we've only ever associated one scope with this node so let's check it
	    if (matchesParent(singleCache, parentScope)) {
	      return singleCache;
	    }
	  } else if (!node[CACHE_MULTIPLE_KEY]) {
	    // no scope has ever been associated with this node
	    node[CACHE_SINGLE_KEY] = self;
	    return;
	  }

	  // looks like we have either a single scope association that was never matched or
	  // multiple assocations, let's find the right one!
	  return getCacheMultiple(node, parentScope, self, singleCache);
	}

	function matchesParent(scope, parentScope) {
	  if (scope.parent === parentScope) {
	    return true;
	  }
	}

	function getCacheMultiple(node, parentScope, self, singleCache) {
	  var scopes /*: Array<Scope>*/ = node[CACHE_MULTIPLE_KEY] = node[CACHE_MULTIPLE_KEY] || [];

	  if (singleCache) {
	    // we have a scope assocation miss so push it onto our scopes
	    scopes.push(singleCache);
	    node[CACHE_SINGLE_KEY] = null;
	  }

	  // loop through and check each scope to see if it matches our parent
	  for (var _iterator = scopes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var scope = _ref;

	    if (matchesParent(scope, parentScope)) return scope;
	  }

	  scopes.push(self);
	}

	//

	var collectorVisitor = {
	  For: function For(path) {
	    for (var _iterator2 = (t.FOR_INIT_KEYS /*: Array*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var key = _ref2;

	      var declar = path.get(key);
	      if (declar.isVar()) path.scope.getFunctionParent().registerBinding("var", declar);
	    }
	  },

	  Declaration: function Declaration(path) {
	    // delegate block scope handling to the `blockVariableVisitor`
	    if (path.isBlockScoped()) return;

	    // this will be hit again once we traverse into it after this iteration
	    if (path.isExportDeclaration() && path.get("declaration").isDeclaration()) return;

	    // we've ran into a declaration!
	    path.scope.getFunctionParent().registerDeclaration(path);
	  },

	  ReferencedIdentifier: function ReferencedIdentifier(path, state) {
	    state.references.push(path);
	  },

	  ForXStatement: function ForXStatement(path, state) {
	    var left = path.get("left");
	    if (left.isPattern() || left.isIdentifier()) {
	      state.constantViolations.push(left);
	    }
	  },

	  ExportDeclaration: {
	    exit: function exit(_ref20) {
	      var node = _ref20.node;
	      var scope = _ref20.scope;

	      var declar = node.declaration;
	      if (t.isClassDeclaration(declar) || t.isFunctionDeclaration(declar)) {
	        var _id = declar.id;
	        if (!_id) return;

	        var binding = scope.getBinding(_id.name);
	        if (binding) binding.reference();
	      } else if (t.isVariableDeclaration(declar)) {
	        for (var _iterator3 = (declar.declarations /*: Array<Object>*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	          var _ref3;

	          if (_isArray3) {
	            if (_i3 >= _iterator3.length) break;
	            _ref3 = _iterator3[_i3++];
	          } else {
	            _i3 = _iterator3.next();
	            if (_i3.done) break;
	            _ref3 = _i3.value;
	          }

	          var decl = _ref3;

	          var ids = t.getBindingIdentifiers(decl);
	          for (var _name in ids) {
	            var binding = scope.getBinding(_name);
	            if (binding) binding.reference();
	          }
	        }
	      }
	    }
	  },

	  LabeledStatement: function LabeledStatement(path) {
	    path.scope.getProgramParent().addGlobal(path.node);
	    path.scope.getBlockParent().registerDeclaration(path);
	  },

	  AssignmentExpression: function AssignmentExpression(path, state) {
	    state.assignments.push(path);
	  },

	  UpdateExpression: function UpdateExpression(path, state) {
	    state.constantViolations.push(path.get("argument"));
	  },

	  UnaryExpression: function UnaryExpression(path, state) {
	    if (path.node.operator === "delete") {
	      state.constantViolations.push(path.get("argument"));
	    }
	  },

	  BlockScoped: function BlockScoped(path) {
	    var scope = path.scope;
	    if (scope.path === path) scope = scope.parent;
	    scope.getBlockParent().registerDeclaration(path);
	  },

	  ClassDeclaration: function ClassDeclaration(path) {
	    var id = path.node.id;
	    if (!id) return;

	    var name = id.name;
	    path.scope.bindings[name] = path.scope.getBinding(name);
	  },

	  Block: function Block(path) {
	    var paths = path.get("body");
	    for (var _iterator4 = (paths /*: Array*/), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	      var _ref4;

	      if (_isArray4) {
	        if (_i4 >= _iterator4.length) break;
	        _ref4 = _iterator4[_i4++];
	      } else {
	        _i4 = _iterator4.next();
	        if (_i4.done) break;
	        _ref4 = _i4.value;
	      }

	      var bodyPath = _ref4;

	      if (bodyPath.isFunctionDeclaration()) {
	        path.scope.getBlockParent().registerDeclaration(bodyPath);
	      }
	    }
	  }
	};

	var uid = 0;

	var Scope = (function () {

	  /**
	   * This searches the current "scope" and collects all references/bindings
	   * within.
	   */

	  function Scope(path /*: NodePath*/, parentScope /*:: ?: Scope*/) {
	    _classCallCheck(this, Scope);

	    if (parentScope && parentScope.block === path.node) {
	      return parentScope;
	    }

	    var cached = getCache(path.node, parentScope, this);
	    if (cached) return cached;

	    this.uid = uid++;
	    this.parent = parentScope;
	    this.hub = path.hub;

	    this.parentBlock = path.parent;
	    this.block = path.node;
	    this.path = path;
	  }

	  /**
	   * Globals.
	   */

	  /**
	   * Traverse node with current scope and path.
	   */

	  Scope.prototype.traverse = function traverse(node /*: Object*/, opts /*: Object*/, state /*:: ?*/) {
	    _index2["default"](node, opts, this, state, this.path);
	  };

	  /**
	   * Generate a unique identifier and add it to the current scope.
	   */

	  Scope.prototype.generateDeclaredUidIdentifier = function generateDeclaredUidIdentifier() {
	    var name /*: string*/ = arguments.length <= 0 || arguments[0] === undefined ? "temp" : arguments[0];

	    var id = this.generateUidIdentifier(name);
	    this.push({ id: id });
	    return id;
	  };

	  /**
	   * Generate a unique identifier.
	   */

	  Scope.prototype.generateUidIdentifier = function generateUidIdentifier() {
	    var name /*: string*/ = arguments.length <= 0 || arguments[0] === undefined ? "temp" : arguments[0];

	    return t.identifier(this.generateUid(name));
	  };

	  /**
	   * Generate a unique `_id1` binding.
	   */

	  Scope.prototype.generateUid = function generateUid() {
	    var name /*: string*/ = arguments.length <= 0 || arguments[0] === undefined ? "temp" : arguments[0];

	    name = t.toIdentifier(name).replace(/^_+/, "").replace(/[0-9]+$/g, "");

	    var uid = undefined;
	    var i = 0;
	    do {
	      uid = this._generateUid(name, i);
	      i++;
	    } while (this.hasBinding(uid) || this.hasGlobal(uid) || this.hasReference(uid));

	    var program = this.getProgramParent();
	    program.references[uid] = true;
	    program.uids[uid] = true;

	    return uid;
	  };

	  /**
	   * Generate an `_id1`.
	   */

	  Scope.prototype._generateUid = function _generateUid(name, i) {
	    var id = name;
	    if (i > 1) id += i;
	    return "_" + id;
	  };

	  /**
	   * Generate a unique identifier based on a node.
	   */

	  Scope.prototype.generateUidIdentifierBasedOnNode = function generateUidIdentifierBasedOnNode(parent /*: Object*/, defaultName /*:: ?: String*/) /*:  Object*/ {
	    var node = parent;

	    if (t.isAssignmentExpression(parent)) {
	      node = parent.left;
	    } else if (t.isVariableDeclarator(parent)) {
	      node = parent.id;
	    } else if (t.isObjectProperty(node) || t.isObjectMethod(node)) {
	      node = node.key;
	    }

	    var parts = [];

	    var add = function add(node) {
	      if (t.isModuleDeclaration(node)) {
	        if (node.source) {
	          add(node.source);
	        } else if (node.specifiers && node.specifiers.length) {
	          for (var _iterator5 = (node.specifiers /*: Array*/), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
	            var _ref5;

	            if (_isArray5) {
	              if (_i5 >= _iterator5.length) break;
	              _ref5 = _iterator5[_i5++];
	            } else {
	              _i5 = _iterator5.next();
	              if (_i5.done) break;
	              _ref5 = _i5.value;
	            }

	            var specifier = _ref5;

	            add(specifier);
	          }
	        } else if (node.declaration) {
	          add(node.declaration);
	        }
	      } else if (t.isModuleSpecifier(node)) {
	        add(node.local);
	      } else if (t.isMemberExpression(node)) {
	        add(node.object);
	        add(node.property);
	      } else if (t.isIdentifier(node)) {
	        parts.push(node.name);
	      } else if (t.isLiteral(node)) {
	        parts.push(node.value);
	      } else if (t.isCallExpression(node)) {
	        add(node.callee);
	      } else if (t.isObjectExpression(node) || t.isObjectPattern(node)) {
	        for (var _iterator6 = (node.properties /*: Array*/), _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _getIterator(_iterator6);;) {
	          var _ref6;

	          if (_isArray6) {
	            if (_i6 >= _iterator6.length) break;
	            _ref6 = _iterator6[_i6++];
	          } else {
	            _i6 = _iterator6.next();
	            if (_i6.done) break;
	            _ref6 = _i6.value;
	          }

	          var prop = _ref6;

	          add(prop.key || prop.argument);
	        }
	      }
	    };

	    add(node);

	    var id = parts.join("$");
	    id = id.replace(/^_/, "") || defaultName || "ref";

	    return this.generateUidIdentifier(id.slice(0, 20));
	  };

	  /**
	   * Determine whether evaluating the specific input `node` is a consequenceless reference. ie.
	   * evaluating it wont result in potentially arbitrary code from being ran. The following are
	   * whitelisted and determined not to cause side effects:
	   *
	   *  - `this` expressions
	   *  - `super` expressions
	   *  - Bound identifiers
	   */

	  Scope.prototype.isStatic = function isStatic(node /*: Object*/) /*: boolean*/ {
	    if (t.isThisExpression(node) || t.isSuper(node)) {
	      return true;
	    }

	    if (t.isIdentifier(node)) {
	      var binding = this.getBinding(node.name);
	      if (binding) {
	        return binding.constant;
	      } else {
	        return this.hasBinding(node.name);
	      }
	    }

	    return false;
	  };

	  /**
	   * Possibly generate a memoised identifier if it is not static and has consequences.
	   */

	  Scope.prototype.maybeGenerateMemoised = function maybeGenerateMemoised(node /*: Object*/, dontPush /*:: ?: boolean*/) /*: ?Object*/ {
	    if (this.isStatic(node)) {
	      return null;
	    } else {
	      var _id2 = this.generateUidIdentifierBasedOnNode(node);
	      if (!dontPush) this.push({ id: _id2 });
	      return _id2;
	    }
	  };

	  Scope.prototype.checkBlockScopedCollisions = function checkBlockScopedCollisions(local, kind /*: string*/, name /*: string*/, id /*: Object*/) {
	    // ignore parameters
	    if (kind === "param") return;

	    // ignore hoisted functions if there's also a local let
	    if (kind === "hoisted" && local.kind === "let") return;

	    var duplicate = false;

	    // don't allow duplicate bindings to exist alongside
	    if (!duplicate) duplicate = kind === "let" || local.kind === "let" || local.kind === "const" || local.kind === "module";

	    // don't allow a local of param with a kind of let
	    if (!duplicate) duplicate = local.kind === "param" && (kind === "let" || kind === "const");

	    if (duplicate) {
	      throw this.hub.file.buildCodeFrameError(id, messages.get("scopeDuplicateDeclaration", name), TypeError);
	    }
	  };

	  Scope.prototype.rename = function rename(oldName /*: string*/, newName /*: string*/, block /*:: ?*/) {
	    var binding = this.getBinding(oldName);
	    if (binding) {
	      newName = newName || this.generateUidIdentifier(oldName).name;
	      return new _libRenamer2["default"](binding, oldName, newName).rename(block);
	    }
	  };

	  Scope.prototype._renameFromMap = function _renameFromMap(map, oldName, newName, value) {
	    if (map[oldName]) {
	      map[newName] = value;
	      map[oldName] = null;
	    }
	  };

	  Scope.prototype.dump = function dump() {
	    var sep = _repeating2["default"]("-", 60);
	    console.log(sep);
	    var scope = this;
	    do {
	      console.log("#", scope.block.type);
	      for (var _name2 in scope.bindings) {
	        var binding = scope.bindings[_name2];
	        console.log(" -", _name2, {
	          constant: binding.constant,
	          references: binding.references,
	          violations: binding.constantViolations.length,
	          kind: binding.kind
	        });
	      }
	    } while (scope = scope.parent);
	    console.log(sep);
	  };

	  Scope.prototype.toArray = function toArray(node /*: Object*/, i /*:: ?: number*/) {
	    var file = this.hub.file;

	    if (t.isIdentifier(node)) {
	      var binding = this.getBinding(node.name);
	      if (binding && binding.constant && binding.path.isGenericType("Array")) return node;
	    }

	    if (t.isArrayExpression(node)) {
	      return node;
	    }

	    if (t.isIdentifier(node, { name: "arguments" })) {
	      return t.callExpression(t.memberExpression(t.memberExpression(t.memberExpression(t.identifier("Array"), t.identifier("prototype")), t.identifier("slice")), t.identifier("call")), [node]);
	    }

	    var helperName = "toArray";
	    var args = [node];
	    if (i === true) {
	      helperName = "toConsumableArray";
	    } else if (i) {
	      args.push(t.numericLiteral(i));
	      helperName = "slicedToArray";
	      // TODO if (this.hub.file.isLoose("es6.forOf")) helperName += "-loose";
	    }
	    return t.callExpression(file.addHelper(helperName), args);
	  };

	  Scope.prototype.registerDeclaration = function registerDeclaration(path /*: NodePath*/) {
	    if (path.isLabeledStatement()) {
	      this.registerBinding("label", path);
	    } else if (path.isFunctionDeclaration()) {
	      this.registerBinding("hoisted", path.get("id"), path);
	    } else if (path.isVariableDeclaration()) {
	      var declarations = path.get("declarations");
	      for (var _iterator7 = (declarations /*: Array*/), _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _getIterator(_iterator7);;) {
	        var _ref7;

	        if (_isArray7) {
	          if (_i7 >= _iterator7.length) break;
	          _ref7 = _iterator7[_i7++];
	        } else {
	          _i7 = _iterator7.next();
	          if (_i7.done) break;
	          _ref7 = _i7.value;
	        }

	        var declar = _ref7;

	        this.registerBinding(path.node.kind, declar);
	      }
	    } else if (path.isClassDeclaration()) {
	      this.registerBinding("let", path);
	    } else if (path.isImportDeclaration()) {
	      var specifiers = path.get("specifiers");
	      for (var _iterator8 = (specifiers /*: Array*/), _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : _getIterator(_iterator8);;) {
	        var _ref8;

	        if (_isArray8) {
	          if (_i8 >= _iterator8.length) break;
	          _ref8 = _iterator8[_i8++];
	        } else {
	          _i8 = _iterator8.next();
	          if (_i8.done) break;
	          _ref8 = _i8.value;
	        }

	        var specifier = _ref8;

	        this.registerBinding("module", specifier);
	      }
	    } else if (path.isExportDeclaration()) {
	      var declar = path.get("declaration");
	      if (declar.isClassDeclaration() || declar.isFunctionDeclaration() || declar.isVariableDeclaration()) {
	        this.registerDeclaration(declar);
	      }
	    } else {
	      this.registerBinding("unknown", path);
	    }
	  };

	  Scope.prototype.buildUndefinedNode = function buildUndefinedNode() {
	    if (this.hasBinding("undefined")) {
	      return t.unaryExpression("void", t.numericLiteral(0), true);
	    } else {
	      return t.identifier("undefined");
	    }
	  };

	  Scope.prototype.registerConstantViolation = function registerConstantViolation(path /*: NodePath*/) {
	    var ids = path.getBindingIdentifiers();
	    for (var _name3 in ids) {
	      var binding = this.getBinding(_name3);
	      if (binding) binding.reassign(path);
	    }
	  };

	  Scope.prototype.registerBinding = function registerBinding(kind /*: string*/, path /*: NodePath*/) {
	    var bindingPath = arguments.length <= 2 || arguments[2] === undefined ? path : arguments[2];
	    return (function () {
	      if (!kind) throw new ReferenceError("no `kind`");

	      if (path.isVariableDeclaration()) {
	        var declarators /*: Array<NodePath>*/ = path.get("declarations");
	        for (var _iterator9 = declarators, _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : _getIterator(_iterator9);;) {
	          var _ref9;

	          if (_isArray9) {
	            if (_i9 >= _iterator9.length) break;
	            _ref9 = _iterator9[_i9++];
	          } else {
	            _i9 = _iterator9.next();
	            if (_i9.done) break;
	            _ref9 = _i9.value;
	          }

	          var declar = _ref9;

	          this.registerBinding(kind, declar);
	        }
	        return;
	      }

	      var parent = this.getProgramParent();
	      var ids = path.getBindingIdentifiers(true);

	      for (var _name4 in ids) {
	        for (var _iterator10 = (ids[_name4] /*: Array<Object>*/), _isArray10 = Array.isArray(_iterator10), _i10 = 0, _iterator10 = _isArray10 ? _iterator10 : _getIterator(_iterator10);;) {
	          var _ref10;

	          if (_isArray10) {
	            if (_i10 >= _iterator10.length) break;
	            _ref10 = _iterator10[_i10++];
	          } else {
	            _i10 = _iterator10.next();
	            if (_i10.done) break;
	            _ref10 = _i10.value;
	          }

	          var _id3 = _ref10;

	          var local = this.getOwnBinding(_name4);
	          if (local) {
	            // same identifier so continue safely as we're likely trying to register it
	            // multiple times
	            if (local.identifier === _id3) continue;

	            this.checkBlockScopedCollisions(local, kind, _name4, _id3);
	          }

	          parent.references[_name4] = true;

	          this.bindings[_name4] = new _binding2["default"]({
	            identifier: _id3,
	            existing: local,
	            scope: this,
	            path: bindingPath,
	            kind: kind
	          });
	        }
	      }
	    }).apply(this, arguments);
	  };

	  Scope.prototype.addGlobal = function addGlobal(node /*: Object*/) {
	    this.globals[node.name] = node;
	  };

	  Scope.prototype.hasUid = function hasUid(name) /*: boolean*/ {
	    var scope = this;

	    do {
	      if (scope.uids[name]) return true;
	    } while (scope = scope.parent);

	    return false;
	  };

	  Scope.prototype.hasGlobal = function hasGlobal(name /*: string*/) /*: boolean*/ {
	    var scope = this;

	    do {
	      if (scope.globals[name]) return true;
	    } while (scope = scope.parent);

	    return false;
	  };

	  Scope.prototype.hasReference = function hasReference(name /*: string*/) /*: boolean*/ {
	    var scope = this;

	    do {
	      if (scope.references[name]) return true;
	    } while (scope = scope.parent);

	    return false;
	  };

	  Scope.prototype.isPure = function isPure(node, constantsOnly /*:: ?: boolean*/) {
	    if (t.isIdentifier(node)) {
	      var binding = this.getBinding(node.name);
	      if (!binding) return false;
	      if (constantsOnly) return binding.constant;
	      return true;
	    } else if (t.isClass(node)) {
	      if (node.superClass && !this.isPure(node.superClass, constantsOnly)) return false;
	      return this.isPure(node.body, constantsOnly);
	    } else if (t.isClassBody(node)) {
	      for (var _iterator11 = node.body, _isArray11 = Array.isArray(_iterator11), _i11 = 0, _iterator11 = _isArray11 ? _iterator11 : _getIterator(_iterator11);;) {
	        var _ref11;

	        if (_isArray11) {
	          if (_i11 >= _iterator11.length) break;
	          _ref11 = _iterator11[_i11++];
	        } else {
	          _i11 = _iterator11.next();
	          if (_i11.done) break;
	          _ref11 = _i11.value;
	        }

	        var method = _ref11;

	        if (!this.isPure(method, constantsOnly)) return false;
	      }
	      return true;
	    } else if (t.isBinary(node)) {
	      return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);
	    } else if (t.isArrayExpression(node)) {
	      for (var _iterator12 = (node.elements /*: Array<Object>*/), _isArray12 = Array.isArray(_iterator12), _i12 = 0, _iterator12 = _isArray12 ? _iterator12 : _getIterator(_iterator12);;) {
	        var _ref12;

	        if (_isArray12) {
	          if (_i12 >= _iterator12.length) break;
	          _ref12 = _iterator12[_i12++];
	        } else {
	          _i12 = _iterator12.next();
	          if (_i12.done) break;
	          _ref12 = _i12.value;
	        }

	        var elem = _ref12;

	        if (!this.isPure(elem, constantsOnly)) return false;
	      }
	      return true;
	    } else if (t.isObjectExpression(node)) {
	      for (var _iterator13 = (node.properties /*: Array<Object>*/), _isArray13 = Array.isArray(_iterator13), _i13 = 0, _iterator13 = _isArray13 ? _iterator13 : _getIterator(_iterator13);;) {
	        var _ref13;

	        if (_isArray13) {
	          if (_i13 >= _iterator13.length) break;
	          _ref13 = _iterator13[_i13++];
	        } else {
	          _i13 = _iterator13.next();
	          if (_i13.done) break;
	          _ref13 = _i13.value;
	        }

	        var prop = _ref13;

	        if (!this.isPure(prop, constantsOnly)) return false;
	      }
	      return true;
	    } else if (t.isClassMethod(node)) {
	      if (node.computed && !this.isPure(node.key, constantsOnly)) return false;
	      if (node.kind === "get" || node.kind === "set") return false;
	      return true;
	    } else if (t.isClassProperty(node) || t.isObjectProperty(node)) {
	      if (node.computed && !this.isPure(node.key, constantsOnly)) return false;
	      return this.isPure(node.value, constantsOnly);
	    } else if (t.isUnaryExpression(node)) {
	      return this.isPure(node.argument, constantsOnly);
	    } else {
	      return t.isPureish(node);
	    }
	  };

	  /**
	   * Set some arbitrary data on the current scope.
	   */

	  Scope.prototype.setData = function setData(key, val) {
	    return this.data[key] = val;
	  };

	  /**
	   * Recursively walk up scope tree looking for the data `key`.
	   */

	  Scope.prototype.getData = function getData(key) {
	    var scope = this;
	    do {
	      var data = scope.data[key];
	      if (data != null) return data;
	    } while (scope = scope.parent);
	  };

	  /**
	   * Recursively walk up scope tree looking for the data `key` and if it exists,
	   * remove it.
	   */

	  Scope.prototype.removeData = function removeData(key) {
	    var scope = this;
	    do {
	      var data = scope.data[key];
	      if (data != null) scope.data[key] = null;
	    } while (scope = scope.parent);
	  };

	  Scope.prototype.init = function init() {
	    if (!this.references) this.crawl();
	  };

	  Scope.prototype.crawl = function crawl() {
	    var path = this.path;

	    //

	    this.references = _Object$create(null);
	    this.bindings = _Object$create(null);
	    this.globals = _Object$create(null);
	    this.uids = _Object$create(null);
	    this.data = _Object$create(null);

	    // ForStatement - left, init

	    if (path.isLoop()) {
	      for (var _iterator14 = (t.FOR_INIT_KEYS /*: Array<string>*/), _isArray14 = Array.isArray(_iterator14), _i14 = 0, _iterator14 = _isArray14 ? _iterator14 : _getIterator(_iterator14);;) {
	        var _ref14;

	        if (_isArray14) {
	          if (_i14 >= _iterator14.length) break;
	          _ref14 = _iterator14[_i14++];
	        } else {
	          _i14 = _iterator14.next();
	          if (_i14.done) break;
	          _ref14 = _i14.value;
	        }

	        var key = _ref14;

	        var node = path.get(key);
	        if (node.isBlockScoped()) this.registerBinding(node.node.kind, node);
	      }
	    }

	    // FunctionExpression - id

	    if (path.isFunctionExpression() && path.has("id")) {
	      this.registerBinding("local", path.get("id"), path);
	    }

	    // Class

	    if (path.isClassExpression() && path.has("id")) {
	      this.registerBinding("local", path);
	    }

	    // Function - params, rest

	    if (path.isFunction()) {
	      var params /*: Array<NodePath>*/ = path.get("params");
	      for (var _iterator15 = params, _isArray15 = Array.isArray(_iterator15), _i15 = 0, _iterator15 = _isArray15 ? _iterator15 : _getIterator(_iterator15);;) {
	        var _ref15;

	        if (_isArray15) {
	          if (_i15 >= _iterator15.length) break;
	          _ref15 = _iterator15[_i15++];
	        } else {
	          _i15 = _iterator15.next();
	          if (_i15.done) break;
	          _ref15 = _i15.value;
	        }

	        var param = _ref15;

	        this.registerBinding("param", param);
	      }
	    }

	    // CatchClause - param

	    if (path.isCatchClause()) {
	      this.registerBinding("let", path);
	    }

	    // Program

	    var parent = this.getProgramParent();
	    if (parent.crawling) return;

	    var state = {
	      references: [],
	      constantViolations: [],
	      assignments: []
	    };

	    this.crawling = true;
	    path.traverse(collectorVisitor, state);
	    this.crawling = false;

	    // register assignments
	    for (var _iterator16 = state.assignments, _isArray16 = Array.isArray(_iterator16), _i16 = 0, _iterator16 = _isArray16 ? _iterator16 : _getIterator(_iterator16);;) {
	      var _ref16;

	      if (_isArray16) {
	        if (_i16 >= _iterator16.length) break;
	        _ref16 = _iterator16[_i16++];
	      } else {
	        _i16 = _iterator16.next();
	        if (_i16.done) break;
	        _ref16 = _i16.value;
	      }

	      var _path = _ref16;

	      // register undeclared bindings as globals
	      var ids = _path.getBindingIdentifiers();
	      var programParent = undefined;
	      for (var _name5 in ids) {
	        if (_path.scope.getBinding(_name5)) continue;

	        programParent = programParent || _path.scope.getProgramParent();
	        programParent.addGlobal(ids[_name5]);
	      }

	      // register as constant violation
	      _path.scope.registerConstantViolation(_path);
	    }

	    // register references
	    for (var _iterator17 = state.references, _isArray17 = Array.isArray(_iterator17), _i17 = 0, _iterator17 = _isArray17 ? _iterator17 : _getIterator(_iterator17);;) {
	      var _ref17;

	      if (_isArray17) {
	        if (_i17 >= _iterator17.length) break;
	        _ref17 = _iterator17[_i17++];
	      } else {
	        _i17 = _iterator17.next();
	        if (_i17.done) break;
	        _ref17 = _i17.value;
	      }

	      var ref = _ref17;

	      var binding = ref.scope.getBinding(ref.node.name);
	      if (binding) {
	        binding.reference(ref);
	      } else {
	        ref.scope.getProgramParent().addGlobal(ref.node);
	      }
	    }

	    // register constant violations
	    for (var _iterator18 = state.constantViolations, _isArray18 = Array.isArray(_iterator18), _i18 = 0, _iterator18 = _isArray18 ? _iterator18 : _getIterator(_iterator18);;) {
	      var _ref18;

	      if (_isArray18) {
	        if (_i18 >= _iterator18.length) break;
	        _ref18 = _iterator18[_i18++];
	      } else {
	        _i18 = _iterator18.next();
	        if (_i18.done) break;
	        _ref18 = _i18.value;
	      }

	      var _path2 = _ref18;

	      _path2.scope.registerConstantViolation(_path2);
	    }
	  };

	  Scope.prototype.push = function push(opts /*: {
	                                                id: Object;
	                                                init: ?Object;
	                                                unique: ?boolean;
	                                                _blockHoist: ?number;
	                                                kind: "var" | "let";
	                                              }*/) {
	    var path = this.path;

	    if (!path.isBlockStatement() && !path.isProgram()) {
	      path = this.getBlockParent().path;
	    }

	    if (path.isSwitchStatement()) {
	      path = this.getFunctionParent().path;
	    }

	    if (path.isLoop() || path.isCatchClause() || path.isFunction()) {
	      t.ensureBlock(path.node);
	      path = path.get("body");
	    }

	    var unique = opts.unique;
	    var kind = opts.kind || "var";
	    var blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;

	    var dataKey = "declaration:" + kind + ":" + blockHoist;
	    var declarPath = !unique && path.getData(dataKey);

	    if (!declarPath) {
	      var declar = t.variableDeclaration(kind, []);
	      declar._generated = true;
	      declar._blockHoist = blockHoist;

	      var _path$unshiftContainer = path.unshiftContainer("body", [declar]);

	      declarPath = _path$unshiftContainer[0];

	      if (!unique) path.setData(dataKey, declarPath);
	    }

	    var declarator = t.variableDeclarator(opts.id, opts.init);
	    declarPath.node.declarations.push(declarator);
	    this.registerBinding(kind, declarPath.get("declarations").pop());
	  };

	  /**
	   * Walk up to the top of the scope tree and get the `Program`.
	   */

	  Scope.prototype.getProgramParent = function getProgramParent() {
	    var scope = this;
	    do {
	      if (scope.path.isProgram()) {
	        return scope;
	      }
	    } while (scope = scope.parent);
	    throw new Error("We couldn't find a Function or Program...");
	  };

	  /**
	   * Walk up the scope tree until we hit either a Function or reach the
	   * very top and hit Program.
	   */

	  Scope.prototype.getFunctionParent = function getFunctionParent() {
	    var scope = this;
	    do {
	      if (scope.path.isFunctionParent()) {
	        return scope;
	      }
	    } while (scope = scope.parent);
	    throw new Error("We couldn't find a Function or Program...");
	  };

	  /**
	   * Walk up the scope tree until we hit either a BlockStatement/Loop/Program/Function/Switch or reach the
	   * very top and hit Program.
	   */

	  Scope.prototype.getBlockParent = function getBlockParent() {
	    var scope = this;
	    do {
	      if (scope.path.isBlockParent()) {
	        return scope;
	      }
	    } while (scope = scope.parent);
	    throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
	  };

	  /**
	   * Walks the scope tree and gathers **all** bindings.
	   */

	  Scope.prototype.getAllBindings = function getAllBindings() /*: Object*/ {
	    var ids = _Object$create(null);

	    var scope = this;
	    do {
	      _lodashObjectDefaults2["default"](ids, scope.bindings);
	      scope = scope.parent;
	    } while (scope);

	    return ids;
	  };

	  /**
	   * Walks the scope tree and gathers all declarations of `kind`.
	   */

	  Scope.prototype.getAllBindingsOfKind = function getAllBindingsOfKind() /*: Object*/ {
	    var ids = _Object$create(null);

	    for (var _iterator19 = (arguments /*: Array*/), _isArray19 = Array.isArray(_iterator19), _i19 = 0, _iterator19 = _isArray19 ? _iterator19 : _getIterator(_iterator19);;) {
	      var _ref19;

	      if (_isArray19) {
	        if (_i19 >= _iterator19.length) break;
	        _ref19 = _iterator19[_i19++];
	      } else {
	        _i19 = _iterator19.next();
	        if (_i19.done) break;
	        _ref19 = _i19.value;
	      }

	      var kind = _ref19;

	      var scope = this;
	      do {
	        for (var _name6 in scope.bindings) {
	          var binding = scope.bindings[_name6];
	          if (binding.kind === kind) ids[_name6] = binding;
	        }
	        scope = scope.parent;
	      } while (scope);
	    }

	    return ids;
	  };

	  Scope.prototype.bindingIdentifierEquals = function bindingIdentifierEquals(name /*: string*/, node /*: Object*/) /*: boolean*/ {
	    return this.getBindingIdentifier(name) === node;
	  };

	  Scope.prototype.getBinding = function getBinding(name /*: string*/) {
	    var scope = this;

	    do {
	      var binding = scope.getOwnBinding(name);
	      if (binding) return binding;
	    } while (scope = scope.parent);
	  };

	  Scope.prototype.getOwnBinding = function getOwnBinding(name /*: string*/) {
	    return this.bindings[name];
	  };

	  Scope.prototype.getBindingIdentifier = function getBindingIdentifier(name /*: string*/) {
	    var info = this.getBinding(name);
	    return info && info.identifier;
	  };

	  Scope.prototype.getOwnBindingIdentifier = function getOwnBindingIdentifier(name /*: string*/) {
	    var binding = this.bindings[name];
	    return binding && binding.identifier;
	  };

	  Scope.prototype.hasOwnBinding = function hasOwnBinding(name /*: string*/) {
	    return !!this.getOwnBinding(name);
	  };

	  Scope.prototype.hasBinding = function hasBinding(name /*: string*/, noGlobals /*:: ?*/) {
	    if (!name) return false;
	    if (this.hasOwnBinding(name)) return true;
	    if (this.parentHasBinding(name, noGlobals)) return true;
	    if (this.hasUid(name)) return true;
	    if (!noGlobals && _lodashCollectionIncludes2["default"](Scope.globals, name)) return true;
	    if (!noGlobals && _lodashCollectionIncludes2["default"](Scope.contextVariables, name)) return true;
	    return false;
	  };

	  Scope.prototype.parentHasBinding = function parentHasBinding(name /*: string*/, noGlobals /*:: ?*/) {
	    return this.parent && this.parent.hasBinding(name, noGlobals);
	  };

	  /**
	   * Move a binding of `name` to another `scope`.
	   */

	  Scope.prototype.moveBindingTo = function moveBindingTo(name, scope) {
	    var info = this.getBinding(name);
	    if (info) {
	      info.scope.removeOwnBinding(name);
	      info.scope = scope;
	      scope.bindings[name] = info;
	    }
	  };

	  Scope.prototype.removeOwnBinding = function removeOwnBinding(name /*: string*/) {
	    delete this.bindings[name];
	  };

	  Scope.prototype.removeBinding = function removeBinding(name /*: string*/) {
	    // clear literal binding
	    var info = this.getBinding(name);
	    if (info) {
	      info.scope.removeOwnBinding(name);
	    }

	    // clear uids with this name - https://github.com/babel/babel/issues/2101
	    var scope = this;
	    do {
	      if (scope.uids[name]) {
	        scope.uids[name] = false;
	      }
	    } while (scope = scope.parent);
	  };

	  return Scope;
	})();

	exports["default"] = Scope;
	module.exports = exports["default"];

	/**
	 * Variables available in current context.
	 */

/***/ },
/* 7107 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	"use strict";

	var _classCallCheck = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	exports.__esModule = true;

	var _binding = __webpack_require__(__webpack_module_template_argument_3__);

	var _binding2 = _interopRequireDefault(_binding);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_4__);

	var t = _interopRequireWildcard(_babelTypes);

	var renameVisitor = {
	  ReferencedIdentifier: function ReferencedIdentifier(_ref, state) {
	    var node = _ref.node;

	    if (node.name === state.oldName) {
	      node.name = state.newName;
	    }
	  },

	  Scope: function Scope(path, state) {
	    if (!path.scope.bindingIdentifierEquals(state.oldName, state.binding.identifier)) {
	      path.skip();
	    }
	  },

	  "AssignmentExpression|Declaration": function AssignmentExpressionDeclaration(path, state) {
	    var ids = path.getOuterBindingIdentifiers();

	    for (var _name in ids) {
	      if (_name === state.oldName) ids[_name].name = state.newName;
	    }
	  }
	};

	var Renamer = (function () {
	  function Renamer(binding /*: Binding*/, oldName /*: string*/, newName /*: string*/) {
	    _classCallCheck(this, Renamer);

	    this.newName = newName;
	    this.oldName = oldName;
	    this.binding = binding;
	  }

	  Renamer.prototype.maybeConvertFromExportDeclaration = function maybeConvertFromExportDeclaration(parentDeclar) {
	    var exportDeclar = parentDeclar.parentPath.isExportDeclaration() && parentDeclar.parentPath;
	    if (!exportDeclar) return;

	    // build specifiers that point back to this export declaration
	    var isDefault = exportDeclar.isExportDefaultDeclaration();

	    if (isDefault && (parentDeclar.isFunctionDeclaration() || parentDeclar.isClassDeclaration()) && !parentDeclar.node.id) {
	      // Ensure that default class and function exports have a name so they have a identifier to
	      // reference from the export specifier list.
	      parentDeclar.node.id = parentDeclar.scope.generateUidIdentifier("default");
	    }

	    var bindingIdentifiers = parentDeclar.getOuterBindingIdentifiers();
	    var specifiers = [];

	    for (var _name2 in bindingIdentifiers) {
	      var localName = _name2 === this.oldName ? this.newName : _name2;
	      var exportedName = isDefault ? "default" : _name2;
	      specifiers.push(t.exportSpecifier(t.identifier(localName), t.identifier(exportedName)));
	    }

	    var aliasDeclar = t.exportNamedDeclaration(null, specifiers);

	    // hoist to the top if it's a function
	    if (parentDeclar.isFunctionDeclaration()) {
	      aliasDeclar._blockHoist = 3;
	    }

	    exportDeclar.insertAfter(aliasDeclar);
	    exportDeclar.replaceWith(parentDeclar.node);
	  };

	  Renamer.prototype.maybeConvertFromClassFunctionDeclaration = function maybeConvertFromClassFunctionDeclaration(path) {
	    return; // TODO

	    // retain the `name` of a class/function declaration

	    if (!path.isFunctionDeclaration() && !path.isClassDeclaration()) return;
	    if (this.binding.kind !== "hoisted") return;

	    path.node.id = t.identifier(this.oldName);
	    path.node._blockHoist = 3;

	    path.replaceWith(t.variableDeclaration("let", [t.variableDeclarator(t.identifier(this.newName), t.toExpression(path.node))]));
	  };

	  Renamer.prototype.maybeConvertFromClassFunctionExpression = function maybeConvertFromClassFunctionExpression(path) {
	    return; // TODO

	    // retain the `name` of a class/function expression

	    if (!path.isFunctionExpression() && !path.isClassExpression()) return;
	    if (this.binding.kind !== "local") return;

	    path.node.id = t.identifier(this.oldName);

	    this.binding.scope.parent.push({
	      id: t.identifier(this.newName)
	    });

	    path.replaceWith(t.assignmentExpression("=", t.identifier(this.newName), path.node));
	  };

	  Renamer.prototype.rename = function rename(block /*:: ?*/) {
	    var binding = this.binding;
	    var oldName = this.oldName;
	    var newName = this.newName;
	    var scope = binding.scope;
	    var path = binding.path;

	    var parentDeclar = path.find(function (path) {
	      return path.isDeclaration() || path.isFunctionExpression();
	    });
	    if (parentDeclar) {
	      this.maybeConvertFromExportDeclaration(parentDeclar);
	    }

	    scope.traverse(block || scope.block, renameVisitor, this);

	    if (!block) {
	      scope.removeOwnBinding(oldName);
	      scope.bindings[newName] = binding;
	      this.binding.identifier.name = newName;
	    }

	    if (binding.type === "hoisted") {
	      // https://github.com/babel/babel/issues/2435
	      // todo: hoist and convert function to a let
	    }

	    if (parentDeclar) {
	      this.maybeConvertFromClassFunctionDeclaration(parentDeclar);
	      this.maybeConvertFromClassFunctionExpression(parentDeclar);
	    }
	  };

	  return Renamer;
	})();

	exports["default"] = Renamer;
	module.exports = exports["default"];

/***/ },
/* 7108 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__, __webpack_module_template_argument_7__) {

	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _Object$keys = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_3__)["default"];

	exports.__esModule = true;
	exports.explode = explode;
	exports.verify = verify;
	exports.merge = merge;

	var _pathLibVirtualTypes = __webpack_require__(__webpack_module_template_argument_4__);

	var virtualTypes = _interopRequireWildcard(_pathLibVirtualTypes);

	var _babelMessages = __webpack_require__(__webpack_module_template_argument_5__);

	var messages = _interopRequireWildcard(_babelMessages);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_6__);

	var t = _interopRequireWildcard(_babelTypes);

	var _lodashLangClone = __webpack_require__(__webpack_module_template_argument_7__);

	var _lodashLangClone2 = _interopRequireDefault(_lodashLangClone);

	function explode(visitor) {
	  if (visitor._exploded) return visitor;
	  visitor._exploded = true;

	  // normalise pipes
	  for (var nodeType in visitor) {
	    if (shouldIgnoreKey(nodeType)) continue;

	    var parts /*: Array<string>*/ = nodeType.split("|");
	    if (parts.length === 1) continue;

	    var fns = visitor[nodeType];
	    delete visitor[nodeType];

	    for (var _iterator = parts, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var part = _ref;

	      visitor[part] = fns;
	    }
	  }

	  // verify data structure
	  verify(visitor);

	  // make sure there's no __esModule type since this is because we're using loose mode
	  // and it sets __esModule to be enumerable on all modules :(
	  delete visitor.__esModule;

	  // ensure visitors are objects
	  ensureEntranceObjects(visitor);

	  // ensure enter/exit callbacks are arrays
	  ensureCallbackArrays(visitor);

	  // add type wrappers
	  for (var _iterator2 = (_Object$keys(visitor) /*: Array*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	    var _ref2;

	    if (_isArray2) {
	      if (_i2 >= _iterator2.length) break;
	      _ref2 = _iterator2[_i2++];
	    } else {
	      _i2 = _iterator2.next();
	      if (_i2.done) break;
	      _ref2 = _i2.value;
	    }

	    var nodeType = _ref2;

	    if (shouldIgnoreKey(nodeType)) continue;

	    var wrapper = virtualTypes[nodeType];
	    if (!wrapper) continue;

	    // wrap all the functions
	    var fns = visitor[nodeType];
	    for (var type in fns) {
	      fns[type] = wrapCheck(wrapper, fns[type]);
	    }

	    // clear it from the visitor
	    delete visitor[nodeType];

	    if (wrapper.types) {
	      for (var _iterator3 = (wrapper.types /*: Array<string>*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	        var _ref3;

	        if (_isArray3) {
	          if (_i3 >= _iterator3.length) break;
	          _ref3 = _iterator3[_i3++];
	        } else {
	          _i3 = _iterator3.next();
	          if (_i3.done) break;
	          _ref3 = _i3.value;
	        }

	        var type = _ref3;

	        // merge the visitor if necessary or just put it back in
	        if (visitor[type]) {
	          mergePair(visitor[type], fns);
	        } else {
	          visitor[type] = fns;
	        }
	      }
	    } else {
	      mergePair(visitor, fns);
	    }
	  }

	  // add aliases
	  for (var nodeType in visitor) {
	    if (shouldIgnoreKey(nodeType)) continue;

	    var fns = visitor[nodeType];

	    var aliases /*: ?Array<string>*/ = t.FLIPPED_ALIAS_KEYS[nodeType];

	    var deprecratedKey = t.DEPRECATED_KEYS[nodeType];
	    if (deprecratedKey) {
	      console.trace("Visitor defined for " + nodeType + " but it has been renamed to " + deprecratedKey);
	      aliases = [deprecratedKey];
	    }

	    if (!aliases) continue;

	    // clear it from the visitor
	    delete visitor[nodeType];

	    for (var _iterator4 = aliases, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	      var _ref4;

	      if (_isArray4) {
	        if (_i4 >= _iterator4.length) break;
	        _ref4 = _iterator4[_i4++];
	      } else {
	        _i4 = _iterator4.next();
	        if (_i4.done) break;
	        _ref4 = _i4.value;
	      }

	      var alias = _ref4;

	      var existing = visitor[alias];
	      if (existing) {
	        mergePair(existing, fns);
	      } else {
	        visitor[alias] = _lodashLangClone2["default"](fns);
	      }
	    }
	  }

	  for (var nodeType in visitor) {
	    if (shouldIgnoreKey(nodeType)) continue;

	    ensureCallbackArrays(visitor[nodeType]);
	  }

	  return visitor;
	}

	function verify(visitor) {
	  if (visitor._verified) return;

	  if (typeof visitor === "function") {
	    throw new Error(messages.get("traverseVerifyRootFunction"));
	  }

	  for (var nodeType in visitor) {
	    if (nodeType === "enter" || nodeType === "exit") {
	      validateVisitorMethods(nodeType, visitor[nodeType]);
	    }

	    if (shouldIgnoreKey(nodeType)) continue;

	    if (t.TYPES.indexOf(nodeType) < 0) {
	      throw new Error(messages.get("traverseVerifyNodeType", nodeType));
	    }

	    var visitors = visitor[nodeType];
	    if (typeof visitors === "object") {
	      for (var visitorKey in visitors) {
	        if (visitorKey === "enter" || visitorKey === "exit") {
	          // verify that it just contains functions
	          validateVisitorMethods(nodeType + "." + visitorKey, visitors[visitorKey]);
	        } else {
	          throw new Error(messages.get("traverseVerifyVisitorProperty", nodeType, visitorKey));
	        }
	      }
	    }
	  }

	  visitor._verified = true;
	}

	function validateVisitorMethods(path, val) {
	  var fns = [].concat(val);
	  for (var _iterator5 = fns, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
	    var _ref5;

	    if (_isArray5) {
	      if (_i5 >= _iterator5.length) break;
	      _ref5 = _iterator5[_i5++];
	    } else {
	      _i5 = _iterator5.next();
	      if (_i5.done) break;
	      _ref5 = _i5.value;
	    }

	    var fn = _ref5;

	    if (typeof fn !== "function") {
	      throw new TypeError("Non-function found defined in " + path + " with type " + typeof fn);
	    }
	  }
	}

	function merge(visitors /*: Array*/) {
	  var states /*: Array*/ = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

	  var rootVisitor = {};

	  for (var i = 0; i < visitors.length; i++) {
	    var visitor = visitors[i];
	    var state = states[i];

	    explode(visitor);

	    for (var type in visitor) {
	      var visitorType = visitor[type];

	      // if we have state then overload the callbacks to take it
	      if (state) visitorType = wrapWithState(visitorType, state);

	      var nodeVisitor = rootVisitor[type] = rootVisitor[type] || {};
	      mergePair(nodeVisitor, visitorType);
	    }
	  }

	  return rootVisitor;
	}

	function wrapWithState(oldVisitor, state) {
	  var newVisitor = {};

	  for (var key in oldVisitor) {
	    var fns = oldVisitor[key];

	    // not an enter/exit array of callbacks
	    if (!Array.isArray(fns)) continue;

	    fns = fns.map(function (fn) {
	      var newFn = function newFn(path) {
	        return fn.call(state, path, state);
	      };
	      newFn.toString = function () {
	        return fn.toString();
	      };
	      return newFn;
	    });

	    newVisitor[key] = fns;
	  }

	  return newVisitor;
	}

	function ensureEntranceObjects(obj) {
	  for (var key in obj) {
	    if (shouldIgnoreKey(key)) continue;

	    var fns = obj[key];
	    if (typeof fns === "function") {
	      obj[key] = { enter: fns };
	    }
	  }
	}

	function ensureCallbackArrays(obj) {
	  if (obj.enter && !Array.isArray(obj.enter)) obj.enter = [obj.enter];
	  if (obj.exit && !Array.isArray(obj.exit)) obj.exit = [obj.exit];
	}

	function wrapCheck(wrapper, fn) {
	  var newFn = function newFn(path) {
	    if (wrapper.checkPath(path)) {
	      return fn.apply(this, arguments);
	    }
	  };
	  newFn.toString = function () {
	    return fn.toString();
	  };
	  return newFn;
	}

	function shouldIgnoreKey(key) {
	  // internal/hidden key
	  if (key[0] === "_") return true;

	  // ignore function keys
	  if (key === "enter" || key === "exit" || key === "shouldSkip") return true;

	  // ignore other options
	  if (key === "blacklist" || key === "noScope" || key === "skipKeys") return true;

	  return false;
	}

	function mergePair(dest, src) {
	  for (var key in src) {
	    dest[key] = [].concat(dest[key] || [], src[key]);
	  }
	}

/***/ },
/* 7109 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	module.exports = __webpack_require__(__webpack_module_template_argument_0__);


/***/ },
/* 7110 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	"use strict";

	var _Symbol$for = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;
	var STATEMENT_OR_BLOCK_KEYS = ["consequent", "body", "alternate"];
	exports.STATEMENT_OR_BLOCK_KEYS = STATEMENT_OR_BLOCK_KEYS;
	var FLATTENABLE_KEYS = ["body", "expressions"];
	exports.FLATTENABLE_KEYS = FLATTENABLE_KEYS;
	var FOR_INIT_KEYS = ["left", "init"];
	exports.FOR_INIT_KEYS = FOR_INIT_KEYS;
	var COMMENT_KEYS = ["leadingComments", "trailingComments", "innerComments"];

	exports.COMMENT_KEYS = COMMENT_KEYS;
	var LOGICAL_OPERATORS = ["||", "&&"];
	exports.LOGICAL_OPERATORS = LOGICAL_OPERATORS;
	var UPDATE_OPERATORS = ["++", "--"];

	exports.UPDATE_OPERATORS = UPDATE_OPERATORS;
	var BOOLEAN_NUMBER_BINARY_OPERATORS = [">", "<", ">=", "<="];
	exports.BOOLEAN_NUMBER_BINARY_OPERATORS = BOOLEAN_NUMBER_BINARY_OPERATORS;
	var EQUALITY_BINARY_OPERATORS = ["==", "===", "!=", "!=="];
	exports.EQUALITY_BINARY_OPERATORS = EQUALITY_BINARY_OPERATORS;
	var COMPARISON_BINARY_OPERATORS = [].concat(EQUALITY_BINARY_OPERATORS, ["in", "instanceof"]);
	exports.COMPARISON_BINARY_OPERATORS = COMPARISON_BINARY_OPERATORS;
	var BOOLEAN_BINARY_OPERATORS = [].concat(COMPARISON_BINARY_OPERATORS, BOOLEAN_NUMBER_BINARY_OPERATORS);
	exports.BOOLEAN_BINARY_OPERATORS = BOOLEAN_BINARY_OPERATORS;
	var NUMBER_BINARY_OPERATORS = ["-", "/", "%", "*", "**", "&", "|", ">>", ">>>", "<<", "^"];
	exports.NUMBER_BINARY_OPERATORS = NUMBER_BINARY_OPERATORS;
	var BINARY_OPERATORS = ["+"].concat(NUMBER_BINARY_OPERATORS, BOOLEAN_BINARY_OPERATORS);

	exports.BINARY_OPERATORS = BINARY_OPERATORS;
	var BOOLEAN_UNARY_OPERATORS = ["delete", "!"];
	exports.BOOLEAN_UNARY_OPERATORS = BOOLEAN_UNARY_OPERATORS;
	var NUMBER_UNARY_OPERATORS = ["+", "-", "++", "--", "~"];
	exports.NUMBER_UNARY_OPERATORS = NUMBER_UNARY_OPERATORS;
	var STRING_UNARY_OPERATORS = ["typeof"];
	exports.STRING_UNARY_OPERATORS = STRING_UNARY_OPERATORS;
	var UNARY_OPERATORS = ["void"].concat(BOOLEAN_UNARY_OPERATORS, NUMBER_UNARY_OPERATORS, STRING_UNARY_OPERATORS);

	exports.UNARY_OPERATORS = UNARY_OPERATORS;
	var INHERIT_KEYS = {
	  optional: ["typeAnnotation", "typeParameters", "returnType"],
	  force: ["start", "loc", "end"]
	};

	exports.INHERIT_KEYS = INHERIT_KEYS;
	var BLOCK_SCOPED_SYMBOL = _Symbol$for("var used to be block scoped");
	exports.BLOCK_SCOPED_SYMBOL = BLOCK_SCOPED_SYMBOL;

/***/ },
/* 7111 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__, __webpack_module_template_argument_7__, __webpack_module_template_argument_8__, __webpack_module_template_argument_9__) {

	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _Number$MAX_SAFE_INTEGER = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_3__)["default"];

	exports.__esModule = true;
	exports.toComputedKey = toComputedKey;
	exports.toSequenceExpression = toSequenceExpression;
	exports.toKeyAlias = toKeyAlias;
	exports.toIdentifier = toIdentifier;
	exports.toBindingIdentifierName = toBindingIdentifierName;
	exports.toStatement = toStatement;
	exports.toExpression = toExpression;
	exports.toBlock = toBlock;
	exports.valueToNode = valueToNode;

	var _lodashLangIsPlainObject = __webpack_require__(__webpack_module_template_argument_4__);

	var _lodashLangIsPlainObject2 = _interopRequireDefault(_lodashLangIsPlainObject);

	var _lodashLangIsNumber = __webpack_require__(__webpack_module_template_argument_5__);

	var _lodashLangIsNumber2 = _interopRequireDefault(_lodashLangIsNumber);

	var _lodashLangIsRegExp = __webpack_require__(__webpack_module_template_argument_6__);

	var _lodashLangIsRegExp2 = _interopRequireDefault(_lodashLangIsRegExp);

	var _lodashLangIsString = __webpack_require__(__webpack_module_template_argument_7__);

	var _lodashLangIsString2 = _interopRequireDefault(_lodashLangIsString);

	var _babelTraverse = __webpack_require__(__webpack_module_template_argument_8__);

	var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

	var _index = __webpack_require__(__webpack_module_template_argument_9__);

	var t = _interopRequireWildcard(_index);

	/*:: import type { Scope } from "babel-traverse";*/
	function toComputedKey(node /*: Object*/) /*: Object*/ {
	  var key /*: Object*/ = arguments.length <= 1 || arguments[1] === undefined ? node.key || node.property : arguments[1];
	  return (function () {
	    if (!node.computed) {
	      if (t.isIdentifier(key)) key = t.stringLiteral(key.name);
	    }
	    return key;
	  })();
	}

	/**
	 * Turn an array of statement `nodes` into a `SequenceExpression`.
	 *
	 * Variable declarations are turned into simple assignments and their
	 * declarations hoisted to the top of the current scope.
	 *
	 * Expression statements are just resolved to their expression.
	 */

	function toSequenceExpression(nodes /*: Array<Object>*/, scope /*: Scope*/) /*: ?Object*/ {
	  if (!nodes || !nodes.length) return;

	  var declars = [];
	  var bailed = false;

	  var result = convert(nodes);
	  if (bailed) return;

	  for (var i = 0; i < declars.length; i++) {
	    scope.push(declars[i]);
	  }

	  return result;

	  function convert(nodes) {
	    var ensureLastUndefined = false;
	    var exprs = [];

	    for (var _iterator = (nodes /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var node = _ref;

	      if (t.isExpression(node)) {
	        exprs.push(node);
	      } else if (t.isExpressionStatement(node)) {
	        exprs.push(node.expression);
	      } else if (t.isVariableDeclaration(node)) {
	        if (node.kind !== "var") return bailed = true; // bailed

	        for (var _iterator2 = (node.declarations /*: Array*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	          var _ref2;

	          if (_isArray2) {
	            if (_i2 >= _iterator2.length) break;
	            _ref2 = _iterator2[_i2++];
	          } else {
	            _i2 = _iterator2.next();
	            if (_i2.done) break;
	            _ref2 = _i2.value;
	          }

	          var declar = _ref2;

	          var bindings = t.getBindingIdentifiers(declar);
	          for (var key in bindings) {
	            declars.push({
	              kind: node.kind,
	              id: bindings[key]
	            });
	          }

	          if (declar.init) {
	            exprs.push(t.assignmentExpression("=", declar.id, declar.init));
	          }
	        }

	        ensureLastUndefined = true;
	        continue;
	      } else if (t.isIfStatement(node)) {
	        var consequent = node.consequent ? convert([node.consequent]) : scope.buildUndefinedNode();
	        var alternate = node.alternate ? convert([node.alternate]) : scope.buildUndefinedNode();
	        if (!consequent || !alternate) return bailed = true;

	        exprs.push(t.conditionalExpression(node.test, consequent, alternate));
	      } else if (t.isBlockStatement(node)) {
	        exprs.push(convert(node.body));
	      } else if (t.isEmptyStatement(node)) {
	        // empty statement so ensure the last item is undefined if we're last
	        ensureLastUndefined = true;
	        continue;
	      } else {
	        // bailed, we can't turn this statement into an expression
	        return bailed = true;
	      }

	      ensureLastUndefined = false;
	    }

	    if (ensureLastUndefined || exprs.length === 0) {
	      exprs.push(scope.buildUndefinedNode());
	    }

	    //

	    if (exprs.length === 1) {
	      return exprs[0];
	    } else {
	      return t.sequenceExpression(exprs);
	    }
	  }
	}

	function toKeyAlias(node /*: Object*/) /*: string*/ {
	  var key /*: Object*/ = arguments.length <= 1 || arguments[1] === undefined ? node.key : arguments[1];
	  return (function () {
	    var alias = undefined;

	    if (node.kind === "method") {
	      return toKeyAlias.increment() + "";
	    } else if (t.isIdentifier(key)) {
	      alias = key.name;
	    } else if (t.isStringLiteral(key)) {
	      alias = JSON.stringify(key.value);
	    } else {
	      alias = JSON.stringify(_babelTraverse2["default"].removeProperties(t.cloneDeep(key)));
	    }

	    if (node.computed) {
	      alias = "[" + alias + "]";
	    }

	    if (node["static"]) {
	      alias = "static:" + alias;
	    }

	    return alias;
	  })();
	}

	toKeyAlias.uid = 0;

	toKeyAlias.increment = function () {
	  if (toKeyAlias.uid >= _Number$MAX_SAFE_INTEGER) {
	    return toKeyAlias.uid = 0;
	  } else {
	    return toKeyAlias.uid++;
	  }
	};

	function toIdentifier(name /*: string*/) /*: string*/ {
	  name = name + "";

	  // replace all non-valid identifiers with dashes
	  name = name.replace(/[^a-zA-Z0-9$_]/g, "-");

	  // remove all dashes and numbers from start of name
	  name = name.replace(/^[-0-9]+/, "");

	  // camel case
	  name = name.replace(/[-\s]+(.)?/g, function (match, c) {
	    return c ? c.toUpperCase() : "";
	  });

	  if (!t.isValidIdentifier(name)) {
	    name = "_" + name;
	  }

	  return name || "_";
	}

	function toBindingIdentifierName(name /*: string*/) /*: string*/ {
	  name = toIdentifier(name);
	  if (name === "eval" || name === "arguments") name = "_" + name;
	  return name;
	}

	/**
	 * [Please add a description.]
	 * @returns {Object|Boolean}
	 */

	function toStatement(node /*: Object*/, ignore /*:: ?: boolean*/) {
	  if (t.isStatement(node)) {
	    return node;
	  }

	  var mustHaveId = false;
	  var newType = undefined;

	  if (t.isClass(node)) {
	    mustHaveId = true;
	    newType = "ClassDeclaration";
	  } else if (t.isFunction(node)) {
	    mustHaveId = true;
	    newType = "FunctionDeclaration";
	  } else if (t.isAssignmentExpression(node)) {
	    return t.expressionStatement(node);
	  }

	  if (mustHaveId && !node.id) {
	    newType = false;
	  }

	  if (!newType) {
	    if (ignore) {
	      return false;
	    } else {
	      throw new Error("cannot turn " + node.type + " to a statement");
	    }
	  }

	  node.type = newType;

	  return node;
	}

	function toExpression(node /*: Object*/) /*: Object*/ {
	  if (t.isExpressionStatement(node)) {
	    node = node.expression;
	  }

	  if (t.isClass(node)) {
	    node.type = "ClassExpression";
	  } else if (t.isFunction(node)) {
	    node.type = "FunctionExpression";
	  }

	  if (t.isExpression(node)) {
	    return node;
	  } else {
	    throw new Error("cannot turn " + node.type + " to an expression");
	  }
	}

	function toBlock(node, parent /*: Object*/) /*: Object*/ {
	  if (t.isBlockStatement(node)) {
	    return node;
	  }

	  if (t.isEmptyStatement(node)) {
	    node = [];
	  }

	  if (!Array.isArray(node)) {
	    if (!t.isStatement(node)) {
	      if (t.isFunction(parent)) {
	        node = t.returnStatement(node);
	      } else {
	        node = t.expressionStatement(node);
	      }
	    }

	    node = [node];
	  }

	  return t.blockStatement(node);
	}

	function valueToNode(value /*: any*/) /*: Object*/ {
	  // undefined
	  if (value === undefined) {
	    return t.identifier("undefined");
	  }

	  // boolean
	  if (value === true || value === false) {
	    return t.booleanLiteral(value);
	  }

	  // null
	  if (value === null) {
	    return t.nullLiteral();
	  }

	  // strings
	  if (_lodashLangIsString2["default"](value)) {
	    return t.stringLiteral(value);
	  }

	  // numbers
	  if (_lodashLangIsNumber2["default"](value)) {
	    return t.numericLiteral(value);
	  }

	  // regexes
	  if (_lodashLangIsRegExp2["default"](value)) {
	    var pattern = value.source;
	    var flags = value.toString().match(/\/([a-z]+|)$/)[1];
	    return t.regExpLiteral(pattern, flags);
	  }

	  // array
	  if (Array.isArray(value)) {
	    return t.arrayExpression(value.map(t.valueToNode));
	  }

	  // object
	  if (_lodashLangIsPlainObject2["default"](value)) {
	    var props = [];
	    for (var key in value) {
	      var nodeKey = undefined;
	      if (t.isValidIdentifier(key)) {
	        nodeKey = t.identifier(key);
	      } else {
	        nodeKey = t.stringLiteral(key);
	      }
	      props.push(t.objectProperty(nodeKey, t.valueToNode(value[key])));
	    }
	    return t.objectExpression(props);
	  }

	  throw new Error("don't know how to turn this value into a node");
	}

/***/ },
/* 7112 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	/* @flow */

	"use strict";

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _index = __webpack_require__(__webpack_module_template_argument_2__);

	var t = _interopRequireWildcard(_index);

	var _constants = __webpack_require__(__webpack_module_template_argument_3__);

	var _index2 = __webpack_require__(__webpack_module_template_argument_4__);

	var _index3 = _interopRequireDefault(_index2);

	_index3["default"]("ArrayExpression", {
	  fields: {
	    elements: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeOrValueType("null", "Expression", "SpreadElement")))
	    }
	  },
	  visitor: ["elements"],
	  aliases: ["Expression"]
	});

	_index3["default"]("AssignmentExpression", {
	  fields: {
	    operator: {
	      validate: _index2.assertValueType("string")
	    },
	    left: {
	      validate: _index2.assertNodeType("LVal")
	    },
	    right: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  },
	  builder: ["operator", "left", "right"],
	  visitor: ["left", "right"],
	  aliases: ["Binary", "Expression"]
	});

	_index3["default"]("BinaryExpression", {
	  builder: ["operator", "left", "right"],
	  fields: {
	    operator: {
	      validate: _index2.assertOneOf.apply(undefined, _constants.BINARY_OPERATORS)
	    },
	    left: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    right: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  },
	  visitor: ["left", "right"],
	  aliases: ["Binary", "Expression"]
	});

	_index3["default"]("Directive", {
	  visitor: ["value"],
	  fields: {
	    value: {
	      validate: _index2.assertNodeType("DirectiveLiteral")
	    }
	  }
	});

	_index3["default"]("DirectiveLiteral", {
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: _index2.assertValueType("string")
	    }
	  }
	});

	_index3["default"]("BlockStatement", {
	  builder: ["body", "directives"],
	  visitor: ["directives", "body"],
	  fields: {
	    directives: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Directive"))),
	      "default": []
	    },
	    body: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Statement")))
	    }
	  },
	  aliases: ["Scopable", "BlockParent", "Block", "Statement"]
	});

	_index3["default"]("BreakStatement", {
	  visitor: ["label"],
	  fields: {
	    label: {
	      validate: _index2.assertNodeType("Identifier"),
	      optional: true
	    }
	  },
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"]
	});

	_index3["default"]("CallExpression", {
	  visitor: ["callee", "arguments"],
	  fields: {
	    callee: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    arguments: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Expression", "SpreadElement")))
	    }
	  },
	  aliases: ["Expression"]
	});

	_index3["default"]("CatchClause", {
	  visitor: ["param", "body"],
	  fields: {
	    param: {
	      validate: _index2.assertNodeType("Identifier")
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    }
	  },
	  aliases: ["Scopable"]
	});

	_index3["default"]("ConditionalExpression", {
	  visitor: ["test", "consequent", "alternate"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    consequent: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    alternate: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  },
	  aliases: ["Expression", "Conditional"]
	});

	_index3["default"]("ContinueStatement", {
	  visitor: ["label"],
	  fields: {
	    label: {
	      validate: _index2.assertNodeType("Identifier"),
	      optional: true
	    }
	  },
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"]
	});

	_index3["default"]("DebuggerStatement", {
	  aliases: ["Statement"]
	});

	_index3["default"]("DoWhileStatement", {
	  visitor: ["test", "body"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index2.assertNodeType("Statement")
	    }
	  },
	  aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"]
	});

	_index3["default"]("EmptyStatement", {
	  aliases: ["Statement"]
	});

	_index3["default"]("ExpressionStatement", {
	  visitor: ["expression"],
	  fields: {
	    expression: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  },
	  aliases: ["Statement", "ExpressionWrapper"]
	});

	_index3["default"]("File", {
	  builder: ["program", "comments", "tokens"],
	  visitor: ["program"],
	  fields: {
	    program: {
	      validate: _index2.assertNodeType("Program")
	    }
	  }
	});

	_index3["default"]("ForInStatement", {
	  visitor: ["left", "right", "body"],
	  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
	  fields: {
	    left: {
	      validate: _index2.assertNodeType("VariableDeclaration", "LVal")
	    },
	    right: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index2.assertNodeType("Statement")
	    }
	  }
	});

	_index3["default"]("ForStatement", {
	  visitor: ["init", "test", "update", "body"],
	  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"],
	  fields: {
	    init: {
	      validate: _index2.assertNodeType("VariableDeclaration", "Expression"),
	      optional: true
	    },
	    test: {
	      validate: _index2.assertNodeType("Expression"),
	      optional: true
	    },
	    update: {
	      validate: _index2.assertNodeType("Expression"),
	      optional: true
	    },
	    body: {
	      validate: _index2.assertNodeType("Statement")
	    }
	  }
	});

	_index3["default"]("FunctionDeclaration", {
	  builder: ["id", "params", "body", "generator", "async"],
	  visitor: ["id", "params", "body", "returnType", "typeParameters"],
	  fields: {
	    id: {
	      validate: _index2.assertNodeType("Identifier")
	    },
	    params: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("LVal")))
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    },
	    generator: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    },
	    async: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    }
	  },
	  aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Statement", "Pureish", "Declaration"]
	});

	_index3["default"]("FunctionExpression", {
	  inherits: "FunctionDeclaration",
	  aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
	  fields: {
	    id: {
	      validate: _index2.assertNodeType("Identifier"),
	      optional: true
	    },
	    params: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("LVal")))
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    },
	    generator: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    },
	    async: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    }
	  }
	});

	_index3["default"]("Identifier", {
	  builder: ["name"],
	  visitor: ["typeAnnotation"],
	  aliases: ["Expression", "LVal"],
	  fields: {
	    name: {
	      validate: function validate(node, key, val) {
	        if (!t.isValidIdentifier(val)) {
	          // todo
	        }
	      }
	    }
	  }
	});

	_index3["default"]("IfStatement", {
	  visitor: ["test", "consequent", "alternate"],
	  aliases: ["Statement", "Conditional"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    consequent: {
	      validate: _index2.assertNodeType("Statement")
	    },
	    alternate: {
	      optional: true,
	      validate: _index2.assertNodeType("Statement")
	    }
	  }
	});

	_index3["default"]("LabeledStatement", {
	  visitor: ["label", "body"],
	  aliases: ["Statement"],
	  fields: {
	    label: {
	      validate: _index2.assertNodeType("Identifier")
	    },
	    body: {
	      validate: _index2.assertNodeType("Statement")
	    }
	  }
	});

	_index3["default"]("StringLiteral", {
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: _index2.assertValueType("string")
	    }
	  },
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});

	_index3["default"]("NumericLiteral", {
	  builder: ["value"],
	  deprecatedAlias: "NumberLiteral",
	  fields: {
	    value: {
	      validate: _index2.assertValueType("number")
	    }
	  },
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});

	_index3["default"]("NullLiteral", {
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});

	_index3["default"]("BooleanLiteral", {
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: _index2.assertValueType("boolean")
	    }
	  },
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});

	_index3["default"]("RegExpLiteral", {
	  builder: ["pattern", "flags"],
	  deprecatedAlias: "RegexLiteral",
	  aliases: ["Expression", "Literal"],
	  fields: {
	    pattern: {
	      validate: _index2.assertValueType("string")
	    },
	    flags: {
	      validate: _index2.assertValueType("string"),
	      "default": ""
	    }
	  }
	});

	_index3["default"]("LogicalExpression", {
	  builder: ["operator", "left", "right"],
	  visitor: ["left", "right"],
	  aliases: ["Binary", "Expression"],
	  fields: {
	    operator: {
	      validate: _index2.assertOneOf.apply(undefined, _constants.LOGICAL_OPERATORS)
	    },
	    left: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    right: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  }
	});

	_index3["default"]("MemberExpression", {
	  builder: ["object", "property", "computed"],
	  visitor: ["object", "property"],
	  aliases: ["Expression", "LVal"],
	  fields: {
	    object: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    property: {
	      validate: function validate(node, key, val) {
	        var expectedType = node.computed ? "Expression" : "Identifier";
	        _index2.assertNodeType(expectedType)(node, key, val);
	      }
	    },
	    computed: {
	      "default": false
	    }
	  }
	});

	_index3["default"]("NewExpression", {
	  visitor: ["callee", "arguments"],
	  aliases: ["Expression"],
	  fields: {
	    callee: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    arguments: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Expression", "SpreadElement")))
	    }
	  }
	});

	_index3["default"]("Program", {
	  visitor: ["directives", "body"],
	  builder: ["body", "directives"],
	  fields: {
	    directives: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Directive"))),
	      "default": []
	    },
	    body: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Statement")))
	    }
	  },
	  aliases: ["Scopable", "BlockParent", "Block", "FunctionParent"]
	});

	_index3["default"]("ObjectExpression", {
	  visitor: ["properties"],
	  aliases: ["Expression"],
	  fields: {
	    properties: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("ObjectMethod", "ObjectProperty", "SpreadProperty")))
	    }
	  }
	});

	_index3["default"]("ObjectMethod", {
	  builder: ["kind", "key", "params", "body", "computed"],
	  fields: {
	    kind: {
	      validate: _index2.chain(_index2.assertValueType("string"), _index2.assertOneOf("method", "get", "set")),
	      "default": "method"
	    },
	    computed: {
	      validate: _index2.assertValueType("boolean"),
	      "default": false
	    },
	    key: {
	      validate: function validate(node, key, val) {
	        var expectedTypes = node.computed ? ["Expression"] : ["Identifier", "StringLiteral", "NumericLiteral"];
	        _index2.assertNodeType.apply(undefined, expectedTypes)(node, key, val);
	      }
	    },
	    decorators: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Decorator")))
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    },
	    generator: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    },
	    async: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    }
	  },
	  visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
	  aliases: ["UserWhitespacable", "Function", "Scopable", "BlockParent", "FunctionParent", "Method", "ObjectMember"]
	});

	_index3["default"]("ObjectProperty", {
	  builder: ["key", "value", "computed", "shorthand", "decorators"],
	  fields: {
	    computed: {
	      validate: _index2.assertValueType("boolean"),
	      "default": false
	    },
	    key: {
	      validate: function validate(node, key, val) {
	        var expectedTypes = node.computed ? ["Expression"] : ["Identifier", "StringLiteral", "NumericLiteral"];
	        _index2.assertNodeType.apply(undefined, expectedTypes)(node, key, val);
	      }
	    },
	    value: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    shorthand: {
	      validate: _index2.assertValueType("boolean"),
	      "default": false
	    },
	    decorators: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Decorator"))),
	      optional: true
	    }
	  },
	  visitor: ["key", "value", "decorators"],
	  aliases: ["UserWhitespacable", "Property", "ObjectMember"]
	});

	_index3["default"]("RestElement", {
	  visitor: ["argument", "typeAnnotation"],
	  aliases: ["LVal"],
	  fields: {
	    argument: {
	      validate: _index2.assertNodeType("LVal")
	    }
	  }
	});

	_index3["default"]("ReturnStatement", {
	  visitor: ["argument"],
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"],
	  fields: {
	    argument: {
	      validate: _index2.assertNodeType("Expression"),
	      optional: true
	    }
	  }
	});

	_index3["default"]("SequenceExpression", {
	  visitor: ["expressions"],
	  fields: {
	    expressions: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Expression")))
	    }
	  },
	  aliases: ["Expression"]
	});

	_index3["default"]("SwitchCase", {
	  visitor: ["test", "consequent"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression"),
	      optional: true
	    },
	    consequent: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Statement")))
	    }
	  }
	});

	_index3["default"]("SwitchStatement", {
	  visitor: ["discriminant", "cases"],
	  aliases: ["Statement", "BlockParent", "Scopable"],
	  fields: {
	    discriminant: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    cases: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("SwitchCase")))
	    }
	  }
	});

	_index3["default"]("ThisExpression", {
	  aliases: ["Expression"]
	});

	_index3["default"]("ThrowStatement", {
	  visitor: ["argument"],
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"],
	  fields: {
	    argument: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  }
	});

	// todo: at least handler or finalizer should be set to be valid
	_index3["default"]("TryStatement", {
	  visitor: ["block", "handler", "finalizer"],
	  aliases: ["Statement"],
	  fields: {
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    },
	    handler: {
	      optional: true,
	      handler: _index2.assertNodeType("BlockStatement")
	    },
	    finalizer: {
	      optional: true,
	      validate: _index2.assertNodeType("BlockStatement")
	    }
	  }
	});

	_index3["default"]("UnaryExpression", {
	  builder: ["operator", "argument", "prefix"],
	  fields: {
	    prefix: {
	      "default": false
	    },
	    argument: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    operator: {
	      validate: _index2.assertOneOf.apply(undefined, _constants.UNARY_OPERATORS)
	    }
	  },
	  visitor: ["argument"],
	  aliases: ["UnaryLike", "Expression"]
	});

	_index3["default"]("UpdateExpression", {
	  builder: ["operator", "argument", "prefix"],
	  fields: {
	    prefix: {
	      "default": false
	    },
	    argument: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    operator: {
	      validate: _index2.assertOneOf.apply(undefined, _constants.UPDATE_OPERATORS)
	    }
	  },
	  visitor: ["argument"],
	  aliases: ["Expression"]
	});

	_index3["default"]("VariableDeclaration", {
	  builder: ["kind", "declarations"],
	  visitor: ["declarations"],
	  aliases: ["Statement", "Declaration"],
	  fields: {
	    kind: {
	      validate: _index2.chain(_index2.assertValueType("string"), _index2.assertOneOf("var", "let", "const"))
	    },
	    declarations: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("VariableDeclarator")))
	    }
	  }
	});

	_index3["default"]("VariableDeclarator", {
	  visitor: ["id", "init"],
	  fields: {
	    id: {
	      validate: _index2.assertNodeType("LVal")
	    },
	    init: {
	      optional: true,
	      validate: _index2.assertNodeType("Expression")
	    }
	  }
	});

	_index3["default"]("WhileStatement", {
	  visitor: ["test", "body"],
	  aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement", "Statement")
	    }
	  }
	});

	_index3["default"]("WithStatement", {
	  visitor: ["object", "body"],
	  aliases: ["Statement"],
	  fields: {
	    object: {
	      object: _index2.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    }
	  }
	});

/***/ },
/* 7113 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	/* @flow */

	"use strict";

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _index = __webpack_require__(__webpack_module_template_argument_1__);

	var _index2 = _interopRequireDefault(_index);

	_index2["default"]("AssignmentPattern", {
	  visitor: ["left", "right"],
	  aliases: ["Pattern", "LVal"],
	  fields: {
	    left: {
	      validate: _index.assertNodeType("Identifier")
	    },
	    right: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

	_index2["default"]("ArrayPattern", {
	  visitor: ["elements", "typeAnnotation"],
	  aliases: ["Pattern", "LVal"],
	  fields: {
	    elements: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("Expression")))
	    }
	  }
	});

	_index2["default"]("ArrowFunctionExpression", {
	  builder: ["params", "body", "async"],
	  visitor: ["params", "body", "returnType"],
	  aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
	  fields: {
	    params: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("LVal")))
	    },
	    body: {
	      validate: _index.assertNodeType("BlockStatement", "Expression")
	    },
	    async: {
	      validate: _index.assertValueType("boolean"),
	      "default": false
	    }
	  }
	});

	_index2["default"]("ClassBody", {
	  visitor: ["body"],
	  fields: {
	    body: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("ClassMethod", "ClassProperty")))
	    }
	  }
	});

	_index2["default"]("ClassDeclaration", {
	  builder: ["id", "superClass", "body", "decorators"],
	  visitor: ["id", "body", "superClass", "mixins", "typeParameters", "superTypeParameters", "implements", "decorators"],
	  aliases: ["Scopable", "Class", "Statement", "Declaration", "Pureish"],
	  fields: {
	    id: {
	      validate: _index.assertNodeType("Identifier")
	    },
	    body: {
	      validate: _index.assertNodeType("ClassBody")
	    },
	    superClass: {
	      optional: true,
	      validate: _index.assertNodeType("Expression")
	    },
	    decorators: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("Decorator")))
	    }
	  }
	});

	_index2["default"]("ClassExpression", {
	  inherits: "ClassDeclaration",
	  aliases: ["Scopable", "Class", "Expression", "Pureish"],
	  fields: {
	    id: {
	      optional: true,
	      validate: _index.assertNodeType("Identifier")
	    },
	    body: {
	      validate: _index.assertNodeType("ClassBody")
	    },
	    superClass: {
	      optional: true,
	      validate: _index.assertNodeType("Expression")
	    },
	    decorators: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("Decorator")))
	    }
	  }
	});

	_index2["default"]("ExportAllDeclaration", {
	  visitor: ["source"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
	  fields: {
	    source: {
	      validate: _index.assertNodeType("StringLiteral")
	    }
	  }
	});

	_index2["default"]("ExportDefaultDeclaration", {
	  visitor: ["declaration"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
	  fields: {
	    declaration: {
	      validate: _index.assertNodeType("FunctionDeclaration", "ClassDeclaration", "Expression")
	    }
	  }
	});

	_index2["default"]("ExportNamedDeclaration", {
	  visitor: ["declaration", "specifiers", "source"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
	  fields: {
	    declaration: {
	      validate: _index.assertNodeType("Declaration"),
	      optional: true
	    },
	    specifiers: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("ExportSpecifier")))
	    },
	    source: {
	      validate: _index.assertNodeType("StringLiteral"),
	      optional: true
	    }
	  }
	});

	_index2["default"]("ExportSpecifier", {
	  visitor: ["local", "exported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: _index.assertNodeType("Identifier")
	    },
	    imported: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});

	_index2["default"]("ForOfStatement", {
	  visitor: ["left", "right", "body"],
	  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
	  fields: {
	    left: {
	      validate: _index.assertNodeType("VariableDeclaration", "LVal")
	    },
	    right: {
	      validate: _index.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index.assertNodeType("Statement")
	    }
	  }
	});

	_index2["default"]("ImportDeclaration", {
	  visitor: ["specifiers", "source"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration"],
	  fields: {
	    specifiers: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier")))
	    },
	    source: {
	      validate: _index.assertNodeType("StringLiteral")
	    }
	  }
	});

	_index2["default"]("ImportDefaultSpecifier", {
	  visitor: ["local"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});

	_index2["default"]("ImportNamespaceSpecifier", {
	  visitor: ["local"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});

	_index2["default"]("ImportSpecifier", {
	  visitor: ["local", "imported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: _index.assertNodeType("Identifier")
	    },
	    imported: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});

	_index2["default"]("MetaProperty", {
	  visitor: ["meta", "property"],
	  aliases: ["Expression"],
	  fields: {
	    // todo: limit to new.target
	    meta: {
	      validate: _index.assertValueType("string")
	    },
	    property: {
	      validate: _index.assertValueType("string")
	    }
	  }
	});

	_index2["default"]("ClassMethod", {
	  aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method"],
	  builder: ["kind", "key", "params", "body", "computed", "static"],
	  visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
	  fields: {
	    kind: {
	      validate: _index.chain(_index.assertValueType("string"), _index.assertOneOf("get", "set", "method", "constructor")),
	      "default": "method"
	    },
	    computed: {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    },
	    "static": {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    },
	    key: {
	      validate: function validate(node, key, val) {
	        var expectedTypes = node.computed ? ["Expression"] : ["Identifier", "StringLiteral", "NumericLiteral"];
	        _index.assertNodeType.apply(undefined, expectedTypes)(node, key, val);
	      }
	    },
	    params: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("LVal")))
	    },
	    body: {
	      validate: _index.assertNodeType("BlockStatement")
	    },
	    generator: {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    },
	    async: {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    }
	  }
	});

	_index2["default"]("ObjectPattern", {
	  visitor: ["properties", "typeAnnotation"],
	  aliases: ["Pattern", "LVal"],
	  fields: {
	    properties: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("RestProperty", "Property")))
	    }
	  }
	});

	_index2["default"]("SpreadElement", {
	  visitor: ["argument"],
	  aliases: ["UnaryLike"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

	_index2["default"]("Super", {
	  aliases: ["Expression"]
	});

	_index2["default"]("TaggedTemplateExpression", {
	  visitor: ["tag", "quasi"],
	  aliases: ["Expression"],
	  fields: {
	    tag: {
	      validate: _index.assertNodeType("Expression")
	    },
	    quasi: {
	      validate: _index.assertNodeType("TemplateLiteral")
	    }
	  }
	});

	_index2["default"]("TemplateElement", {
	  builder: ["value", "tail"],
	  fields: {
	    value: {
	      // todo: flatten `raw` into main node
	    },
	    tail: {
	      validate: _index.assertValueType("boolean"),
	      "default": false
	    }
	  }
	});

	_index2["default"]("TemplateLiteral", {
	  visitor: ["quasis", "expressions"],
	  aliases: ["Expression", "Literal"],
	  fields: {
	    quasis: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("TemplateElement")))
	    },
	    expressions: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("Expression")))
	    }
	  }
	});

	_index2["default"]("YieldExpression", {
	  builder: ["argument", "delegate"],
	  visitor: ["argument"],
	  aliases: ["Expression", "Terminatorless"],
	  fields: {
	    delegate: {
	      validate: _index.assertValueType("boolean"),
	      "default": false
	    },
	    argument: {
	      optional: true,
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

/***/ },
/* 7114 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	/* @flow */

	"use strict";

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _index = __webpack_require__(__webpack_module_template_argument_1__);

	var _index2 = _interopRequireDefault(_index);

	_index2["default"]("AwaitExpression", {
	  builder: ["argument"],
	  visitor: ["argument"],
	  aliases: ["Expression", "Terminatorless"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

	_index2["default"]("BindExpression", {
	  visitor: ["object", "callee"],
	  aliases: ["Expression"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("Decorator", {
	  visitor: ["expression"],
	  fields: {
	    expression: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

	_index2["default"]("DoExpression", {
	  visitor: ["body"],
	  aliases: ["Expression"],
	  fields: {
	    body: {
	      validate: _index.assertNodeType("BlockStatement")
	    }
	  }
	});

	_index2["default"]("ExportDefaultSpecifier", {
	  visitor: ["exported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    exported: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});

	_index2["default"]("ExportNamespaceSpecifier", {
	  visitor: ["exported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    exported: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});

	_index2["default"]("RestProperty", {
	  visitor: ["argument"],
	  aliases: ["UnaryLike"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("LVal")
	    }
	  }
	});

	_index2["default"]("SpreadProperty", {
	  visitor: ["argument"],
	  aliases: ["UnaryLike"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

/***/ },
/* 7115 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	/* @flow */

	"use strict";

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _index = __webpack_require__(__webpack_module_template_argument_1__);

	var _index2 = _interopRequireDefault(_index);

	_index2["default"]("AnyTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("ArrayTypeAnnotation", {
	  visitor: ["elementType"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("BooleanTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("BooleanLiteralTypeAnnotation", {
	  aliases: ["Flow"],
	  fields: {}
	});

	_index2["default"]("NullLiteralTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {}
	});

	_index2["default"]("ClassImplements", {
	  visitor: ["id", "typeParameters"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("ClassProperty", {
	  visitor: ["key", "value", "typeAnnotation", "decorators"],
	  aliases: ["Flow", "Property"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("DeclareClass", {
	  visitor: ["id", "typeParameters", "extends", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("DeclareFunction", {
	  visitor: ["id"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("DeclareInterface", {
	  visitor: ["id", "typeParameters", "extends", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("DeclareModule", {
	  visitor: ["id", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("DeclareTypeAlias", {
	  visitor: ["id", "typeParameters", "right"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("DeclareVariable", {
	  visitor: ["id"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("ExistentialTypeParam", {
	  aliases: ["Flow"]
	});

	_index2["default"]("FunctionTypeAnnotation", {
	  visitor: ["typeParameters", "params", "rest", "returnType"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("FunctionTypeParam", {
	  visitor: ["name", "typeAnnotation"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("GenericTypeAnnotation", {
	  visitor: ["id", "typeParameters"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("InterfaceExtends", {
	  visitor: ["id", "typeParameters"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("InterfaceDeclaration", {
	  visitor: ["id", "typeParameters", "extends", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("IntersectionTypeAnnotation", {
	  visitor: ["types"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("MixedTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"]
	});

	_index2["default"]("NullableTypeAnnotation", {
	  visitor: ["typeAnnotation"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("NumericLiteralTypeAnnotation", {
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("NumberTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("StringLiteralTypeAnnotation", {
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("StringTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("ThisTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {}
	});

	_index2["default"]("TupleTypeAnnotation", {
	  visitor: ["types"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("TypeofTypeAnnotation", {
	  visitor: ["argument"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("TypeAlias", {
	  visitor: ["id", "typeParameters", "right"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("TypeAnnotation", {
	  visitor: ["typeAnnotation"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("TypeCastExpression", {
	  visitor: ["expression", "typeAnnotation"],
	  aliases: ["Flow", "ExpressionWrapper", "Expression"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("TypeParameterDeclaration", {
	  visitor: ["params"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("TypeParameterInstantiation", {
	  visitor: ["params"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("ObjectTypeAnnotation", {
	  visitor: ["properties", "indexers", "callProperties"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("ObjectTypeCallProperty", {
	  visitor: ["value"],
	  aliases: ["Flow", "UserWhitespacable"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("ObjectTypeIndexer", {
	  visitor: ["id", "key", "value"],
	  aliases: ["Flow", "UserWhitespacable"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("ObjectTypeProperty", {
	  visitor: ["key", "value"],
	  aliases: ["Flow", "UserWhitespacable"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("QualifiedTypeIdentifier", {
	  visitor: ["id", "qualification"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("UnionTypeAnnotation", {
	  visitor: ["types"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("VoidTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});

/***/ },
/* 7116 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	/* @noflow */
	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	exports.__esModule = true;
	exports.assertEach = assertEach;
	exports.assertOneOf = assertOneOf;
	exports.assertNodeType = assertNodeType;
	exports.assertNodeOrValueType = assertNodeOrValueType;
	exports.assertValueType = assertValueType;
	exports.chain = chain;
	exports["default"] = defineType;

	var _index = __webpack_require__(__webpack_module_template_argument_2__);

	var t = _interopRequireWildcard(_index);

	var VISITOR_KEYS = {};
	exports.VISITOR_KEYS = VISITOR_KEYS;
	var ALIAS_KEYS = {};
	exports.ALIAS_KEYS = ALIAS_KEYS;
	var NODE_FIELDS = {};
	exports.NODE_FIELDS = NODE_FIELDS;
	var BUILDER_KEYS = {};
	exports.BUILDER_KEYS = BUILDER_KEYS;
	var DEPRECATED_KEYS = {};

	exports.DEPRECATED_KEYS = DEPRECATED_KEYS;
	function getType(val) {
	  if (Array.isArray(val)) {
	    return "array";
	  } else if (val === null) {
	    return "null";
	  } else if (val === undefined) {
	    return "undefined";
	  } else {
	    return typeof val;
	  }
	}

	function assertEach(callback /*: Function*/) /*: Function*/ {
	  function validator(node, key, val) {
	    if (!Array.isArray(val)) return;

	    for (var i = 0; i < val.length; i++) {
	      callback(node, key + "[" + i + "]", val[i]);
	    }
	  }
	  validator.each = callback;
	  return validator;
	}

	function assertOneOf() /*: Function*/ {
	  for (var _len = arguments.length, vals = Array(_len), _key = 0; _key < _len; _key++) {
	    vals[_key] = arguments[_key];
	  }

	  function validate(node, key, val) {
	    if (vals.indexOf(val) < 0) {
	      throw new TypeError("Property " + key + " expected value to be one of " + JSON.stringify(vals) + " but got " + JSON.stringify(val));
	    }
	  }

	  validate.oneOf = vals;

	  return validate;
	}

	function assertNodeType() /*: Function*/ {
	  for (var _len2 = arguments.length, types = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	    types[_key2] = arguments[_key2];
	  }

	  function validate(node, key, val) {
	    var valid = false;

	    for (var _iterator = types, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var type = _ref;

	      if (t.is(type, val)) {
	        valid = true;
	        break;
	      }
	    }

	    if (!valid) {
	      throw new TypeError("Property " + key + " of " + node.type + " expected node to be of a type " + JSON.stringify(types) + " but instead got " + JSON.stringify(val && val.type));
	    }
	  }

	  validate.oneOfNodeTypes = types;

	  return validate;
	}

	function assertNodeOrValueType() /*: Function*/ {
	  for (var _len3 = arguments.length, types = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	    types[_key3] = arguments[_key3];
	  }

	  function validate(node, key, val) {
	    var valid = false;

	    for (var _iterator2 = types, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var type = _ref2;

	      if (getType(val) === type || t.is(type, val)) {
	        valid = true;
	        break;
	      }
	    }

	    if (!valid) {
	      throw new TypeError("Property " + key + " of " + node.type + " expected node to be of a type " + JSON.stringify(types) + " but instead got " + JSON.stringify(val && val.type));
	    }
	  }

	  validate.oneOfNodeOrValueTypes = types;

	  return validate;
	}

	function assertValueType(type /*: string*/) /*: Function*/ {
	  function validate(node, key, val) {
	    var valid = getType(val) === type;

	    if (!valid) {
	      throw new TypeError("Property " + key + " expected type of " + type + " but got " + getType(val));
	    }
	  }

	  validate.type = type;

	  return validate;
	}

	function chain() /*: Function*/ {
	  for (var _len4 = arguments.length, fns = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	    fns[_key4] = arguments[_key4];
	  }

	  function validate() {
	    for (var _iterator3 = fns, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	      var _ref3;

	      if (_isArray3) {
	        if (_i3 >= _iterator3.length) break;
	        _ref3 = _iterator3[_i3++];
	      } else {
	        _i3 = _iterator3.next();
	        if (_i3.done) break;
	        _ref3 = _i3.value;
	      }

	      var fn = _ref3;

	      fn.apply(undefined, arguments);
	    }
	  }
	  validate.chainOf = fns;
	  return validate;
	}

	function defineType(type /*: string*/) {
	  var opts /*: {
	               fields?: Object;
	               visitor?: Array<string>;
	               aliases?: Array<string>;
	               builder?: Array<string>;
	               inherits?: string;
	             }*/ = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  var inherits = opts.inherits && store[opts.inherits] || {};

	  opts.fields = opts.fields || inherits.fields || {};
	  opts.visitor = opts.visitor || inherits.visitor || [];
	  opts.aliases = opts.aliases || inherits.aliases || [];
	  opts.builder = opts.builder || inherits.builder || opts.visitor || [];

	  if (opts.deprecatedAlias) {
	    DEPRECATED_KEYS[opts.deprecatedAlias] = type;
	  }

	  // ensure all field keys are represented in `fields`
	  for (var _iterator4 = (opts.visitor.concat(opts.builder) /*: Array<string>*/), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	    var _ref4;

	    if (_isArray4) {
	      if (_i4 >= _iterator4.length) break;
	      _ref4 = _iterator4[_i4++];
	    } else {
	      _i4 = _iterator4.next();
	      if (_i4.done) break;
	      _ref4 = _i4.value;
	    }

	    var key = _ref4;

	    opts.fields[key] = opts.fields[key] || {};
	  }

	  for (var key in opts.fields) {
	    var field = opts.fields[key];

	    if (field["default"] === undefined) {
	      field["default"] = null;
	    } else if (!field.validate) {
	      field.validate = assertValueType(getType(field["default"]));
	    }
	  }

	  VISITOR_KEYS[type] = opts.visitor;
	  BUILDER_KEYS[type] = opts.builder;
	  NODE_FIELDS[type] = opts.fields;
	  ALIAS_KEYS[type] = opts.aliases;

	  store[type] = opts;
	}

	var store = {};

/***/ },
/* 7117 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__) {

	"use strict";

	__webpack_require__(__webpack_module_template_argument_0__);

	__webpack_require__(__webpack_module_template_argument_1__);

	__webpack_require__(__webpack_module_template_argument_2__);

	__webpack_require__(__webpack_module_template_argument_3__);

	__webpack_require__(__webpack_module_template_argument_4__);

	__webpack_require__(__webpack_module_template_argument_5__);

	__webpack_require__(__webpack_module_template_argument_6__);

/***/ },
/* 7118 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	/* @flow */

	"use strict";

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _index = __webpack_require__(__webpack_module_template_argument_1__);

	var _index2 = _interopRequireDefault(_index);

	_index2["default"]("JSXAttribute", {
	  visitor: ["name", "value"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    name: {
	      validate: _index.assertNodeType("JSXIdentifier", "JSXNamespacedName")
	    },
	    value: {
	      optional: true,
	      validate: _index.assertNodeType("JSXElement", "StringLiteral", "JSXExpressionContainer")
	    }
	  }
	});

	_index2["default"]("JSXClosingElement", {
	  visitor: ["name"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    name: {
	      validate: _index.assertNodeType("JSXIdentifier", "JSXMemberExpression")
	    }
	  }
	});

	_index2["default"]("JSXElement", {
	  builder: ["openingElement", "closingElement", "children", "selfClosing"],
	  visitor: ["openingElement", "children", "closingElement"],
	  aliases: ["JSX", "Immutable", "Expression"],
	  fields: {
	    openingElement: {
	      validate: _index.assertNodeType("JSXOpeningElement")
	    },
	    closingElement: {
	      optional: true,
	      validate: _index.assertNodeType("JSXClosingElement")
	    },
	    children: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("JSXText", "JSXExpressionContainer", "JSXElement")))
	    }
	  }
	});

	_index2["default"]("JSXEmptyExpression", {
	  aliases: ["JSX", "Expression"]
	});

	_index2["default"]("JSXExpressionContainer", {
	  visitor: ["expression"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    expression: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

	_index2["default"]("JSXIdentifier", {
	  builder: ["name"],
	  aliases: ["JSX", "Expression"],
	  fields: {
	    name: {
	      validate: _index.assertValueType("string")
	    }
	  }
	});

	_index2["default"]("JSXMemberExpression", {
	  visitor: ["object", "property"],
	  aliases: ["JSX", "Expression"],
	  fields: {
	    object: {
	      validate: _index.assertNodeType("JSXMemberExpression", "JSXIdentifier")
	    },
	    property: {
	      validate: _index.assertNodeType("JSXIdentifier")
	    }
	  }
	});

	_index2["default"]("JSXNamespacedName", {
	  visitor: ["namespace", "name"],
	  aliases: ["JSX"],
	  fields: {
	    namespace: {
	      validate: _index.assertNodeType("JSXIdentifier")
	    },
	    name: {
	      validate: _index.assertNodeType("JSXIdentifier")
	    }
	  }
	});

	_index2["default"]("JSXOpeningElement", {
	  builder: ["name", "attributes", "selfClosing"],
	  visitor: ["name", "attributes"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    name: {
	      validate: _index.assertNodeType("JSXIdentifier", "JSXMemberExpression")
	    },
	    selfClosing: {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    },
	    attributes: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("JSXAttribute", "JSXSpreadAttribute")))
	    }
	  }
	});

	_index2["default"]("JSXSpreadAttribute", {
	  visitor: ["argument"],
	  aliases: ["JSX"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

	_index2["default"]("JSXText", {
	  aliases: ["JSX"],
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: _index.assertValueType("string")
	    }
	  }
	});

/***/ },
/* 7119 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	/* @flow */

	"use strict";

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _index = __webpack_require__(__webpack_module_template_argument_1__);

	var _index2 = _interopRequireDefault(_index);

	_index2["default"]("Noop", {
	  visitor: []
	});

	_index2["default"]("ParenthesizedExpression", {
	  visitor: ["expression"],
	  aliases: ["Expression", "ExpressionWrapper"],
	  fields: {
	    expression: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

/***/ },
/* 7120 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	"use strict";

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;
	exports.createUnionTypeAnnotation = createUnionTypeAnnotation;
	exports.removeTypeDuplicates = removeTypeDuplicates;
	exports.createTypeAnnotationBasedOnTypeof = createTypeAnnotationBasedOnTypeof;

	var _index = __webpack_require__(__webpack_module_template_argument_1__);

	var t = _interopRequireWildcard(_index);

	/**
	 * Takes an array of `types` and flattens them, removing duplicates and
	 * returns a `UnionTypeAnnotation` node containg them.
	 */

	function createUnionTypeAnnotation(types /*: Array<Object>*/) {
	  var flattened = removeTypeDuplicates(types);

	  if (flattened.length === 1) {
	    return flattened[0];
	  } else {
	    return t.unionTypeAnnotation(flattened);
	  }
	}

	/**
	 * Dedupe type annotations.
	 */

	function removeTypeDuplicates(nodes /*: Array<Object>*/) {
	  var generics = {};
	  var bases = {};

	  // store union type groups to circular references
	  var typeGroups = [];

	  var types = [];

	  for (var i = 0; i < nodes.length; i++) {
	    var node = nodes[i];
	    if (!node) continue;

	    // detect duplicates
	    if (types.indexOf(node) >= 0) {
	      continue;
	    }

	    // this type matches anything
	    if (t.isAnyTypeAnnotation(node)) {
	      return [node];
	    }

	    //
	    if (t.isFlowBaseAnnotation(node)) {
	      bases[node.type] = node;
	      continue;
	    }

	    //
	    if (t.isUnionTypeAnnotation(node)) {
	      if (typeGroups.indexOf(node.types) < 0) {
	        nodes = nodes.concat(node.types);
	        typeGroups.push(node.types);
	      }
	      continue;
	    }

	    // find a matching generic type and merge and deduplicate the type parameters
	    if (t.isGenericTypeAnnotation(node)) {
	      var _name = node.id.name;

	      if (generics[_name]) {
	        var existing = generics[_name];
	        if (existing.typeParameters) {
	          if (node.typeParameters) {
	            existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params.concat(node.typeParameters.params));
	          }
	        } else {
	          existing = node.typeParameters;
	        }
	      } else {
	        generics[_name] = node;
	      }

	      continue;
	    }

	    types.push(node);
	  }

	  // add back in bases
	  for (var type in bases) {
	    types.push(bases[type]);
	  }

	  // add back in generics
	  for (var _name2 in generics) {
	    types.push(generics[_name2]);
	  }

	  return types;
	}

	/**
	 * Create a type anotation based on typeof expression.
	 */

	function createTypeAnnotationBasedOnTypeof(type /*: string*/) {
	  if (type === "string") {
	    return t.stringTypeAnnotation();
	  } else if (type === "number") {
	    return t.numberTypeAnnotation();
	  } else if (type === "undefined") {
	    return t.voidTypeAnnotation();
	  } else if (type === "boolean") {
	    return t.booleanTypeAnnotation();
	  } else if (type === "function") {
	    return t.genericTypeAnnotation(t.identifier("Function"));
	  } else if (type === "object") {
	    return t.genericTypeAnnotation(t.identifier("Object"));
	  } else if (type === "symbol") {
	    return t.genericTypeAnnotation(t.identifier("Symbol"));
	  } else {
	    throw new Error("Invalid typeof value");
	  }
	}

/***/ },
/* 7121 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__, __webpack_module_template_argument_7__, __webpack_module_template_argument_8__, __webpack_module_template_argument_9__, __webpack_module_template_argument_10__, __webpack_module_template_argument_11__, __webpack_module_template_argument_12__, __webpack_module_template_argument_13__, __webpack_module_template_argument_14__, __webpack_module_template_argument_15__, __webpack_module_template_argument_16__, __webpack_module_template_argument_17__, __webpack_module_template_argument_18__) {

	/* @noflow */

	"use strict";

	var _Object$keys = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _getIterator = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_3__)["default"];

	var _defaults = __webpack_require__(__webpack_module_template_argument_4__)["default"];

	var _interopExportWildcard = __webpack_require__(__webpack_module_template_argument_5__)["default"];

	exports.__esModule = true;
	exports.is = is;
	exports.isType = isType;
	exports.validate = validate;
	exports.shallowEqual = shallowEqual;
	exports.appendToMemberExpression = appendToMemberExpression;
	exports.prependToMemberExpression = prependToMemberExpression;
	exports.ensureBlock = ensureBlock;
	exports.clone = clone;
	exports.cloneDeep = cloneDeep;
	exports.buildMatchMemberExpression = buildMatchMemberExpression;
	exports.removeComments = removeComments;
	exports.inheritsComments = inheritsComments;
	exports.inheritTrailingComments = inheritTrailingComments;
	exports.inheritLeadingComments = inheritLeadingComments;
	exports.inheritInnerComments = inheritInnerComments;
	exports.inherits = inherits;
	exports.assertNode = assertNode;
	exports.isNode = isNode;

	var _toFastProperties = __webpack_require__(__webpack_module_template_argument_6__);

	var _toFastProperties2 = _interopRequireDefault(_toFastProperties);

	var _lodashArrayCompact = __webpack_require__(__webpack_module_template_argument_7__);

	var _lodashArrayCompact2 = _interopRequireDefault(_lodashArrayCompact);

	var _lodashLangClone = __webpack_require__(__webpack_module_template_argument_8__);

	var _lodashLangClone2 = _interopRequireDefault(_lodashLangClone);

	var _lodashCollectionEach = __webpack_require__(__webpack_module_template_argument_9__);

	var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);

	var _lodashArrayUniq = __webpack_require__(__webpack_module_template_argument_10__);

	var _lodashArrayUniq2 = _interopRequireDefault(_lodashArrayUniq);

	__webpack_require__(__webpack_module_template_argument_11__);

	var _definitions = __webpack_require__(__webpack_module_template_argument_12__);

	var _react2 = __webpack_require__(__webpack_module_template_argument_13__);

	var _react = _interopRequireWildcard(_react2);

	var t = exports;

	/**
	 * Registers `is[Type]` and `assert[Type]` generated functions for a given `type`.
	 * Pass `skipAliasCheck` to force it to directly compare `node.type` with `type`.
	 */

	function registerType(type /*: string*/) {
	  var is = t["is" + type] = function (node, opts) {
	    return t.is(type, node, opts);
	  };

	  t["assert" + type] = function (node, opts) {
	    opts = opts || {};
	    if (!is(node, opts)) {
	      throw new Error("Expected type " + JSON.stringify(type) + " with option " + JSON.stringify(opts));
	    }
	  };
	}

	//

	var _constants = __webpack_require__(__webpack_module_template_argument_14__);

	_defaults(exports, _interopExportWildcard(_constants, _defaults));

	exports.VISITOR_KEYS = _definitions.VISITOR_KEYS;
	exports.ALIAS_KEYS = _definitions.ALIAS_KEYS;
	exports.NODE_FIELDS = _definitions.NODE_FIELDS;
	exports.BUILDER_KEYS = _definitions.BUILDER_KEYS;
	exports.DEPRECATED_KEYS = _definitions.DEPRECATED_KEYS;
	exports.react = _react;

	/**
	 * Registers `is[Type]` and `assert[Type]` for all types.
	 */

	for (var type in t.VISITOR_KEYS) {
	  registerType(type);
	}

	/**
	 * Flip `ALIAS_KEYS` for faster access in the reverse direction.
	 */

	t.FLIPPED_ALIAS_KEYS = {};

	_lodashCollectionEach2["default"](t.ALIAS_KEYS, function (aliases, type) {
	  _lodashCollectionEach2["default"](aliases, function (alias) {
	    var types = t.FLIPPED_ALIAS_KEYS[alias] = t.FLIPPED_ALIAS_KEYS[alias] || [];
	    types.push(type);
	  });
	});

	/**
	 * Registers `is[Alias]` and `assert[Alias]` functions for all aliases.
	 */

	_lodashCollectionEach2["default"](t.FLIPPED_ALIAS_KEYS, function (types, type) {
	  t[type.toUpperCase() + "_TYPES"] = types;
	  registerType(type);
	});

	var TYPES = _Object$keys(t.VISITOR_KEYS).concat(_Object$keys(t.FLIPPED_ALIAS_KEYS)).concat(_Object$keys(t.DEPRECATED_KEYS));

	exports.TYPES = TYPES;
	/**
	 * Returns whether `node` is of given `type`.
	 *
	 * For better performance, use this instead of `is[Type]` when `type` is unknown.
	 * Optionally, pass `skipAliasCheck` to directly compare `node.type` with `type`.
	 */

	function is(type /*: string*/, node /*: Object*/, opts /*:: ?: Object*/) /*: boolean*/ {
	  if (!node) return false;

	  var matches = isType(node.type, type);
	  if (!matches) return false;

	  if (typeof opts === "undefined") {
	    return true;
	  } else {
	    return t.shallowEqual(node, opts);
	  }
	}

	/**
	 * Test if a `nodeType` is a `targetType` or if `targetType` is an alias of `nodeType`.
	 */

	function isType(nodeType /*: string*/, targetType /*: string*/) /*: boolean*/ {
	  if (nodeType === targetType) return true;

	  var aliases /*: ?Array<string>*/ = t.FLIPPED_ALIAS_KEYS[targetType];
	  if (aliases) {
	    if (aliases[0] === nodeType) return true;

	    for (var _iterator = aliases, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var alias = _ref;

	      if (nodeType === alias) return true;
	    }
	  }

	  return false;
	}

	/**
	 * Description
	 */

	_lodashCollectionEach2["default"](t.BUILDER_KEYS, function (keys, type) {
	  function builder() {
	    if (arguments.length > keys.length) {
	      throw new Error("t." + type + ": Too many arguments passed. Received " + arguments.length + " but can receive no more than " + keys.length);
	    }

	    var node = {};
	    node.type = type;

	    var i = 0;

	    for (var _iterator2 = (keys /*: Array<string>*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var key = _ref2;

	      var field = t.NODE_FIELDS[type][key];

	      var arg = arguments[i++];
	      if (arg === undefined) arg = _lodashLangClone2["default"](field["default"]);

	      node[key] = arg;
	    }

	    for (var key in node) {
	      validate(node, key, node[key]);
	    }

	    return node;
	  }

	  t[type] = builder;
	  t[type[0].toLowerCase() + type.slice(1)] = builder;
	});

	/**
	 * Description
	 */

	var _loop = function (type) {
	  var proxy = function proxy(fn) {
	    return function () {
	      console.trace("The node type " + type + " has been renamed to " + newType);
	      return fn.apply(this, arguments);
	    };
	  };

	  var newType = t.DEPRECATED_KEYS[type];

	  t[type] = t[type[0].toLowerCase() + type.slice(1)] = proxy(t[newType]);
	  t["is" + type] = proxy(t["is" + newType]);
	  t["assert" + type] = proxy(t["assert" + newType]);
	};

	for (var type in t.DEPRECATED_KEYS) {
	  _loop(type);
	}

	/**
	 * Description
	 */

	function validate(node /*:: ?: Object*/, key /*: string*/, val /*: any*/) {
	  if (!node) return;

	  var fields = t.NODE_FIELDS[node.type];
	  if (!fields) return;

	  var field = fields[key];
	  if (!field || !field.validate) return;
	  if (field.optional && val == null) return;

	  field.validate(node, key, val);
	}

	/**
	 * Test if an object is shallowly equal.
	 */

	function shallowEqual(actual /*: Object*/, expected /*: Object*/) /*: boolean*/ {
	  var keys = _Object$keys(expected);

	  for (var _iterator3 = (keys /*: Array<string>*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	    var _ref3;

	    if (_isArray3) {
	      if (_i3 >= _iterator3.length) break;
	      _ref3 = _iterator3[_i3++];
	    } else {
	      _i3 = _iterator3.next();
	      if (_i3.done) break;
	      _ref3 = _i3.value;
	    }

	    var key = _ref3;

	    if (actual[key] !== expected[key]) {
	      return false;
	    }
	  }

	  return true;
	}

	/**
	 * Append a node to a member expression.
	 */

	function appendToMemberExpression(member /*: Object*/, append /*: Object*/, computed /*:: ?: boolean*/) /*: Object*/ {
	  member.object = t.memberExpression(member.object, member.property, member.computed);
	  member.property = append;
	  member.computed = !!computed;
	  return member;
	}

	/**
	 * Prepend a node to a member expression.
	 */

	function prependToMemberExpression(member /*: Object*/, prepend /*: Object*/) /*: Object*/ {
	  member.object = t.memberExpression(prepend, member.object);
	  return member;
	}

	/**
	 * Ensure the `key` (defaults to "body") of a `node` is a block.
	 * Casting it to a block if it is not.
	 */

	function ensureBlock(node /*: Object*/) /*: Object*/ {
	  var key /*: string*/ = arguments.length <= 1 || arguments[1] === undefined ? "body" : arguments[1];

	  return node[key] = t.toBlock(node[key], node);
	}

	/**
	 * Create a shallow clone of a `node` excluding `_private` properties.
	 */

	function clone(node /*: Object*/) /*: Object*/ {
	  var newNode = {};
	  for (var key in node) {
	    if (key[0] === "_") continue;
	    newNode[key] = node[key];
	  }
	  return newNode;
	}

	/**
	 * Create a deep clone of a `node` and all of it's child nodes
	 * exluding `_private` properties.
	 */

	function cloneDeep(node /*: Object*/) /*: Object*/ {
	  var newNode = {};

	  for (var key in node) {
	    if (key[0] === "_") continue;

	    var val = node[key];

	    if (val) {
	      if (val.type) {
	        val = t.cloneDeep(val);
	      } else if (Array.isArray(val)) {
	        val = val.map(t.cloneDeep);
	      }
	    }

	    newNode[key] = val;
	  }

	  return newNode;
	}

	/**
	 * Build a function that when called will return whether or not the
	 * input `node` `MemberExpression` matches the input `match`.
	 *
	 * For example, given the match `React.createClass` it would match the
	 * parsed nodes of `React.createClass` and `React["createClass"]`.
	 */

	function buildMatchMemberExpression(match /*:string*/, allowPartial /*:: ?: boolean*/) /*: Function*/ {
	  var parts = match.split(".");

	  return function (member) {
	    // not a member expression
	    if (!t.isMemberExpression(member)) return false;

	    var search = [member];
	    var i = 0;

	    while (search.length) {
	      var node = search.shift();

	      if (allowPartial && i === parts.length) {
	        return true;
	      }

	      if (t.isIdentifier(node)) {
	        // this part doesn't match
	        if (parts[i] !== node.name) return false;
	      } else if (t.isStringLiteral(node)) {
	        // this part doesn't match
	        if (parts[i] !== node.value) return false;
	      } else if (t.isMemberExpression(node)) {
	        if (node.computed && !t.isStringLiteral(node.property)) {
	          // we can't deal with this
	          return false;
	        } else {
	          search.push(node.object);
	          search.push(node.property);
	          continue;
	        }
	      } else {
	        // we can't deal with this
	        return false;
	      }

	      // too many parts
	      if (++i > parts.length) {
	        return false;
	      }
	    }

	    return true;
	  };
	}

	/**
	 * Remove comment properties from a node.
	 */

	function removeComments(node /*: Object*/) /*: Object*/ {
	  for (var _iterator4 = t.COMMENT_KEYS, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	    var _ref4;

	    if (_isArray4) {
	      if (_i4 >= _iterator4.length) break;
	      _ref4 = _iterator4[_i4++];
	    } else {
	      _i4 = _iterator4.next();
	      if (_i4.done) break;
	      _ref4 = _i4.value;
	    }

	    var key = _ref4;

	    delete node[key];
	  }
	  return node;
	}

	/**
	 * Inherit all unique comments from `parent` node to `child` node.
	 */

	function inheritsComments(child /*: Object*/, parent /*: Object*/) /*: Object*/ {
	  inheritTrailingComments(child, parent);
	  inheritLeadingComments(child, parent);
	  inheritInnerComments(child, parent);
	  return child;
	}

	function inheritTrailingComments(child /*: Object*/, parent /*: Object*/) {
	  _inheritComments("trailingComments", child, parent);
	}

	function inheritLeadingComments(child /*: Object*/, parent /*: Object*/) {
	  _inheritComments("leadingComments", child, parent);
	}

	function inheritInnerComments(child /*: Object*/, parent /*: Object*/) {
	  _inheritComments("innerComments", child, parent);
	}

	function _inheritComments(key, child, parent) {
	  if (child && parent) {
	    child[key] = _lodashArrayUniq2["default"](_lodashArrayCompact2["default"]([].concat(child[key], parent[key])));
	  }
	}

	/**
	 * Inherit all contextual properties from `parent` node to `child` node.
	 */

	function inherits(child /*: Object*/, parent /*: Object*/) /*: Object*/ {
	  if (!child || !parent) return child;

	  // optionally inherit specific properties if not null
	  for (var _iterator5 = (t.INHERIT_KEYS.optional /*: Array<string>*/), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
	    var _ref5;

	    if (_isArray5) {
	      if (_i5 >= _iterator5.length) break;
	      _ref5 = _iterator5[_i5++];
	    } else {
	      _i5 = _iterator5.next();
	      if (_i5.done) break;
	      _ref5 = _i5.value;
	    }

	    var key = _ref5;

	    if (child[key] == null) {
	      child[key] = parent[key];
	    }
	  }

	  // force inherit "private" properties
	  for (var key in parent) {
	    if (key[0] === "_") child[key] = parent[key];
	  }

	  // force inherit select properties
	  for (var _iterator6 = (t.INHERIT_KEYS.force /*: Array<string>*/), _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _getIterator(_iterator6);;) {
	    var _ref6;

	    if (_isArray6) {
	      if (_i6 >= _iterator6.length) break;
	      _ref6 = _iterator6[_i6++];
	    } else {
	      _i6 = _iterator6.next();
	      if (_i6.done) break;
	      _ref6 = _i6.value;
	    }

	    var key = _ref6;

	    child[key] = parent[key];
	  }

	  t.inheritsComments(child, parent);

	  return child;
	}

	/**
	 * TODO
	 */

	function assertNode(node /*:: ?*/) {
	  if (!isNode(node)) {
	    throw new TypeError("Not a valid node " + (node && node.type));
	  }
	}

	/**
	 * TODO
	 */

	function isNode(node /*:: ?*/) /*: boolean*/ {
	  return !!(node && _definitions.VISITOR_KEYS[node.type]);
	}

	// Optimize property access.
	_toFastProperties2["default"](t);
	_toFastProperties2["default"](t.VISITOR_KEYS);

	//

	var _retrievers = __webpack_require__(__webpack_module_template_argument_15__);

	_defaults(exports, _interopExportWildcard(_retrievers, _defaults));

	var _validators = __webpack_require__(__webpack_module_template_argument_16__);

	_defaults(exports, _interopExportWildcard(_validators, _defaults));

	var _converters = __webpack_require__(__webpack_module_template_argument_17__);

	_defaults(exports, _interopExportWildcard(_converters, _defaults));

	var _flow = __webpack_require__(__webpack_module_template_argument_18__);

	_defaults(exports, _interopExportWildcard(_flow, _defaults));

/***/ },
/* 7122 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	/* @flow */

	"use strict";

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;
	exports.isCompatTag = isCompatTag;
	exports.buildChildren = buildChildren;

	var _index = __webpack_require__(__webpack_module_template_argument_1__);

	var t = _interopRequireWildcard(_index);

	var isReactComponent = t.buildMatchMemberExpression("React.Component");

	exports.isReactComponent = isReactComponent;

	function isCompatTag(tagName /*:: ?: string*/) /*: boolean*/ {
	  return !!tagName && /^[a-z]|\-/.test(tagName);
	}

	function cleanJSXElementLiteralChild(child /*: { value: string }*/, args /*: Array<Object>*/) {
	  var lines = child.value.split(/\r\n|\n|\r/);

	  var lastNonEmptyLine = 0;

	  for (var i = 0; i < lines.length; i++) {
	    if (lines[i].match(/[^ \t]/)) {
	      lastNonEmptyLine = i;
	    }
	  }

	  var str = "";

	  for (var i = 0; i < lines.length; i++) {
	    var line = lines[i];

	    var isFirstLine = i === 0;
	    var isLastLine = i === lines.length - 1;
	    var isLastNonEmptyLine = i === lastNonEmptyLine;

	    // replace rendered whitespace tabs with spaces
	    var trimmedLine = line.replace(/\t/g, " ");

	    // trim whitespace touching a newline
	    if (!isFirstLine) {
	      trimmedLine = trimmedLine.replace(/^[ ]+/, "");
	    }

	    // trim whitespace touching an endline
	    if (!isLastLine) {
	      trimmedLine = trimmedLine.replace(/[ ]+$/, "");
	    }

	    if (trimmedLine) {
	      if (!isLastNonEmptyLine) {
	        trimmedLine += " ";
	      }

	      str += trimmedLine;
	    }
	  }

	  if (str) args.push(t.stringLiteral(str));
	}

	function buildChildren(node /*: Object*/) /*: Array<Object>*/ {
	  var elems = [];

	  for (var i = 0; i < node.children.length; i++) {
	    var child = node.children[i];

	    if (t.isJSXText(child)) {
	      cleanJSXElementLiteralChild(child, elems);
	      continue;
	    }

	    if (t.isJSXExpressionContainer(child)) child = child.expression;
	    if (t.isJSXEmptyExpression(child)) continue;

	    elems.push(child);
	  }

	  return elems;
	}

/***/ },
/* 7123 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	/* @flow */

	"use strict";

	var _Object$create = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	exports.__esModule = true;
	exports.getBindingIdentifiers = getBindingIdentifiers;
	exports.getOuterBindingIdentifiers = getOuterBindingIdentifiers;

	var _index = __webpack_require__(__webpack_module_template_argument_2__);

	var t = _interopRequireWildcard(_index);

	/**
	 * Return a list of binding identifiers associated with the input `node`.
	 */

	function getBindingIdentifiers(node /*: Object*/, duplicates /*:: ?: boolean*/, outerOnly /*:: ?: boolean*/) /*: Object*/ {
	  var search = [].concat(node);
	  var ids = _Object$create(null);

	  while (search.length) {
	    var id = search.shift();
	    if (!id) continue;

	    var keys = t.getBindingIdentifiers.keys[id.type];

	    if (t.isIdentifier(id)) {
	      if (duplicates) {
	        var _ids = ids[id.name] = ids[id.name] || [];
	        _ids.push(id);
	      } else {
	        ids[id.name] = id;
	      }
	      continue;
	    }

	    if (t.isExportDeclaration(id)) {
	      if (t.isDeclaration(node.declaration)) {
	        search.push(node.declaration);
	      }
	      continue;
	    }

	    if (outerOnly) {
	      if (t.isFunctionDeclaration(id)) {
	        search.push(id.id);
	        continue;
	      }

	      if (t.isFunctionExpression(id)) {
	        continue;
	      }
	    }

	    if (keys) {
	      for (var i = 0; i < keys.length; i++) {
	        var key = keys[i];
	        if (id[key]) {
	          search = search.concat(id[key]);
	        }
	      }
	    }
	  }

	  return ids;
	}

	/**
	 * Mapping of types to their identifier keys.
	 */

	getBindingIdentifiers.keys = {
	  DeclareClass: ["id"],
	  DeclareFunction: ["id"],
	  DeclareModule: ["id"],
	  DeclareVariable: ["id"],
	  InterfaceDeclaration: ["id"],
	  TypeAlias: ["id"],

	  CatchClause: ["param"],
	  LabeledStatement: ["label"],
	  UnaryExpression: ["argument"],
	  AssignmentExpression: ["left"],

	  ImportSpecifier: ["local"],
	  ImportNamespaceSpecifier: ["local"],
	  ImportDefaultSpecifier: ["local"],
	  ImportDeclaration: ["specifiers"],

	  ExportSpecifier: ["exported"],
	  ExportNamespaceSpecifier: ["exported"],
	  ExportDefaultSpecifier: ["exported"],

	  FunctionDeclaration: ["id", "params"],
	  FunctionExpression: ["id", "params"],

	  ClassDeclaration: ["id"],
	  ClassExpression: ["id"],

	  RestElement: ["argument"],
	  UpdateExpression: ["argument"],

	  SpreadProperty: ["argument"],
	  ObjectProperty: ["value"],

	  AssignmentPattern: ["left"],
	  ArrayPattern: ["elements"],
	  ObjectPattern: ["properties"],

	  VariableDeclaration: ["declarations"],
	  VariableDeclarator: ["id"]
	};

	function getOuterBindingIdentifiers(node /*: Object*/, duplicates /*:: ?: boolean*/) /*: Object*/ {
	  return getBindingIdentifiers(node, duplicates, true);
	}

/***/ },
/* 7124 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__) {

	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	exports.__esModule = true;
	exports.isBinding = isBinding;
	exports.isReferenced = isReferenced;
	exports.isValidIdentifier = isValidIdentifier;
	exports.isLet = isLet;
	exports.isBlockScoped = isBlockScoped;
	exports.isVar = isVar;
	exports.isSpecifierDefault = isSpecifierDefault;
	exports.isScope = isScope;
	exports.isImmutable = isImmutable;

	var _retrievers = __webpack_require__(__webpack_module_template_argument_3__);

	var _esutils = __webpack_require__(__webpack_module_template_argument_4__);

	var _esutils2 = _interopRequireDefault(_esutils);

	var _index = __webpack_require__(__webpack_module_template_argument_5__);

	var t = _interopRequireWildcard(_index);

	var _constants = __webpack_require__(__webpack_module_template_argument_6__);

	/**
	 * Check if the input `node` is a binding identifier.
	 */

	function isBinding(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  var keys = _retrievers.getBindingIdentifiers.keys[parent.type];
	  if (keys) {
	    for (var i = 0; i < keys.length; i++) {
	      var key = keys[i];
	      var val = parent[key];
	      if (Array.isArray(val)) {
	        if (val.indexOf(node) >= 0) return true;
	      } else {
	        if (val === node) return true;
	      }
	    }
	  }

	  return false;
	}

	/**
	 * Check if the input `node` is a reference to a bound variable.
	 */

	function isReferenced(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  switch (parent.type) {
	    // yes: PARENT[NODE]
	    // yes: NODE.child
	    // no: parent.NODE
	    case "MemberExpression":
	    case "JSXMemberExpression":
	    case "BindExpression":
	      if (parent.property === node && parent.computed) {
	        return true;
	      } else if (parent.object === node) {
	        return true;
	      } else {
	        return false;
	      }

	    // no: new.NODE
	    // no: NODE.target
	    case "MetaProperty":
	      return false;

	    // yes: { [NODE]: "" }
	    // yes: { NODE }
	    // no: { NODE: "" }
	    case "ObjectProperty":
	      if (parent.key === node) {
	        return parent.computed;
	      }

	    // no: let NODE = init;
	    // yes: let id = NODE;
	    case "VariableDeclarator":
	      return parent.id !== node;

	    // no: function NODE() {}
	    // no: function foo(NODE) {}
	    case "ArrowFunctionExpression":
	    case "FunctionDeclaration":
	    case "FunctionExpression":
	      for (var _iterator = (parent.params /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	        var _ref;

	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }

	        var param = _ref;

	        if (param === node) return false;
	      }

	      return parent.id !== node;

	    // no: export { foo as NODE };
	    // yes: export { NODE as foo };
	    // no: export { NODE as foo } from "foo";
	    case "ExportSpecifier":
	      if (parent.source) {
	        return false;
	      } else {
	        return parent.local === node;
	      }

	    // no: export NODE from "foo";
	    // no: export * as NODE from "foo";
	    case "ExportNamespaceSpecifier":
	    case "ExportDefaultSpecifier":
	      return false;

	    // no: <div NODE="foo" />
	    case "JSXAttribute":
	      return parent.name !== node;

	    // no: class { NODE = value; }
	    // yes: class { key = NODE; }
	    case "ClassProperty":
	      return parent.value === node;

	    // no: import NODE from "foo";
	    // no: import * as NODE from "foo";
	    // no: import { NODE as foo } from "foo";
	    // no: import { foo as NODE } from "foo";
	    // no: import NODE from "bar";
	    case "ImportDefaultSpecifier":
	    case "ImportNamespaceSpecifier":
	    case "ImportSpecifier":
	      return false;

	    // no: class NODE {}
	    case "ClassDeclaration":
	    case "ClassExpression":
	      return parent.id !== node;

	    // yes: class { [NODE](){} }
	    case "ClassMethod":
	    case "ObjectMethod":
	      return parent.key === node && parent.computed;

	    // no: NODE: for (;;) {}
	    case "LabeledStatement":
	      return false;

	    // no: try {} catch (NODE) {}
	    case "CatchClause":
	      return parent.param !== node;

	    // no: function foo(...NODE) {}
	    case "RestElement":
	      return false;

	    // yes: left = NODE;
	    // no: NODE = right;
	    case "AssignmentExpression":
	      return parent.right === node;

	    // no: [NODE = foo] = [];
	    // yes: [foo = NODE] = [];
	    case "AssignmentPattern":
	      return parent.right === node;

	    // no: [NODE] = [];
	    // no: ({ NODE }) = [];
	    case "ObjectPattern":
	    case "ArrayPattern":
	      return false;
	  }

	  return true;
	}

	/**
	 * Check if the input `name` is a valid identifier name
	 * and isn't a reserved word.
	 */

	function isValidIdentifier(name /*: string*/) /*: boolean*/ {
	  if (typeof name !== "string" || _esutils2["default"].keyword.isReservedWordES6(name, true)) {
	    return false;
	  } else {
	    return _esutils2["default"].keyword.isIdentifierNameES6(name);
	  }
	}

	/**
	 * Check if the input `node` is a `let` variable declaration.
	 */

	function isLet(node /*: Object*/) /*: boolean*/ {
	  return t.isVariableDeclaration(node) && (node.kind !== "var" || node[_constants.BLOCK_SCOPED_SYMBOL]);
	}

	/**
	 * Check if the input `node` is block scoped.
	 */

	function isBlockScoped(node /*: Object*/) /*: boolean*/ {
	  return t.isFunctionDeclaration(node) || t.isClassDeclaration(node) || t.isLet(node);
	}

	/**
	 * Check if the input `node` is a variable declaration.
	 */

	function isVar(node /*: Object*/) /*: boolean*/ {
	  return t.isVariableDeclaration(node, { kind: "var" }) && !node[_constants.BLOCK_SCOPED_SYMBOL];
	}

	/**
	 * Check if the input `specifier` is a `default` import or export.
	 */

	function isSpecifierDefault(specifier /*: Object*/) /*: boolean*/ {
	  return t.isImportDefaultSpecifier(specifier) || t.isIdentifier(specifier.imported || specifier.exported, { name: "default" });
	}

	/**
	 * Check if the input `node` is a scope.
	 */

	function isScope(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  if (t.isBlockStatement(node) && t.isFunction(parent, { body: node })) {
	    return false;
	  }

	  return t.isScopable(node);
	}

	/**
	 * Check if the input `node` is definitely immutable.
	 */

	function isImmutable(node /*: Object*/) /*: boolean*/ {
	  if (t.isType(node.type, "Immutable")) return true;

	  if (t.isIdentifier(node)) {
	    if (node.name === "undefined") {
	      // immutable!
	      return true;
	    } else {
	      // no idea...
	      return false;
	    }
	  }

	  return false;
	}

/***/ },
/* 7125 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	
	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = __webpack_require__(__webpack_module_template_argument_0__);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome
	               && 'undefined' != typeof chrome.storage
	                  ? chrome.storage.local
	                  : localstorage();

	/**
	 * Colors.
	 */

	exports.colors = [
	  'lightseagreen',
	  'forestgreen',
	  'goldenrod',
	  'dodgerblue',
	  'darkorchid',
	  'crimson'
	];

	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	function useColors() {
	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  return ('WebkitAppearance' in document.documentElement.style) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (window.console && (console.firebug || (console.exception && console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
	}

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	exports.formatters.j = function(v) {
	  return JSON.stringify(v);
	};


	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;

	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);

	  if (!useColors) return args;

	  var c = 'color: ' + this.color;
	  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });

	  args.splice(lastC, 0, c);
	  return args;
	}

	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */

	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === typeof console
	    && console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */

	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch(e) {}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */

	function load() {
	  var r;
	  try {
	    r = exports.storage.debug;
	  } catch(e) {}
	  return r;
	}

	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */

	exports.enable(load());

	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */

	function localstorage(){
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}


/***/ },
/* 7126 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * The currently active debug mode names, and names to skip.
	 */

	exports.names = [];
	exports.skips = [];

	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */

	exports.formatters = {};

	/**
	 * Previously assigned color.
	 */

	var prevColor = 0;

	/**
	 * Previous log timestamp.
	 */

	var prevTime;

	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */

	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}

	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */

	function debug(namespace) {

	  // define the `disabled` version
	  function disabled() {
	  }
	  disabled.enabled = false;

	  // define the `enabled` version
	  function enabled() {

	    var self = enabled;

	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;

	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();

	    var args = Array.prototype.slice.call(arguments);

	    args[0] = exports.coerce(args[0]);

	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }

	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);

	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });

	    if ('function' === typeof exports.formatArgs) {
	      args = exports.formatArgs.apply(self, args);
	    }
	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;

	  var fn = exports.enabled(namespace) ? enabled : disabled;

	  fn.namespace = namespace;

	  return fn;
	}

	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */

	function enable(namespaces) {
	  exports.save(namespaces);

	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;

	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	function disable() {
	  exports.enable('');
	}

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}


/***/ },
/* 7127 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__) {

	var baseCallback = __webpack_require__(__webpack_module_template_argument_0__),
	    baseUniq = __webpack_require__(__webpack_module_template_argument_1__),
	    isIterateeCall = __webpack_require__(__webpack_module_template_argument_2__),
	    sortedUniq = __webpack_require__(__webpack_module_template_argument_3__);

	/**
	 * Creates a duplicate-free version of an array, using
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	 * for equality comparisons, in which only the first occurence of each element
	 * is kept. Providing `true` for `isSorted` performs a faster search algorithm
	 * for sorted arrays. If an iteratee function is provided it's invoked for
	 * each element in the array to generate the criterion by which uniqueness
	 * is computed. The `iteratee` is bound to `thisArg` and invoked with three
	 * arguments: (value, index, array).
	 *
	 * If a property name is provided for `iteratee` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `iteratee` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @alias unique
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {boolean} [isSorted] Specify the array is sorted.
	 * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {Array} Returns the new duplicate-value-free array.
	 * @example
	 *
	 * _.uniq([2, 1, 2]);
	 * // => [2, 1]
	 *
	 * // using `isSorted`
	 * _.uniq([1, 1, 2], true);
	 * // => [1, 2]
	 *
	 * // using an iteratee function
	 * _.uniq([1, 2.5, 1.5, 2], function(n) {
	 *   return this.floor(n);
	 * }, Math);
	 * // => [1, 2.5]
	 *
	 * // using the `_.property` callback shorthand
	 * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	 * // => [{ 'x': 1 }, { 'x': 2 }]
	 */
	function uniq(array, isSorted, iteratee, thisArg) {
	  var length = array ? array.length : 0;
	  if (!length) {
	    return [];
	  }
	  if (isSorted != null && typeof isSorted != 'boolean') {
	    thisArg = iteratee;
	    iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
	    isSorted = false;
	  }
	  iteratee = iteratee == null ? iteratee : baseCallback(iteratee, thisArg, 3);
	  return (isSorted)
	    ? sortedUniq(array, iteratee)
	    : baseUniq(array, iteratee);
	}

	module.exports = uniq;


/***/ },
/* 7128 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	module.exports = __webpack_require__(__webpack_module_template_argument_0__);


/***/ },
/* 7129 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var arrayEach = __webpack_require__(__webpack_module_template_argument_0__),
	    baseEach = __webpack_require__(__webpack_module_template_argument_1__),
	    createForEach = __webpack_require__(__webpack_module_template_argument_2__);

	/**
	 * Iterates over elements of `collection` invoking `iteratee` for each element.
	 * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	 * (value, index|key, collection). Iteratee functions may exit iteration early
	 * by explicitly returning `false`.
	 *
	 * **Note:** As with other "Collections" methods, objects with a "length" property
	 * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
	 * may be used for object iteration.
	 *
	 * @static
	 * @memberOf _
	 * @alias each
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {Array|Object|string} Returns `collection`.
	 * @example
	 *
	 * _([1, 2]).forEach(function(n) {
	 *   console.log(n);
	 * }).value();
	 * // => logs each value from left to right and returns the array
	 *
	 * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
	 *   console.log(n, key);
	 * });
	 * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
	 */
	var forEach = createForEach(arrayEach, baseEach);

	module.exports = forEach;


/***/ },
/* 7130 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__) {

	var baseIndexOf = __webpack_require__(__webpack_module_template_argument_0__),
	    getLength = __webpack_require__(__webpack_module_template_argument_1__),
	    isArray = __webpack_require__(__webpack_module_template_argument_2__),
	    isIterateeCall = __webpack_require__(__webpack_module_template_argument_3__),
	    isLength = __webpack_require__(__webpack_module_template_argument_4__),
	    isString = __webpack_require__(__webpack_module_template_argument_5__),
	    values = __webpack_require__(__webpack_module_template_argument_6__);

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * Checks if `target` is in `collection` using
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	 * for equality comparisons. If `fromIndex` is negative, it's used as the offset
	 * from the end of `collection`.
	 *
	 * @static
	 * @memberOf _
	 * @alias contains, include
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to search.
	 * @param {*} target The value to search for.
	 * @param {number} [fromIndex=0] The index to search from.
	 * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	 * @returns {boolean} Returns `true` if a matching element is found, else `false`.
	 * @example
	 *
	 * _.includes([1, 2, 3], 1);
	 * // => true
	 *
	 * _.includes([1, 2, 3], 1, 2);
	 * // => false
	 *
	 * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
	 * // => true
	 *
	 * _.includes('pebbles', 'eb');
	 * // => true
	 */
	function includes(collection, target, fromIndex, guard) {
	  var length = collection ? getLength(collection) : 0;
	  if (!isLength(length)) {
	    collection = values(collection);
	    length = collection.length;
	  }
	  if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
	    fromIndex = 0;
	  } else {
	    fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
	  }
	  return (typeof collection == 'string' || !isArray(collection) && isString(collection))
	    ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)
	    : (!!length && baseIndexOf(collection, target, fromIndex) > -1);
	}

	module.exports = includes;


/***/ },
/* 7131 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	/* WEBPACK VAR INJECTION */(function(global) {var cachePush = __webpack_require__(__webpack_module_template_argument_0__),
	    getNative = __webpack_require__(__webpack_module_template_argument_1__);

	/** Native method references. */
	var Set = getNative(global, 'Set');

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeCreate = getNative(Object, 'create');

	/**
	 *
	 * Creates a cache object to store unique values.
	 *
	 * @private
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache(values) {
	  var length = values ? values.length : 0;

	  this.data = { 'hash': nativeCreate(null), 'set': new Set };
	  while (length--) {
	    this.push(values[length]);
	  }
	}

	// Add functions to the `Set` cache.
	SetCache.prototype.push = cachePush;

	module.exports = SetCache;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 7132 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var keys = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * A specialized version of `_.assign` for customizing assigned values without
	 * support for argument juggling, multiple sources, and `this` binding `customizer`
	 * functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {Function} customizer The function to customize assigned values.
	 * @returns {Object} Returns `object`.
	 */
	function assignWith(object, source, customizer) {
	  var index = -1,
	      props = keys(source),
	      length = props.length;

	  while (++index < length) {
	    var key = props[index],
	        value = object[key],
	        result = customizer(value, source[key], key, object, source);

	    if ((result === result ? (result !== value) : (value === value)) ||
	        (value === undefined && !(key in object))) {
	      object[key] = result;
	    }
	  }
	  return object;
	}

	module.exports = assignWith;


/***/ },
/* 7133 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var baseCopy = __webpack_require__(__webpack_module_template_argument_0__),
	    keys = __webpack_require__(__webpack_module_template_argument_1__);

	/**
	 * The base implementation of `_.assign` without support for argument juggling,
	 * multiple sources, and `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssign(object, source) {
	  return source == null
	    ? object
	    : baseCopy(source, keys(source), object);
	}

	module.exports = baseAssign;


/***/ },
/* 7134 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	var baseMatches = __webpack_require__(__webpack_module_template_argument_0__),
	    baseMatchesProperty = __webpack_require__(__webpack_module_template_argument_1__),
	    bindCallback = __webpack_require__(__webpack_module_template_argument_2__),
	    identity = __webpack_require__(__webpack_module_template_argument_3__),
	    property = __webpack_require__(__webpack_module_template_argument_4__);

	/**
	 * The base implementation of `_.callback` which supports specifying the
	 * number of arguments to provide to `func`.
	 *
	 * @private
	 * @param {*} [func=_.identity] The value to convert to a callback.
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @param {number} [argCount] The number of arguments to provide to `func`.
	 * @returns {Function} Returns the callback.
	 */
	function baseCallback(func, thisArg, argCount) {
	  var type = typeof func;
	  if (type == 'function') {
	    return thisArg === undefined
	      ? func
	      : bindCallback(func, thisArg, argCount);
	  }
	  if (func == null) {
	    return identity;
	  }
	  if (type == 'object') {
	    return baseMatches(func);
	  }
	  return thisArg === undefined
	    ? property(func)
	    : baseMatchesProperty(func, thisArg);
	}

	module.exports = baseCallback;


/***/ },
/* 7135 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__, __webpack_module_template_argument_7__, __webpack_module_template_argument_8__) {

	var arrayCopy = __webpack_require__(__webpack_module_template_argument_0__),
	    arrayEach = __webpack_require__(__webpack_module_template_argument_1__),
	    baseAssign = __webpack_require__(__webpack_module_template_argument_2__),
	    baseForOwn = __webpack_require__(__webpack_module_template_argument_3__),
	    initCloneArray = __webpack_require__(__webpack_module_template_argument_4__),
	    initCloneByTag = __webpack_require__(__webpack_module_template_argument_5__),
	    initCloneObject = __webpack_require__(__webpack_module_template_argument_6__),
	    isArray = __webpack_require__(__webpack_module_template_argument_7__),
	    isObject = __webpack_require__(__webpack_module_template_argument_8__);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values supported by `_.clone`. */
	var cloneableTags = {};
	cloneableTags[argsTag] = cloneableTags[arrayTag] =
	cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
	cloneableTags[dateTag] = cloneableTags[float32Tag] =
	cloneableTags[float64Tag] = cloneableTags[int8Tag] =
	cloneableTags[int16Tag] = cloneableTags[int32Tag] =
	cloneableTags[numberTag] = cloneableTags[objectTag] =
	cloneableTags[regexpTag] = cloneableTags[stringTag] =
	cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	cloneableTags[errorTag] = cloneableTags[funcTag] =
	cloneableTags[mapTag] = cloneableTags[setTag] =
	cloneableTags[weakMapTag] = false;

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * The base implementation of `_.clone` without support for argument juggling
	 * and `this` binding `customizer` functions.
	 *
	 * @private
	 * @param {*} value The value to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @param {Function} [customizer] The function to customize cloning values.
	 * @param {string} [key] The key of `value`.
	 * @param {Object} [object] The object `value` belongs to.
	 * @param {Array} [stackA=[]] Tracks traversed source objects.
	 * @param {Array} [stackB=[]] Associates clones with source counterparts.
	 * @returns {*} Returns the cloned value.
	 */
	function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
	  var result;
	  if (customizer) {
	    result = object ? customizer(value, key, object) : customizer(value);
	  }
	  if (result !== undefined) {
	    return result;
	  }
	  if (!isObject(value)) {
	    return value;
	  }
	  var isArr = isArray(value);
	  if (isArr) {
	    result = initCloneArray(value);
	    if (!isDeep) {
	      return arrayCopy(value, result);
	    }
	  } else {
	    var tag = objToString.call(value),
	        isFunc = tag == funcTag;

	    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	      result = initCloneObject(isFunc ? {} : value);
	      if (!isDeep) {
	        return baseAssign(result, value);
	      }
	    } else {
	      return cloneableTags[tag]
	        ? initCloneByTag(value, tag, isDeep)
	        : (object ? value : {});
	    }
	  }
	  // Check for circular references and return its corresponding clone.
	  stackA || (stackA = []);
	  stackB || (stackB = []);

	  var length = stackA.length;
	  while (length--) {
	    if (stackA[length] == value) {
	      return stackB[length];
	    }
	  }
	  // Add the source value to the stack of traversed objects and associate it with its clone.
	  stackA.push(value);
	  stackB.push(result);

	  // Recursively populate clone (susceptible to call stack limits).
	  (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
	    result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
	  });
	  return result;
	}

	module.exports = baseClone;


/***/ },
/* 7136 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var baseForOwn = __webpack_require__(__webpack_module_template_argument_0__),
	    createBaseEach = __webpack_require__(__webpack_module_template_argument_1__);

	/**
	 * The base implementation of `_.forEach` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object|string} Returns `collection`.
	 */
	var baseEach = createBaseEach(baseForOwn);

	module.exports = baseEach;


/***/ },
/* 7137 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var createBaseFor = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * The base implementation of `baseForIn` and `baseForOwn` which iterates
	 * over `object` properties returned by `keysFunc` invoking `iteratee` for
	 * each property. Iteratee functions may exit iteration early by explicitly
	 * returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = createBaseFor();

	module.exports = baseFor;


/***/ },
/* 7138 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var baseFor = __webpack_require__(__webpack_module_template_argument_0__),
	    keysIn = __webpack_require__(__webpack_module_template_argument_1__);

	/**
	 * The base implementation of `_.forIn` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForIn(object, iteratee) {
	  return baseFor(object, iteratee, keysIn);
	}

	module.exports = baseForIn;


/***/ },
/* 7139 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var baseFor = __webpack_require__(__webpack_module_template_argument_0__),
	    keys = __webpack_require__(__webpack_module_template_argument_1__);

	/**
	 * The base implementation of `_.forOwn` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn(object, iteratee) {
	  return baseFor(object, iteratee, keys);
	}

	module.exports = baseForOwn;


/***/ },
/* 7140 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var toObject = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * The base implementation of `get` without support for string paths
	 * and default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} path The path of the property to get.
	 * @param {string} [pathKey] The key representation of path.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path, pathKey) {
	  if (object == null) {
	    return;
	  }
	  if (pathKey !== undefined && pathKey in toObject(object)) {
	    path = [pathKey];
	  }
	  var index = 0,
	      length = path.length;

	  while (object != null && index < length) {
	    object = object[path[index++]];
	  }
	  return (index && index == length) ? object : undefined;
	}

	module.exports = baseGet;


/***/ },
/* 7141 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var indexOfNaN = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * The base implementation of `_.indexOf` without support for binary searches.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseIndexOf(array, value, fromIndex) {
	  if (value !== value) {
	    return indexOfNaN(array, fromIndex);
	  }
	  var index = fromIndex - 1,
	      length = array.length;

	  while (++index < length) {
	    if (array[index] === value) {
	      return index;
	    }
	  }
	  return -1;
	}

	module.exports = baseIndexOf;


/***/ },
/* 7142 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var baseIsEqualDeep = __webpack_require__(__webpack_module_template_argument_0__),
	    isObject = __webpack_require__(__webpack_module_template_argument_1__),
	    isObjectLike = __webpack_require__(__webpack_module_template_argument_2__);

	/**
	 * The base implementation of `_.isEqual` without support for `this` binding
	 * `customizer` functions.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {Function} [customizer] The function to customize comparing values.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA] Tracks traversed `value` objects.
	 * @param {Array} [stackB] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
	}

	module.exports = baseIsEqual;


/***/ },
/* 7143 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	var equalArrays = __webpack_require__(__webpack_module_template_argument_0__),
	    equalByTag = __webpack_require__(__webpack_module_template_argument_1__),
	    equalObjects = __webpack_require__(__webpack_module_template_argument_2__),
	    isArray = __webpack_require__(__webpack_module_template_argument_3__),
	    isTypedArray = __webpack_require__(__webpack_module_template_argument_4__);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    objectTag = '[object Object]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparing objects.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA=[]] Tracks traversed `value` objects.
	 * @param {Array} [stackB=[]] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	  var objIsArr = isArray(object),
	      othIsArr = isArray(other),
	      objTag = arrayTag,
	      othTag = arrayTag;

	  if (!objIsArr) {
	    objTag = objToString.call(object);
	    if (objTag == argsTag) {
	      objTag = objectTag;
	    } else if (objTag != objectTag) {
	      objIsArr = isTypedArray(object);
	    }
	  }
	  if (!othIsArr) {
	    othTag = objToString.call(other);
	    if (othTag == argsTag) {
	      othTag = objectTag;
	    } else if (othTag != objectTag) {
	      othIsArr = isTypedArray(other);
	    }
	  }
	  var objIsObj = objTag == objectTag,
	      othIsObj = othTag == objectTag,
	      isSameTag = objTag == othTag;

	  if (isSameTag && !(objIsArr || objIsObj)) {
	    return equalByTag(object, other, objTag);
	  }
	  if (!isLoose) {
	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	    if (objIsWrapped || othIsWrapped) {
	      return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  // Assume cyclic values are equal.
	  // For more information on detecting circular references see https://es5.github.io/#JO.
	  stackA || (stackA = []);
	  stackB || (stackB = []);

	  var length = stackA.length;
	  while (length--) {
	    if (stackA[length] == object) {
	      return stackB[length] == other;
	    }
	  }
	  // Add `object` and `other` to the stack of traversed objects.
	  stackA.push(object);
	  stackB.push(other);

	  var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

	  stackA.pop();
	  stackB.pop();

	  return result;
	}

	module.exports = baseIsEqualDeep;


/***/ },
/* 7144 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var baseIsEqual = __webpack_require__(__webpack_module_template_argument_0__),
	    toObject = __webpack_require__(__webpack_module_template_argument_1__);

	/**
	 * The base implementation of `_.isMatch` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Array} matchData The propery names, values, and compare flags to match.
	 * @param {Function} [customizer] The function to customize comparing objects.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 */
	function baseIsMatch(object, matchData, customizer) {
	  var index = matchData.length,
	      length = index,
	      noCustomizer = !customizer;

	  if (object == null) {
	    return !length;
	  }
	  object = toObject(object);
	  while (index--) {
	    var data = matchData[index];
	    if ((noCustomizer && data[2])
	          ? data[1] !== object[data[0]]
	          : !(data[0] in object)
	        ) {
	      return false;
	    }
	  }
	  while (++index < length) {
	    data = matchData[index];
	    var key = data[0],
	        objValue = object[key],
	        srcValue = data[1];

	    if (noCustomizer && data[2]) {
	      if (objValue === undefined && !(key in object)) {
	        return false;
	      }
	    } else {
	      var result = customizer ? customizer(objValue, srcValue, key) : undefined;
	      if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
	        return false;
	      }
	    }
	  }
	  return true;
	}

	module.exports = baseIsMatch;


/***/ },
/* 7145 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var baseIsMatch = __webpack_require__(__webpack_module_template_argument_0__),
	    getMatchData = __webpack_require__(__webpack_module_template_argument_1__),
	    toObject = __webpack_require__(__webpack_module_template_argument_2__);

	/**
	 * The base implementation of `_.matches` which does not clone `source`.
	 *
	 * @private
	 * @param {Object} source The object of property values to match.
	 * @returns {Function} Returns the new function.
	 */
	function baseMatches(source) {
	  var matchData = getMatchData(source);
	  if (matchData.length == 1 && matchData[0][2]) {
	    var key = matchData[0][0],
	        value = matchData[0][1];

	    return function(object) {
	      if (object == null) {
	        return false;
	      }
	      return object[key] === value && (value !== undefined || (key in toObject(object)));
	    };
	  }
	  return function(object) {
	    return baseIsMatch(object, matchData);
	  };
	}

	module.exports = baseMatches;


/***/ },
/* 7146 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__, __webpack_module_template_argument_7__, __webpack_module_template_argument_8__) {

	var baseGet = __webpack_require__(__webpack_module_template_argument_0__),
	    baseIsEqual = __webpack_require__(__webpack_module_template_argument_1__),
	    baseSlice = __webpack_require__(__webpack_module_template_argument_2__),
	    isArray = __webpack_require__(__webpack_module_template_argument_3__),
	    isKey = __webpack_require__(__webpack_module_template_argument_4__),
	    isStrictComparable = __webpack_require__(__webpack_module_template_argument_5__),
	    last = __webpack_require__(__webpack_module_template_argument_6__),
	    toObject = __webpack_require__(__webpack_module_template_argument_7__),
	    toPath = __webpack_require__(__webpack_module_template_argument_8__);

	/**
	 * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
	 *
	 * @private
	 * @param {string} path The path of the property to get.
	 * @param {*} srcValue The value to compare.
	 * @returns {Function} Returns the new function.
	 */
	function baseMatchesProperty(path, srcValue) {
	  var isArr = isArray(path),
	      isCommon = isKey(path) && isStrictComparable(srcValue),
	      pathKey = (path + '');

	  path = toPath(path);
	  return function(object) {
	    if (object == null) {
	      return false;
	    }
	    var key = pathKey;
	    object = toObject(object);
	    if ((isArr || !isCommon) && !(key in object)) {
	      object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	      if (object == null) {
	        return false;
	      }
	      key = last(path);
	      object = toObject(object);
	    }
	    return object[key] === srcValue
	      ? (srcValue !== undefined || (key in object))
	      : baseIsEqual(srcValue, object[key], undefined, true);
	  };
	}

	module.exports = baseMatchesProperty;


/***/ },
/* 7147 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var baseGet = __webpack_require__(__webpack_module_template_argument_0__),
	    toPath = __webpack_require__(__webpack_module_template_argument_1__);

	/**
	 * A specialized version of `baseProperty` which supports deep paths.
	 *
	 * @private
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function basePropertyDeep(path) {
	  var pathKey = (path + '');
	  path = toPath(path);
	  return function(object) {
	    return baseGet(object, path, pathKey);
	  };
	}

	module.exports = basePropertyDeep;


/***/ },
/* 7148 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var baseIndexOf = __webpack_require__(__webpack_module_template_argument_0__),
	    cacheIndexOf = __webpack_require__(__webpack_module_template_argument_1__),
	    createCache = __webpack_require__(__webpack_module_template_argument_2__);

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * The base implementation of `_.uniq` without support for callback shorthands
	 * and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} [iteratee] The function invoked per iteration.
	 * @returns {Array} Returns the new duplicate free array.
	 */
	function baseUniq(array, iteratee) {
	  var index = -1,
	      indexOf = baseIndexOf,
	      length = array.length,
	      isCommon = true,
	      isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
	      seen = isLarge ? createCache() : null,
	      result = [];

	  if (seen) {
	    indexOf = cacheIndexOf;
	    isCommon = false;
	  } else {
	    isLarge = false;
	    seen = iteratee ? [] : result;
	  }
	  outer:
	  while (++index < length) {
	    var value = array[index],
	        computed = iteratee ? iteratee(value, index, array) : value;

	    if (isCommon && value === value) {
	      var seenIndex = seen.length;
	      while (seenIndex--) {
	        if (seen[seenIndex] === computed) {
	          continue outer;
	        }
	      }
	      if (iteratee) {
	        seen.push(computed);
	      }
	      result.push(value);
	    }
	    else if (indexOf(seen, computed, 0) < 0) {
	      if (iteratee || isLarge) {
	        seen.push(computed);
	      }
	      result.push(value);
	    }
	  }
	  return result;
	}

	module.exports = baseUniq;


/***/ },
/* 7149 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var identity = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * A specialized version of `baseCallback` which only supports `this` binding
	 * and specifying the number of arguments to provide to `func`.
	 *
	 * @private
	 * @param {Function} func The function to bind.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {number} [argCount] The number of arguments to provide to `func`.
	 * @returns {Function} Returns the callback.
	 */
	function bindCallback(func, thisArg, argCount) {
	  if (typeof func != 'function') {
	    return identity;
	  }
	  if (thisArg === undefined) {
	    return func;
	  }
	  switch (argCount) {
	    case 1: return function(value) {
	      return func.call(thisArg, value);
	    };
	    case 3: return function(value, index, collection) {
	      return func.call(thisArg, value, index, collection);
	    };
	    case 4: return function(accumulator, value, index, collection) {
	      return func.call(thisArg, accumulator, value, index, collection);
	    };
	    case 5: return function(value, other, key, object, source) {
	      return func.call(thisArg, value, other, key, object, source);
	    };
	  }
	  return function() {
	    return func.apply(thisArg, arguments);
	  };
	}

	module.exports = bindCallback;


/***/ },
/* 7150 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var isObject = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * Checks if `value` is in `cache` mimicking the return signature of
	 * `_.indexOf` by returning `0` if the value is found, else `-1`.
	 *
	 * @private
	 * @param {Object} cache The cache to search.
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `0` if `value` is found, else `-1`.
	 */
	function cacheIndexOf(cache, value) {
	  var data = cache.data,
	      result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

	  return result ? 0 : -1;
	}

	module.exports = cacheIndexOf;


/***/ },
/* 7151 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var isObject = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * Adds `value` to the cache.
	 *
	 * @private
	 * @name push
	 * @memberOf SetCache
	 * @param {*} value The value to cache.
	 */
	function cachePush(value) {
	  var data = this.data;
	  if (typeof value == 'string' || isObject(value)) {
	    data.set.add(value);
	  } else {
	    data.hash[value] = true;
	  }
	}

	module.exports = cachePush;


/***/ },
/* 7152 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var bindCallback = __webpack_require__(__webpack_module_template_argument_0__),
	    isIterateeCall = __webpack_require__(__webpack_module_template_argument_1__),
	    restParam = __webpack_require__(__webpack_module_template_argument_2__);

	/**
	 * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @returns {Function} Returns the new assigner function.
	 */
	function createAssigner(assigner) {
	  return restParam(function(object, sources) {
	    var index = -1,
	        length = object == null ? 0 : sources.length,
	        customizer = length > 2 ? sources[length - 2] : undefined,
	        guard = length > 2 ? sources[2] : undefined,
	        thisArg = length > 1 ? sources[length - 1] : undefined;

	    if (typeof customizer == 'function') {
	      customizer = bindCallback(customizer, thisArg, 5);
	      length -= 2;
	    } else {
	      customizer = typeof thisArg == 'function' ? thisArg : undefined;
	      length -= (customizer ? 1 : 0);
	    }
	    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	      customizer = length < 3 ? undefined : customizer;
	      length = 1;
	    }
	    while (++index < length) {
	      var source = sources[index];
	      if (source) {
	        assigner(object, source, customizer);
	      }
	    }
	    return object;
	  });
	}

	module.exports = createAssigner;


/***/ },
/* 7153 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var getLength = __webpack_require__(__webpack_module_template_argument_0__),
	    isLength = __webpack_require__(__webpack_module_template_argument_1__),
	    toObject = __webpack_require__(__webpack_module_template_argument_2__);

	/**
	 * Creates a `baseEach` or `baseEachRight` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseEach(eachFunc, fromRight) {
	  return function(collection, iteratee) {
	    var length = collection ? getLength(collection) : 0;
	    if (!isLength(length)) {
	      return eachFunc(collection, iteratee);
	    }
	    var index = fromRight ? length : -1,
	        iterable = toObject(collection);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (iteratee(iterable[index], index, iterable) === false) {
	        break;
	      }
	    }
	    return collection;
	  };
	}

	module.exports = createBaseEach;


/***/ },
/* 7154 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var toObject = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * Creates a base function for `_.forIn` or `_.forInRight`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function(object, iteratee, keysFunc) {
	    var iterable = toObject(object),
	        props = keysFunc(object),
	        length = props.length,
	        index = fromRight ? length : -1;

	    while ((fromRight ? index-- : ++index < length)) {
	      var key = props[index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}

	module.exports = createBaseFor;


/***/ },
/* 7155 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	/* WEBPACK VAR INJECTION */(function(global) {var SetCache = __webpack_require__(__webpack_module_template_argument_0__),
	    getNative = __webpack_require__(__webpack_module_template_argument_1__);

	/** Native method references. */
	var Set = getNative(global, 'Set');

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeCreate = getNative(Object, 'create');

	/**
	 * Creates a `Set` cache object to optimize linear searches of large arrays.
	 *
	 * @private
	 * @param {Array} [values] The values to cache.
	 * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
	 */
	function createCache(values) {
	  return (nativeCreate && Set) ? new SetCache(values) : null;
	}

	module.exports = createCache;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 7156 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var restParam = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * Creates a `_.defaults` or `_.defaultsDeep` function.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @param {Function} customizer The function to customize assigned values.
	 * @returns {Function} Returns the new defaults function.
	 */
	function createDefaults(assigner, customizer) {
	  return restParam(function(args) {
	    var object = args[0];
	    if (object == null) {
	      return object;
	    }
	    args.push(customizer);
	    return assigner.apply(undefined, args);
	  });
	}

	module.exports = createDefaults;


/***/ },
/* 7157 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var bindCallback = __webpack_require__(__webpack_module_template_argument_0__),
	    isArray = __webpack_require__(__webpack_module_template_argument_1__);

	/**
	 * Creates a function for `_.forEach` or `_.forEachRight`.
	 *
	 * @private
	 * @param {Function} arrayFunc The function to iterate over an array.
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @returns {Function} Returns the new each function.
	 */
	function createForEach(arrayFunc, eachFunc) {
	  return function(collection, iteratee, thisArg) {
	    return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	      ? arrayFunc(collection, iteratee)
	      : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
	  };
	}

	module.exports = createForEach;


/***/ },
/* 7158 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var arraySome = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparing arrays.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA] Tracks traversed `value` objects.
	 * @param {Array} [stackB] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
	  var index = -1,
	      arrLength = array.length,
	      othLength = other.length;

	  if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
	    return false;
	  }
	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index],
	        result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

	    if (result !== undefined) {
	      if (result) {
	        continue;
	      }
	      return false;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (isLoose) {
	      if (!arraySome(other, function(othValue) {
	            return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
	          })) {
	        return false;
	      }
	    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = equalArrays;


/***/ },
/* 7159 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var keys = __webpack_require__(__webpack_module_template_argument_0__);

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparing values.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA] Tracks traversed `value` objects.
	 * @param {Array} [stackB] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	  var objProps = keys(object),
	      objLength = objProps.length,
	      othProps = keys(other),
	      othLength = othProps.length;

	  if (objLength != othLength && !isLoose) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
	      return false;
	    }
	  }
	  var skipCtor = isLoose;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key],
	        result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
	      return false;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (!skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;

	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor &&
	        ('constructor' in object && 'constructor' in other) &&
	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = equalObjects;


/***/ },
/* 7160 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var baseProperty = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * Gets the "length" property value of `object`.
	 *
	 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	 * that affects Safari on at least iOS 8.1-8.3 ARM64.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {*} Returns the "length" value.
	 */
	var getLength = baseProperty('length');

	module.exports = getLength;


/***/ },
/* 7161 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var isStrictComparable = __webpack_require__(__webpack_module_template_argument_0__),
	    pairs = __webpack_require__(__webpack_module_template_argument_1__);

	/**
	 * Gets the propery names, values, and compare flags of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the match data of `object`.
	 */
	function getMatchData(object) {
	  var result = pairs(object),
	      length = result.length;

	  while (length--) {
	    result[length][2] = isStrictComparable(result[length][1]);
	  }
	  return result;
	}

	module.exports = getMatchData;


/***/ },
/* 7162 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var isNative = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = object == null ? undefined : object[key];
	  return isNative(value) ? value : undefined;
	}

	module.exports = getNative;


/***/ },
/* 7163 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var bufferClone = __webpack_require__(__webpack_module_template_argument_0__);

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    stringTag = '[object String]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to match `RegExp` flags from their coerced string values. */
	var reFlags = /\w*$/;

	/**
	 * Initializes an object clone based on its `toStringTag`.
	 *
	 * **Note:** This function only supports cloning values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @param {string} tag The `toStringTag` of the object to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneByTag(object, tag, isDeep) {
	  var Ctor = object.constructor;
	  switch (tag) {
	    case arrayBufferTag:
	      return bufferClone(object);

	    case boolTag:
	    case dateTag:
	      return new Ctor(+object);

	    case float32Tag: case float64Tag:
	    case int8Tag: case int16Tag: case int32Tag:
	    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	      var buffer = object.buffer;
	      return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

	    case numberTag:
	    case stringTag:
	      return new Ctor(object);

	    case regexpTag:
	      var result = new Ctor(object.source, reFlags.exec(object));
	      result.lastIndex = object.lastIndex;
	  }
	  return result;
	}

	module.exports = initCloneByTag;


/***/ },
/* 7164 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var getLength = __webpack_require__(__webpack_module_template_argument_0__),
	    isLength = __webpack_require__(__webpack_module_template_argument_1__);

	/**
	 * Checks if `value` is array-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 */
	function isArrayLike(value) {
	  return value != null && isLength(getLength(value));
	}

	module.exports = isArrayLike;


/***/ },
/* 7165 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var isArrayLike = __webpack_require__(__webpack_module_template_argument_0__),
	    isIndex = __webpack_require__(__webpack_module_template_argument_1__),
	    isObject = __webpack_require__(__webpack_module_template_argument_2__);

	/**
	 * Checks if the provided arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number'
	      ? (isArrayLike(object) && isIndex(index, object.length))
	      : (type == 'string' && index in object)) {
	    var other = object[index];
	    return value === value ? (value === other) : (other !== other);
	  }
	  return false;
	}

	module.exports = isIterateeCall;


/***/ },
/* 7166 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var isArray = __webpack_require__(__webpack_module_template_argument_0__),
	    toObject = __webpack_require__(__webpack_module_template_argument_1__);

	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/;

	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  var type = typeof value;
	  if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
	    return true;
	  }
	  if (isArray(value)) {
	    return false;
	  }
	  var result = !reIsDeepProp.test(value);
	  return result || (object != null && value in toObject(object));
	}

	module.exports = isKey;


/***/ },
/* 7167 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var isObject = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` if suitable for strict
	 *  equality comparisons, else `false`.
	 */
	function isStrictComparable(value) {
	  return value === value && !isObject(value);
	}

	module.exports = isStrictComparable;


/***/ },
/* 7168 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	var isArguments = __webpack_require__(__webpack_module_template_argument_0__),
	    isArray = __webpack_require__(__webpack_module_template_argument_1__),
	    isIndex = __webpack_require__(__webpack_module_template_argument_2__),
	    isLength = __webpack_require__(__webpack_module_template_argument_3__),
	    keysIn = __webpack_require__(__webpack_module_template_argument_4__);

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A fallback implementation of `Object.keys` which creates an array of the
	 * own enumerable property names of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function shimKeys(object) {
	  var props = keysIn(object),
	      propsLength = props.length,
	      length = propsLength && object.length;

	  var allowIndexes = !!length && isLength(length) &&
	    (isArray(object) || isArguments(object));

	  var index = -1,
	      result = [];

	  while (++index < propsLength) {
	    var key = props[index];
	    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = shimKeys;


/***/ },
/* 7169 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var isObject = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * Converts `value` to an object if it's not one.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {Object} Returns the object.
	 */
	function toObject(value) {
	  return isObject(value) ? value : Object(value);
	}

	module.exports = toObject;


/***/ },
/* 7170 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var baseToString = __webpack_require__(__webpack_module_template_argument_0__),
	    isArray = __webpack_require__(__webpack_module_template_argument_1__);

	/** Used to match property names within property paths. */
	var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;

	/**
	 * Converts `value` to property path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {Array} Returns the property path array.
	 */
	function toPath(value) {
	  if (isArray(value)) {
	    return value;
	  }
	  var result = [];
	  baseToString(value).replace(rePropName, function(match, number, quote, string) {
	    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	}

	module.exports = toPath;


/***/ },
/* 7171 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var baseClone = __webpack_require__(__webpack_module_template_argument_0__),
	    bindCallback = __webpack_require__(__webpack_module_template_argument_1__),
	    isIterateeCall = __webpack_require__(__webpack_module_template_argument_2__);

	/**
	 * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
	 * otherwise they are assigned by reference. If `customizer` is provided it's
	 * invoked to produce the cloned values. If `customizer` returns `undefined`
	 * cloning is handled by the method instead. The `customizer` is bound to
	 * `thisArg` and invoked with up to three argument; (value [, index|key, object]).
	 *
	 * **Note:** This method is loosely based on the
	 * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	 * The enumerable properties of `arguments` objects and objects created by
	 * constructors other than `Object` are cloned to plain `Object` objects. An
	 * empty object is returned for uncloneable values such as functions, DOM nodes,
	 * Maps, Sets, and WeakMaps.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @param {Function} [customizer] The function to customize cloning values.
	 * @param {*} [thisArg] The `this` binding of `customizer`.
	 * @returns {*} Returns the cloned value.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney' },
	 *   { 'user': 'fred' }
	 * ];
	 *
	 * var shallow = _.clone(users);
	 * shallow[0] === users[0];
	 * // => true
	 *
	 * var deep = _.clone(users, true);
	 * deep[0] === users[0];
	 * // => false
	 *
	 * // using a customizer callback
	 * var el = _.clone(document.body, function(value) {
	 *   if (_.isElement(value)) {
	 *     return value.cloneNode(false);
	 *   }
	 * });
	 *
	 * el === document.body
	 * // => false
	 * el.nodeName
	 * // => BODY
	 * el.childNodes.length;
	 * // => 0
	 */
	function clone(value, isDeep, customizer, thisArg) {
	  if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
	    isDeep = false;
	  }
	  else if (typeof isDeep == 'function') {
	    thisArg = customizer;
	    customizer = isDeep;
	    isDeep = false;
	  }
	  return typeof customizer == 'function'
	    ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 3))
	    : baseClone(value, isDeep);
	}

	module.exports = clone;


/***/ },
/* 7172 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var baseClone = __webpack_require__(__webpack_module_template_argument_0__),
	    bindCallback = __webpack_require__(__webpack_module_template_argument_1__);

	/**
	 * Creates a deep clone of `value`. If `customizer` is provided it's invoked
	 * to produce the cloned values. If `customizer` returns `undefined` cloning
	 * is handled by the method instead. The `customizer` is bound to `thisArg`
	 * and invoked with up to three argument; (value [, index|key, object]).
	 *
	 * **Note:** This method is loosely based on the
	 * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	 * The enumerable properties of `arguments` objects and objects created by
	 * constructors other than `Object` are cloned to plain `Object` objects. An
	 * empty object is returned for uncloneable values such as functions, DOM nodes,
	 * Maps, Sets, and WeakMaps.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to deep clone.
	 * @param {Function} [customizer] The function to customize cloning values.
	 * @param {*} [thisArg] The `this` binding of `customizer`.
	 * @returns {*} Returns the deep cloned value.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney' },
	 *   { 'user': 'fred' }
	 * ];
	 *
	 * var deep = _.cloneDeep(users);
	 * deep[0] === users[0];
	 * // => false
	 *
	 * // using a customizer callback
	 * var el = _.cloneDeep(document.body, function(value) {
	 *   if (_.isElement(value)) {
	 *     return value.cloneNode(true);
	 *   }
	 * });
	 *
	 * el === document.body
	 * // => false
	 * el.nodeName
	 * // => BODY
	 * el.childNodes.length;
	 * // => 20
	 */
	function cloneDeep(value, customizer, thisArg) {
	  return typeof customizer == 'function'
	    ? baseClone(value, true, bindCallback(customizer, thisArg, 3))
	    : baseClone(value, true);
	}

	module.exports = cloneDeep;


/***/ },
/* 7173 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var isArrayLike = __webpack_require__(__webpack_module_template_argument_0__),
	    isObjectLike = __webpack_require__(__webpack_module_template_argument_1__);

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Native method references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/**
	 * Checks if `value` is classified as an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  return isObjectLike(value) && isArrayLike(value) &&
	    hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
	}

	module.exports = isArguments;


/***/ },
/* 7174 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var getNative = __webpack_require__(__webpack_module_template_argument_0__),
	    isLength = __webpack_require__(__webpack_module_template_argument_1__),
	    isObjectLike = __webpack_require__(__webpack_module_template_argument_2__);

	/** `Object#toString` result references. */
	var arrayTag = '[object Array]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeIsArray = getNative(Array, 'isArray');

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(function() { return arguments; }());
	 * // => false
	 */
	var isArray = nativeIsArray || function(value) {
	  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
	};

	module.exports = isArray;


/***/ },
/* 7175 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var isObject = __webpack_require__(__webpack_module_template_argument_0__);

	/** `Object#toString` result references. */
	var funcTag = '[object Function]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in older versions of Chrome and Safari which return 'function' for regexes
	  // and Safari 8 which returns 'object' for typed array constructors.
	  return isObject(value) && objToString.call(value) == funcTag;
	}

	module.exports = isFunction;


/***/ },
/* 7176 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var isFunction = __webpack_require__(__webpack_module_template_argument_0__),
	    isObjectLike = __webpack_require__(__webpack_module_template_argument_1__);

	/** Used to detect host constructors (Safari > 5). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var fnToString = Function.prototype.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * Checks if `value` is a native function.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	function isNative(value) {
	  if (value == null) {
	    return false;
	  }
	  if (isFunction(value)) {
	    return reIsNative.test(fnToString.call(value));
	  }
	  return isObjectLike(value) && reIsHostCtor.test(value);
	}

	module.exports = isNative;


/***/ },
/* 7177 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var isObjectLike = __webpack_require__(__webpack_module_template_argument_0__);

	/** `Object#toString` result references. */
	var numberTag = '[object Number]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `Number` primitive or object.
	 *
	 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
	 * as numbers, use the `_.isFinite` method.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isNumber(8.4);
	 * // => true
	 *
	 * _.isNumber(NaN);
	 * // => true
	 *
	 * _.isNumber('8.4');
	 * // => false
	 */
	function isNumber(value) {
	  return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
	}

	module.exports = isNumber;


/***/ },
/* 7178 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var baseForIn = __webpack_require__(__webpack_module_template_argument_0__),
	    isArguments = __webpack_require__(__webpack_module_template_argument_1__),
	    isObjectLike = __webpack_require__(__webpack_module_template_argument_2__);

	/** `Object#toString` result references. */
	var objectTag = '[object Object]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * **Note:** This method assumes objects created by the `Object` constructor
	 * have no inherited enumerable properties.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  var Ctor;

	  // Exit early for non `Object` objects.
	  if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||
	      (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
	    return false;
	  }
	  // IE < 9 iterates inherited properties before own properties. If the first
	  // iterated property is an object's own property then there are no inherited
	  // enumerable properties.
	  var result;
	  // In most environments an object's own properties are iterated before
	  // its inherited properties. If the last iterated property is an object's
	  // own property then there are no inherited enumerable properties.
	  baseForIn(value, function(subValue, key) {
	    result = key;
	  });
	  return result === undefined || hasOwnProperty.call(value, result);
	}

	module.exports = isPlainObject;


/***/ },
/* 7179 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var isObject = __webpack_require__(__webpack_module_template_argument_0__);

	/** `Object#toString` result references. */
	var regexpTag = '[object RegExp]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `RegExp` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isRegExp(/abc/);
	 * // => true
	 *
	 * _.isRegExp('/abc/');
	 * // => false
	 */
	function isRegExp(value) {
	  return isObject(value) && objToString.call(value) == regexpTag;
	}

	module.exports = isRegExp;


/***/ },
/* 7180 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var isObjectLike = __webpack_require__(__webpack_module_template_argument_0__);

	/** `Object#toString` result references. */
	var stringTag = '[object String]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `String` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isString('abc');
	 * // => true
	 *
	 * _.isString(1);
	 * // => false
	 */
	function isString(value) {
	  return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
	}

	module.exports = isString;


/***/ },
/* 7181 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var isLength = __webpack_require__(__webpack_module_template_argument_0__),
	    isObjectLike = __webpack_require__(__webpack_module_template_argument_1__);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dateTag] = typedArrayTags[errorTag] =
	typedArrayTags[funcTag] = typedArrayTags[mapTag] =
	typedArrayTags[numberTag] = typedArrayTags[objectTag] =
	typedArrayTags[regexpTag] = typedArrayTags[setTag] =
	typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	function isTypedArray(value) {
	  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
	}

	module.exports = isTypedArray;


/***/ },
/* 7182 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var assignWith = __webpack_require__(__webpack_module_template_argument_0__),
	    baseAssign = __webpack_require__(__webpack_module_template_argument_1__),
	    createAssigner = __webpack_require__(__webpack_module_template_argument_2__);

	/**
	 * Assigns own enumerable properties of source object(s) to the destination
	 * object. Subsequent sources overwrite property assignments of previous sources.
	 * If `customizer` is provided it's invoked to produce the assigned values.
	 * The `customizer` is bound to `thisArg` and invoked with five arguments:
	 * (objectValue, sourceValue, key, object, source).
	 *
	 * **Note:** This method mutates `object` and is based on
	 * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
	 *
	 * @static
	 * @memberOf _
	 * @alias extend
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @param {*} [thisArg] The `this` binding of `customizer`.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
	 * // => { 'user': 'fred', 'age': 40 }
	 *
	 * // using a customizer callback
	 * var defaults = _.partialRight(_.assign, function(value, other) {
	 *   return _.isUndefined(value) ? other : value;
	 * });
	 *
	 * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	 * // => { 'user': 'barney', 'age': 36 }
	 */
	var assign = createAssigner(function(object, source, customizer) {
	  return customizer
	    ? assignWith(object, source, customizer)
	    : baseAssign(object, source);
	});

	module.exports = assign;


/***/ },
/* 7183 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var assign = __webpack_require__(__webpack_module_template_argument_0__),
	    assignDefaults = __webpack_require__(__webpack_module_template_argument_1__),
	    createDefaults = __webpack_require__(__webpack_module_template_argument_2__);

	/**
	 * Assigns own enumerable properties of source object(s) to the destination
	 * object for all destination properties that resolve to `undefined`. Once a
	 * property is set, additional values of the same property are ignored.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	 * // => { 'user': 'barney', 'age': 36 }
	 */
	var defaults = createDefaults(assign, assignDefaults);

	module.exports = defaults;


/***/ },
/* 7184 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__, __webpack_module_template_argument_7__, __webpack_module_template_argument_8__) {

	var baseGet = __webpack_require__(__webpack_module_template_argument_0__),
	    baseSlice = __webpack_require__(__webpack_module_template_argument_1__),
	    isArguments = __webpack_require__(__webpack_module_template_argument_2__),
	    isArray = __webpack_require__(__webpack_module_template_argument_3__),
	    isIndex = __webpack_require__(__webpack_module_template_argument_4__),
	    isKey = __webpack_require__(__webpack_module_template_argument_5__),
	    isLength = __webpack_require__(__webpack_module_template_argument_6__),
	    last = __webpack_require__(__webpack_module_template_argument_7__),
	    toPath = __webpack_require__(__webpack_module_template_argument_8__);

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Checks if `path` is a direct property.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
	 * @example
	 *
	 * var object = { 'a': { 'b': { 'c': 3 } } };
	 *
	 * _.has(object, 'a');
	 * // => true
	 *
	 * _.has(object, 'a.b.c');
	 * // => true
	 *
	 * _.has(object, ['a', 'b', 'c']);
	 * // => true
	 */
	function has(object, path) {
	  if (object == null) {
	    return false;
	  }
	  var result = hasOwnProperty.call(object, path);
	  if (!result && !isKey(path)) {
	    path = toPath(path);
	    object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	    if (object == null) {
	      return false;
	    }
	    path = last(path);
	    result = hasOwnProperty.call(object, path);
	  }
	  return result || (isLength(object.length) && isIndex(path, object.length) &&
	    (isArray(object) || isArguments(object)));
	}

	module.exports = has;


/***/ },
/* 7185 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__) {

	var getNative = __webpack_require__(__webpack_module_template_argument_0__),
	    isArrayLike = __webpack_require__(__webpack_module_template_argument_1__),
	    isObject = __webpack_require__(__webpack_module_template_argument_2__),
	    shimKeys = __webpack_require__(__webpack_module_template_argument_3__);

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeKeys = getNative(Object, 'keys');

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	var keys = !nativeKeys ? shimKeys : function(object) {
	  var Ctor = object == null ? undefined : object.constructor;
	  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
	      (typeof object != 'function' && isArrayLike(object))) {
	    return shimKeys(object);
	  }
	  return isObject(object) ? nativeKeys(object) : [];
	};

	module.exports = keys;


/***/ },
/* 7186 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	var isArguments = __webpack_require__(__webpack_module_template_argument_0__),
	    isArray = __webpack_require__(__webpack_module_template_argument_1__),
	    isIndex = __webpack_require__(__webpack_module_template_argument_2__),
	    isLength = __webpack_require__(__webpack_module_template_argument_3__),
	    isObject = __webpack_require__(__webpack_module_template_argument_4__);

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn(object) {
	  if (object == null) {
	    return [];
	  }
	  if (!isObject(object)) {
	    object = Object(object);
	  }
	  var length = object.length;
	  length = (length && isLength(length) &&
	    (isArray(object) || isArguments(object)) && length) || 0;

	  var Ctor = object.constructor,
	      index = -1,
	      isProto = typeof Ctor == 'function' && Ctor.prototype === object,
	      result = Array(length),
	      skipIndexes = length > 0;

	  while (++index < length) {
	    result[index] = (index + '');
	  }
	  for (var key in object) {
	    if (!(skipIndexes && isIndex(key, length)) &&
	        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = keysIn;


/***/ },
/* 7187 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var keys = __webpack_require__(__webpack_module_template_argument_0__),
	    toObject = __webpack_require__(__webpack_module_template_argument_1__);

	/**
	 * Creates a two dimensional array of the key-value pairs for `object`,
	 * e.g. `[[key1, value1], [key2, value2]]`.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the new array of key-value pairs.
	 * @example
	 *
	 * _.pairs({ 'barney': 36, 'fred': 40 });
	 * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
	 */
	function pairs(object) {
	  object = toObject(object);

	  var index = -1,
	      props = keys(object),
	      length = props.length,
	      result = Array(length);

	  while (++index < length) {
	    var key = props[index];
	    result[index] = [key, object[key]];
	  }
	  return result;
	}

	module.exports = pairs;


/***/ },
/* 7188 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var baseValues = __webpack_require__(__webpack_module_template_argument_0__),
	    keys = __webpack_require__(__webpack_module_template_argument_1__);

	/**
	 * Creates an array of the own enumerable property values of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property values.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.values(new Foo);
	 * // => [1, 2] (iteration order is not guaranteed)
	 *
	 * _.values('hi');
	 * // => ['h', 'i']
	 */
	function values(object) {
	  return baseValues(object, keys(object));
	}

	module.exports = values;


/***/ },
/* 7189 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var baseProperty = __webpack_require__(__webpack_module_template_argument_0__),
	    basePropertyDeep = __webpack_require__(__webpack_module_template_argument_1__),
	    isKey = __webpack_require__(__webpack_module_template_argument_2__);

	/**
	 * Creates a function that returns the property value at `path` on a
	 * given object.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': { 'b': { 'c': 2 } } },
	 *   { 'a': { 'b': { 'c': 1 } } }
	 * ];
	 *
	 * _.map(objects, _.property('a.b.c'));
	 * // => [2, 1]
	 *
	 * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
	 * // => [1, 2]
	 */
	function property(path) {
	  return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
	}

	module.exports = property;


/***/ },
/* 7190 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	/* @flow */

	"use strict";

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	exports.__esModule = true;

	var _babelHelperFunctionName = __webpack_require__(__webpack_module_template_argument_2__);

	var _babelHelperFunctionName2 = _interopRequireDefault(_babelHelperFunctionName);

	var _babelTemplate = __webpack_require__(__webpack_module_template_argument_3__);

	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_4__);

	var t = _interopRequireWildcard(_babelTypes);

	/*:: import type { NodePath } from "babel-traverse";*/

	var buildWrapper = _babelTemplate2["default"]("\n  (function () {\n    var ref = FUNCTION;\n    return function (PARAMS) {\n      return ref.apply(this, arguments);\n    };\n  })\n");

	var awaitVisitor = {
	  Function: function Function(path) {
	    path.skip();
	  },

	  AwaitExpression: function AwaitExpression(_ref) {
	    var node = _ref.node;

	    node.type = "YieldExpression";
	  }
	};

	function classOrObjectMethod(path /*: NodePath*/, callId /*: Object*/) {
	  var node = path.node;
	  var body = node.body;

	  node.async = false;

	  var container = t.functionExpression(null, [], t.blockStatement(body.body), true);
	  container.shadow = true;
	  body.body = [t.returnStatement(t.callExpression(t.callExpression(callId, [container]), []))];
	}

	function plainFunction(path /*: NodePath*/, callId /*: Object*/) {
	  var node = path.node;

	  if (path.isArrowFunctionExpression()) {
	    path.arrowFunctionToShadowed();
	  }

	  node.async = false;
	  node.generator = true;

	  var asyncFnId = node.id;
	  node.id = null;

	  var isDeclaration = path.isFunctionDeclaration();

	  if (isDeclaration) {
	    node.type = "FunctionExpression";
	  }

	  var built = t.callExpression(callId, [node]);
	  var container = buildWrapper({
	    FUNCTION: built,
	    PARAMS: node.params.map(function () {
	      return path.scope.generateUidIdentifier("x");
	    })
	  }).expression;

	  var retFunction = container.body.body[1].argument;

	  if (isDeclaration) {
	    var declar = t.variableDeclaration("let", [t.variableDeclarator(t.identifier(asyncFnId.name), t.callExpression(container, []))]);

	    retFunction.id = asyncFnId;
	    path.replaceWith(declar);
	  } else {
	    if (asyncFnId && asyncFnId.name) {
	      retFunction.id = asyncFnId;
	    } else {
	      _babelHelperFunctionName2["default"]({
	        node: retFunction,
	        parent: path.parent,
	        scope: path.scope
	      });
	    }

	    if (retFunction.id || node.params.length) {
	      // we have an inferred function id or params so we need this wrapper
	      path.replaceWith(t.callExpression(container, []));
	    } else {
	      // we can omit this wrapper as the conditions it protects for do not apply
	      path.replaceWith(built);
	    }
	  }
	}

	exports["default"] = function (path /*: NodePath*/, callId /*: Object*/) {
	  var node = path.node;
	  if (node.generator) return;

	  path.traverse(awaitVisitor);

	  if (path.isClassMethod() || path.isObjectMethod()) {
	    return classOrObjectMethod(path, callId);
	  } else {
	    return plainFunction(path, callId);
	  }
	};

	module.exports = exports["default"];

/***/ },
/* 7191 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	exports.__esModule = true;

	var _babelHelperGetFunctionArity = __webpack_require__(__webpack_module_template_argument_2__);

	var _babelHelperGetFunctionArity2 = _interopRequireDefault(_babelHelperGetFunctionArity);

	var _babelTemplate = __webpack_require__(__webpack_module_template_argument_3__);

	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_4__);

	var t = _interopRequireWildcard(_babelTypes);

	var buildPropertyMethodAssignmentWrapper = _babelTemplate2["default"]("\n  (function (FUNCTION_KEY) {\n    function FUNCTION_ID() {\n      return FUNCTION_KEY.apply(this, arguments);\n    }\n\n    FUNCTION_ID.toString = function () {\n      return FUNCTION_KEY.toString();\n    }\n\n    return FUNCTION_ID;\n  })(FUNCTION)\n");

	var buildGeneratorPropertyMethodAssignmentWrapper = _babelTemplate2["default"]("\n  (function (FUNCTION_KEY) {\n    function* FUNCTION_ID() {\n      return yield* FUNCTION_KEY.apply(this, arguments);\n    }\n\n    FUNCTION_ID.toString = function () {\n      return FUNCTION_KEY.toString();\n    };\n\n    return FUNCTION_ID;\n  })(FUNCTION)\n");

	var visitor = {
	  "ReferencedIdentifier|BindingIdentifier": function ReferencedIdentifierBindingIdentifier(path, state) {
	    // check if this node matches our function id
	    if (path.node.name !== state.name) return;

	    // check that we don't have a local variable declared as that removes the need
	    // for the wrapper
	    var localDeclar = path.scope.getBindingIdentifier(state.name);
	    if (localDeclar !== state.outerDeclar) return;

	    state.selfReference = true;
	    path.stop();
	  }
	};

	function wrap(state, method, id, scope) {
	  if (state.selfReference) {
	    if (scope.hasBinding(id.name) && !scope.hasGlobal(id.name)) {
	      // we can just munge the local binding
	      scope.rename(id.name);
	    } else {
	      // we don't currently support wrapping class expressions
	      if (!t.isFunction(method)) return;

	      // need to add a wrapper since we can't change the references
	      var build = buildPropertyMethodAssignmentWrapper;
	      if (method.generator) build = buildGeneratorPropertyMethodAssignmentWrapper;
	      var _template = build({
	        FUNCTION: method,
	        FUNCTION_ID: id,
	        FUNCTION_KEY: scope.generateUidIdentifier(id.name)
	      }).expression;
	      _template.callee._skipModulesRemap = true;

	      // shim in dummy params to retain function arity, if you try to read the
	      // source then you'll get the original since it's proxied so it's all good
	      var params = _template.callee.body.body[0].params;
	      for (var i = 0, len = _babelHelperGetFunctionArity2["default"](method); i < len; i++) {
	        params.push(scope.generateUidIdentifier("x"));
	      }

	      return _template;
	    }
	  }

	  method.id = id;
	  scope.getProgramParent().references[id.name] = true;
	}

	function visit(node, name, scope) {
	  var state = {
	    selfAssignment: false,
	    selfReference: false,
	    outerDeclar: scope.getBindingIdentifier(name),
	    references: [],
	    name: name
	  };

	  // check to see if we have a local binding of the id we're setting inside of
	  // the function, this is important as there are caveats associated

	  var binding = scope.getOwnBinding(name);

	  if (binding) {
	    if (binding.kind === "param") {
	      // safari will blow up in strict mode with code like:
	      //
	      //   let t = function t(t) {};
	      //
	      // with the error:
	      //
	      //   Cannot declare a parameter named 't' as it shadows the name of a
	      //   strict mode function.
	      //
	      // this isn't to the spec and they've invented this behaviour which is
	      // **extremely** annoying so we avoid setting the name if it has a param
	      // with the same id
	      state.selfReference = true;
	    } else {
	      // otherwise it's defined somewhere in scope like:
	      //
	      //   let t = function () {
	      //     let t = 2;
	      //   };
	      //
	      // so we can safely just set the id and move along as it shadows the
	      // bound function id
	    }
	  } else if (state.outerDeclar || scope.hasGlobal(name)) {
	      scope.traverse(node, visitor, state);
	    }

	  return state;
	}

	exports["default"] = function (_ref) {
	  var node = _ref.node;
	  var parent = _ref.parent;
	  var scope = _ref.scope;
	  var id = _ref.id;

	  // has an `id` so we don't need to infer one
	  if (node.id) return;

	  if ((t.isObjectProperty(parent) || t.isObjectMethod(parent, { kind: "method" })) && (!parent.computed || t.isLiteral(parent.key))) {
	    // { foo() {} };
	    id = parent.key;
	  } else if (t.isVariableDeclarator(parent)) {
	    // let foo = function () {};
	    id = parent.id;

	    if (t.isIdentifier(id)) {
	      var binding = scope.parent.getBinding(id.name);
	      if (binding && binding.constant && scope.getBinding(id.name) === binding) {
	        // always going to reference this method
	        node.id = id;
	        return;
	      }
	    }
	  } else if (t.isAssignmentExpression(parent)) {
	    // foo = function () {};
	    id = parent.left;
	  } else if (!id) {
	    return;
	  }

	  var name = undefined;
	  if (id && t.isLiteral(id)) {
	    name = id.value;
	  } else if (id && t.isIdentifier(id)) {
	    name = id.name;
	  } else {
	    return;
	  }

	  name = t.toBindingIdentifierName(name);
	  id = t.identifier(name);

	  var state = visit(node, name, scope);
	  return wrap(state, node, id, scope) || node;
	};

	module.exports = exports["default"];

/***/ },
/* 7192 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	"use strict";

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_1__);

	var t = _interopRequireWildcard(_babelTypes);

	exports["default"] = function (node) /*: number*/ {
	  var params /*: Array<Object>*/ = node.params;
	  for (var i = 0; i < params.length; i++) {
	    var param = params[i];
	    if (t.isAssignmentPattern(param) || t.isRestElement(param)) {
	      return i;
	    }
	  }
	  return params.length;
	};

	module.exports = exports["default"];

/***/ },
/* 7193 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	exports.__esModule = true;
	exports.push = push;
	exports.hasComputed = hasComputed;
	exports.toComputedObjectFromClass = toComputedObjectFromClass;
	exports.toClassObject = toClassObject;
	exports.toDefineObject = toDefineObject;

	var _babelHelperFunctionName = __webpack_require__(__webpack_module_template_argument_2__);

	var _babelHelperFunctionName2 = _interopRequireDefault(_babelHelperFunctionName);

	var _lodashCollectionEach = __webpack_require__(__webpack_module_template_argument_3__);

	var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);

	var _lodashObjectHas = __webpack_require__(__webpack_module_template_argument_4__);

	var _lodashObjectHas2 = _interopRequireDefault(_lodashObjectHas);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_5__);

	var t = _interopRequireWildcard(_babelTypes);

	function toKind(node /*: Object*/) {
	  if (t.isClassMethod(node) || t.isObjectMethod(node)) {
	    if (node.kind === "get" || node.kind === "set") {
	      return node.kind;
	    }
	  }

	  return "value";
	}

	function push(mutatorMap /*: Object*/, node /*: Object*/, kind /*: string*/, file, scope /*:: ?*/) /*: Object*/ {
	  var alias = t.toKeyAlias(node);

	  //

	  var map = {};
	  if (_lodashObjectHas2["default"](mutatorMap, alias)) map = mutatorMap[alias];
	  mutatorMap[alias] = map;

	  //

	  map._inherits = map._inherits || [];
	  map._inherits.push(node);

	  map._key = node.key;

	  if (node.computed) {
	    map._computed = true;
	  }

	  if (node.decorators) {
	    var decorators = map.decorators = map.decorators || t.arrayExpression([]);
	    decorators.elements = decorators.elements.concat(node.decorators.map(function (dec) {
	      return dec.expression;
	    }).reverse());
	  }

	  if (map.value || map.initializer) {
	    throw file.buildCodeFrameError(node, "Key conflict with sibling node");
	  }

	  var key = undefined,
	      value = undefined;

	  // save the key so we can possibly do function name inferences
	  if (t.isObjectProperty(node) || t.isObjectMethod(node) || t.isClassMethod(node)) {
	    key = t.toComputedKey(node, node.key);
	  }

	  if (t.isObjectProperty(node) || t.isClassProperty(node)) {
	    value = node.value;
	  } else if (t.isObjectMethod(node) || t.isClassMethod(node)) {
	    value = t.functionExpression(null, node.params, node.body, node.generator, node.async);
	  }

	  var inheritedKind = toKind(node);
	  if (!kind || inheritedKind !== "value") {
	    kind = inheritedKind;
	  }

	  // infer function name
	  if (scope && t.isStringLiteral(key) && (kind === "value" || kind === "initializer") && t.isFunctionExpression(value)) {
	    value = _babelHelperFunctionName2["default"]({ id: key, node: value, scope: scope });
	  }

	  if (value) {
	    t.inheritsComments(value, node);
	    map[kind] = value;
	  }

	  return map;
	}

	function hasComputed(mutatorMap /*: Object*/) /*: boolean*/ {
	  for (var key in mutatorMap) {
	    if (mutatorMap[key]._computed) {
	      return true;
	    }
	  }
	  return false;
	}

	function toComputedObjectFromClass(obj /*: Object*/) /*: Object*/ {
	  var objExpr = t.arrayExpression([]);

	  for (var i = 0; i < obj.properties.length; i++) {
	    var prop = obj.properties[i];
	    var val = prop.value;
	    val.properties.unshift(t.objectProperty(t.identifier("key"), t.toComputedKey(prop)));
	    objExpr.elements.push(val);
	  }

	  return objExpr;
	}

	function toClassObject(mutatorMap /*: Object*/) /*: Object*/ {
	  var objExpr = t.objectExpression([]);

	  _lodashCollectionEach2["default"](mutatorMap, function (map) {
	    var mapNode = t.objectExpression([]);

	    var propNode = t.objectProperty(map._key, mapNode, map._computed);

	    _lodashCollectionEach2["default"](map, function (node, key) {
	      if (key[0] === "_") return;

	      var inheritNode = node;
	      if (t.isClassMethod(node) || t.isClassProperty(node)) node = node.value;

	      var prop = t.objectProperty(t.identifier(key), node);
	      t.inheritsComments(prop, inheritNode);
	      t.removeComments(inheritNode);

	      mapNode.properties.push(prop);
	    });

	    objExpr.properties.push(propNode);
	  });

	  return objExpr;
	}

	function toDefineObject(mutatorMap /*: Object*/) /*: Object*/ {
	  _lodashCollectionEach2["default"](mutatorMap, function (map) {
	    if (map.value) map.writable = t.booleanLiteral(true);
	    map.configurable = t.booleanLiteral(true);
	    map.enumerable = t.booleanLiteral(true);
	  });

	  return toClassObject(mutatorMap);
	}

/***/ },
/* 7194 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	"use strict";

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_1__);

	var t = _interopRequireWildcard(_babelTypes);

	exports["default"] = function (callee, thisNode, args) {
	  if (args.length === 1 && t.isSpreadElement(args[0]) && t.isIdentifier(args[0].argument, { name: "arguments" })) {
	    // eg. super(...arguments);
	    return t.callExpression(t.memberExpression(callee, t.identifier("apply")), [thisNode, args[0].argument]);
	  } else {
	    return t.callExpression(t.memberExpression(callee, t.identifier("call")), [thisNode].concat(args));
	  }
	};

	module.exports = exports["default"];

/***/ },
/* 7195 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__) {

	"use strict";

	var _classCallCheck = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _Symbol = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_3__)["default"];

	exports.__esModule = true;

	var _babelHelperOptimiseCallExpression = __webpack_require__(__webpack_module_template_argument_4__);

	var _babelHelperOptimiseCallExpression2 = _interopRequireDefault(_babelHelperOptimiseCallExpression);

	var _babelMessages = __webpack_require__(__webpack_module_template_argument_5__);

	var messages = _interopRequireWildcard(_babelMessages);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_6__);

	var t = _interopRequireWildcard(_babelTypes);

	// ✌️

	/*:: import type { NodePath, Scope } from "babel-traverse";*/var HARDCORE_THIS_REF = _Symbol();

	function isIllegalBareSuper(node, parent) {
	  if (!t.isSuper(node)) return false;
	  if (t.isMemberExpression(parent, { computed: false })) return false;
	  if (t.isCallExpression(parent, { callee: node })) return false;
	  return true;
	}

	function isMemberExpressionSuper(node) {
	  return t.isMemberExpression(node) && t.isSuper(node.object);
	}

	var visitor = {
	  "ObjectMethod|ClassMethod": function ObjectMethodClassMethod(path) {
	    path.skip();
	  },

	  "FunctionDeclaration|FunctionExpression": function FunctionDeclarationFunctionExpression(path) {
	    if (!path.inShadow("this")) {
	      path.skip();
	    }
	  },

	  ReturnStatement: function ReturnStatement(path, state) {
	    if (!path.inShadow("this")) {
	      state.returns.push(path);
	    }
	  },

	  ThisExpression: function ThisExpression(path, state) {
	    if (!path.node[HARDCORE_THIS_REF]) {
	      state.thises.push(path);
	    }
	  },

	  enter: function enter(path, state) {
	    var callback = state.specHandle;
	    if (state.isLoose) callback = state.looseHandle;

	    var isBareSuper = path.isCallExpression() && path.get("callee").isSuper();

	    var result = callback.call(state, path);

	    if (result) {
	      state.hasSuper = true;
	    }

	    if (isBareSuper) {
	      state.bareSupers.push(path);
	    }

	    if (result === true) {
	      path.requeue();
	    }

	    if (result !== true && result) {
	      if (Array.isArray(result)) {
	        path.replaceWithMultiple(result);
	      } else {
	        path.replaceWith(result);
	      }
	    }
	  }
	};

	var ReplaceSupers = (function () {
	  function ReplaceSupers(opts /*: Object*/) {
	    var inClass /*:: ?: boolean*/ = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

	    _classCallCheck(this, ReplaceSupers);

	    this.forceSuperMemoisation = opts.forceSuperMemoisation;
	    this.methodPath = opts.methodPath;
	    this.methodNode = opts.methodNode;
	    this.superRef = opts.superRef;
	    this.isStatic = opts.isStatic;
	    this.hasSuper = false;
	    this.inClass = inClass;
	    this.isLoose = opts.isLoose;
	    this.scope = this.methodPath.scope;
	    this.file = opts.file;
	    this.opts = opts;

	    this.bareSupers = [];
	    this.returns = [];
	    this.thises = [];
	  }

	  ReplaceSupers.prototype.getObjectRef = function getObjectRef() {
	    return this.opts.objectRef || this.opts.getObjectRef();
	  };

	  /**
	   * Sets a super class value of the named property.
	   *
	   * @example
	   *
	   *   _set(Object.getPrototypeOf(CLASS.prototype), "METHOD", "VALUE", this)
	   *
	   */

	  ReplaceSupers.prototype.setSuperProperty = function setSuperProperty(property /*: Object*/, value /*: Object*/, isComputed /*: boolean*/) /*: Object*/ {
	    return t.callExpression(this.file.addHelper("set"), [t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("getPrototypeOf")), [this.isStatic ? this.getObjectRef() : t.memberExpression(this.getObjectRef(), t.identifier("prototype"))]), isComputed ? property : t.stringLiteral(property.name), value, t.thisExpression()]);
	  };

	  /**
	   * Gets a node representing the super class value of the named property.
	   *
	   * @example
	   *
	   *   _get(Object.getPrototypeOf(CLASS.prototype), "METHOD", this)
	   *
	   */

	  ReplaceSupers.prototype.getSuperProperty = function getSuperProperty(property /*: Object*/, isComputed /*: boolean*/) /*: Object*/ {
	    return t.callExpression(this.file.addHelper("get"), [t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("getPrototypeOf")), [this.isStatic ? this.getObjectRef() : t.memberExpression(this.getObjectRef(), t.identifier("prototype"))]), isComputed ? property : t.stringLiteral(property.name), t.thisExpression()]);
	  };

	  ReplaceSupers.prototype.replace = function replace() {
	    this.methodPath.traverse(visitor, this);
	  };

	  ReplaceSupers.prototype.getLooseSuperProperty = function getLooseSuperProperty(id /*: Object*/, parent /*: Object*/) {
	    var methodNode = this.methodNode;
	    var superRef = this.superRef || t.identifier("Function");

	    if (parent.property === id) {
	      return;
	    } else if (t.isCallExpression(parent, { callee: id })) {
	      return;
	    } else if (t.isMemberExpression(parent) && !methodNode["static"]) {
	      // super.test -> objectRef.prototype.test
	      return t.memberExpression(superRef, t.identifier("prototype"));
	    } else {
	      return superRef;
	    }
	  };

	  ReplaceSupers.prototype.looseHandle = function looseHandle(path /*: NodePath*/) {
	    var node = path.node;
	    if (path.isSuper()) {
	      return this.getLooseSuperProperty(node, path.parent);
	    } else if (path.isCallExpression()) {
	      var callee = node.callee;
	      if (!t.isMemberExpression(callee)) return;
	      if (!t.isSuper(callee.object)) return;

	      // super.test(); -> objectRef.prototype.MethodName.call(this);
	      t.appendToMemberExpression(callee, t.identifier("call"));
	      node.arguments.unshift(t.thisExpression());
	      return true;
	    }
	  };

	  ReplaceSupers.prototype.specHandleAssignmentExpression = function specHandleAssignmentExpression(ref, path, node) {
	    if (node.operator === "=") {
	      // super.name = "val"; -> _set(Object.getPrototypeOf(objectRef.prototype), "name", this);
	      return this.setSuperProperty(node.left.property, node.right, node.left.computed);
	    } else {
	      // super.age += 2; -> let _ref = super.age; super.age = _ref + 2;
	      ref = ref || path.scope.generateUidIdentifier("ref");
	      return [t.variableDeclaration("var", [t.variableDeclarator(ref, node.left)]), t.expressionStatement(t.assignmentExpression("=", node.left, t.binaryExpression(node.operator[0], ref, node.right)))];
	    }
	  };

	  ReplaceSupers.prototype.specHandle = function specHandle(path /*: NodePath*/) {
	    var property = undefined;
	    var computed = undefined;
	    var args = undefined;
	    var thisReference = undefined;

	    var parent = path.parent;
	    var node = path.node;

	    if (isIllegalBareSuper(node, parent)) {
	      throw path.buildCodeFrameError(messages.get("classesIllegalBareSuper"));
	    }

	    if (t.isCallExpression(node)) {
	      var callee = node.callee;
	      if (t.isSuper(callee)) {
	        return;
	      } else if (isMemberExpressionSuper(callee)) {
	        // super.test(); -> _get(Object.getPrototypeOf(objectRef.prototype), "test", this).call(this);
	        property = callee.property;
	        computed = callee.computed;
	        args = node.arguments;
	      }
	    } else if (t.isMemberExpression(node) && t.isSuper(node.object)) {
	      // super.name; -> _get(Object.getPrototypeOf(objectRef.prototype), "name", this);
	      property = node.property;
	      computed = node.computed;
	    } else if (t.isUpdateExpression(node) && isMemberExpressionSuper(node.argument)) {
	      var binary = t.binaryExpression(node.operator[0], node.argument, t.numericLiteral(1));
	      if (node.prefix) {
	        // ++super.foo; -> super.foo += 1;
	        return this.specHandleAssignmentExpression(null, path, binary);
	      } else {
	        // super.foo++; -> let _ref = super.foo; super.foo = _ref + 1;
	        var ref = path.scope.generateUidIdentifier("ref");
	        return this.specHandleAssignmentExpression(ref, path, binary).concat(t.expressionStatement(ref));
	      }
	    } else if (t.isAssignmentExpression(node) && isMemberExpressionSuper(node.left)) {
	      return this.specHandleAssignmentExpression(null, path, node);
	    }

	    if (!property) return;

	    var superProperty = this.getSuperProperty(property, computed, thisReference);

	    if (args) {
	      return this.optimiseCall(superProperty, args);
	    } else {
	      return superProperty;
	    }
	  };

	  ReplaceSupers.prototype.optimiseCall = function optimiseCall(callee, args) {
	    var thisNode = t.thisExpression();
	    thisNode[HARDCORE_THIS_REF] = true;
	    return _babelHelperOptimiseCallExpression2["default"](callee, thisNode, args);
	  };

	  return ReplaceSupers;
	})();

	exports["default"] = ReplaceSupers;
	module.exports = exports["default"];

/***/ },
/* 7196 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	exports.__esModule = true;

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_2__);

	var t = _interopRequireWildcard(_babelTypes);

	var visitor = {
	  Scope: function Scope(path, state) {
	    if (state.kind === "let") path.skip();
	  },

	  Function: function Function(path) {
	    path.skip();
	  },

	  VariableDeclaration: function VariableDeclaration(path, state) {
	    if (state.kind && path.node.kind !== state.kind) return;

	    var nodes = [];

	    var declarations /*: Array<Object>*/ = path.get("declarations");
	    var firstId = undefined;

	    for (var _iterator = declarations, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var declar = _ref;

	      firstId = declar.node.id;

	      if (declar.node.init) {
	        nodes.push(t.expressionStatement(t.assignmentExpression("=", declar.node.id, declar.node.init)));
	      }

	      for (var _name in declar.getBindingIdentifiers()) {
	        state.emit(t.identifier(_name), _name);
	      }
	    }

	    // for (var i in test)
	    if (path.parentPath.isFor({ left: path.node })) {
	      path.replaceWith(firstId);
	    } else {
	      path.replaceWithMultiple(nodes);
	    }
	  }
	};

	exports["default"] = function (path, emit /*: Function*/) {
	  var kind /*: "var" | "let"*/ = arguments.length <= 2 || arguments[2] === undefined ? "var" : arguments[2];

	  path.traverse(visitor, { kind: kind, emit: emit });
	};

	module.exports = exports["default"];

/***/ },
/* 7197 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__) {

	/* @flow */

	"use strict";

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	exports.__esModule = true;
	exports.is = is;
	exports.pullFlag = pullFlag;

	var _lodashArrayPull = __webpack_require__(__webpack_module_template_argument_2__);

	var _lodashArrayPull2 = _interopRequireDefault(_lodashArrayPull);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_3__);

	var t = _interopRequireWildcard(_babelTypes);

	function is(node /*: Object*/, flag /*: string*/) /*: boolean*/ {
	  return t.isRegExpLiteral(node) && node.flags.indexOf(flag) >= 0;
	}

	function pullFlag(node /*: Object*/, flag /*: string*/) {
	  var flags = node.flags.split("");
	  if (node.flags.indexOf(flag) < 0) return;
	  _lodashArrayPull2["default"](flags, flag);
	  node.flags = flags.join("");
	}

/***/ },
/* 7198 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var baseIndexOf = __webpack_require__(__webpack_module_template_argument_0__);

	/** Used for native method references. */
	var arrayProto = Array.prototype;

	/** Native method references. */
	var splice = arrayProto.splice;

	/**
	 * Removes all provided values from `array` using
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * **Note:** Unlike `_.without`, this method mutates `array`.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to modify.
	 * @param {...*} [values] The values to remove.
	 * @returns {Array} Returns `array`.
	 * @example
	 *
	 * var array = [1, 2, 3, 1, 2, 3];
	 *
	 * _.pull(array, 2, 3);
	 * console.log(array);
	 * // => [1, 1]
	 */
	function pull() {
	  var args = arguments,
	      array = args[0];

	  if (!(array && array.length)) {
	    return array;
	  }
	  var index = 0,
	      indexOf = baseIndexOf,
	      length = args.length;

	  while (++index < length) {
	    var fromIndex = 0,
	        value = args[index];

	    while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
	      splice.call(array, fromIndex, 1);
	    }
	  }
	  return array;
	}

	module.exports = pull;


/***/ },
/* 7199 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	exports.__esModule = true;

	var _esutils = __webpack_require__(__webpack_module_template_argument_2__);

	var _esutils2 = _interopRequireDefault(_esutils);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_3__);

	var t = _interopRequireWildcard(_babelTypes);

	/*:: type ElementState = {
	  tagExpr: Object; // tag node
	  tagName: string; // raw string tag name
	  args: Array<Object>; // array of call arguments
	  call?: Object; // optional call property that can be set to override the call expression returned
	  pre?: Function; // function called with (state: ElementState) before building attribs
	  post?: Function; // function called with (state: ElementState) after building attribs
	};*/ // function called with (state: ElementState) after building attribs

	exports["default"] = function (opts) {
	  var visitor = {};

	  visitor.JSXNamespacedName = function (path) {
	    throw path.buildCodeFrameError("Namespace tags are not supported. ReactJSX is not XML.");
	  };

	  visitor.JSXElement = {
	    exit: function exit(path, file) {
	      var callExpr = buildElementCall(path.get("openingElement"), file);

	      callExpr.arguments = callExpr.arguments.concat(path.node.children);

	      if (callExpr.arguments.length >= 3) {
	        callExpr._prettyCall = true;
	      }

	      path.replaceWith(t.inherits(callExpr, path.node));
	    }
	  };

	  return visitor;

	  function convertJSXIdentifier(node, parent) {
	    if (t.isJSXIdentifier(node)) {
	      if (node.name === "this" && t.isReferenced(node, parent)) {
	        return t.thisExpression();
	      } else if (_esutils2["default"].keyword.isIdentifierNameES6(node.name)) {
	        node.type = "Identifier";
	      } else {
	        return t.stringLiteral(node.name);
	      }
	    } else if (t.isJSXMemberExpression(node)) {
	      return t.memberExpression(convertJSXIdentifier(node.object, node), convertJSXIdentifier(node.property, node));
	    }

	    return node;
	  }

	  function convertAttributeValue(node) {
	    if (t.isJSXExpressionContainer(node)) {
	      return node.expression;
	    } else {
	      return node;
	    }
	  }

	  function convertAttribute(node) {
	    var value = convertAttributeValue(node.value || t.booleanLiteral(true));

	    if (t.isStringLiteral(value)) {
	      value.value = value.value.replace(/\n\s+/g, " ");
	    }

	    if (t.isValidIdentifier(node.name.name)) {
	      node.name.type = "Identifier";
	    } else {
	      node.name = t.stringLiteral(node.name.name);
	    }

	    return t.inherits(t.objectProperty(node.name, value), node);
	  }

	  function buildElementCall(path, file) {
	    path.parent.children = t.react.buildChildren(path.parent);

	    var tagExpr = convertJSXIdentifier(path.node.name, path.node);
	    var args = [];

	    var tagName = undefined;
	    if (t.isIdentifier(tagExpr)) {
	      tagName = tagExpr.name;
	    } else if (t.isLiteral(tagExpr)) {
	      tagName = tagExpr.value;
	    }

	    var state /*: ElementState*/ = {
	      tagExpr: tagExpr,
	      tagName: tagName,
	      args: args
	    };

	    if (opts.pre) {
	      opts.pre(state, file);
	    }

	    var attribs = path.node.attributes;
	    if (attribs.length) {
	      attribs = buildOpeningElementAttributes(attribs, file);
	    } else {
	      attribs = t.nullLiteral();
	    }

	    args.push(attribs);

	    if (opts.post) {
	      opts.post(state, file);
	    }

	    return state.call || t.callExpression(state.callee, args);
	  }

	  /**
	   * The logic for this is quite terse. It's because we need to
	   * support spread elements. We loop over all attributes,
	   * breaking on spreads, we then push a new object containg
	   * all prior attributes to an array for later processing.
	   */

	  function buildOpeningElementAttributes(attribs, file) {
	    var _props = [];
	    var objs = [];

	    function pushProps() {
	      if (!_props.length) return;

	      objs.push(t.objectExpression(_props));
	      _props = [];
	    }

	    while (attribs.length) {
	      var prop = attribs.shift();
	      if (t.isJSXSpreadAttribute(prop)) {
	        pushProps();
	        objs.push(prop.argument);
	      } else {
	        _props.push(convertAttribute(prop));
	      }
	    }

	    pushProps();

	    if (objs.length === 1) {
	      // only one object
	      attribs = objs[0];
	    } else {
	      // looks like we have multiple objects
	      if (!t.isObjectExpression(objs[0])) {
	        objs.unshift(t.objectExpression([]));
	      }

	      // spread it
	      attribs = t.callExpression(file.addHelper("extends"), objs);
	    }

	    return attribs;
	  }
	};

	module.exports = exports["default"];
	// tag node
	// raw string tag name
	// array of call arguments
	// optional call property that can be set to override the call expression returned
	// function called with (state: ElementState) before building attribs

/***/ }
/******/ ])))
});
;